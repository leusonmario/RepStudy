/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 04:24:23 GMT 2021
 */

package me.prettyprint.cassandra.connection.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import javax.security.sasl.SaslClient;
import me.prettyprint.cassandra.connection.client.HThriftClient;
import me.prettyprint.cassandra.service.CassandraHost;
import org.apache.cassandra.thrift.AuthenticationRequest;
import org.apache.cassandra.thrift.Cassandra;
import org.apache.cassandra.thrift.CfDef;
import org.apache.cassandra.thrift.ColumnDef;
import org.apache.cassandra.thrift.ConsistencyLevel;
import org.apache.cassandra.thrift.KsDef;
import org.apache.cassandra.thrift.Mutation;
import org.apache.commons.lang.NotImplementedException;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TCompactProtocol;
import org.apache.thrift.transport.AutoExpandingBufferReadTransport;
import org.apache.thrift.transport.TFastFramedTransport;
import org.apache.thrift.transport.TFileTransport;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.THttpClient;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TMemoryBuffer;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TNonblockingSocket;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TSaslClientTransport;
import org.apache.thrift.transport.TTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HThriftClient_ESTest extends HThriftClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "ZW";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ZW(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("ZW:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ZW(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("ZW", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ZW(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("ZW:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ZW(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("ZW", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(hThriftClient0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ZW(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("ZW:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ZW(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("ZW", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "c7h]nCR";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("c7h]nCR:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("c7h]nCR", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("c7h]nCR:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("c7h]nCR", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      AutoExpandingBufferReadTransport autoExpandingBufferReadTransport0 = new AutoExpandingBufferReadTransport(cassandraHost0.DEFAULT_MAX_ACTIVE, cassandraHost0.DEFAULT_MAX_ACTIVE);
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("c7h]nCR:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("c7h]nCR", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, autoExpandingBufferReadTransport0.getBufferPosition());
      assertTrue(autoExpandingBufferReadTransport0.isOpen());
      assertEquals(0, autoExpandingBufferReadTransport0.getBytesRemainingInBuffer());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(autoExpandingBufferReadTransport0);
      
      hThriftClient0.transport = (TTransport) autoExpandingBufferReadTransport0;
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("c7h]nCR:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("c7h]nCR", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, autoExpandingBufferReadTransport0.getBufferPosition());
      assertTrue(autoExpandingBufferReadTransport0.isOpen());
      assertEquals(0, autoExpandingBufferReadTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(hashMap0);
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("c7h]nCR:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("c7h]nCR", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(boolean0);
      
      hThriftClient0.setAuthenticated(hashMap0);
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("c7h]nCR:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("c7h]nCR(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("c7h]nCR", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // Code is not implemented
         //
         verifyException("org.apache.thrift.transport.AutoExpandingBufferReadTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "Allow";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Allow:9160", cassandraHost0.getUrl());
      assertEquals("Allow(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Allow(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Allow", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      cassandraHost0.setCassandraThriftSocketTimeout(cassandraHost0.DEFAULT_PORT);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Allow:9160", cassandraHost0.getUrl());
      assertEquals("Allow(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Allow(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Allow", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Allow:9160", cassandraHost0.getUrl());
      assertEquals("Allow(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Allow(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Allow", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient0);
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Allow:9160", cassandraHost0.getUrl());
      assertEquals("Allow(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Allow(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Allow", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1392409281320L, long0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Allow:9160", cassandraHost0.getUrl());
      assertEquals("Allow(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Allow(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Allow", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to Allow(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@27799df5
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "|<!~U09~>j/";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("|<!~U09~>j/(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("|<!~U09~>j/", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("|<!~U09~>j/(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("|<!~U09~>j/:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("|<!~U09~>j/(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("|<!~U09~>j/", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("|<!~U09~>j/(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("|<!~U09~>j/:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      
      CfDef cfDef0 = new CfDef(string0, string0);
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getId());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isReplicate_on_write());
      assertEquals("|<!~U09~>j/", cfDef0.getName());
      assertFalse(cfDef0.isSetId());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertFalse(cfDef0.isSetKey_alias());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertTrue(cfDef0.isSetColumn_type());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertNull(cfDef0.getRow_cache_provider());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetComment());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertNull(cfDef0.getKey_validation_class());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertNull(cfDef0.getDefault_validation_class());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertEquals("Standard", cfDef0.getColumn_type());
      assertTrue(cfDef0.isSetName());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertTrue(cfDef0.isSetComparator_type());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertNull(cfDef0.getSubcomparator_type());
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertTrue(cfDef0.isSetCaching());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertTrue(cfDef0.isSetKeyspace());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertNull(cfDef0.getComment());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertEquals("|<!~U09~>j/", cfDef0.getKeyspace());
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertNotNull(cfDef0);
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(cfDef0.compaction_strategy_options);
      assertEquals("|<!~U09~>j/(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("|<!~U09~>j/", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("|<!~U09~>j/(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("|<!~U09~>j/:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getId());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isReplicate_on_write());
      assertEquals("|<!~U09~>j/", cfDef0.getName());
      assertFalse(cfDef0.isSetId());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertFalse(cfDef0.isSetKey_alias());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertTrue(cfDef0.isSetColumn_type());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertNull(cfDef0.getRow_cache_provider());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetComment());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertNull(cfDef0.getKey_validation_class());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertNull(cfDef0.getDefault_validation_class());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertEquals("Standard", cfDef0.getColumn_type());
      assertTrue(cfDef0.isSetName());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertTrue(cfDef0.isSetComparator_type());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertNull(cfDef0.getSubcomparator_type());
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertTrue(cfDef0.isSetCaching());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertTrue(cfDef0.isSetKeyspace());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertNull(cfDef0.getComment());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertEquals("|<!~U09~>j/", cfDef0.getKeyspace());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "o;g.apache.thrif.dransport.THttpClient";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("o;g.apache.thrif.dransport.THttpClient(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("o;g.apache.thrif.dransport.THttpClient:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("o;g.apache.thrif.dransport.THttpClient", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("o;g.apache.thrif.dransport.THttpClient(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("o;g.apache.thrif.dransport.THttpClient(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("o;g.apache.thrif.dransport.THttpClient:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("o;g.apache.thrif.dransport.THttpClient", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("o;g.apache.thrif.dransport.THttpClient(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(cassandraHost0.DEFAULT_PORT);
      assertEquals("o;g.apache.thrif.dransport.THttpClient(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("o;g.apache.thrif.dransport.THttpClient:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("o;g.apache.thrif.dransport.THttpClient", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("o;g.apache.thrif.dransport.THttpClient(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(pipedInputStream0);
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(pipedInputStream0);
      assertEquals("o;g.apache.thrif.dransport.THttpClient(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("o;g.apache.thrif.dransport.THttpClient:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("o;g.apache.thrif.dransport.THttpClient", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("o;g.apache.thrif.dransport.THttpClient(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(tIOStreamTransport0);
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals("o;g.apache.thrif.dransport.THttpClient(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("o;g.apache.thrif.dransport.THttpClient:9160", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("o;g.apache.thrif.dransport.THttpClient", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("o;g.apache.thrif.dransport.THttpClient(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "arlL[DI'GHCeU6s";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("arlL[DI'GHCeU6s:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("arlL[DI'GHCeU6s", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("arlL[DI'GHCeU6s(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("arlL[DI'GHCeU6s(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("arlL[DI'GHCeU6s:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("arlL[DI'GHCeU6s", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("arlL[DI'GHCeU6s(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("arlL[DI'GHCeU6s(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      boolean boolean0 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("arlL[DI'GHCeU6s:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("arlL[DI'GHCeU6s", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("arlL[DI'GHCeU6s(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("arlL[DI'GHCeU6s(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("arlL[DI'GHCeU6s:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("arlL[DI'GHCeU6s", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("arlL[DI'GHCeU6s(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("arlL[DI'GHCeU6s(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      
      hThriftClient0.startToUse();
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("arlL[DI'GHCeU6s:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("arlL[DI'GHCeU6s", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("arlL[DI'GHCeU6s(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("arlL[DI'GHCeU6s(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to arlL[DI'GHCeU6s(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@27799df5
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNotNull(hThriftClient0);
      
      hThriftClient0.startToUse();
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.equals(hThriftClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "Open calle on already open connection. ou should not have gotten here.";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("Open calle on already open connection. ou should not have gotten here.:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Open calle on already open connection. ou should not have gotten here.", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("Open calle on already open connection. ou should not have gotten here.:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Open calle on already open connection. ou should not have gotten here.", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(cassandraHost0.DEFAULT_MAX_ACTIVE);
      assertEquals("Open calle on already open connection. ou should not have gotten here.:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Open calle on already open connection. ou should not have gotten here.", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(tMemoryBuffer0);
      
      hThriftClient0.transport = (TTransport) tMemoryBuffer0;
      assertEquals("Open calle on already open connection. ou should not have gotten here.:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Open calle on already open connection. ou should not have gotten here.", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra(string0);
      assertEquals("Open calle on already open connection. ou should not have gotten here.:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Open calle on already open connection. ou should not have gotten here.", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandra_Client0);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals("Open calle on already open connection. ou should not have gotten here.:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Open calle on already open connection. ou should not have gotten here.", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost1.getName());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("Open calle on already open connection. ou should not have gotten here.:9160", cassandraHost1.getUrl());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals(9160, cassandraHost1.getPort());
      assertTrue(cassandraHost1.getLifo());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals("Open calle on already open connection. ou should not have gotten here.", cassandraHost1.getHost());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      
      boolean boolean0 = hThriftClient0.equals(string0);
      assertEquals("Open calle on already open connection. ou should not have gotten here.:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Open calle on already open connection. ou should not have gotten here.", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(boolean0);
      
      Cassandra.Client cassandra_Client1 = hThriftClient0.getCassandra(string0);
      assertEquals("Open calle on already open connection. ou should not have gotten here.:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Open calle on already open connection. ou should not have gotten here.", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Open calle on already open connection. ou should not have gotten here.(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandra_Client1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandra_Client1, cassandra_Client0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "Cassandralient<c7hR~:9160-3389>";
      int int0 = 3084;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cassandralient<c7hR~:3084", cassandraHost0.getUrl());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3084, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Cassandralient<c7hR~", cassandraHost0.getHost());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cassandralient<c7hR~:3084", cassandraHost0.getUrl());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3084, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Cassandralient<c7hR~", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(pipedInputStream0, pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertNotNull(tIOStreamTransport0);
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cassandralient<c7hR~:3084", cassandraHost0.getUrl());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3084, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Cassandralient<c7hR~", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cassandralient<c7hR~:3084", cassandraHost0.getUrl());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3084, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Cassandralient<c7hR~", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      String string1 = null;
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra(string1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cassandralient<c7hR~:3084", cassandraHost0.getUrl());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3084, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Cassandralient<c7hR~", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      
      boolean boolean0 = hThriftClient0.isOpen();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cassandralient<c7hR~:3084", cassandraHost0.getUrl());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3084, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Cassandralient<c7hR~", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient0, hThriftClient1);
      assertTrue(boolean0);
      
      HThriftClient hThriftClient2 = hThriftClient1.close();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Cassandralient<c7hR~:3084", cassandraHost0.getUrl());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3084, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Cassandralient<c7hR~(200.42.42.0):3084", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Cassandralient<c7hR~", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "";
      int int0 = 1290;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):1290", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):1290", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1290, cassandraHost0.getPort());
      assertEquals(":1290", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):1290", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):1290", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1290, cassandraHost0.getPort());
      assertEquals(":1290", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNotNull(hThriftClient0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      String string0 = "Moved Temporarily";
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = ";|";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(";|:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(";|(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(";|", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(";|(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(";|:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(";|(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(";|", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(";|(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to ;|(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@27799df5
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "9\"O96=&";
      int int0 = 2582;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("9\"O96=&", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(2582, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("9\"O96=&(200.42.42.0):2582", cassandraHost0.toString());
      assertEquals("9\"O96=&(200.42.42.0):2582", cassandraHost0.getName());
      assertEquals("9\"O96=&:2582", cassandraHost0.getUrl());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("9\"O96=&", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(2582, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("9\"O96=&(200.42.42.0):2582", cassandraHost0.toString());
      assertEquals("9\"O96=&(200.42.42.0):2582", cassandraHost0.getName());
      assertEquals("9\"O96=&:2582", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("9\"O96=&", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(2582, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("9\"O96=&(200.42.42.0):2582", cassandraHost0.toString());
      assertEquals("9\"O96=&(200.42.42.0):2582", cassandraHost0.getName());
      assertEquals("9\"O96=&:2582", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      int int0 = 415;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):415", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(415, cassandraHost0.getPort());
      assertEquals(":415", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):415", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      String string1 = "";
      String[] stringArray0 = new String[0];
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(0, stringArray0.length);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):415", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(415, cassandraHost0.getPort());
      assertEquals(":415", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):415", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      assertEquals(0, stringArray0.length);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):415", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(415, cassandraHost0.getPort());
      assertEquals(":415", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):415", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient1);
      assertEquals(0, stringArray0.length);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra(string2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      int int0 = 2;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(":2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(":2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(":2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      boolean boolean0 = false;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(":2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):2 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1, stringArray0.length);
      
      String string1 = "";
      String string2 = null;
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(stringArray0[0], string0, string1, string2);
      assertEquals(1, stringArray0.length);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNotNull(hThriftClient0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = true;
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNotNull(hThriftClient1);
      assertEquals(1, stringArray0.length);
      assertSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      tSSLTransportFactory_TSSLTransportParameters0.requireClientAuth(boolean0);
      assertEquals(1, stringArray0.length);
      assertSame(string0, string1);
      
      boolean boolean1 = hThriftClient0.isOpen();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1, stringArray0.length);
      assertSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      hThriftClient0.clearAuthentication();
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "";
      int int0 = 2768;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":2768", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(2768, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):2768", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2768", cassandraHost0.toString());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":2768", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(2768, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):2768", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2768", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient0);
      
      KsDef ksDef0 = new KsDef();
      assertFalse(ksDef0.isSetCf_defs());
      assertEquals(0, ksDef0.getReplication_factor());
      assertFalse(ksDef0.isSetReplication_factor());
      assertNull(ksDef0.getName());
      assertEquals(0, ksDef0.getStrategy_optionsSize());
      assertFalse(ksDef0.isSetName());
      assertFalse(ksDef0.isSetStrategy_options());
      assertFalse(ksDef0.isSetDurable_writes());
      assertFalse(ksDef0.isSetStrategy_class());
      assertNull(ksDef0.getStrategy_class());
      assertEquals(0, ksDef0.getCf_defsSize());
      assertTrue(ksDef0.isDurable_writes());
      assertTrue(ksDef0.durable_writes);
      assertEquals(0, ksDef0.replication_factor);
      assertNotNull(ksDef0);
      
      Map<String, String> map0 = ksDef0.getStrategy_options();
      assertFalse(ksDef0.isSetCf_defs());
      assertEquals(0, ksDef0.getReplication_factor());
      assertFalse(ksDef0.isSetReplication_factor());
      assertNull(ksDef0.getName());
      assertEquals(0, ksDef0.getStrategy_optionsSize());
      assertFalse(ksDef0.isSetName());
      assertFalse(ksDef0.isSetStrategy_options());
      assertFalse(ksDef0.isSetDurable_writes());
      assertFalse(ksDef0.isSetStrategy_class());
      assertNull(ksDef0.getStrategy_class());
      assertEquals(0, ksDef0.getCf_defsSize());
      assertTrue(ksDef0.isDurable_writes());
      assertTrue(ksDef0.durable_writes);
      assertEquals(0, ksDef0.replication_factor);
      assertNull(map0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.setAuthenticated(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "W8x.Qk>wOPsGIG'Vw$";
      int int0 = (-5160);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-5160), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("W8x.Qk>wOPsGIG'Vw$", cassandraHost0.getHost());
      assertEquals("W8x.Qk>wOPsGIG'Vw$(200.42.42.0):-5160", cassandraHost0.getName());
      assertEquals("W8x.Qk>wOPsGIG'Vw$(200.42.42.0):-5160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("W8x.Qk>wOPsGIG'Vw$:-5160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-5160), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("W8x.Qk>wOPsGIG'Vw$", cassandraHost0.getHost());
      assertEquals("W8x.Qk>wOPsGIG'Vw$(200.42.42.0):-5160", cassandraHost0.getName());
      assertEquals("W8x.Qk>wOPsGIG'Vw$(200.42.42.0):-5160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("W8x.Qk>wOPsGIG'Vw$:-5160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      
      String string1 = hThriftClient0.toString();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-5160), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("W8x.Qk>wOPsGIG'Vw$", cassandraHost0.getHost());
      assertEquals("W8x.Qk>wOPsGIG'Vw$(200.42.42.0):-5160", cassandraHost0.getName());
      assertEquals("W8x.Qk>wOPsGIG'Vw$(200.42.42.0):-5160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("W8x.Qk>wOPsGIG'Vw$:-5160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CassandraClient<W8x.Qk>wOPsGIG'Vw$:-5160-22>", string1);
      
      hThriftClient0.startToUse();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-5160), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("W8x.Qk>wOPsGIG'Vw$", cassandraHost0.getHost());
      assertEquals("W8x.Qk>wOPsGIG'Vw$(200.42.42.0):-5160", cassandraHost0.getName());
      assertEquals("W8x.Qk>wOPsGIG'Vw$(200.42.42.0):-5160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("W8x.Qk>wOPsGIG'Vw$:-5160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      hThriftClient0.clearAuthentication();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-5160), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("W8x.Qk>wOPsGIG'Vw$", cassandraHost0.getHost());
      assertEquals("W8x.Qk>wOPsGIG'Vw$(200.42.42.0):-5160", cassandraHost0.getName());
      assertEquals("W8x.Qk>wOPsGIG'Vw$(200.42.42.0):-5160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("W8x.Qk>wOPsGIG'Vw$:-5160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "";
      int int0 = 6;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("(127.0.0.1):6", cassandraHost0.toString());
      assertEquals(6, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":6", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):6", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("(127.0.0.1):6", cassandraHost0.toString());
      assertEquals(6, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":6", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):6", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      hThriftClient0.clearAuthentication();
      assertEquals("(127.0.0.1):6", cassandraHost0.toString());
      assertEquals(6, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":6", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):6", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      String string1 = "Not Modified";
      hThriftClient0.keyspaceName = string1;
      assertEquals("(127.0.0.1):6", cassandraHost0.toString());
      assertEquals(6, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":6", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):6", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      CfDef cfDef0 = new CfDef(string0, string0);
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertNull(cfDef0.getKey_validation_class());
      assertNull(cfDef0.getComment());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertNull(cfDef0.getRow_cache_provider());
      assertTrue(cfDef0.isSetCaching());
      assertEquals("", cfDef0.getName());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetComment());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertFalse(cfDef0.isReplicate_on_write());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getId());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetId());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals("", cfDef0.getKeyspace());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertTrue(cfDef0.isSetKeyspace());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertTrue(cfDef0.isSetName());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertNotNull(cfDef0);
      assertFalse(string0.equals((Object)string1));
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals("(127.0.0.1):6", cassandraHost0.toString());
      assertEquals(6, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":6", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):6", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string1));
      
      CfDef cfDef1 = new CfDef(cfDef0);
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertNull(cfDef0.getKey_validation_class());
      assertNull(cfDef0.getComment());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertNull(cfDef0.getRow_cache_provider());
      assertTrue(cfDef0.isSetCaching());
      assertEquals("", cfDef0.getName());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetComment());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertFalse(cfDef0.isReplicate_on_write());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getId());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetId());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals("", cfDef0.getKeyspace());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertTrue(cfDef0.isSetKeyspace());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertTrue(cfDef0.isSetName());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertFalse(cfDef1.isSetColumn_metadata());
      assertEquals(0.0, cfDef1.getRead_repair_chance(), 0.01);
      assertTrue(cfDef1.isSetColumn_type());
      assertFalse(cfDef1.isSetBloom_filter_fp_chance());
      assertEquals(0, cfDef1.getGc_grace_seconds());
      assertFalse(cfDef1.isReplicate_on_write());
      assertEquals(0, cfDef1.getMemtable_flush_after_mins());
      assertNull(cfDef1.getSubcomparator_type());
      assertEquals(0, cfDef1.getId());
      assertFalse(cfDef1.isSetId());
      assertFalse(cfDef1.isSetMax_compaction_threshold());
      assertFalse(cfDef1.isSetRow_cache_size());
      assertEquals(0.0, cfDef1.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef1.isSetDefault_validation_class());
      assertTrue(cfDef1.isSetName());
      assertEquals(0.0, cfDef1.getRow_cache_size(), 0.01);
      assertFalse(cfDef1.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef1.getCompaction_strategy_optionsSize());
      assertFalse(cfDef1.isSetMemtable_operations_in_millions());
      assertEquals(0, cfDef1.getMin_compaction_threshold());
      assertEquals(0, cfDef1.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef1.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetKey_validation_class());
      assertTrue(cfDef1.isSetCaching());
      assertEquals(0, cfDef1.getRow_cache_keys_to_save());
      assertFalse(cfDef1.isSetMemtable_flush_after_mins());
      assertFalse(cfDef1.isSetSubcomparator_type());
      assertFalse(cfDef1.isSetRow_cache_provider());
      assertNull(cfDef1.getDefault_validation_class());
      assertFalse(cfDef1.isSetRow_cache_keys_to_save());
      assertFalse(cfDef1.isSetKey_cache_size());
      assertTrue(cfDef1.isSetKeyspace());
      assertEquals("", cfDef1.getKeyspace());
      assertFalse(cfDef1.isSetCompression_options());
      assertEquals("keys_only", cfDef1.getCaching());
      assertFalse(cfDef1.isSetKey_alias());
      assertNull(cfDef1.getCompaction_strategy());
      assertFalse(cfDef1.isSetComment());
      assertEquals(0.0, cfDef1.getKey_cache_size(), 0.01);
      assertNull(cfDef1.getKey_validation_class());
      assertNull(cfDef1.getComment());
      assertFalse(cfDef1.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef1.isSetMerge_shards_chance());
      assertFalse(cfDef1.isSetMin_compaction_threshold());
      assertTrue(cfDef1.isSetComparator_type());
      assertEquals(0, cfDef1.getColumn_metadataSize());
      assertFalse(cfDef1.isSetReplicate_on_write());
      assertEquals(0, cfDef1.getCompression_optionsSize());
      assertFalse(cfDef1.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef1.getMemtable_throughput_in_mb());
      assertEquals("Standard", cfDef1.getColumn_type());
      assertEquals(0, cfDef1.getMax_compaction_threshold());
      assertEquals(0.0, cfDef1.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef1.isSetRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef1.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef1.isSetRead_repair_chance());
      assertFalse(cfDef1.isSetGc_grace_seconds());
      assertFalse(cfDef1.isSetCompaction_strategy());
      assertNull(cfDef1.getRow_cache_provider());
      assertFalse(cfDef1.isSetCompaction_strategy_options());
      assertEquals("", cfDef1.getName());
      assertEquals("BytesType", cfDef1.getComparator_type());
      assertEquals(0.0, cfDef1.getBloom_filter_fp_chance(), 0.01);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertFalse(cfDef1.replicate_on_write);
      assertEquals(0.0, cfDef1.row_cache_size, 0.01);
      assertEquals(0.0, cfDef1.merge_shards_chance, 0.01);
      assertEquals(0.0, cfDef1.key_cache_size, 0.01);
      assertEquals(0, cfDef1.id);
      assertEquals(0.0, cfDef1.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef1.gc_grace_seconds);
      assertEquals(0, cfDef1.memtable_flush_after_mins);
      assertEquals(0, cfDef1.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef1.memtable_operations_in_millions, 0.01);
      assertEquals(0, cfDef1.row_cache_save_period_in_seconds);
      assertEquals(0, cfDef1.row_cache_keys_to_save);
      assertEquals(0.0, cfDef1.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef1.key_cache_save_period_in_seconds);
      assertEquals(0.0, cfDef1.read_repair_chance, 0.01);
      assertEquals(0, cfDef1.max_compaction_threshold);
      assertEquals(0, cfDef1.min_compaction_threshold);
      assertNotNull(cfDef1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(cfDef1.equals((Object)cfDef0));
      
      cassandraHost0.setMaxWaitTimeWhenExhausted(cfDef1.memtable_throughput_in_mb);
      assertEquals("(127.0.0.1):6", cassandraHost0.toString());
      assertEquals(6, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":6", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):6", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertNull(cfDef0.getKey_validation_class());
      assertNull(cfDef0.getComment());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertNull(cfDef0.getRow_cache_provider());
      assertTrue(cfDef0.isSetCaching());
      assertEquals("", cfDef0.getName());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetComment());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertFalse(cfDef0.isReplicate_on_write());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getId());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetId());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals("", cfDef0.getKeyspace());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertTrue(cfDef0.isSetKeyspace());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertTrue(cfDef0.isSetName());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertFalse(cfDef1.isSetColumn_metadata());
      assertEquals(0.0, cfDef1.getRead_repair_chance(), 0.01);
      assertTrue(cfDef1.isSetColumn_type());
      assertFalse(cfDef1.isSetBloom_filter_fp_chance());
      assertEquals(0, cfDef1.getGc_grace_seconds());
      assertFalse(cfDef1.isReplicate_on_write());
      assertEquals(0, cfDef1.getMemtable_flush_after_mins());
      assertNull(cfDef1.getSubcomparator_type());
      assertEquals(0, cfDef1.getId());
      assertFalse(cfDef1.isSetId());
      assertFalse(cfDef1.isSetMax_compaction_threshold());
      assertFalse(cfDef1.isSetRow_cache_size());
      assertEquals(0.0, cfDef1.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef1.isSetDefault_validation_class());
      assertTrue(cfDef1.isSetName());
      assertEquals(0.0, cfDef1.getRow_cache_size(), 0.01);
      assertFalse(cfDef1.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef1.getCompaction_strategy_optionsSize());
      assertFalse(cfDef1.isSetMemtable_operations_in_millions());
      assertEquals(0, cfDef1.getMin_compaction_threshold());
      assertEquals(0, cfDef1.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef1.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetKey_validation_class());
      assertTrue(cfDef1.isSetCaching());
      assertEquals(0, cfDef1.getRow_cache_keys_to_save());
      assertFalse(cfDef1.isSetMemtable_flush_after_mins());
      assertFalse(cfDef1.isSetSubcomparator_type());
      assertFalse(cfDef1.isSetRow_cache_provider());
      assertNull(cfDef1.getDefault_validation_class());
      assertFalse(cfDef1.isSetRow_cache_keys_to_save());
      assertFalse(cfDef1.isSetKey_cache_size());
      assertTrue(cfDef1.isSetKeyspace());
      assertEquals("", cfDef1.getKeyspace());
      assertFalse(cfDef1.isSetCompression_options());
      assertEquals("keys_only", cfDef1.getCaching());
      assertFalse(cfDef1.isSetKey_alias());
      assertNull(cfDef1.getCompaction_strategy());
      assertFalse(cfDef1.isSetComment());
      assertEquals(0.0, cfDef1.getKey_cache_size(), 0.01);
      assertNull(cfDef1.getKey_validation_class());
      assertNull(cfDef1.getComment());
      assertFalse(cfDef1.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef1.isSetMerge_shards_chance());
      assertFalse(cfDef1.isSetMin_compaction_threshold());
      assertTrue(cfDef1.isSetComparator_type());
      assertEquals(0, cfDef1.getColumn_metadataSize());
      assertFalse(cfDef1.isSetReplicate_on_write());
      assertEquals(0, cfDef1.getCompression_optionsSize());
      assertFalse(cfDef1.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef1.getMemtable_throughput_in_mb());
      assertEquals("Standard", cfDef1.getColumn_type());
      assertEquals(0, cfDef1.getMax_compaction_threshold());
      assertEquals(0.0, cfDef1.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef1.isSetRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef1.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef1.isSetRead_repair_chance());
      assertFalse(cfDef1.isSetGc_grace_seconds());
      assertFalse(cfDef1.isSetCompaction_strategy());
      assertNull(cfDef1.getRow_cache_provider());
      assertFalse(cfDef1.isSetCompaction_strategy_options());
      assertEquals("", cfDef1.getName());
      assertEquals("BytesType", cfDef1.getComparator_type());
      assertEquals(0.0, cfDef1.getBloom_filter_fp_chance(), 0.01);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertFalse(cfDef1.replicate_on_write);
      assertEquals(0.0, cfDef1.row_cache_size, 0.01);
      assertEquals(0.0, cfDef1.merge_shards_chance, 0.01);
      assertEquals(0.0, cfDef1.key_cache_size, 0.01);
      assertEquals(0, cfDef1.id);
      assertEquals(0.0, cfDef1.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef1.gc_grace_seconds);
      assertEquals(0, cfDef1.memtable_flush_after_mins);
      assertEquals(0, cfDef1.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef1.memtable_operations_in_millions, 0.01);
      assertEquals(0, cfDef1.row_cache_save_period_in_seconds);
      assertEquals(0, cfDef1.row_cache_keys_to_save);
      assertEquals(0.0, cfDef1.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef1.key_cache_save_period_in_seconds);
      assertEquals(0.0, cfDef1.read_repair_chance, 0.01);
      assertEquals(0, cfDef1.max_compaction_threshold);
      assertEquals(0, cfDef1.min_compaction_threshold);
      assertNotSame(string0, string1);
      assertNotSame(cfDef0, cfDef1);
      assertNotSame(cfDef1, cfDef0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(cfDef0.equals((Object)cfDef1));
      assertTrue(cfDef1.equals((Object)cfDef0));
      
      cfDef1.column_metadata = cfDef0.column_metadata;
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertNull(cfDef0.getKey_validation_class());
      assertNull(cfDef0.getComment());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertNull(cfDef0.getRow_cache_provider());
      assertTrue(cfDef0.isSetCaching());
      assertEquals("", cfDef0.getName());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetComment());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertFalse(cfDef0.isReplicate_on_write());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getId());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetId());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals("", cfDef0.getKeyspace());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertTrue(cfDef0.isSetKeyspace());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertTrue(cfDef0.isSetName());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertFalse(cfDef1.isSetColumn_metadata());
      assertEquals(0.0, cfDef1.getRead_repair_chance(), 0.01);
      assertTrue(cfDef1.isSetColumn_type());
      assertFalse(cfDef1.isSetBloom_filter_fp_chance());
      assertEquals(0, cfDef1.getGc_grace_seconds());
      assertFalse(cfDef1.isReplicate_on_write());
      assertEquals(0, cfDef1.getMemtable_flush_after_mins());
      assertNull(cfDef1.getSubcomparator_type());
      assertEquals(0, cfDef1.getId());
      assertFalse(cfDef1.isSetId());
      assertFalse(cfDef1.isSetMax_compaction_threshold());
      assertFalse(cfDef1.isSetRow_cache_size());
      assertEquals(0.0, cfDef1.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef1.isSetDefault_validation_class());
      assertTrue(cfDef1.isSetName());
      assertEquals(0.0, cfDef1.getRow_cache_size(), 0.01);
      assertFalse(cfDef1.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef1.getCompaction_strategy_optionsSize());
      assertFalse(cfDef1.isSetMemtable_operations_in_millions());
      assertEquals(0, cfDef1.getMin_compaction_threshold());
      assertEquals(0, cfDef1.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef1.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetKey_validation_class());
      assertTrue(cfDef1.isSetCaching());
      assertEquals(0, cfDef1.getRow_cache_keys_to_save());
      assertFalse(cfDef1.isSetMemtable_flush_after_mins());
      assertFalse(cfDef1.isSetSubcomparator_type());
      assertFalse(cfDef1.isSetRow_cache_provider());
      assertNull(cfDef1.getDefault_validation_class());
      assertFalse(cfDef1.isSetRow_cache_keys_to_save());
      assertFalse(cfDef1.isSetKey_cache_size());
      assertTrue(cfDef1.isSetKeyspace());
      assertEquals("", cfDef1.getKeyspace());
      assertFalse(cfDef1.isSetCompression_options());
      assertEquals("keys_only", cfDef1.getCaching());
      assertFalse(cfDef1.isSetKey_alias());
      assertNull(cfDef1.getCompaction_strategy());
      assertFalse(cfDef1.isSetComment());
      assertEquals(0.0, cfDef1.getKey_cache_size(), 0.01);
      assertNull(cfDef1.getKey_validation_class());
      assertNull(cfDef1.getComment());
      assertFalse(cfDef1.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef1.isSetMerge_shards_chance());
      assertFalse(cfDef1.isSetMin_compaction_threshold());
      assertTrue(cfDef1.isSetComparator_type());
      assertEquals(0, cfDef1.getColumn_metadataSize());
      assertFalse(cfDef1.isSetReplicate_on_write());
      assertEquals(0, cfDef1.getCompression_optionsSize());
      assertFalse(cfDef1.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef1.getMemtable_throughput_in_mb());
      assertEquals("Standard", cfDef1.getColumn_type());
      assertEquals(0, cfDef1.getMax_compaction_threshold());
      assertEquals(0.0, cfDef1.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef1.isSetRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef1.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef1.isSetRead_repair_chance());
      assertFalse(cfDef1.isSetGc_grace_seconds());
      assertFalse(cfDef1.isSetCompaction_strategy());
      assertNull(cfDef1.getRow_cache_provider());
      assertFalse(cfDef1.isSetCompaction_strategy_options());
      assertEquals("", cfDef1.getName());
      assertEquals("BytesType", cfDef1.getComparator_type());
      assertEquals(0.0, cfDef1.getBloom_filter_fp_chance(), 0.01);
      
      cfDef0.setIdIsSet(cassandraHost0.DEFAULT_LIFO);
      assertEquals("(127.0.0.1):6", cassandraHost0.toString());
      assertEquals(6, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":6", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):6", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertNull(cfDef0.getKey_validation_class());
      assertNull(cfDef0.getComment());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertTrue(cfDef0.isSetId());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertNull(cfDef0.getRow_cache_provider());
      assertTrue(cfDef0.isSetCaching());
      assertEquals("", cfDef0.getName());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetComment());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertFalse(cfDef0.isReplicate_on_write());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getId());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals("", cfDef0.getKeyspace());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertTrue(cfDef0.isSetKeyspace());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertTrue(cfDef0.isSetName());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertNotSame(string0, string1);
      assertNotSame(cfDef0, cfDef1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cfDef0.equals((Object)cfDef1));
      
      cfDef0.setColumn_metadataIsSet(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("(127.0.0.1):6", cassandraHost0.toString());
      assertEquals(6, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":6", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):6", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertNull(cfDef0.getKey_validation_class());
      assertNull(cfDef0.getComment());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertTrue(cfDef0.isSetId());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertNull(cfDef0.getRow_cache_provider());
      assertTrue(cfDef0.isSetCaching());
      assertEquals("", cfDef0.getName());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetComment());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertFalse(cfDef0.isReplicate_on_write());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getId());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals("", cfDef0.getKeyspace());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertTrue(cfDef0.isSetKeyspace());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertTrue(cfDef0.isSetName());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertNotSame(string0, string1);
      assertNotSame(cfDef0, cfDef1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cfDef0.equals((Object)cfDef1));
      
      Map<String, String> map0 = cfDef1.getCompaction_strategy_options();
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertNull(cfDef0.getKey_validation_class());
      assertNull(cfDef0.getComment());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertTrue(cfDef0.isSetId());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertNull(cfDef0.getRow_cache_provider());
      assertTrue(cfDef0.isSetCaching());
      assertEquals("", cfDef0.getName());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetComment());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertFalse(cfDef0.isReplicate_on_write());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getId());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals("", cfDef0.getKeyspace());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertTrue(cfDef0.isSetKeyspace());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertTrue(cfDef0.isSetName());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertFalse(cfDef1.isSetColumn_metadata());
      assertEquals(0.0, cfDef1.getRead_repair_chance(), 0.01);
      assertTrue(cfDef1.isSetColumn_type());
      assertFalse(cfDef1.isSetBloom_filter_fp_chance());
      assertEquals(0, cfDef1.getGc_grace_seconds());
      assertFalse(cfDef1.isReplicate_on_write());
      assertEquals(0, cfDef1.getMemtable_flush_after_mins());
      assertNull(cfDef1.getSubcomparator_type());
      assertEquals(0, cfDef1.getId());
      assertFalse(cfDef1.isSetId());
      assertFalse(cfDef1.isSetMax_compaction_threshold());
      assertFalse(cfDef1.isSetRow_cache_size());
      assertEquals(0.0, cfDef1.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef1.isSetDefault_validation_class());
      assertTrue(cfDef1.isSetName());
      assertEquals(0.0, cfDef1.getRow_cache_size(), 0.01);
      assertFalse(cfDef1.isSetDclocal_read_repair_chance());
      assertEquals(0, cfDef1.getCompaction_strategy_optionsSize());
      assertFalse(cfDef1.isSetMemtable_operations_in_millions());
      assertEquals(0, cfDef1.getMin_compaction_threshold());
      assertEquals(0, cfDef1.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef1.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetKey_validation_class());
      assertTrue(cfDef1.isSetCaching());
      assertEquals(0, cfDef1.getRow_cache_keys_to_save());
      assertFalse(cfDef1.isSetMemtable_flush_after_mins());
      assertFalse(cfDef1.isSetSubcomparator_type());
      assertFalse(cfDef1.isSetRow_cache_provider());
      assertNull(cfDef1.getDefault_validation_class());
      assertFalse(cfDef1.isSetRow_cache_keys_to_save());
      assertFalse(cfDef1.isSetKey_cache_size());
      assertTrue(cfDef1.isSetKeyspace());
      assertEquals("", cfDef1.getKeyspace());
      assertFalse(cfDef1.isSetCompression_options());
      assertEquals("keys_only", cfDef1.getCaching());
      assertFalse(cfDef1.isSetKey_alias());
      assertNull(cfDef1.getCompaction_strategy());
      assertFalse(cfDef1.isSetComment());
      assertEquals(0.0, cfDef1.getKey_cache_size(), 0.01);
      assertNull(cfDef1.getKey_validation_class());
      assertNull(cfDef1.getComment());
      assertFalse(cfDef1.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef1.isSetMerge_shards_chance());
      assertFalse(cfDef1.isSetMin_compaction_threshold());
      assertTrue(cfDef1.isSetComparator_type());
      assertEquals(0, cfDef1.getColumn_metadataSize());
      assertFalse(cfDef1.isSetReplicate_on_write());
      assertEquals(0, cfDef1.getCompression_optionsSize());
      assertFalse(cfDef1.isSetKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef1.getMemtable_throughput_in_mb());
      assertEquals("Standard", cfDef1.getColumn_type());
      assertEquals(0, cfDef1.getMax_compaction_threshold());
      assertEquals(0.0, cfDef1.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef1.isSetRow_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef1.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef1.isSetRead_repair_chance());
      assertFalse(cfDef1.isSetGc_grace_seconds());
      assertFalse(cfDef1.isSetCompaction_strategy());
      assertNull(cfDef1.getRow_cache_provider());
      assertFalse(cfDef1.isSetCompaction_strategy_options());
      assertEquals("", cfDef1.getName());
      assertEquals("BytesType", cfDef1.getComparator_type());
      assertEquals(0.0, cfDef1.getBloom_filter_fp_chance(), 0.01);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertFalse(cfDef1.replicate_on_write);
      assertEquals(0.0, cfDef1.row_cache_size, 0.01);
      assertEquals(0.0, cfDef1.merge_shards_chance, 0.01);
      assertEquals(0.0, cfDef1.key_cache_size, 0.01);
      assertEquals(0, cfDef1.id);
      assertEquals(0.0, cfDef1.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef1.gc_grace_seconds);
      assertEquals(0, cfDef1.memtable_flush_after_mins);
      assertEquals(0, cfDef1.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef1.memtable_operations_in_millions, 0.01);
      assertEquals(0, cfDef1.row_cache_save_period_in_seconds);
      assertEquals(0, cfDef1.row_cache_keys_to_save);
      assertEquals(0.0, cfDef1.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef1.key_cache_save_period_in_seconds);
      assertEquals(0.0, cfDef1.read_repair_chance, 0.01);
      assertEquals(0, cfDef1.max_compaction_threshold);
      assertEquals(0, cfDef1.min_compaction_threshold);
      assertNull(map0);
      assertNotSame(string0, string1);
      assertNotSame(cfDef0, cfDef1);
      assertNotSame(cfDef1, cfDef0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cfDef0.equals((Object)cfDef1));
      assertFalse(cfDef1.equals((Object)cfDef0));
      
      // Undeclared exception!
      try { 
        hThriftClient0.setAuthenticated(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "0H_H('=}$*X2% d7S";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0H_H('=}$*X2% d7S", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("0H_H('=}$*X2% d7S:9160", cassandraHost0.getUrl());
      assertEquals("0H_H('=}$*X2% d7S(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("0H_H('=}$*X2% d7S(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      String[] stringArray0 = null;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0H_H('=}$*X2% d7S", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("0H_H('=}$*X2% d7S:9160", cassandraHost0.getUrl());
      assertEquals("0H_H('=}$*X2% d7S(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("0H_H('=}$*X2% d7S(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0H_H('=}$*X2% d7S", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("0H_H('=}$*X2% d7S:9160", cassandraHost0.getUrl());
      assertEquals("0H_H('=}$*X2% d7S(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("0H_H('=}$*X2% d7S(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      CfDef cfDef0 = new CfDef();
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isSetColumn_metadata());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getId());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertFalse(cfDef0.isSetComment());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isReplicate_on_write());
      assertNull(cfDef0.getKey_validation_class());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetId());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetKeyspace());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertTrue(cfDef0.isSetCaching());
      assertNull(cfDef0.getRow_cache_provider());
      assertNull(cfDef0.getName());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertTrue(cfDef0.isSetComparator_type());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertNull(cfDef0.getKeyspace());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertFalse(cfDef0.isSetName());
      assertNull(cfDef0.getDefault_validation_class());
      assertNull(cfDef0.getComment());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0, cfDef0.id);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertNotNull(cfDef0);
      
      CfDef cfDef1 = new CfDef(cfDef0);
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isSetColumn_metadata());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getId());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertFalse(cfDef0.isSetComment());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isReplicate_on_write());
      assertNull(cfDef0.getKey_validation_class());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetId());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetKeyspace());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertTrue(cfDef0.isSetCaching());
      assertNull(cfDef0.getRow_cache_provider());
      assertNull(cfDef0.getName());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertTrue(cfDef0.isSetComparator_type());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertNull(cfDef0.getKeyspace());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertFalse(cfDef0.isSetName());
      assertNull(cfDef0.getDefault_validation_class());
      assertNull(cfDef0.getComment());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertEquals(0.0, cfDef1.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef1.getRow_cache_keys_to_save());
      assertEquals(0, cfDef1.getMin_compaction_threshold());
      assertFalse(cfDef1.isSetCompaction_strategy_options());
      assertEquals(0, cfDef1.getMax_compaction_threshold());
      assertFalse(cfDef1.isSetKey_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef1.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef1.getGc_grace_seconds());
      assertFalse(cfDef1.isSetName());
      assertFalse(cfDef1.isSetDclocal_read_repair_chance());
      assertFalse(cfDef1.isSetId());
      assertFalse(cfDef1.isReplicate_on_write());
      assertEquals(0, cfDef1.getMemtable_flush_after_mins());
      assertEquals(0.0, cfDef1.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef1.isSetDefault_validation_class());
      assertNull(cfDef1.getKeyspace());
      assertFalse(cfDef1.isSetMemtable_flush_after_mins());
      assertFalse(cfDef1.isSetKey_validation_class());
      assertEquals(0.0, cfDef1.getRead_repair_chance(), 0.01);
      assertFalse(cfDef1.isSetCompression_options());
      assertNull(cfDef1.getDefault_validation_class());
      assertFalse(cfDef1.isSetMemtable_operations_in_millions());
      assertFalse(cfDef1.isSetRow_cache_provider());
      assertFalse(cfDef1.isSetKey_cache_size());
      assertEquals("keys_only", cfDef1.getCaching());
      assertEquals(0, cfDef1.getCompaction_strategy_optionsSize());
      assertNull(cfDef1.getSubcomparator_type());
      assertFalse(cfDef1.isSetMax_compaction_threshold());
      assertFalse(cfDef1.isSetSubcomparator_type());
      assertFalse(cfDef1.isSetKeyspace());
      assertNull(cfDef1.getRow_cache_provider());
      assertNull(cfDef1.getName());
      assertTrue(cfDef1.isSetCaching());
      assertFalse(cfDef1.isSetCompaction_strategy());
      assertFalse(cfDef1.isSetRow_cache_keys_to_save());
      assertEquals(0, cfDef1.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetRow_cache_save_period_in_seconds());
      assertTrue(cfDef1.isSetComparator_type());
      assertFalse(cfDef1.isSetRead_repair_chance());
      assertEquals("BytesType", cfDef1.getComparator_type());
      assertFalse(cfDef1.isSetReplicate_on_write());
      assertEquals(0, cfDef1.getCompression_optionsSize());
      assertEquals(0, cfDef1.getColumn_metadataSize());
      assertNull(cfDef1.getCompaction_strategy());
      assertNull(cfDef1.getKey_validation_class());
      assertFalse(cfDef1.isSetRow_cache_size());
      assertNull(cfDef1.getComment());
      assertFalse(cfDef1.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef1.isSetMin_compaction_threshold());
      assertEquals(0, cfDef1.getRow_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetGc_grace_seconds());
      assertFalse(cfDef1.isSetMerge_shards_chance());
      assertFalse(cfDef1.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef1.getKey_cache_size(), 0.01);
      assertFalse(cfDef1.isSetComment());
      assertFalse(cfDef1.isSetKey_alias());
      assertEquals(0.0, cfDef1.getBloom_filter_fp_chance(), 0.01);
      assertEquals(0, cfDef1.getMemtable_throughput_in_mb());
      assertTrue(cfDef1.isSetColumn_type());
      assertEquals(0.0, cfDef1.getMerge_shards_chance(), 0.01);
      assertEquals(0, cfDef1.getId());
      assertEquals("Standard", cfDef1.getColumn_type());
      assertFalse(cfDef1.isSetColumn_metadata());
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0, cfDef0.id);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef1.read_repair_chance, 0.01);
      assertEquals(0, cfDef1.row_cache_save_period_in_seconds);
      assertEquals(0, cfDef1.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef1.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef1.key_cache_size, 0.01);
      assertFalse(cfDef1.replicate_on_write);
      assertEquals(0, cfDef1.row_cache_keys_to_save);
      assertEquals(0, cfDef1.max_compaction_threshold);
      assertEquals(0, cfDef1.min_compaction_threshold);
      assertEquals(0.0, cfDef1.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef1.row_cache_size, 0.01);
      assertEquals(0, cfDef1.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef1.gc_grace_seconds);
      assertEquals(0.0, cfDef1.merge_shards_chance, 0.01);
      assertEquals(0, cfDef1.memtable_flush_after_mins);
      assertEquals(0, cfDef1.id);
      assertEquals(0.0, cfDef1.dclocal_read_repair_chance, 0.01);
      assertNotNull(cfDef1);
      assertTrue(cfDef1.equals((Object)cfDef0));
      
      Map<String, String> map0 = cfDef1.getCompaction_strategy_options();
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isSetColumn_metadata());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getId());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertFalse(cfDef0.isSetComment());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isReplicate_on_write());
      assertNull(cfDef0.getKey_validation_class());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetId());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetKeyspace());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertTrue(cfDef0.isSetCaching());
      assertNull(cfDef0.getRow_cache_provider());
      assertNull(cfDef0.getName());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertTrue(cfDef0.isSetComparator_type());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertNull(cfDef0.getKeyspace());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertFalse(cfDef0.isSetName());
      assertNull(cfDef0.getDefault_validation_class());
      assertNull(cfDef0.getComment());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertEquals(0.0, cfDef1.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef1.getRow_cache_keys_to_save());
      assertEquals(0, cfDef1.getMin_compaction_threshold());
      assertFalse(cfDef1.isSetCompaction_strategy_options());
      assertEquals(0, cfDef1.getMax_compaction_threshold());
      assertFalse(cfDef1.isSetKey_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef1.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef1.getGc_grace_seconds());
      assertFalse(cfDef1.isSetName());
      assertFalse(cfDef1.isSetDclocal_read_repair_chance());
      assertFalse(cfDef1.isSetId());
      assertFalse(cfDef1.isReplicate_on_write());
      assertEquals(0, cfDef1.getMemtable_flush_after_mins());
      assertEquals(0.0, cfDef1.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef1.isSetDefault_validation_class());
      assertNull(cfDef1.getKeyspace());
      assertFalse(cfDef1.isSetMemtable_flush_after_mins());
      assertFalse(cfDef1.isSetKey_validation_class());
      assertEquals(0.0, cfDef1.getRead_repair_chance(), 0.01);
      assertFalse(cfDef1.isSetCompression_options());
      assertNull(cfDef1.getDefault_validation_class());
      assertFalse(cfDef1.isSetMemtable_operations_in_millions());
      assertFalse(cfDef1.isSetRow_cache_provider());
      assertFalse(cfDef1.isSetKey_cache_size());
      assertEquals("keys_only", cfDef1.getCaching());
      assertEquals(0, cfDef1.getCompaction_strategy_optionsSize());
      assertNull(cfDef1.getSubcomparator_type());
      assertFalse(cfDef1.isSetMax_compaction_threshold());
      assertFalse(cfDef1.isSetSubcomparator_type());
      assertFalse(cfDef1.isSetKeyspace());
      assertNull(cfDef1.getRow_cache_provider());
      assertNull(cfDef1.getName());
      assertTrue(cfDef1.isSetCaching());
      assertFalse(cfDef1.isSetCompaction_strategy());
      assertFalse(cfDef1.isSetRow_cache_keys_to_save());
      assertEquals(0, cfDef1.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetRow_cache_save_period_in_seconds());
      assertTrue(cfDef1.isSetComparator_type());
      assertFalse(cfDef1.isSetRead_repair_chance());
      assertEquals("BytesType", cfDef1.getComparator_type());
      assertFalse(cfDef1.isSetReplicate_on_write());
      assertEquals(0, cfDef1.getCompression_optionsSize());
      assertEquals(0, cfDef1.getColumn_metadataSize());
      assertNull(cfDef1.getCompaction_strategy());
      assertNull(cfDef1.getKey_validation_class());
      assertFalse(cfDef1.isSetRow_cache_size());
      assertNull(cfDef1.getComment());
      assertFalse(cfDef1.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef1.isSetMin_compaction_threshold());
      assertEquals(0, cfDef1.getRow_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetGc_grace_seconds());
      assertFalse(cfDef1.isSetMerge_shards_chance());
      assertFalse(cfDef1.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef1.getKey_cache_size(), 0.01);
      assertFalse(cfDef1.isSetComment());
      assertFalse(cfDef1.isSetKey_alias());
      assertEquals(0.0, cfDef1.getBloom_filter_fp_chance(), 0.01);
      assertEquals(0, cfDef1.getMemtable_throughput_in_mb());
      assertTrue(cfDef1.isSetColumn_type());
      assertEquals(0.0, cfDef1.getMerge_shards_chance(), 0.01);
      assertEquals(0, cfDef1.getId());
      assertEquals("Standard", cfDef1.getColumn_type());
      assertFalse(cfDef1.isSetColumn_metadata());
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0, cfDef0.id);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef1.read_repair_chance, 0.01);
      assertEquals(0, cfDef1.row_cache_save_period_in_seconds);
      assertEquals(0, cfDef1.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef1.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef1.key_cache_size, 0.01);
      assertFalse(cfDef1.replicate_on_write);
      assertEquals(0, cfDef1.row_cache_keys_to_save);
      assertEquals(0, cfDef1.max_compaction_threshold);
      assertEquals(0, cfDef1.min_compaction_threshold);
      assertEquals(0.0, cfDef1.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef1.row_cache_size, 0.01);
      assertEquals(0, cfDef1.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef1.gc_grace_seconds);
      assertEquals(0.0, cfDef1.merge_shards_chance, 0.01);
      assertEquals(0, cfDef1.memtable_flush_after_mins);
      assertEquals(0, cfDef1.id);
      assertEquals(0.0, cfDef1.dclocal_read_repair_chance, 0.01);
      assertNull(map0);
      assertNotSame(cfDef0, cfDef1);
      assertNotSame(cfDef1, cfDef0);
      assertTrue(cfDef0.equals((Object)cfDef1));
      assertTrue(cfDef1.equals((Object)cfDef0));
      
      boolean boolean0 = hThriftClient1.isAlreadyAuthenticated(map0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0H_H('=}$*X2% d7S", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("0H_H('=}$*X2% d7S:9160", cassandraHost0.getUrl());
      assertEquals("0H_H('=}$*X2% d7S(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("0H_H('=}$*X2% d7S(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertEquals("keys_only", cfDef0.getCaching());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isSetColumn_metadata());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getId());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertFalse(cfDef0.isSetComment());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isReplicate_on_write());
      assertNull(cfDef0.getKey_validation_class());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetId());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetKeyspace());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertTrue(cfDef0.isSetCaching());
      assertNull(cfDef0.getRow_cache_provider());
      assertNull(cfDef0.getName());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertTrue(cfDef0.isSetComparator_type());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertEquals("Standard", cfDef0.getColumn_type());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertNull(cfDef0.getKeyspace());
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertFalse(cfDef0.isSetName());
      assertNull(cfDef0.getDefault_validation_class());
      assertNull(cfDef0.getComment());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertEquals(0.0, cfDef1.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef1.getRow_cache_keys_to_save());
      assertEquals(0, cfDef1.getMin_compaction_threshold());
      assertFalse(cfDef1.isSetCompaction_strategy_options());
      assertEquals(0, cfDef1.getMax_compaction_threshold());
      assertFalse(cfDef1.isSetKey_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef1.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef1.getGc_grace_seconds());
      assertFalse(cfDef1.isSetName());
      assertFalse(cfDef1.isSetDclocal_read_repair_chance());
      assertFalse(cfDef1.isSetId());
      assertFalse(cfDef1.isReplicate_on_write());
      assertEquals(0, cfDef1.getMemtable_flush_after_mins());
      assertEquals(0.0, cfDef1.getMemtable_operations_in_millions(), 0.01);
      assertFalse(cfDef1.isSetDefault_validation_class());
      assertNull(cfDef1.getKeyspace());
      assertFalse(cfDef1.isSetMemtable_flush_after_mins());
      assertFalse(cfDef1.isSetKey_validation_class());
      assertEquals(0.0, cfDef1.getRead_repair_chance(), 0.01);
      assertFalse(cfDef1.isSetCompression_options());
      assertNull(cfDef1.getDefault_validation_class());
      assertFalse(cfDef1.isSetMemtable_operations_in_millions());
      assertFalse(cfDef1.isSetRow_cache_provider());
      assertFalse(cfDef1.isSetKey_cache_size());
      assertEquals("keys_only", cfDef1.getCaching());
      assertEquals(0, cfDef1.getCompaction_strategy_optionsSize());
      assertNull(cfDef1.getSubcomparator_type());
      assertFalse(cfDef1.isSetMax_compaction_threshold());
      assertFalse(cfDef1.isSetSubcomparator_type());
      assertFalse(cfDef1.isSetKeyspace());
      assertNull(cfDef1.getRow_cache_provider());
      assertNull(cfDef1.getName());
      assertTrue(cfDef1.isSetCaching());
      assertFalse(cfDef1.isSetCompaction_strategy());
      assertFalse(cfDef1.isSetRow_cache_keys_to_save());
      assertEquals(0, cfDef1.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetRow_cache_save_period_in_seconds());
      assertTrue(cfDef1.isSetComparator_type());
      assertFalse(cfDef1.isSetRead_repair_chance());
      assertEquals("BytesType", cfDef1.getComparator_type());
      assertFalse(cfDef1.isSetReplicate_on_write());
      assertEquals(0, cfDef1.getCompression_optionsSize());
      assertEquals(0, cfDef1.getColumn_metadataSize());
      assertNull(cfDef1.getCompaction_strategy());
      assertNull(cfDef1.getKey_validation_class());
      assertFalse(cfDef1.isSetRow_cache_size());
      assertNull(cfDef1.getComment());
      assertFalse(cfDef1.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef1.isSetMin_compaction_threshold());
      assertEquals(0, cfDef1.getRow_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetGc_grace_seconds());
      assertFalse(cfDef1.isSetMerge_shards_chance());
      assertFalse(cfDef1.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef1.getKey_cache_size(), 0.01);
      assertFalse(cfDef1.isSetComment());
      assertFalse(cfDef1.isSetKey_alias());
      assertEquals(0.0, cfDef1.getBloom_filter_fp_chance(), 0.01);
      assertEquals(0, cfDef1.getMemtable_throughput_in_mb());
      assertTrue(cfDef1.isSetColumn_type());
      assertEquals(0.0, cfDef1.getMerge_shards_chance(), 0.01);
      assertEquals(0, cfDef1.getId());
      assertEquals("Standard", cfDef1.getColumn_type());
      assertFalse(cfDef1.isSetColumn_metadata());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0, cfDef0.id);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef1.read_repair_chance, 0.01);
      assertEquals(0, cfDef1.row_cache_save_period_in_seconds);
      assertEquals(0, cfDef1.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef1.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef1.key_cache_size, 0.01);
      assertFalse(cfDef1.replicate_on_write);
      assertEquals(0, cfDef1.row_cache_keys_to_save);
      assertEquals(0, cfDef1.max_compaction_threshold);
      assertEquals(0, cfDef1.min_compaction_threshold);
      assertEquals(0.0, cfDef1.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef1.row_cache_size, 0.01);
      assertEquals(0, cfDef1.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef1.gc_grace_seconds);
      assertEquals(0.0, cfDef1.merge_shards_chance, 0.01);
      assertEquals(0, cfDef1.memtable_flush_after_mins);
      assertEquals(0, cfDef1.id);
      assertEquals(0.0, cfDef1.dclocal_read_repair_chance, 0.01);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(cfDef0, cfDef1);
      assertNotSame(cfDef1, cfDef0);
      assertTrue(cfDef0.equals((Object)cfDef1));
      assertTrue(cfDef1.equals((Object)cfDef0));
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      int int0 = (-86);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      boolean boolean0 = cassandraHost0.isPerformNameResolution();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean0);
      
      String string1 = "";
      String string2 = hThriftClient0.toString();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("CassandraClient<:-86-25>", string2);
      
      boolean boolean1 = hThriftClient0.equals(string1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      tSSLTransportFactory_TSSLTransportParameters0.requireClientAuth(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string0.equals((Object)string2));
      
      hThriftClient0.clearAuthentication();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string0.equals((Object)string2));
      
      hThriftClient0.startToUse();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string0.equals((Object)string2));
      
      String string3 = "";
      boolean boolean2 = hThriftClient0.isOpen();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = "L,!iNGk]v!b";
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string3, string1, string4, string3);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean3 = hThriftClient0.isOpen();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(boolean3);
      
      boolean boolean4 = hThriftClient0.isOpen();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean5 = hThriftClient0.equals(object0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      boolean boolean6 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":-86", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-86), cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):-86", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):-86", cassandraHost0.getName());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "thhWZ+@$iXV`TuMh";
      int int0 = 327;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("thhWZ+@$iXV`TuMh:327", cassandraHost0.getUrl());
      assertEquals("thhWZ+@$iXV`TuMh", cassandraHost0.getHost());
      assertEquals("thhWZ+@$iXV`TuMh(200.42.42.0):327", cassandraHost0.getName());
      assertEquals(327, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("thhWZ+@$iXV`TuMh(200.42.42.0):327", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("thhWZ+@$iXV`TuMh:327", cassandraHost0.getUrl());
      assertEquals("thhWZ+@$iXV`TuMh", cassandraHost0.getHost());
      assertEquals("thhWZ+@$iXV`TuMh(200.42.42.0):327", cassandraHost0.getName());
      assertEquals(327, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("thhWZ+@$iXV`TuMh(200.42.42.0):327", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("thhWZ+@$iXV`TuMh:327", cassandraHost0.getUrl());
      assertEquals("thhWZ+@$iXV`TuMh", cassandraHost0.getHost());
      assertEquals("thhWZ+@$iXV`TuMh(200.42.42.0):327", cassandraHost0.getName());
      assertEquals(327, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("thhWZ+@$iXV`TuMh(200.42.42.0):327", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("thhWZ+@$iXV`TuMh(200.42.42.0):327", cassandraHost1.toString());
      assertTrue(cassandraHost1.getLifo());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals("thhWZ+@$iXV`TuMh(200.42.42.0):327", cassandraHost1.getName());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("thhWZ+@$iXV`TuMh", cassandraHost1.getHost());
      assertEquals(327, cassandraHost1.getPort());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("thhWZ+@$iXV`TuMh:327", cassandraHost1.getUrl());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      boolean boolean0 = cassandraHost0.isPerformNameResolution();
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(boolean0);
      
      boolean boolean1 = cassandraHost0.isPerformNameResolution();
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      
      boolean boolean2 = cassandraHost0.isPerformNameResolution();
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = hThriftClient0.isOpen();
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("(127.0.0.1):0", cassandraHost1.getName());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("", cassandraHost1.getHost());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost1.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost1.toString());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals(":0", cassandraHost1.getUrl());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      
      int int1 = (-652);
      cassandraHost0.setMaxActive(int1);
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals((-652), cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      hThriftClient0.clearAuthentication();
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals((-652), cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(int0 == int1);
      
      boolean boolean4 = hThriftClient0.equals(string0);
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals((-652), cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(int0 == int1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "Yf@";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1, stringArray0.length);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNotNull(hThriftClient0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        hThriftClient0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "Nn*eeWD0v._vT)g7't'";
      int int0 = 1014;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1014, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Nn*eeWD0v._vT)g7't'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Nn*eeWD0v._vT)g7't':1014", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.getName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1014, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Nn*eeWD0v._vT)g7't'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Nn*eeWD0v._vT)g7't':1014", cassandraHost0.getUrl());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.getName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      boolean boolean1 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1014, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Nn*eeWD0v._vT)g7't'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Nn*eeWD0v._vT)g7't':1014", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.getName());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean1 == boolean0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1014, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Nn*eeWD0v._vT)g7't'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Nn*eeWD0v._vT)g7't':1014", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1014, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Nn*eeWD0v._vT)g7't'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Nn*eeWD0v._vT)g7't':1014", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      hThriftClient0.startToUse();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1014, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Nn*eeWD0v._vT)g7't'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Nn*eeWD0v._vT)g7't':1014", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Nn*eeWD0v._vT)g7't'(200.42.42.0):1014", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(hThriftClient0, hThriftClient1);
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to Nn*eeWD0v._vT)g7't'(200.42.42.0):1014 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2775c387
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "Creating a new thrift connection to {}";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("Creating a new thrift connection to {}:0", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("Creating a new thrift connection to {}", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("Creating a new thrift connection to {}:0", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("Creating a new thrift connection to {}", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals("Creating a new thrift connection to {}:0", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("Creating a new thrift connection to {}(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("Creating a new thrift connection to {}", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "O]?$I2'bn{";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("O]?$I2'bn{:9160", cassandraHost0.getUrl());
      assertEquals("O]?$I2'bn{(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("O]?$I2'bn{(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("O]?$I2'bn{", cassandraHost0.getHost());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("O]?$I2'bn{:9160", cassandraHost0.getUrl());
      assertEquals("O]?$I2'bn{(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("O]?$I2'bn{(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("O]?$I2'bn{", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("O]?$I2'bn{:9160", cassandraHost0.getUrl());
      assertEquals("O]?$I2'bn{(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("O]?$I2'bn{(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("O]?$I2'bn{", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      int int0 = 2;
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(int0);
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      assertNotNull(tMemoryBuffer0);
      
      hThriftClient0.transport = (TTransport) tMemoryBuffer0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("O]?$I2'bn{:9160", cassandraHost0.getUrl());
      assertEquals("O]?$I2'bn{(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("O]?$I2'bn{(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("O]?$I2'bn{", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "";
      int int0 = (-1);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      boolean boolean0 = true;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0, boolean0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(2, stringArray0.length);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      assertEquals(2, stringArray0.length);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient1);
      assertEquals(2, stringArray0.length);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(cassandraHost0.DEFAULT_PORT);
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(pipedInputStream0);
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(pipedInputStream0);
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(tIOStreamTransport0);
      
      boolean boolean1 = false;
      cassandraHost0.setUseSocketKeepalive(boolean1);
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean1 == boolean0);
      
      hThriftClient1.transport = (TTransport) tIOStreamTransport0;
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), hThriftClient1.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient1.transport.getBufferPosition());
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "Error on transport close for client: ";
      int int0 = 758;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(758, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Error on transport close for client(200.42.42.0):758", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Error on transport close for client(200.42.42.0):758", cassandraHost0.getName());
      assertEquals("Error on transport close for client:758", cassandraHost0.getUrl());
      assertEquals("Error on transport close for client", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(758, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Error on transport close for client(200.42.42.0):758", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Error on transport close for client(200.42.42.0):758", cassandraHost0.getName());
      assertEquals("Error on transport close for client:758", cassandraHost0.getUrl());
      assertEquals("Error on transport close for client", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      hThriftClient0.setAuthenticated(hashMap0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(758, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Error on transport close for client(200.42.42.0):758", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Error on transport close for client(200.42.42.0):758", cassandraHost0.getName());
      assertEquals("Error on transport close for client:758", cassandraHost0.getUrl());
      assertEquals("Error on transport close for client", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(758, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("Error on transport close for client(200.42.42.0):758", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Error on transport close for client(200.42.42.0):758", cassandraHost0.getName());
      assertEquals("Error on transport close for client:758", cassandraHost0.getUrl());
      assertEquals("Error on transport close for client", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "";
      int int0 = 883;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):883", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":883", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):883", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(883, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(cassandraHost0);
      
      String string1 = "Could not flush transport (to be expected if the pool is shutting down) in close for client: ";
      int int1 = 1;
      cassandraHost0.setCassandraThriftSocketTimeout(int1);
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):883", cassandraHost0.getName());
      assertEquals(1, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":883", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):883", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(883, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):883", cassandraHost0.getName());
      assertEquals(1, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":883", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):883", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(883, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      
      stringArray0[3] = string1;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(4, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ":U@";
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(string2, stringArray0[1]);
      assertEquals(4, stringArray0.length);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      cassandraHost0.setMaxActive(int0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):883", cassandraHost0.getName());
      assertEquals(1, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(":883", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):883", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(883, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(883, cassandraHost0.getMaxActive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      
      boolean boolean1 = false;
      cassandraHost0.setUseSocketKeepalive(boolean1);
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):883", cassandraHost0.getName());
      assertEquals(1, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":883", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):883", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(883, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(883, cassandraHost0.getMaxActive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int1);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):883", cassandraHost0.getName());
      assertEquals(1, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":883", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):883", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(883, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(883, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(hThriftClient0);
      assertEquals(4, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      String string3 = hThriftClient0.toString();
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):883", cassandraHost0.getName());
      assertEquals(1, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":883", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):883", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(883, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(883, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("CassandraClient<:883-35>", string3);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNotNull(hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "JS+'";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      boolean boolean0 = true;
      cassandraHost0.setLifo(boolean0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient0);
      
      hThriftClient0.keyspaceName = string0;
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      hThriftClient0.clearAuthentication();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      cassandraHost0.setLifo(boolean0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      cassandraHost0.setLifo(boolean0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      hThriftClient0.startToUse();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, long0);
      
      boolean boolean1 = hThriftClient0.isOpen();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = hThriftClient0.toString();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("JS+':9160", cassandraHost0.getUrl());
      assertEquals("JS+'", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("JS+'(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CassandraClient<JS+':9160-37>", string1);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNotNull(hThriftClient0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.equals(cassandraHost0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "org.apache.cassandra.thrift.Column$_Fields";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      String string1 = ">QeGQ8.On@) ";
      stringArray0[2] = string1;
      boolean boolean0 = false;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0, boolean0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(3, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNotNull(hThriftClient0);
      assertEquals(3, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      
      TTransport tTransport0 = null;
      hThriftClient0.transport = tTransport0;
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(cassandraHost1);
      assertEquals(3, stringArray0.length);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean1 = hThriftClient0.isOpen();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(3, stringArray0.length);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(3, stringArray0.length);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertEquals(1392409281320L, long0);
      
      AuthenticationRequest authenticationRequest0 = new AuthenticationRequest();
      assertFalse(authenticationRequest0.isSetCredentials());
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertNotNull(authenticationRequest0);
      
      AuthenticationRequest._Fields authenticationRequest__Fields0 = AuthenticationRequest._Fields.CREDENTIALS;
      // Undeclared exception!
      try { 
        authenticationRequest0.setFieldValue(authenticationRequest__Fields0, (Object) authenticationRequest__Fields0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.cassandra.thrift.AuthenticationRequest$_Fields cannot be cast to java.util.Map
         //
         verifyException("org.apache.cassandra.thrift.AuthenticationRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "-T>gyn`zEd";
      int int0 = 2;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("-T>gyn`zEd", cassandraHost0.getHost());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("-T>gyn`zEd:2", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("-T>gyn`zEd", cassandraHost0.getHost());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("-T>gyn`zEd:2", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      boolean boolean0 = cassandraHost0.isPerformNameResolution();
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("-T>gyn`zEd", cassandraHost0.getHost());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("-T>gyn`zEd:2", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      boolean boolean2 = cassandraHost0.isPerformNameResolution();
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("-T>gyn`zEd", cassandraHost0.getHost());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("-T>gyn`zEd:2", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      cassandraHost0.setUseSocketKeepalive(boolean1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("-T>gyn`zEd", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("-T>gyn`zEd:2", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("-T>gyn`zEd", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("-T>gyn`zEd:2", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      CassandraHost cassandraHost1 = hThriftClient1.getCassandraHost();
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("-T>gyn`zEd", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals("-T>gyn`zEd:2", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost1.getName());
      assertEquals(2, cassandraHost1.getPort());
      assertEquals("-T>gyn`zEd:2", cassandraHost1.getUrl());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("-T>gyn`zEd(200.42.42.0):2", cassandraHost1.toString());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("-T>gyn`zEd", cassandraHost1.getHost());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertTrue(cassandraHost1.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost1, cassandraHost0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = ">Us0O0=9`";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(">Us0O0=9`:9160", cassandraHost0.getUrl());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      long long0 = 3362L;
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(3362L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">Us0O0=9`:9160", cassandraHost0.getUrl());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      boolean boolean0 = true;
      int int0 = (-1);
      cassandraHost0.setMaxActive(int0);
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(3362L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">Us0O0=9`:9160", cassandraHost0.getUrl());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`", cassandraHost0.getHost());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      cassandraHost0.setLifo(boolean0);
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(3362L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">Us0O0=9`:9160", cassandraHost0.getUrl());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`", cassandraHost0.getHost());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      int int1 = (-1126);
      cassandraHost0.setMaxActive(int1);
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1126), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(3362L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">Us0O0=9`:9160", cassandraHost0.getUrl());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`", cassandraHost0.getHost());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(int1 == int0);
      
      boolean boolean1 = cassandraHost0.isPerformNameResolution();
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1126), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(3362L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">Us0O0=9`:9160", cassandraHost0.getUrl());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`", cassandraHost0.getHost());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      cassandraHost0.setLifo(boolean0);
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1126), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(3362L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">Us0O0=9`:9160", cassandraHost0.getUrl());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`", cassandraHost0.getHost());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean0 == boolean1);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1126), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(3362L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">Us0O0=9`:9160", cassandraHost0.getUrl());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient0);
      
      boolean boolean2 = hThriftClient0.equals(string0);
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1126), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(3362L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">Us0O0=9`:9160", cassandraHost0.getUrl());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = hThriftClient0.toString();
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1126), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(3362L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">Us0O0=9`:9160", cassandraHost0.getUrl());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CassandraClient<>Us0O0=9`:9160-41>", string1);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1126), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(3362L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">Us0O0=9`:9160", cassandraHost0.getUrl());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(3362L, cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals(">Us0O0=9`:9160", cassandraHost1.getUrl());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertTrue(cassandraHost1.getLifo());
      assertEquals(">Us0O0=9`", cassandraHost1.getHost());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals((-1126), cassandraHost1.getMaxActive());
      assertEquals(">Us0O0=9`(200.42.42.0):9160", cassandraHost1.getName());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost1);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      
      TNonblockingSocket tNonblockingSocket0 = new TNonblockingSocket(string0, cassandraHost0.DEFAULT_PORT);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(tNonblockingSocket0);
      
      int int0 = 3675;
      int int1 = 1943;
      TFastFramedTransport tFastFramedTransport0 = new TFastFramedTransport(tNonblockingSocket0, int0, int1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      assertNotNull(tFastFramedTransport0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      hThriftClient0.transport = (TTransport) tFastFramedTransport0;
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      boolean boolean0 = hThriftClient0.isOpen();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "%n@HS'S?NDp<1S5";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("%n@HS'S?NDp<1S5:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("%n@HS'S?NDp<1S5", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      int int0 = (-1131);
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals("%n@HS'S?NDp<1S5:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("%n@HS'S?NDp<1S5", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1131), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      int int1 = 2;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals("%n@HS'S?NDp<1S5:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("%n@HS'S?NDp<1S5", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1131), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertFalse(int0 == int1);
      
      cassandraHost0.setMaxActive(int1);
      assertEquals("%n@HS'S?NDp<1S5:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("%n@HS'S?NDp<1S5", cassandraHost0.getHost());
      assertEquals(2, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1131), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertFalse(int1 == int0);
      
      String string1 = "keyspace reseting from {} to {}";
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("%n@HS'S?NDp<1S5:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("%n@HS'S?NDp<1S5", cassandraHost0.getHost());
      assertEquals(2, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1131), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean1 = cassandraHost0.isPerformNameResolution();
      assertEquals("%n@HS'S?NDp<1S5:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("%n@HS'S?NDp<1S5", cassandraHost0.getHost());
      assertEquals(2, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1131), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("%n@HS'S?NDp<1S5(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "rP7.Wd('}a6";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      int int0 = 1818;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1818, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1818, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1818, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      boolean boolean1 = hThriftClient0.isAlreadyAuthenticated(hashMap0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1818, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = "$~W`FM/P[K.S: Siqk";
      boolean boolean2 = hThriftClient0.equals(string1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1818, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = hThriftClient1.isOpen();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1818, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1818, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(1392409281320L, long0);
      
      String string2 = hThriftClient0.toString();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1818, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("CassandraClient<rP7.Wd('}a6:9160-44>", string2);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string3 = hThriftClient1.toString();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1818, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("CassandraClient<rP7.Wd('}a6:9160-44>", string3);
      
      String string4 = hThriftClient1.toString();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1818, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(string4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("CassandraClient<rP7.Wd('}a6:9160-44>", string4);
      
      boolean boolean4 = hThriftClient0.isAlreadyAuthenticated(hashMap0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1818, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to rP7.Wd('}a6(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@27799df5
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "Open called on already open connection. You should not have gotten here.";
      long long0 = (-1923L);
      System.setCurrentTimeMillis(long0);
      int int0 = (-3656);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Open called on already open connection. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals((-3656), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Open called on already open connection. You should not have gotten here.(200.42.42.0):-3656", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Open called on already open connection. You should not have gotten here.(200.42.42.0):-3656", cassandraHost0.getName());
      assertEquals("Open called on already open connection. You should not have gotten here.:-3656", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      String string1 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      String string2 = "X";
      stringArray0[3] = string2;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(7, stringArray0.length);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals((-1923L), hThriftClient0.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Open called on already open connection. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals((-3656), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Open called on already open connection. You should not have gotten here.(200.42.42.0):-3656", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Open called on already open connection. You should not have gotten here.(200.42.42.0):-3656", cassandraHost0.getName());
      assertEquals("Open called on already open connection. You should not have gotten here.:-3656", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      assertEquals(7, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals((-1923L), hThriftClient0.getSinceLastUsed());
      assertEquals((-1923L), hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Open called on already open connection. You should not have gotten here.", cassandraHost0.getHost());
      assertEquals((-3656), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Open called on already open connection. You should not have gotten here.(200.42.42.0):-3656", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Open called on already open connection. You should not have gotten here.(200.42.42.0):-3656", cassandraHost0.getName());
      assertEquals("Open called on already open connection. You should not have gotten here.:-3656", cassandraHost0.getUrl());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient1);
      assertEquals(7, stringArray0.length);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string0, string2);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      boolean boolean0 = false;
      cassandraHost0.setLifo(boolean0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      stringArray0[1] = string0;
      boolean boolean1 = false;
      cassandraHost0.setUseSocketKeepalive(boolean1);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(5, stringArray0.length);
      
      long long0 = (-2226L);
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-2226L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-2226L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      assertEquals(5, stringArray0.length);
      
      hThriftClient0.startToUse();
      assertEquals(":9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-2226L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(5, stringArray0.length);
      
      hThriftClient0.startToUse();
      assertEquals(":9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-2226L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(5, stringArray0.length);
      
      hThriftClient0.clearAuthentication();
      assertEquals(":9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-2226L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(5, stringArray0.length);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals(":9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-2226L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost1.toString());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals((-2226L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost1.getName());
      assertEquals(":9160", cassandraHost1.getUrl());
      assertEquals("", cassandraHost1.getHost());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertFalse(cassandraHost1.getLifo());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost1);
      assertEquals(5, stringArray0.length);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      
      hThriftClient0.startToUse();
      assertEquals(":9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-2226L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(5, stringArray0.length);
      assertSame(cassandraHost0, cassandraHost1);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "?J{UO^?";
      int int0 = (-7);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost0.toString());
      assertEquals((-7), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("?J{UO^?", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("?J{UO^?:-7", cassandraHost0.getUrl());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0, boolean0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(0, stringArray0.length);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost0.toString());
      assertEquals((-7), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("?J{UO^?", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("?J{UO^?:-7", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      assertEquals(0, stringArray0.length);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost0.toString());
      assertEquals((-7), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("?J{UO^?", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("?J{UO^?:-7", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost1.getName());
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost1.toString());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals("?J{UO^?", cassandraHost1.getHost());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals("?J{UO^?:-7", cassandraHost1.getUrl());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost1.getLifo());
      assertEquals((-7), cassandraHost1.getPort());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost1);
      assertEquals(0, stringArray0.length);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      
      String string1 = hThriftClient0.keyspaceName;
      assertNull(string1);
      assertEquals(0, stringArray0.length);
      
      int int1 = 0;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int1);
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      assertFalse(int1 == int0);
      
      String string2 = "Could not flush transport (to be expected if the pool is shuttingdown) in close for client: ";
      hThriftClient0.startToUse();
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost0.toString());
      assertEquals((-7), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("?J{UO^?", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("?J{UO^?:-7", cassandraHost0.getUrl());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, stringArray0.length);
      assertNotSame(string0, string2);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("?J{UO^?(200.42.42.0):-7", cassandraHost0.toString());
      assertEquals((-7), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("?J{UO^?", cassandraHost0.getHost());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("?J{UO^?:-7", cassandraHost0.getUrl());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient1);
      assertEquals(0, stringArray0.length);
      assertNotSame(string0, string2);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      
      ColumnDef columnDef0 = new ColumnDef();
      assertFalse(columnDef0.isSetIndex_options());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      assertNull(columnDef0.getIndex_type());
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_type());
      assertNull(columnDef0.getValidation_class());
      assertFalse(columnDef0.isSetIndex_name());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetName());
      assertNotNull(columnDef0);
      
      String string3 = null;
      CfDef cfDef0 = new CfDef(string2, string3);
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertEquals(0, cfDef0.getId());
      assertFalse(cfDef0.isSetName());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertNull(cfDef0.getComment());
      assertNull(cfDef0.getSubcomparator_type());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertEquals("keys_only", cfDef0.getCaching());
      assertTrue(cfDef0.isSetKeyspace());
      assertFalse(cfDef0.isSetCompression_options());
      assertNull(cfDef0.getName());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertNull(cfDef0.getRow_cache_provider());
      assertTrue(cfDef0.isSetCaching());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetComment());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals("Could not flush transport (to be expected if the pool is shuttingdown) in close for client: ", cfDef0.getKeyspace());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertFalse(cfDef0.isSetId());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isReplicate_on_write());
      assertNull(cfDef0.getKey_validation_class());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertNotNull(cfDef0);
      assertFalse(string2.equals((Object)string0));
      
      Map<String, String> map0 = cfDef0.getCompaction_strategy_options();
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertEquals(0, cfDef0.getId());
      assertFalse(cfDef0.isSetName());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertNull(cfDef0.getComment());
      assertNull(cfDef0.getSubcomparator_type());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertEquals("keys_only", cfDef0.getCaching());
      assertTrue(cfDef0.isSetKeyspace());
      assertFalse(cfDef0.isSetCompression_options());
      assertNull(cfDef0.getName());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertNull(cfDef0.getRow_cache_provider());
      assertTrue(cfDef0.isSetCaching());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetComment());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals("Could not flush transport (to be expected if the pool is shuttingdown) in close for client: ", cfDef0.getKeyspace());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertFalse(cfDef0.isSetId());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isReplicate_on_write());
      assertNull(cfDef0.getKey_validation_class());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertNull(map0);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      
      ColumnDef columnDef1 = columnDef0.setIndex_options(map0);
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertEquals(0, cfDef0.getId());
      assertFalse(cfDef0.isSetName());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertNull(cfDef0.getComment());
      assertNull(cfDef0.getSubcomparator_type());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertEquals("keys_only", cfDef0.getCaching());
      assertTrue(cfDef0.isSetKeyspace());
      assertFalse(cfDef0.isSetCompression_options());
      assertNull(cfDef0.getName());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertTrue(cfDef0.isSetComparator_type());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertNull(cfDef0.getRow_cache_provider());
      assertTrue(cfDef0.isSetCaching());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetComment());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals("Could not flush transport (to be expected if the pool is shuttingdown) in close for client: ", cfDef0.getKeyspace());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertFalse(cfDef0.isSetId());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isReplicate_on_write());
      assertNull(cfDef0.getKey_validation_class());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertFalse(cfDef0.isSetKey_alias());
      assertFalse(columnDef1.isSetValidation_class());
      assertEquals(0, columnDef1.getIndex_optionsSize());
      assertFalse(columnDef1.isSetIndex_options());
      assertFalse(columnDef1.isSetIndex_type());
      assertNull(columnDef1.getIndex_name());
      assertFalse(columnDef1.isSetName());
      assertNull(columnDef1.getIndex_type());
      assertFalse(columnDef1.isSetIndex_name());
      assertNull(columnDef1.getValidation_class());
      assertFalse(columnDef0.isSetIndex_options());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      assertNull(columnDef0.getIndex_type());
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_type());
      assertNull(columnDef0.getValidation_class());
      assertFalse(columnDef0.isSetIndex_name());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetName());
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertNotNull(columnDef1);
      assertSame(columnDef1, columnDef0);
      assertNotSame(string2, string0);
      assertSame(columnDef0, columnDef1);
      assertFalse(string2.equals((Object)string0));
      
      ColumnDef columnDef2 = new ColumnDef(columnDef0);
      assertFalse(columnDef2.isSetValidation_class());
      assertFalse(columnDef2.isSetIndex_name());
      assertNull(columnDef2.getIndex_name());
      assertFalse(columnDef2.isSetName());
      assertNull(columnDef2.getIndex_type());
      assertNull(columnDef2.getValidation_class());
      assertFalse(columnDef2.isSetIndex_options());
      assertFalse(columnDef2.isSetIndex_type());
      assertEquals(0, columnDef2.getIndex_optionsSize());
      assertFalse(columnDef0.isSetIndex_options());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      assertNull(columnDef0.getIndex_type());
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_type());
      assertNull(columnDef0.getValidation_class());
      assertFalse(columnDef0.isSetIndex_name());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetName());
      assertNotNull(columnDef2);
      assertTrue(columnDef2.equals((Object)columnDef0));
      assertTrue(columnDef2.equals((Object)columnDef1));
      
      Map<String, String> map1 = columnDef2.getIndex_options();
      assertFalse(columnDef2.isSetValidation_class());
      assertFalse(columnDef2.isSetIndex_name());
      assertNull(columnDef2.getIndex_name());
      assertFalse(columnDef2.isSetName());
      assertNull(columnDef2.getIndex_type());
      assertNull(columnDef2.getValidation_class());
      assertFalse(columnDef2.isSetIndex_options());
      assertFalse(columnDef2.isSetIndex_type());
      assertEquals(0, columnDef2.getIndex_optionsSize());
      assertFalse(columnDef0.isSetIndex_options());
      assertEquals(0, columnDef0.getIndex_optionsSize());
      assertNull(columnDef0.getIndex_type());
      assertFalse(columnDef0.isSetValidation_class());
      assertFalse(columnDef0.isSetIndex_type());
      assertNull(columnDef0.getValidation_class());
      assertFalse(columnDef0.isSetIndex_name());
      assertNull(columnDef0.getIndex_name());
      assertFalse(columnDef0.isSetName());
      assertNull(map1);
      assertNotSame(columnDef2, columnDef1);
      assertNotSame(columnDef2, columnDef0);
      assertNotSame(columnDef0, columnDef2);
      assertSame(columnDef0, columnDef1);
      assertTrue(columnDef2.equals((Object)columnDef0));
      assertTrue(columnDef2.equals((Object)columnDef1));
      assertTrue(columnDef0.equals((Object)columnDef2));
      
      // Undeclared exception!
      try { 
        hThriftClient0.setAuthenticated(map1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "c7hR~";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertTrue(boolean0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      boolean boolean1 = hThriftClient1.equals(string0);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string1 = null;
      String string2 = "8*\"";
      String string3 = hashMap0.replace(string1, string2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string3);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      
      TTransport tTransport0 = null;
      TFastFramedTransport tFastFramedTransport0 = new TFastFramedTransport(tTransport0, cassandraHost0.DEFAULT_MAX_ACTIVE, cassandraHost0.DEFAULT_PORT);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      assertNotNull(tFastFramedTransport0);
      assertFalse(string0.equals((Object)string2));
      
      hThriftClient1.transport = (TTransport) tFastFramedTransport0;
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, hThriftClient1.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient1.transport.getBufferPosition());
      
      boolean boolean2 = hashMap0.remove((Object) string0, (Object) string2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      AutoExpandingBufferReadTransport autoExpandingBufferReadTransport0 = new AutoExpandingBufferReadTransport(cassandraHost0.DEFAULT_MAX_ACTIVE, cassandraHost0.DEFAULT_MAX_ACTIVE);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, autoExpandingBufferReadTransport0.getBytesRemainingInBuffer());
      assertEquals(0, autoExpandingBufferReadTransport0.getBufferPosition());
      assertTrue(autoExpandingBufferReadTransport0.isOpen());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(autoExpandingBufferReadTransport0);
      assertFalse(string0.equals((Object)string2));
      
      hThriftClient0.transport = (TTransport) autoExpandingBufferReadTransport0;
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, autoExpandingBufferReadTransport0.getBytesRemainingInBuffer());
      assertEquals(0, autoExpandingBufferReadTransport0.getBufferPosition());
      assertTrue(autoExpandingBufferReadTransport0.isOpen());
      
      boolean boolean3 = hThriftClient0.isAlreadyAuthenticated(hashMap0);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getCassandra();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandra_Client0);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string2));
      
      HThriftClient hThriftClient2 = hThriftClient0.close();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient2);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      
      Cassandra.Client cassandra_Client1 = hThriftClient2.getCassandra(string3);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandra_Client1);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(cassandra_Client1, cassandra_Client0);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = hThriftClient0.equals(object0);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      boolean boolean5 = hThriftClient2.isOpen();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5);
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertEquals(1392409281320L, long0);
      
      hThriftClient1.setAuthenticated(hashMap0);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertFalse(string0.equals((Object)string2));
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost1.getName());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("c7hR~", cassandraHost1.getHost());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("c7hR~:9160", cassandraHost1.getUrl());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost1);
      assertNotSame(string0, string2);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandraHost1, cassandraHost0);
      assertFalse(string0.equals((Object)string2));
      
      String string4 = hThriftClient0.toString();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(string4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("CassandraClient<c7hR~:9160-51>", string4);
      
      Cassandra.Client cassandra_Client2 = hThriftClient0.getCassandra();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandra_Client2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandra_Client2, cassandra_Client1);
      assertSame(cassandra_Client2, cassandra_Client0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      String string1 = null;
      String[] stringArray0 = new String[8];
      String string2 = "org.apache.http.message.AbstractHttpMessage";
      stringArray0[0] = string2;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = string1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringArray0[6] = string0;
      stringArray0[7] = string1;
      int int0 = 4211;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(4211, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string2));
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(8, stringArray0.length);
      
      String string3 = "Creating a new thrift connection to {}";
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(stringArray0[7], string3);
      assertEquals(8, stringArray0.length);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(4211, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      assertEquals(8, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(4211, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", cassandraHost1.getHost());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost1.getPort());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getLifo());
      assertEquals(":9160", cassandraHost1.getUrl());
      assertEquals(4211, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost1.getName());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost1.toString());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost1);
      assertEquals(8, stringArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(4211, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(8, stringArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(4211, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient1);
      assertEquals(8, stringArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      String string4 = "";
      boolean boolean1 = hThriftClient1.equals(string4);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(4211, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(8, stringArray0.length);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = hThriftClient1.isOpen();
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(4211, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(8, stringArray0.length);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra(stringArray0[0]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "c7hR~";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      boolean boolean0 = hThriftClient1.equals(string0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string1 = null;
      String string2 = "8*\"";
      String string3 = hashMap0.replace(string1, string2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string3);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      
      TTransport tTransport0 = null;
      TFastFramedTransport tFastFramedTransport0 = new TFastFramedTransport(tTransport0, cassandraHost0.DEFAULT_MAX_ACTIVE, cassandraHost0.DEFAULT_PORT);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      assertNotNull(tFastFramedTransport0);
      assertFalse(string0.equals((Object)string2));
      
      hThriftClient1.transport = (TTransport) tFastFramedTransport0;
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient1.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient1.transport.getBufferPosition());
      
      boolean boolean1 = hashMap0.remove((Object) string0, (Object) string2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = hThriftClient1.isAlreadyAuthenticated(hashMap0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.transport.TFastFramedTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "c7hR~";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertTrue(boolean0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string1 = null;
      String string2 = "8*\"";
      String string3 = hashMap0.replace(string1, string2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string3);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = hashMap0.remove((Object) string0, (Object) string2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      AutoExpandingBufferReadTransport autoExpandingBufferReadTransport0 = new AutoExpandingBufferReadTransport(cassandraHost0.DEFAULT_MAX_ACTIVE, cassandraHost0.DEFAULT_MAX_ACTIVE);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(autoExpandingBufferReadTransport0.isOpen());
      assertEquals(0, autoExpandingBufferReadTransport0.getBytesRemainingInBuffer());
      assertEquals(0, autoExpandingBufferReadTransport0.getBufferPosition());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(autoExpandingBufferReadTransport0);
      assertFalse(string0.equals((Object)string2));
      
      hThriftClient0.transport = (TTransport) autoExpandingBufferReadTransport0;
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(autoExpandingBufferReadTransport0.isOpen());
      assertEquals(0, autoExpandingBufferReadTransport0.getBytesRemainingInBuffer());
      assertEquals(0, autoExpandingBufferReadTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      boolean boolean3 = hThriftClient0.isAlreadyAuthenticated(hashMap0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getCassandra();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandra_Client0);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string2));
      
      HThriftClient hThriftClient2 = hThriftClient0.close();
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient2);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertFalse(string0.equals((Object)string2));
      
      Cassandra.Client cassandra_Client1 = hThriftClient2.getCassandra(string3);
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandra_Client1);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertNotSame(string0, string2);
      assertSame(cassandra_Client1, cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = hThriftClient0.equals(object0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = hThriftClient2.isOpen();
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertFalse(string0.equals((Object)string2));
      assertEquals(1392409281320L, long0);
      
      hThriftClient1.setAuthenticated(hashMap0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertFalse(string0.equals((Object)string2));
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("c7hR~", cassandraHost1.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost1.getName());
      assertEquals("c7hR~:9160", cassandraHost1.getUrl());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost1);
      assertNotSame(string0, string2);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(cassandraHost1, cassandraHost0);
      assertFalse(string0.equals((Object)string2));
      
      String string4 = "CassandraClient<JS+':9160-898>";
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra(string4);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // Code is not implemented
         //
         verifyException("org.apache.thrift.transport.AutoExpandingBufferReadTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      String string1 = null;
      boolean boolean0 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      String[] stringArray0 = new String[8];
      String string2 = "org.apache.http.message.AbstractHttpMessage";
      stringArray0[0] = string2;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string1;
      stringArray0[5] = string1;
      stringArray0[6] = string0;
      stringArray0[7] = string1;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(8, stringArray0.length);
      
      String string3 = "*reating\\a new thrift connection to {}";
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(stringArray0[7], string3);
      assertEquals(8, stringArray0.length);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      assertEquals(8, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(":9160", cassandraHost1.getUrl());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost1.getName());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost1.toString());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseThriftFramedTransport());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost1.getHost());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost1);
      assertEquals(8, stringArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string4 = "java.lang.String@0000000003";
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(8, stringArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient1);
      assertEquals(8, stringArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        hThriftClient1.equals(stringArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "rP7.Wd('}a6";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      int int0 = 1825;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      boolean boolean1 = hThriftClient0.isAlreadyAuthenticated(hashMap0);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = "$~W`FM/P[K.S: Siqk";
      boolean boolean2 = hThriftClient0.equals(string1);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = hThriftClient1.isOpen();
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(1392409281320L, long0);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 9160);
      boolean boolean4 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      String string2 = hThriftClient0.toString();
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("CassandraClient<rP7.Wd('}a6:9160-54>", string2);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string3 = hThriftClient1.toString();
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("CassandraClient<rP7.Wd('}a6:9160-54>", string3);
      
      String string4 = hThriftClient1.toString();
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("CassandraClient<rP7.Wd('}a6:9160-54>", string4);
      
      boolean boolean5 = hThriftClient0.isAlreadyAuthenticated(hashMap0);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5);
      
      HThriftClient hThriftClient2 = hThriftClient0.open();
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      boolean boolean6 = hThriftClient2.equals(string3);
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6);
      
      hThriftClient2.startToUse();
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("rP7.Wd('}a6", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1825, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("rP7.Wd('}a6:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("rP7.Wd('}a6(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0L, hThriftClient2.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        hThriftClient2.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      long long0 = (-1687L);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-101);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-38);
      byteArray0[2] = byte2;
      byte byte3 = (byte)87;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)79;
      byteArray0[5] = byte5;
      byte byte6 = (byte)50;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-68);
      byteArray0[8] = byte8;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-101), (byte) (-38), (byte)87, (byte)0, (byte)79, (byte)50, (byte)0, (byte) (-68)}, byteArray0);
      
      System.setCurrentTimeMillis(long0);
      String string0 = "java.lang.String@0000000003";
      int int0 = (-217);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-217), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      long long1 = 633L;
      cassandraHost0.setMaxWaitTimeWhenExhausted(long1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-217), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(633L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(long1 == long0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-217), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(633L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1687L), hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient0);
      
      long long2 = hThriftClient0.getSinceLastUsed();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-217), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(633L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1687L), hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals((-1687L), long2);
      
      String string1 = hThriftClient0.toString();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-217), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(633L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1687L), hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-217), cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(633L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1687L), hThriftClient0.getSinceLastUsed());
      assertEquals((-1687L), hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "c7hR~";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient0);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertTrue(boolean0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string1 = null;
      String string2 = "8*\"";
      String string3 = hashMap0.replace(string1, string2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string3);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = hashMap0.remove((Object) string0, (Object) string2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      AutoExpandingBufferReadTransport autoExpandingBufferReadTransport0 = new AutoExpandingBufferReadTransport(cassandraHost0.DEFAULT_MAX_ACTIVE, cassandraHost0.DEFAULT_MAX_ACTIVE);
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, autoExpandingBufferReadTransport0.getBufferPosition());
      assertTrue(autoExpandingBufferReadTransport0.isOpen());
      assertEquals(0, autoExpandingBufferReadTransport0.getBytesRemainingInBuffer());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(autoExpandingBufferReadTransport0);
      assertFalse(string0.equals((Object)string2));
      
      hThriftClient0.transport = (TTransport) autoExpandingBufferReadTransport0;
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, autoExpandingBufferReadTransport0.getBufferPosition());
      assertTrue(autoExpandingBufferReadTransport0.isOpen());
      assertEquals(0, autoExpandingBufferReadTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      
      boolean boolean3 = hThriftClient0.isAlreadyAuthenticated(hashMap0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getCassandra();
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandra_Client0);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string2));
      
      HThriftClient hThriftClient2 = hThriftClient0.close();
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(hThriftClient2);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      
      long long0 = 0L;
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string2));
      
      Cassandra.Client cassandra_Client1 = hThriftClient2.getCassandra(string3);
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandra_Client1);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandra_Client1, cassandra_Client0);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = hThriftClient0.equals(object0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      boolean boolean5 = hThriftClient2.isOpen();
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5);
      
      long long1 = hThriftClient0.getSinceLastUsed();
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(long1 == long0);
      assertEquals(1392409281320L, long1);
      
      hThriftClient1.setAuthenticated(hashMap0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertFalse(string0.equals((Object)string2));
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals(9160, cassandraHost1.getPort());
      assertTrue(cassandraHost1.getLifo());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("c7hR~:9160", cassandraHost1.getUrl());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost1.getName());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals("c7hR~", cassandraHost1.getHost());
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost1);
      assertNotSame(string0, string2);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandraHost1, cassandraHost0);
      assertFalse(string0.equals((Object)string2));
      
      String string4 = "CassandraClient<JS+':9160-898>";
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra(string4);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // Code is not implemented
         //
         verifyException("org.apache.thrift.transport.AutoExpandingBufferReadTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "keyspace reseting from {} to {}";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("keyspace reseting from {} to {}", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("keyspace reseting from {} to {}:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      int int0 = 1827;
      int int1 = (-3598);
      cassandraHost0.setCassandraThriftSocketTimeout(int1);
      assertEquals("keyspace reseting from {} to {}", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("keyspace reseting from {} to {}:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-3598), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertFalse(int1 == int0);
      
      cassandraHost0.setMaxActive(int0);
      assertEquals("keyspace reseting from {} to {}", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("keyspace reseting from {} to {}:9160", cassandraHost0.getUrl());
      assertEquals(1827, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-3598), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertFalse(int0 == int1);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("keyspace reseting from {} to {}", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("keyspace reseting from {} to {}:9160", cassandraHost0.getUrl());
      assertEquals(1827, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-3598), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals("keyspace reseting from {} to {}", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("keyspace reseting from {} to {}:9160", cassandraHost0.getUrl());
      assertEquals(1827, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-3598), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      CassandraHost cassandraHost1 = hThriftClient1.getCassandraHost();
      assertEquals("keyspace reseting from {} to {}", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("keyspace reseting from {} to {}:9160", cassandraHost0.getUrl());
      assertEquals(1827, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-3598), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1827, cassandraHost1.getMaxActive());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost1.getName());
      assertEquals(9160, cassandraHost1.getPort());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("keyspace reseting from {} to {}", cassandraHost1.getHost());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals("keyspace reseting from {} to {}:9160", cassandraHost1.getUrl());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals((-3598), cassandraHost1.getCassandraThriftSocketTimeout());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost1, cassandraHost0);
      
      boolean boolean0 = hThriftClient0.equals(hThriftClient1);
      assertEquals("keyspace reseting from {} to {}", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("keyspace reseting from {} to {}:9160", cassandraHost0.getUrl());
      assertEquals(1827, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-3598), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("keyspace reseting from {} to {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "";
      int int0 = (-1);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      boolean boolean0 = true;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0, boolean0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(5, stringArray0.length);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient0);
      assertEquals(5, stringArray0.length);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient1);
      assertEquals(5, stringArray0.length);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(cassandraHost0.DEFAULT_PORT);
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(pipedInputStream0);
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(pipedInputStream0);
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(tIOStreamTransport0);
      
      boolean boolean1 = false;
      cassandraHost0.setUseSocketKeepalive(boolean1);
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean1 == boolean0);
      
      hThriftClient1.transport = (TTransport) tIOStreamTransport0;
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals((-1), hThriftClient1.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient1.transport.getBufferPosition());
      
      HThriftClient hThriftClient2 = new HThriftClient(cassandraHost0);
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient2);
      assertFalse(hThriftClient2.equals((Object)hThriftClient0));
      assertFalse(hThriftClient2.equals((Object)hThriftClient1));
      
      HThriftClient hThriftClient3 = hThriftClient2.close();
      assertEquals(1392409281320L, hThriftClient3.getSinceLastUsed());
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient3);
      assertNotSame(hThriftClient3, hThriftClient1);
      assertNotSame(hThriftClient3, hThriftClient0);
      assertSame(hThriftClient3, hThriftClient2);
      assertNotSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient3);
      assertNotSame(hThriftClient2, hThriftClient1);
      assertFalse(hThriftClient3.equals((Object)hThriftClient1));
      assertFalse(hThriftClient3.equals((Object)hThriftClient0));
      assertFalse(hThriftClient2.equals((Object)hThriftClient0));
      assertFalse(hThriftClient2.equals((Object)hThriftClient1));
      
      boolean boolean2 = hThriftClient2.isOpen();
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient3);
      assertNotSame(hThriftClient2, hThriftClient1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(hThriftClient2.equals((Object)hThriftClient0));
      assertFalse(hThriftClient2.equals((Object)hThriftClient1));
      assertFalse(boolean2);
      
      String string1 = "";
      Cassandra.Client cassandra_Client0 = hThriftClient1.cassandraClient;
      assertNull(cassandra_Client0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean3 = pipedInputStream0.markSupported();
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(string0, string1);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      HThriftClient hThriftClient4 = hThriftClient1.close();
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient4.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient4);
      assertEquals(5, stringArray0.length);
      assertSame(string0, string1);
      assertSame(hThriftClient4, hThriftClient1);
      assertSame(hThriftClient4, hThriftClient0);
      assertNotSame(hThriftClient4, hThriftClient2);
      assertNotSame(hThriftClient4, hThriftClient3);
      assertNotSame(hThriftClient0, hThriftClient3);
      assertSame(hThriftClient0, hThriftClient4);
      assertNotSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(hThriftClient1, hThriftClient3);
      assertSame(hThriftClient1, hThriftClient4);
      assertNotSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(hThriftClient4.equals((Object)hThriftClient2));
      assertFalse(hThriftClient4.equals((Object)hThriftClient3));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean3);
      assertFalse(hThriftClient0.equals((Object)hThriftClient3));
      assertFalse(hThriftClient0.equals((Object)hThriftClient2));
      assertFalse(hThriftClient1.equals((Object)hThriftClient3));
      assertFalse(hThriftClient1.equals((Object)hThriftClient2));
      
      String string2 = hThriftClient1.toString();
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(string2);
      assertEquals(5, stringArray0.length);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(hThriftClient0, hThriftClient3);
      assertSame(hThriftClient0, hThriftClient4);
      assertNotSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(hThriftClient1, hThriftClient3);
      assertSame(hThriftClient1, hThriftClient4);
      assertNotSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean3);
      assertFalse(hThriftClient0.equals((Object)hThriftClient3));
      assertFalse(hThriftClient0.equals((Object)hThriftClient2));
      assertFalse(hThriftClient1.equals((Object)hThriftClient3));
      assertFalse(hThriftClient1.equals((Object)hThriftClient2));
      assertEquals("CassandraClient<:-1-58>", string2);
      
      boolean boolean4 = hThriftClient1.isOpen();
      assertEquals((-1), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-1", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":-1", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(5, stringArray0.length);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(hThriftClient0, hThriftClient3);
      assertSame(hThriftClient0, hThriftClient4);
      assertNotSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(hThriftClient1, hThriftClient3);
      assertSame(hThriftClient1, hThriftClient4);
      assertNotSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(hThriftClient0.equals((Object)hThriftClient3));
      assertFalse(hThriftClient0.equals((Object)hThriftClient2));
      assertFalse(hThriftClient1.equals((Object)hThriftClient3));
      assertFalse(hThriftClient1.equals((Object)hThriftClient2));
      assertTrue(boolean4);
      
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        hThriftClient0.setAuthenticated(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      String string1 = null;
      String[] stringArray0 = new String[8];
      String string2 = "org.apache.http.message.AbstractHttpMessage";
      stringArray0[0] = string2;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = string1;
      stringArray0[6] = string0;
      stringArray0[7] = string1;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(8, stringArray0.length);
      
      String string3 = "*reating\\a new thrift connection to {}";
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(stringArray0[7], string3);
      assertEquals(8, stringArray0.length);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      assertEquals(8, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(":9160", cassandraHost1.getUrl());
      assertEquals("(127.0.0.1):9160", cassandraHost1.getName());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("", cassandraHost1.getHost());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost1.toString());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost1);
      assertEquals(8, stringArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(cassandraHost1, cassandraHost0);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)34;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-37);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)64;
      byteArray0[3] = byte3;
      byte byte4 = (byte)20;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-94);
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-49);
      byteArray0[8] = byte8;
      int int0 = 2582;
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0, int0, byte5);
      assertEquals(2582, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertNotNull(tMemoryInputTransport0);
      assertEquals(9, byteArray0.length);
      assertFalse(byte5 == byte3);
      assertFalse(byte5 == byte6);
      assertFalse(byte5 == byte2);
      assertFalse(byte5 == byte1);
      assertFalse(byte5 == byte0);
      assertFalse(byte5 == byte8);
      assertFalse(byte5 == byte4);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-37), (byte) (-1), (byte)64, (byte)20, (byte)0, (byte) (-94), (byte)0, (byte) (-49)}, byteArray0);
      
      TFramedTransport tFramedTransport0 = new TFramedTransport(tMemoryInputTransport0, byte1);
      assertEquals(2582, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFramedTransport0.getBufferPosition());
      assertEquals(0, tFramedTransport0.getBytesRemainingInBuffer());
      assertNotNull(tFramedTransport0);
      assertEquals(9, byteArray0.length);
      assertFalse(byte1 == byte4);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte8);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte7);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte6);
      assertFalse(byte1 == byte5);
      assertFalse(byte5 == byte3);
      assertFalse(byte5 == byte6);
      assertFalse(byte5 == byte2);
      assertFalse(byte5 == byte1);
      assertFalse(byte5 == byte0);
      assertFalse(byte5 == byte8);
      assertFalse(byte5 == byte4);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-37), (byte) (-1), (byte)64, (byte)20, (byte)0, (byte) (-94), (byte)0, (byte) (-49)}, byteArray0);
      
      hThriftClient0.transport = (TTransport) tFramedTransport0;
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(2582, tMemoryInputTransport0.getBufferPosition());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFramedTransport0.getBufferPosition());
      assertEquals(0, tFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      String string4 = "java.lang.String@0000000003";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(boolean0);
      
      boolean boolean1 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(8, stringArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient1);
      assertEquals(8, stringArray0.length);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      
      String string5 = "";
      boolean boolean2 = hThriftClient1.equals(string5);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(8, stringArray0.length);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string5);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertSame(string5, string0);
      assertNotSame(string5, string4);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra(stringArray0[0]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No writing allowed!
         //
         verifyException("org.apache.thrift.transport.TMemoryInputTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "128$}\"^ Sh";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean1 = false;
      cassandraHost0.setLifo(boolean1);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean1 == boolean0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      hThriftClient0.startToUse();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      int int0 = (-1131);
      boolean boolean2 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean2);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean2 == boolean1);
      
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1131), cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      int int1 = 3363;
      cassandraHost0.setCassandraThriftSocketTimeout(int1);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(int1 == int0);
      
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(int1);
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertNotNull(tMemoryBuffer0);
      assertFalse(int1 == int0);
      
      hThriftClient0.transport = (TTransport) tMemoryBuffer0;
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      TBinaryProtocol tBinaryProtocol0 = new TBinaryProtocol(tMemoryBuffer0, boolean1, cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(tBinaryProtocol0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(int1 == int0);
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tBinaryProtocol0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandra_Client0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(int1 == int0);
      
      hThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      
      boolean boolean3 = hThriftClient0.equals(string0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = hThriftClient0.toString();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CassandraClient<128$}\"^ Sh:9160-61>", string1);
      
      boolean boolean4 = hThriftClient0.isOpen();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-121);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)50;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-7);
      byteArray0[3] = byte3;
      int int2 = (-3598);
      int int3 = tMemoryBuffer0.read(byteArray0, byteArray0[3], int2);
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(4, byteArray0.length);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-3598), int3);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)1, (byte)50, (byte) (-7)}, byteArray0);
      
      Cassandra.Client cassandra_Client1 = hThriftClient0.getCassandra(string0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandra_Client1);
      assertNotSame(string0, string1);
      assertSame(cassandra_Client1, cassandra_Client0);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean5 = hThriftClient0.isOpen();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(3363, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost1.getUrl());
      assertEquals(9160, cassandraHost1.getPort());
      assertEquals("128$}\"^ Sh", cassandraHost1.getHost());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertTrue(cassandraHost1.getUseSocketKeepalive());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost1.toString());
      assertFalse(cassandraHost1.getLifo());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost1.getName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost1);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean6 = hThriftClient0.isOpen();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6);
      
      boolean boolean7 = hThriftClient0.equals(string0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "128$}\"^ Sh";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean1 = false;
      cassandraHost0.setLifo(boolean1);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean1 == boolean0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      hThriftClient0.startToUse();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      int int0 = (-1131);
      boolean boolean2 = true;
      hThriftClient0.keyspaceName = string0;
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      cassandraHost0.setUseThriftFramedTransport(boolean2);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean2 == boolean1);
      
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1131), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      int int1 = 3363;
      cassandraHost0.setCassandraThriftSocketTimeout(int1);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(int1 == int0);
      
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(int1);
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertNotNull(tMemoryBuffer0);
      assertFalse(int1 == int0);
      
      hThriftClient0.transport = (TTransport) tMemoryBuffer0;
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      
      TBinaryProtocol tBinaryProtocol0 = new TBinaryProtocol(tMemoryBuffer0, boolean1, cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(tBinaryProtocol0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(int1 == int0);
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tBinaryProtocol0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandra_Client0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(int1 == int0);
      
      hThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      
      boolean boolean3 = hThriftClient0.equals(string0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = hThriftClient0.toString();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CassandraClient<128$}\"^ Sh:9160-62>", string1);
      
      boolean boolean4 = hThriftClient0.isOpen();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-121);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)63;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-7);
      byteArray0[3] = byte3;
      int int2 = (-3598);
      int int3 = tMemoryBuffer0.read(byteArray0, byteArray0[3], int2);
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(8, byteArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-3598), int3);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)1, (byte)63, (byte) (-7), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Cassandra.Client cassandra_Client1 = hThriftClient0.getCassandra(string0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandra_Client1);
      assertNotSame(string0, string1);
      assertSame(cassandra_Client1, cassandra_Client0);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean5 = hThriftClient0.isOpen();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost1.getPort());
      assertEquals("128$}\"^ Sh", cassandraHost1.getHost());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost1.getName());
      assertEquals("128$}\"^ Sh:9160", cassandraHost1.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals(3363, cassandraHost1.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost1.getLifo());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertTrue(cassandraHost1.getUseSocketKeepalive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost1);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean6 = hThriftClient0.isOpen();
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6);
      
      boolean boolean7 = hThriftClient0.equals(string0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7);
      
      Cassandra.Client cassandra_Client2 = hThriftClient0.getCassandra(string0);
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandra_Client2);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandra_Client2, cassandra_Client1);
      assertSame(cassandra_Client2, cassandra_Client0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "128$}\"^ Sh";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean1 = false;
      cassandraHost0.setLifo(boolean1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean1 == boolean0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      hThriftClient0.startToUse();
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      int int0 = (-1131);
      boolean boolean2 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean2);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean2 == boolean1);
      
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals((-1131), cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      int int1 = 3363;
      cassandraHost0.setCassandraThriftSocketTimeout(int1);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(int1 == int0);
      
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(int1);
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertNotNull(tMemoryBuffer0);
      assertFalse(int1 == int0);
      
      hThriftClient0.transport = (TTransport) tMemoryBuffer0;
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      
      TBinaryProtocol tBinaryProtocol0 = new TBinaryProtocol(tMemoryBuffer0, boolean1, cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(tBinaryProtocol0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(int1 == int0);
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tBinaryProtocol0);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandra_Client0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(int1 == int0);
      
      hThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      
      boolean boolean3 = hThriftClient0.equals(string0);
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = hThriftClient0.toString();
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CassandraClient<128$}\"^ Sh:9160-63>", string1);
      
      boolean boolean4 = hThriftClient0.isOpen();
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-121);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      cassandra_Client0.send_describe_version();
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(3363, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("128$}\"^ Sh(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("128$}\"^ Sh:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("128$}\"^ Sh", cassandraHost0.getHost());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean4);
      assertFalse(int1 == int0);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)50;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-7);
      byteArray0[3] = byte3;
      int int2 = (-3598);
      int int3 = tMemoryBuffer0.read(byteArray0, byteArray0[3], int2);
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertTrue(tMemoryBuffer0.isOpen());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertEquals(4, byteArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-3598), int3);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)1, (byte)50, (byte) (-7)}, byteArray0);
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: set_keyspace failed: out of sequence response
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "c7hR~";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertTrue(boolean0);
      
      TTransport tTransport0 = null;
      TCompactProtocol tCompactProtocol0 = new TCompactProtocol(tTransport0);
      assertNotNull(tCompactProtocol0);
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tCompactProtocol0, tCompactProtocol0);
      assertNotNull(cassandra_Client0);
      
      hThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string1 = null;
      String string2 = "8*\"";
      String string3 = hThriftClient0.keyspaceName;
      assertNull(string3);
      
      AutoExpandingBufferReadTransport autoExpandingBufferReadTransport0 = new AutoExpandingBufferReadTransport(cassandraHost0.DEFAULT_MAX_ACTIVE, cassandraHost0.DEFAULT_MAX_ACTIVE);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0, autoExpandingBufferReadTransport0.getBytesRemainingInBuffer());
      assertEquals(0, autoExpandingBufferReadTransport0.getBufferPosition());
      assertTrue(autoExpandingBufferReadTransport0.isOpen());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(autoExpandingBufferReadTransport0);
      assertFalse(string0.equals((Object)string2));
      
      hThriftClient0.transport = (TTransport) autoExpandingBufferReadTransport0;
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, autoExpandingBufferReadTransport0.getBytesRemainingInBuffer());
      assertEquals(0, autoExpandingBufferReadTransport0.getBufferPosition());
      assertTrue(autoExpandingBufferReadTransport0.isOpen());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      
      boolean boolean2 = hThriftClient0.isAlreadyAuthenticated(hashMap0);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean2);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      
      Cassandra.Client cassandra_Client1 = hThriftClient1.getCassandra(string3);
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandra_Client1);
      assertNotSame(string0, string2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandra_Client1, cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = hThriftClient0.equals(object0);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = hThriftClient0.isOpen();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      hThriftClient0.clearAuthentication();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      assertEquals(1392409281320L, long0);
      
      hThriftClient0.setAuthenticated(hashMap0);
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(string0.equals((Object)string2));
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals("c7hR~", cassandraHost0.getHost());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("c7hR~:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost1.getName());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("c7hR~(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals("c7hR~", cassandraHost1.getHost());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("c7hR~:9160", cassandraHost1.getUrl());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost1);
      assertNotSame(string0, string2);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandraHost1, cassandraHost0);
      assertFalse(string0.equals((Object)string2));
      
      String string4 = "CassandraClient<JS+':9160-898>";
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.protocol.TCompactProtocol", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      boolean boolean0 = cassandraHost0.isPerformNameResolution();
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean0);
      
      boolean boolean1 = cassandraHost0.isPerformNameResolution();
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      
      cassandraHost0.setMaxActive(int0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      
      boolean boolean2 = cassandraHost0.isPerformNameResolution();
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = hThriftClient0.isOpen();
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(":0", cassandraHost1.getUrl());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost1.getName());
      assertEquals("(127.0.0.1):0", cassandraHost1.toString());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost1.getPort());
      assertEquals("", cassandraHost1.getHost());
      assertEquals(0, cassandraHost1.getMaxActive());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      
      int int1 = (-652);
      cassandraHost0.setMaxActive(int1);
      assertEquals((-652), cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      hThriftClient0.clearAuthentication();
      assertEquals((-652), cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(int0 == int1);
      
      boolean boolean4 = hThriftClient0.equals(string0);
      assertEquals((-652), cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(int0 == int1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):0 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "Nn*eeWD0v%_vT)g7't'";
      int int0 = 50;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals("Nn*eeWD0v%_vT)g7't'", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.toString());
      assertEquals("Nn*eeWD0v%_vT)g7't':50", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getPort());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals("Nn*eeWD0v%_vT)g7't'", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.toString());
      assertEquals("Nn*eeWD0v%_vT)g7't':50", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getPort());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      
      boolean boolean1 = false;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 50);
      boolean boolean2 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      cassandraHost0.setUseThriftFramedTransport(boolean1);
      assertEquals("Nn*eeWD0v%_vT)g7't'", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.toString());
      assertEquals("Nn*eeWD0v%_vT)g7't':50", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getPort());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals("Nn*eeWD0v%_vT)g7't'", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.toString());
      assertEquals("Nn*eeWD0v%_vT)g7't':50", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals("Nn*eeWD0v%_vT)g7't'", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.toString());
      assertEquals("Nn*eeWD0v%_vT)g7't':50", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getPort());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      hThriftClient0.startToUse();
      assertEquals("Nn*eeWD0v%_vT)g7't'", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.toString());
      assertEquals("Nn*eeWD0v%_vT)g7't':50", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(hThriftClient0, hThriftClient1);
      
      HThriftClient hThriftClient2 = hThriftClient1.open();
      assertEquals("Nn*eeWD0v%_vT)g7't'", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.toString());
      assertEquals("Nn*eeWD0v%_vT)g7't':50", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(0L, hThriftClient2.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(hThriftClient2);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      
      Cassandra.Client cassandra_Client0 = hThriftClient2.cassandraClient;
      assertNull(cassandra_Client0);
      
      hThriftClient2.cassandraClient = cassandra_Client0;
      assertEquals("Nn*eeWD0v%_vT)g7't'", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.toString());
      assertEquals("Nn*eeWD0v%_vT)g7't':50", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(0L, hThriftClient2.getSinceLastUsed());
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals("Nn*eeWD0v%_vT)g7't'", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.toString());
      assertEquals("Nn*eeWD0v%_vT)g7't':50", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(0L, long0);
      
      long long1 = hThriftClient0.getSinceLastUsed();
      assertEquals("Nn*eeWD0v%_vT)g7't'", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Nn*eeWD0v%_vT)g7't'(200.42.42.0):50", cassandraHost0.toString());
      assertEquals("Nn*eeWD0v%_vT)g7't':50", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "9LX+*y% T<{?.";
      int int0 = 100000;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100000, cassandraHost0.getPort());
      assertEquals("9LX+*y% T<{?.", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.getName());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals("9LX+*y% T<{?.:100000", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      
      long long0 = (-2L);
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = null;
      boolean boolean0 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100000, cassandraHost0.getPort());
      assertEquals("9LX+*y% T<{?.", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.getName());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals("9LX+*y% T<{?.:100000", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertEquals((-2L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100000, cassandraHost0.getPort());
      assertEquals("9LX+*y% T<{?.", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.getName());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals("9LX+*y% T<{?.:100000", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals((-2L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100000, cassandraHost0.getPort());
      assertEquals("9LX+*y% T<{?.", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.getName());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals("9LX+*y% T<{?.:100000", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient0);
      
      boolean boolean2 = hThriftClient0.isOpen();
      assertEquals((-2L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100000, cassandraHost0.getPort());
      assertEquals("9LX+*y% T<{?.", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.getName());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals("9LX+*y% T<{?.:100000", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = false;
      boolean boolean4 = true;
      cassandraHost0.setUseSocketKeepalive(boolean4);
      assertEquals((-2L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100000, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("9LX+*y% T<{?.", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.getName());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals("9LX+*y% T<{?.:100000", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      cassandraHost0.setLifo(boolean3);
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-2L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100000, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("9LX+*y% T<{?.", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.getName());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals("9LX+*y% T<{?.:100000", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean4);
      
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertFalse(cassandraHost0.getLifo());
      assertEquals((-2L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100000, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("9LX+*y% T<{?.", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.getName());
      assertEquals("9LX+*y% T<{?.(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals("9LX+*y% T<{?.:100000", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient0, hThriftClient1);
      
      // Undeclared exception!
      try { 
        hThriftClient1.open();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:100000
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNotNull(hThriftClient0);
      
      SaslClient saslClient0 = mock(SaslClient.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(saslClient0).getMechanismName();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)64;
      byteArray0[0] = byte0;
      byte byte1 = (byte)23;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-74);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-98);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)31;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-81);
      byteArray0[6] = byte6;
      byte byte7 = (byte)75;
      byteArray0[7] = byte7;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)64, (byte)23, (byte) (-74), (byte) (-98), (byte)0, (byte)31, (byte) (-81), (byte)75}, byteArray0);
      
      TTransport tTransport0 = hThriftClient0.transport;
      assertNull(tTransport0);
      
      TSaslClientTransport tSaslClientTransport0 = new TSaslClientTransport(saslClient0, tTransport0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tSaslClientTransport0.getBufferPosition());
      assertEquals((-1), tSaslClientTransport0.getBytesRemainingInBuffer());
      assertNotNull(tSaslClientTransport0);
      
      hThriftClient0.transport = (TTransport) tSaslClientTransport0;
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tSaslClientTransport0.getBufferPosition());
      assertEquals((-1), tSaslClientTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hThriftClient0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.transport.TSaslTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "java.io.PipedInputStream@0000000007";
      int int0 = 3084;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(3084, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      
      CassandraHost cassandraHost1 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNotNull(hThriftClient0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(pipedInputStream0, pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertNotNull(tIOStreamTransport0);
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      
      String string1 = null;
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra(string1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNotNull(cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      
      boolean boolean0 = hThriftClient0.isOpen();
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertSame(hThriftClient0, hThriftClient1);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        hThriftClient1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }
}
