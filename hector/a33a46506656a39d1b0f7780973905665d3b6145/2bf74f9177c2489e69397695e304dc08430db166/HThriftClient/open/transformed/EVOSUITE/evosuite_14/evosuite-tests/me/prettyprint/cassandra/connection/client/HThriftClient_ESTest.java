/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 04:56:36 GMT 2021
 */

package me.prettyprint.cassandra.connection.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;
import javax.security.sasl.SaslClient;
import me.prettyprint.cassandra.connection.client.HThriftClient;
import me.prettyprint.cassandra.service.CassandraHost;
import org.apache.cassandra.thrift.AuthenticationRequest;
import org.apache.cassandra.thrift.Cassandra;
import org.apache.cassandra.thrift.CfDef;
import org.apache.cassandra.thrift.ColumnParent;
import org.apache.cassandra.thrift.ConsistencyLevel;
import org.apache.cassandra.thrift.KeyRange;
import org.apache.cassandra.thrift.KsDef;
import org.apache.cassandra.thrift.SlicePredicate;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TCompactProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFastFramedTransport;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TMemoryBuffer;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TNonblockingSocket;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TSaslClientTransport;
import org.apache.thrift.transport.TSaslServerTransport;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.helpers.NOPLogger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HThriftClient_ESTest extends HThriftClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "";
      int int0 = 403;
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      String[] stringArray0 = new String[15];
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertEquals(15, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(15, stringArray0.length);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(403, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      Cassandra.Client cassandra_Client0 = hThriftClient0.getcassandraClient();
      assertEquals(15, stringArray0.length);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(403, hThriftClient0.timeout);
      assertNull(cassandra_Client0);
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.setlog(hThriftClient0.log);
      assertEquals(15, stringArray0.length);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(403, hThriftClient0.timeout);
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.setcassandraClient(hThriftClient0.cassandraClient);
      assertEquals(15, stringArray0.length);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(403, hThriftClient0.timeout);
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals(15, stringArray0.length);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertEquals(9160, cassandraHost1.getPort());
      assertTrue(cassandraHost1.getLifo());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals("", cassandraHost1.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost1.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost1.getName());
      assertEquals(403, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals(":9160", cassandraHost1.getUrl());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = ">s~";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(">s~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">s~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(">s~", cassandraHost0.getHost());
      assertEquals(">s~:9160", cassandraHost0.getUrl());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(">s~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">s~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(">s~", cassandraHost0.getHost());
      assertEquals(">s~:9160", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      Logger logger0 = hThriftClient0.getlog();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertNotNull(logger0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(">s~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">s~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(">s~", cassandraHost0.getHost());
      assertEquals(">s~:9160", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertFalse(boolean0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(">s~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">s~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(">s~", cassandraHost0.getHost());
      assertEquals(">s~:9160", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      long long0 = hThriftClient0.getmySerial();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(1L, long0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(">s~(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(">s~(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(">s~", cassandraHost0.getHost());
      assertEquals(">s~:9160", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      String string1 = hThriftClient0.getkeyspaceName();
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(string1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = hThriftClient0.getparams();
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(tTransport0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(3L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(3L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      boolean boolean0 = hThriftClient1.isOpen();
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(3L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(boolean0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(3L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      hThriftClient0.setparams(hThriftClient0.params);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(3L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(3L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      AtomicLong atomicLong0 = hThriftClient0.getserial();
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(atomicLong0);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(3L, atomicLong0.longValue());
      assertEquals(3, atomicLong0.intValue());
      assertEquals("3", atomicLong0.toString());
      assertEquals(3.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((short)3, atomicLong0.shortValue());
      assertEquals(3.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(3L, atomicLong0.get());
      assertEquals((byte)3, atomicLong0.byteValue());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):9160 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = " , ";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , :9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(" , (200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(" , (200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(" , ", cassandraHost0.getHost());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , :9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(" , (200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(" , (200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(" , ", cassandraHost0.getHost());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      OutputStream outputStream0 = null;
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(outputStream0);
      assertNotNull(tIOStreamTransport0);
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , :9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(" , (200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(" , (200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(" , ", cassandraHost0.getHost());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , :9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(" , (200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(" , (200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(" , ", cassandraHost0.getHost());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getCassandra(hThriftClient0.keyspaceName);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , :9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(" , (200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(" , (200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(" , ", cassandraHost0.getHost());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(hThriftClient0.NAME_FORMAT);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot write to null outputStream
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "ms0_S!@q9";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ms0_S!@q9:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("ms0_S!@q9", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ms0_S!@q9:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("ms0_S!@q9", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      OutputStream outputStream0 = null;
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(outputStream0);
      assertNotNull(tIOStreamTransport0);
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ms0_S!@q9:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("ms0_S!@q9", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      
      hThriftClient0.setkeyspaceName(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ms0_S!@q9:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("ms0_S!@q9", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ms0_S!@q9", hThriftClient0.getkeyspaceName());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra(hThriftClient0.keyspaceName);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertNotNull(cassandra_Client0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ms0_S!@q9:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("ms0_S!@q9", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ms0_S!@q9", hThriftClient0.getkeyspaceName());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(hThriftClient0.credentials);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertTrue(boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ms0_S!@q9:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("ms0_S!@q9", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ms0_S!@q9", hThriftClient0.getkeyspaceName());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      long long0 = hThriftClient0.getuseageStartTime();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0L, long0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ms0_S!@q9:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("ms0_S!@q9(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("ms0_S!@q9", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("ms0_S!@q9", hThriftClient0.getkeyspaceName());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      int int0 = hThriftClient0.getTimeout(cassandraHost0);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, int0);
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1392409281320L, long0);
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      Map<String, String> map0 = hThriftClient0.getcredentials();
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(map0);
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "Tranport open satus N} for client {}";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Tranport open satus N} for client {}", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open satus N} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Tranport open satus N} for client {}", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open satus N} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      String string1 = hThriftClient0.getNAME_FORMAT();
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("CassandraClient<%s-%d>", string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Tranport open satus N} for client {}", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open satus N} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.setAuthenticated(hThriftClient0.credentials);
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Tranport open satus N} for client {}", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open satus N} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.startToUse();
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Tranport open satus N} for client {}", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open satus N} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_LIFO);
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Tranport open satus N} for client {}", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open satus N} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      
      boolean boolean0 = hThriftClient0.equals(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Tranport open satus N} for client {}", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open satus N} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open satus N} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to Tranport open satus N} for client {}(200.42.42.0):9160 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@272bb970
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      KsDef ksDef0 = new KsDef();
      assertTrue(ksDef0.durable_writes);
      assertEquals(0, ksDef0.replication_factor);
      assertNotNull(ksDef0);
      assertFalse(ksDef0.isSetName());
      assertFalse(ksDef0.isSetDurable_writes());
      assertFalse(ksDef0.isSetReplication_factor());
      assertFalse(ksDef0.isSetStrategy_class());
      assertFalse(ksDef0.isSetStrategy_options());
      assertNull(ksDef0.getName());
      assertTrue(ksDef0.isDurable_writes());
      assertNull(ksDef0.getStrategy_class());
      assertEquals(0, ksDef0.getCf_defsSize());
      assertFalse(ksDef0.isSetCf_defs());
      assertEquals(0, ksDef0.getReplication_factor());
      assertEquals(0, ksDef0.getStrategy_optionsSize());
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(ksDef0.strategy_options);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertTrue(ksDef0.durable_writes);
      assertEquals(0, ksDef0.replication_factor);
      assertFalse(boolean0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertFalse(ksDef0.isSetName());
      assertFalse(ksDef0.isSetDurable_writes());
      assertFalse(ksDef0.isSetReplication_factor());
      assertFalse(ksDef0.isSetStrategy_class());
      assertFalse(ksDef0.isSetStrategy_options());
      assertNull(ksDef0.getName());
      assertTrue(ksDef0.isDurable_writes());
      assertNull(ksDef0.getStrategy_class());
      assertEquals(0, ksDef0.getCf_defsSize());
      assertFalse(ksDef0.isSetCf_defs());
      assertEquals(0, ksDef0.getReplication_factor());
      assertEquals(0, ksDef0.getStrategy_optionsSize());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "&2x<[BrJ_";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(hThriftClient0.timeout);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(tMemoryBuffer0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      hThriftClient0.setuseageStartTime(cassandraHost0.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      
      hThriftClient0.settransport(tMemoryBuffer0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertNotNull(cassandra_Client0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("&2x<[BrJ_(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("&2x<[BrJ_", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "`a<t(P;";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("`a<t(P;", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("`a<t(P;(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("`a<t(P;:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("`a<t(P;(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(10L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getLifo());
      assertEquals("`a<t(P;", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("`a<t(P;(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("`a<t(P;:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("`a<t(P;(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(10L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "ys#HY9l";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals("ys#HY9l", cassandraHost0.getHost());
      assertEquals("ys#HY9l(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ys#HY9l:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("ys#HY9l(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("ys#HY9l", cassandraHost0.getHost());
      assertEquals("ys#HY9l(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ys#HY9l:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("ys#HY9l(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(11L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("ys#HY9l", cassandraHost0.getHost());
      assertEquals("ys#HY9l(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("ys#HY9l:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("ys#HY9l(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(11L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "T7,5f|&QT>Ei}4";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("T7,5f|&QT>Ei}4(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("T7,5f|&QT>Ei}4:9160", cassandraHost0.getUrl());
      assertEquals("T7,5f|&QT>Ei}4(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("T7,5f|&QT>Ei}4", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("T7,5f|&QT>Ei}4(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("T7,5f|&QT>Ei}4:9160", cassandraHost0.getUrl());
      assertEquals("T7,5f|&QT>Ei}4(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("T7,5f|&QT>Ei}4", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      
      // Undeclared exception!
      try { 
        hThriftClient0.equals(tSSLTransportFactory_TSSLTransportParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "xJ%s2&_Sw\\!SljN,r";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertNotNull(cassandraHost0);
      assertEquals("xJ%s2&_Sw\\!SljN,r", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("xJ%s2&_Sw\\!SljN,r:9160", cassandraHost0.getUrl());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.getName());
      
      long long0 = 2747L;
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals("xJ%s2&_Sw\\!SljN,r", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2747L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("xJ%s2&_Sw\\!SljN,r:9160", cassandraHost0.getUrl());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.getName());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(13L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("xJ%s2&_Sw\\!SljN,r", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2747L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("xJ%s2&_Sw\\!SljN,r:9160", cassandraHost0.getUrl());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(13L, hThriftClient0.getmySerial());
      
      int int0 = hThriftClient0.getTimeout(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(13L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, int0);
      assertEquals("xJ%s2&_Sw\\!SljN,r", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2747L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("xJ%s2&_Sw\\!SljN,r:9160", cassandraHost0.getUrl());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(13L, hThriftClient0.getmySerial());
      
      hThriftClient0.params = tSSLTransportFactory_TSSLTransportParameters0;
      assertEquals("xJ%s2&_Sw\\!SljN,r", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2747L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("xJ%s2&_Sw\\!SljN,r:9160", cassandraHost0.getUrl());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(13L, hThriftClient0.getmySerial());
      
      hThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(13L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals("xJ%s2&_Sw\\!SljN,r", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2747L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("xJ%s2&_Sw\\!SljN,r:9160", cassandraHost0.getUrl());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(13L, hThriftClient0.getmySerial());
      
      boolean boolean0 = hThriftClient0.isOpen();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(13L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertFalse(boolean0);
      assertEquals("xJ%s2&_Sw\\!SljN,r", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2747L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("xJ%s2&_Sw\\!SljN,r:9160", cassandraHost0.getUrl());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(13L, hThriftClient0.getmySerial());
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(13L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      assertEquals("xJ%s2&_Sw\\!SljN,r", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(2747L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("xJ%s2&_Sw\\!SljN,r:9160", cassandraHost0.getUrl());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(13L, hThriftClient0.getmySerial());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("xJ%s2&_Sw\\!SljN,r:9160", cassandraHost1.getUrl());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost1.toString());
      assertEquals("xJ%s2&_Sw\\!SljN,r(200.42.42.0):9160", cassandraHost1.getName());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals("xJ%s2&_Sw\\!SljN,r", cassandraHost1.getHost());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(2747L, cassandraHost1.getMaxWaitTimeWhenExhausted());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(14L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      
      HThriftClient.log = hThriftClient1.log;
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      
      hThriftClient1.startToUse();
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(14L, hThriftClient1.mySerial);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      
      Logger logger0 = hThriftClient1.getlog();
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(14L, hThriftClient1.mySerial);
      assertNotNull(logger0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      
      hThriftClient0.clearAuthentication();
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      long long0 = hThriftClient1.getmySerial();
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(14L, hThriftClient1.mySerial);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(14L, long0);
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      
      String[] stringArray0 = new String[0];
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(0, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      
      hThriftClient0.setkeyspaceName(string0);
      assertEquals(0, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "L|n&KYznbD";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals("L|n&KYznbD(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("L|n&KYznbD(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("L|n&KYznbD:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("L|n&KYznbD", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("L|n&KYznbD(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("L|n&KYznbD(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("L|n&KYznbD:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("L|n&KYznbD", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      String string1 = "";
      String string2 = null;
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string1, hThriftClient0.keyspaceName, string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("L|n&KYznbD(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("L|n&KYznbD(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("L|n&KYznbD:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("L|n&KYznbD", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      boolean boolean0 = hThriftClient0.isOpen();
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
      assertEquals("L|n&KYznbD(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("L|n&KYznbD(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("L|n&KYznbD:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("L|n&KYznbD", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertEquals(1392409281320L, long0);
      assertEquals("L|n&KYznbD(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("L|n&KYznbD(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("L|n&KYznbD:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("L|n&KYznbD", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      String string1 = hThriftClient0.getkeyspaceName();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNull(string1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.clearAuthentication();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      String string2 = "Error on transport close for client: ";
      long long0 = 0L;
      hThriftClient0.setuseageStartTime(long0);
      assertFalse(string0.equals((Object)string2));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string2);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getcassandraClient();
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNull(cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "dUL8>y,kbO~!|1bp{r\\";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("dUL8>y,kbO~!|1bp{r\\", cassandraHost0.getHost());
      assertEquals("dUL8>y,kbO~!|1bp{r\\:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("dUL8>y,kbO~!|1bp{r\\(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("dUL8>y,kbO~!|1bp{r\\(200.42.42.0):9160", cassandraHost0.getName());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("dUL8>y,kbO~!|1bp{r\\", cassandraHost0.getHost());
      assertEquals("dUL8>y,kbO~!|1bp{r\\:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("dUL8>y,kbO~!|1bp{r\\(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("dUL8>y,kbO~!|1bp{r\\(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      Map<String, String> map0 = hThriftClient0.getcredentials();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(map0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("dUL8>y,kbO~!|1bp{r\\", cassandraHost0.getHost());
      assertEquals("dUL8>y,kbO~!|1bp{r\\:9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("dUL8>y,kbO~!|1bp{r\\(200.42.42.0):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("dUL8>y,kbO~!|1bp{r\\(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "MU^FgK?M)<&Npj";
      int int0 = 443;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals("MU^FgK?M)<&Npj(200.42.42.0):443", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(443, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("MU^FgK?M)<&Npj:443", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("MU^FgK?M)<&Npj", cassandraHost0.getHost());
      assertEquals("MU^FgK?M)<&Npj(200.42.42.0):443", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("MU^FgK?M)<&Npj(200.42.42.0):443", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(443, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("MU^FgK?M)<&Npj:443", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("MU^FgK?M)<&Npj", cassandraHost0.getHost());
      assertEquals("MU^FgK?M)<&Npj(200.42.42.0):443", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      TTransport tTransport0 = hThriftClient0.transport;
      assertNull(tTransport0);
      
      hThriftClient0.settransport(tTransport0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals("MU^FgK?M)<&Npj(200.42.42.0):443", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(443, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("MU^FgK?M)<&Npj:443", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("MU^FgK?M)<&Npj", cassandraHost0.getHost());
      assertEquals("MU^FgK?M)<&Npj(200.42.42.0):443", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to MU^FgK?M)<&Npj(200.42.42.0):443 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@272799dd
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "vUhME[V#r$W&q";
      int int0 = 100;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100, cassandraHost0.getPort());
      assertEquals("vUhME[V#r$W&q:100", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("vUhME[V#r$W&q", cassandraHost0.getHost());
      assertEquals("vUhME[V#r$W&q(200.42.42.0):100", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("vUhME[V#r$W&q(200.42.42.0):100", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100, cassandraHost0.getPort());
      assertEquals("vUhME[V#r$W&q:100", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("vUhME[V#r$W&q", cassandraHost0.getHost());
      assertEquals("vUhME[V#r$W&q(200.42.42.0):100", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("vUhME[V#r$W&q(200.42.42.0):100", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      Map<String, String> map0 = hThriftClient0.getcredentials();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertNotNull(map0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100, cassandraHost0.getPort());
      assertEquals("vUhME[V#r$W&q:100", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("vUhME[V#r$W&q", cassandraHost0.getHost());
      assertEquals("vUhME[V#r$W&q(200.42.42.0):100", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("vUhME[V#r$W&q(200.42.42.0):100", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      hThriftClient0.setAuthenticated(map0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(100, cassandraHost0.getPort());
      assertEquals("vUhME[V#r$W&q:100", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("vUhME[V#r$W&q", cassandraHost0.getHost());
      assertEquals("vUhME[V#r$W&q(200.42.42.0):100", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("vUhME[V#r$W&q(200.42.42.0):100", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = ".\"|f";
      int int0 = (-4525);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(".\"|f:-4525", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(".\"|f(200.42.42.0):-4525", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(".\"|f(200.42.42.0):-4525", cassandraHost0.toString());
      assertEquals((-4525), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(".\"|f", cassandraHost0.getHost());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(".\"|f:-4525", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(".\"|f(200.42.42.0):-4525", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(".\"|f(200.42.42.0):-4525", cassandraHost0.toString());
      assertEquals((-4525), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(".\"|f", cassandraHost0.getHost());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      int int0 = 2267;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":2267", cassandraHost0.getUrl());
      assertEquals(2267, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2267", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2267", cassandraHost0.toString());
      
      long long0 = 0L;
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":2267", cassandraHost0.getUrl());
      assertEquals(2267, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2267", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2267", cassandraHost0.toString());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":2267", cassandraHost0.getUrl());
      assertEquals(2267, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2267", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2267", cassandraHost0.toString());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      
      HThriftClient hThriftClient1 = new HThriftClient(cassandraHost0, hThriftClient0.params);
      assertFalse(hThriftClient1.equals((Object)hThriftClient0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(10L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":2267", cassandraHost0.getUrl());
      assertEquals(2267, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2267", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2267", cassandraHost0.toString());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(10L, hThriftClient1.getmySerial());
      
      boolean boolean0 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":2267", cassandraHost0.getUrl());
      assertEquals(2267, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2267", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2267", cassandraHost0.toString());
      
      boolean boolean1 = hThriftClient0.equals(hThriftClient1);
      assertFalse(hThriftClient0.equals((Object)hThriftClient1));
      assertFalse(hThriftClient1.equals((Object)hThriftClient0));
      assertFalse(boolean1 == boolean0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(10L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotSame(hThriftClient0, hThriftClient1);
      assertNotSame(hThriftClient1, hThriftClient0);
      assertFalse(boolean1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":2267", cassandraHost0.getUrl());
      assertEquals(2267, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2267", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2267", cassandraHost0.toString());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(10L, hThriftClient1.getmySerial());
      
      String string1 = hThriftClient0.getNAME_FORMAT();
      assertFalse(hThriftClient0.equals((Object)hThriftClient1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(hThriftClient0, hThriftClient1);
      assertNotSame(string1, string0);
      assertEquals("CassandraClient<%s-%d>", string1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":2267", cassandraHost0.getUrl());
      assertEquals(2267, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2267", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2267", cassandraHost0.toString());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters1 = hThriftClient0.getparams();
      assertFalse(string0.equals((Object)string1));
      assertFalse(hThriftClient0.equals((Object)hThriftClient1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNull(tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(string0, string1);
      assertNotSame(hThriftClient0, hThriftClient1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":2267", cassandraHost0.getUrl());
      assertEquals(2267, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):2267", cassandraHost0.getName());
      assertEquals("(127.0.0.1):2267", cassandraHost0.toString());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "NYBF";
      int int0 = 2022;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals(2022, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("NYBF", cassandraHost0.getHost());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("NYBF:2022", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(2022, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("NYBF", cassandraHost0.getHost());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("NYBF:2022", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(20L, hThriftClient0.mySerial);
      assertEquals(20L, hThriftClient0.getmySerial());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(11L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(2022, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("NYBF", cassandraHost0.getHost());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("NYBF:2022", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(11L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(20L, hThriftClient0.mySerial);
      assertEquals(20L, hThriftClient1.mySerial);
      assertEquals(20L, hThriftClient0.getmySerial());
      assertEquals(20L, hThriftClient1.getmySerial());
      
      boolean boolean0 = hThriftClient1.isOpen();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(11L, hThriftClient1.mySerial);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(boolean0);
      assertEquals(2022, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("NYBF", cassandraHost0.getHost());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("NYBF:2022", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(11L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(20L, hThriftClient0.mySerial);
      assertEquals(20L, hThriftClient1.mySerial);
      assertEquals(20L, hThriftClient0.getmySerial());
      assertEquals(20L, hThriftClient1.getmySerial());
      
      hThriftClient0.setkeyspaceName(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(2022, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("NYBF", cassandraHost0.getHost());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("NYBF:2022", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("NYBF", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(20L, hThriftClient0.mySerial);
      assertEquals(20L, hThriftClient0.getmySerial());
      
      String string1 = hThriftClient0.getkeyspaceName();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(string1, string0);
      assertEquals("NYBF", string1);
      assertEquals(2022, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("NYBF", cassandraHost0.getHost());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("NYBF:2022", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("NYBF", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(20L, hThriftClient0.mySerial);
      assertEquals(20L, hThriftClient0.getmySerial());
      
      long long0 = hThriftClient0.getuseageStartTime();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(0L, long0);
      assertEquals(2022, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("NYBF", cassandraHost0.getHost());
      assertEquals("NYBF(200.42.42.0):2022", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("NYBF:2022", cassandraHost0.getUrl());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("NYBF", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(20L, hThriftClient0.mySerial);
      assertEquals(20L, hThriftClient0.getmySerial());
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.startToUse();
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      String string0 = null;
      String string1 = "hWUfQZ";
      String string2 = ")bx&|(r^m]S!T?MlBe";
      String string3 = "Creating a new thrift connection to {}";
      String string4 = "";
      String string5 = "";
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(hThriftClient0.NAME_FORMAT, string4, string2, string5);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(string4, string5);
      assertNotSame(string4, string1);
      assertSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(hThriftClient0.NAME_FORMAT, string1, string2, string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string5, hThriftClient0.NAME_FORMAT, string1, string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      String string6 = null;
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string3, string6);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      
      String string7 = "k(\\7wNd+&";
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string0, string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      
      hThriftClient0.params = tSSLTransportFactory_TSSLTransportParameters0;
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      String string8 = hThriftClient0.getkeyspaceName();
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(string8);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      Cassandra.Client cassandra_Client0 = hThriftClient0.getcassandraClient();
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(cassandra_Client0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(cassandraHost1);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      Logger logger0 = hThriftClient0.getlog();
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(logger0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, long0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      hThriftClient0.clearAuthentication();
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      long long1 = hThriftClient0.getmySerial();
      assertFalse(long1 == long0);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(12L, long1);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      // Undeclared exception!
      try { 
        hThriftClient0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      
      int int0 = 0;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(13L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(13L, hThriftClient0.getmySerial());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):9160 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "";
      int int0 = (-2822);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-2822), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-2822", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-2822), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-2822", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(14L, hThriftClient0.getmySerial());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(14L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-2822), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-2822", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      long long0 = (-795L);
      boolean boolean0 = false;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-2822), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-2822", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      hThriftClient0.useageStartTime = long0;
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-2822), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-2822", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-795L), hThriftClient0.getuseageStartTime());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertEquals(1392409282115L, hThriftClient0.getSinceLastUsed());
      
      hThriftClient1.startToUse();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(14L, hThriftClient1.mySerial);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-2822), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-2822", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.cassandraClient;
      assertNull(cassandra_Client0);
      
      hThriftClient1.setAuthenticated(hThriftClient0.credentials);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(14L, hThriftClient1.mySerial);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-2822), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-2822", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      TFastFramedTransport tFastFramedTransport0 = new TFastFramedTransport(hThriftClient1.transport);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(14L, hThriftClient1.mySerial);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      assertNotNull(tFastFramedTransport0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-2822), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-2822", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      
      int int1 = 130;
      tFastFramedTransport0.consumeBuffer(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(14L, hThriftClient1.mySerial);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-2822), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-2822", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(130, tFastFramedTransport0.getBufferPosition());
      assertEquals((-130), tFastFramedTransport0.getBytesRemainingInBuffer());
      
      hThriftClient1.cassandraClient = hThriftClient0.cassandraClient;
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-2822), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-2822", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      tFastFramedTransport0.consumeBuffer(cassandraHost0.DEFAULT_PORT);
      assertFalse(int0 == int1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(14L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(14L, hThriftClient1.mySerial);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-2822), cassandraHost0.getPort());
      assertEquals("(127.0.0.1):-2822", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-2822", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(14L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertEquals(14L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(9290, tFastFramedTransport0.getBufferPosition());
      assertEquals((-9290), tFastFramedTransport0.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      
      long long0 = 0L;
      int int0 = (-487);
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-487), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-487), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(15L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-487), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(15L, hThriftClient0.getmySerial());
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      int int0 = (-1);
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(16L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(16L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      String string1 = "\\^7Sn&n";
      hThriftClient0.useageStartTime = (long) cassandraHost0.DEFAULT_PORT;
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(16L, hThriftClient0.getmySerial());
      assertEquals(1392409272160L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(9160L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.setkeyspaceName(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(16L, hThriftClient0.mySerial);
      assertEquals(9160L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(16L, hThriftClient0.getmySerial());
      assertEquals("\\^7Sn&n", hThriftClient0.getkeyspaceName());
      assertEquals(1392409272160L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9160L, hThriftClient0.getuseageStartTime());
      
      String string2 = "uFO&g0";
      String string3 = " P}87D6P~+1P~o";
      String string4 = "";
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(hThriftClient0.keyspaceName, string2, string3, string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(16L, hThriftClient0.mySerial);
      assertEquals(9160L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(16L, hThriftClient0.getmySerial());
      assertEquals("\\^7Sn&n", hThriftClient0.getkeyspaceName());
      assertEquals(1392409272160L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9160L, hThriftClient0.getuseageStartTime());
      
      boolean boolean0 = hThriftClient0.isOpen();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(16L, hThriftClient0.mySerial);
      assertEquals(9160L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertFalse(boolean0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(16L, hThriftClient0.getmySerial());
      assertEquals("\\^7Sn&n", hThriftClient0.getkeyspaceName());
      assertEquals(1392409272160L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9160L, hThriftClient0.getuseageStartTime());
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(16L, hThriftClient0.mySerial);
      assertEquals(9160L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost1);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(16L, hThriftClient0.getmySerial());
      assertEquals("\\^7Sn&n", hThriftClient0.getkeyspaceName());
      assertEquals(1392409272160L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9160L, hThriftClient0.getuseageStartTime());
      assertTrue(cassandraHost1.getLifo());
      assertEquals(":9160", cassandraHost1.getUrl());
      assertEquals(9160, cassandraHost1.getPort());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals("", cassandraHost1.getHost());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertEquals((-1), cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost1.toString());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost1.getName());
      
      String string5 = hThriftClient0.toString();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(16L, hThriftClient0.mySerial);
      assertEquals(9160L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(string5);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(cassandraHost0, cassandraHost1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertEquals("CassandraClient<:9160-16>", string5);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(16L, hThriftClient0.getmySerial());
      assertEquals("\\^7Sn&n", hThriftClient0.getkeyspaceName());
      assertEquals(1392409272160L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9160L, hThriftClient0.getuseageStartTime());
      
      long long0 = hThriftClient0.getmySerial();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(16L, hThriftClient0.mySerial);
      assertEquals(9160L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals(16L, long0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(16L, hThriftClient0.getmySerial());
      assertEquals("\\^7Sn&n", hThriftClient0.getkeyspaceName());
      assertEquals(1392409272160L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9160L, hThriftClient0.getuseageStartTime());
      
      int int1 = hThriftClient0.getTimeout(cassandraHost0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(int1 == int0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(16L, hThriftClient0.mySerial);
      assertEquals(9160L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals(0, int1);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1), cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(16L, hThriftClient0.getmySerial());
      assertEquals("\\^7Sn&n", hThriftClient0.getkeyspaceName());
      assertEquals(1392409272160L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9160L, hThriftClient0.getuseageStartTime());
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(17L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals(17L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      long long0 = 3587L;
      hThriftClient0.setuseageStartTime(long0);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(17L, hThriftClient0.mySerial);
      assertEquals(3587L, hThriftClient0.useageStartTime);
      assertEquals(17L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3587L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409277733L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      hThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(17L, hThriftClient0.mySerial);
      assertEquals(3587L, hThriftClient0.useageStartTime);
      assertEquals(17L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3587L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409277733L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "z";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("z", cassandraHost0.getHost());
      assertEquals("z:9160", cassandraHost0.getUrl());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(18L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("z", cassandraHost0.getHost());
      assertEquals("z:9160", cassandraHost0.getUrl());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(18L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      hThriftClient0.startToUse();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(18L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("z", cassandraHost0.getHost());
      assertEquals("z:9160", cassandraHost0.getUrl());
      assertEquals(18L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(18L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(18L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("z", cassandraHost0.getHost());
      assertEquals("z:9160", cassandraHost0.getUrl());
      assertEquals(18L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals(18L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      
      boolean boolean0 = false;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("z", cassandraHost0.getHost());
      assertEquals("z:9160", cassandraHost0.getUrl());
      
      long long0 = 0L;
      hThriftClient1.setuseageStartTime(long0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(18L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(18L, hThriftClient1.mySerial);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("z", cassandraHost0.getHost());
      assertEquals("z:9160", cassandraHost0.getUrl());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(18L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(18L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      
      String string1 = "T_o1a]Z-FpgF!ZNN";
      hThriftClient1.setkeyspaceName(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(18L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(18L, hThriftClient1.mySerial);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(string1, string0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("z", cassandraHost0.getHost());
      assertEquals("z:9160", cassandraHost0.getUrl());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(18L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("T_o1a]Z-FpgF!ZNN", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("T_o1a]Z-FpgF!ZNN", hThriftClient1.getkeyspaceName());
      assertEquals(18L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getcassandraClient();
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(18L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(18L, hThriftClient1.mySerial);
      assertNull(cassandra_Client0);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("z", cassandraHost0.getHost());
      assertEquals("z:9160", cassandraHost0.getUrl());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(18L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("T_o1a]Z-FpgF!ZNN", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("T_o1a]Z-FpgF!ZNN", hThriftClient1.getkeyspaceName());
      assertEquals(18L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      boolean boolean1 = hThriftClient1.isOpen();
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(18L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(18L, hThriftClient1.mySerial);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(boolean1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("z", cassandraHost0.getHost());
      assertEquals("z:9160", cassandraHost0.getUrl());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(18L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("T_o1a]Z-FpgF!ZNN", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("T_o1a]Z-FpgF!ZNN", hThriftClient1.getkeyspaceName());
      assertEquals(18L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      hThriftClient1.clearAuthentication();
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(18L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(18L, hThriftClient1.mySerial);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("z(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("z", cassandraHost0.getHost());
      assertEquals("z:9160", cassandraHost0.getUrl());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(18L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("T_o1a]Z-FpgF!ZNN", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("T_o1a]Z-FpgF!ZNN", hThriftClient1.getkeyspaceName());
      assertEquals(18L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(19L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(19L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(19L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(19L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(19L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(19L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = ".n85U!}pAc16%G";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(".n85U!}pAc16%G:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(".n85U!}pAc16%G", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.getName());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(21L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(".n85U!}pAc16%G:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(".n85U!}pAc16%G", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(21L, hThriftClient0.getmySerial());
      
      long long0 = hThriftClient0.getuseageStartTime();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(21L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, long0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(".n85U!}pAc16%G:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(".n85U!}pAc16%G", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(21L, hThriftClient0.getmySerial());
      
      String string1 = hThriftClient0.getNAME_FORMAT();
      assertFalse(string1.equals((Object)string0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(21L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("CassandraClient<%s-%d>", string1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(".n85U!}pAc16%G:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(".n85U!}pAc16%G", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(21L, hThriftClient0.getmySerial());
      
      boolean boolean0 = cassandraHost0.isPerformNameResolution();
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(".n85U!}pAc16%G:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(".n85U!}pAc16%G", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.getName());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters1 = hThriftClient0.getparams();
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(21L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(string0, string1);
      assertSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertSame(tSSLTransportFactory_TSSLTransportParameters1, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(".n85U!}pAc16%G:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(".n85U!}pAc16%G", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(21L, hThriftClient0.getmySerial());
      
      CfDef cfDef0 = new CfDef();
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertNotNull(cfDef0);
      assertNull(cfDef0.getKey_validation_class());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertNull(cfDef0.getComment());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertTrue(cfDef0.isSetComparator_type());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertNull(cfDef0.getName());
      assertFalse(cfDef0.isSetComment());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetKeyspace());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertNull(cfDef0.getRow_cache_provider());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertFalse(cfDef0.isSetId());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isReplicate_on_write());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertEquals(0, cfDef0.getId());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetName());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertTrue(cfDef0.isSetCaching());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertEquals("keys_only", cfDef0.getCaching());
      assertNull(cfDef0.getKeyspace());
      assertFalse(cfDef0.isSetCompression_options());
      
      CfDef cfDef1 = new CfDef(cfDef0);
      assertTrue(cfDef1.equals((Object)cfDef0));
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0.0, cfDef1.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef1.row_cache_save_period_in_seconds);
      assertEquals(0.0, cfDef1.read_repair_chance, 0.01);
      assertEquals(0, cfDef1.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef1.row_cache_keys_to_save);
      assertEquals(0.0, cfDef1.merge_shards_chance, 0.01);
      assertEquals(0, cfDef1.max_compaction_threshold);
      assertEquals(0, cfDef1.min_compaction_threshold);
      assertEquals(0.0, cfDef1.memtable_operations_in_millions, 0.01);
      assertFalse(cfDef1.replicate_on_write);
      assertEquals(0, cfDef1.id);
      assertEquals(0, cfDef1.gc_grace_seconds);
      assertEquals(0, cfDef1.memtable_throughput_in_mb);
      assertEquals(0, cfDef1.memtable_flush_after_mins);
      assertEquals(0.0, cfDef1.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef1.row_cache_size, 0.01);
      assertEquals(0.0, cfDef1.key_cache_size, 0.01);
      assertNotNull(cfDef1);
      assertNull(cfDef0.getKey_validation_class());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertNull(cfDef0.getComment());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertTrue(cfDef0.isSetComparator_type());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertNull(cfDef0.getName());
      assertFalse(cfDef0.isSetComment());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetKeyspace());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertNull(cfDef0.getRow_cache_provider());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertFalse(cfDef0.isSetId());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isReplicate_on_write());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertEquals(0, cfDef0.getId());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetName());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertTrue(cfDef0.isSetCaching());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertEquals("keys_only", cfDef0.getCaching());
      assertNull(cfDef0.getKeyspace());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef1.isSetCompaction_strategy());
      assertNull(cfDef1.getRow_cache_provider());
      assertTrue(cfDef1.isSetCaching());
      assertFalse(cfDef1.isSetMin_compaction_threshold());
      assertNull(cfDef1.getName());
      assertFalse(cfDef1.isSetMemtable_throughput_in_mb());
      assertEquals("BytesType", cfDef1.getComparator_type());
      assertEquals(0.0, cfDef1.getBloom_filter_fp_chance(), 0.01);
      assertFalse(cfDef1.isSetReplicate_on_write());
      assertFalse(cfDef1.isSetKeyspace());
      assertFalse(cfDef1.isSetRow_cache_keys_to_save());
      assertEquals(0, cfDef1.getColumn_metadataSize());
      assertTrue(cfDef1.isSetComparator_type());
      assertFalse(cfDef1.isSetKey_alias());
      assertEquals(0.0, cfDef1.getKey_cache_size(), 0.01);
      assertNull(cfDef1.getDefault_validation_class());
      assertNull(cfDef1.getCompaction_strategy());
      assertFalse(cfDef1.isSetComment());
      assertEquals(0, cfDef1.getRow_cache_save_period_in_seconds());
      assertNull(cfDef1.getComment());
      assertNull(cfDef1.getKey_validation_class());
      assertFalse(cfDef1.isSetRead_repair_chance());
      assertFalse(cfDef1.isSetMerge_shards_chance());
      assertFalse(cfDef1.isSetGc_grace_seconds());
      assertEquals(0, cfDef1.getCompression_optionsSize());
      assertFalse(cfDef1.isSetDclocal_read_repair_chance());
      assertTrue(cfDef1.isSetColumn_type());
      assertFalse(cfDef1.isSetColumn_metadata());
      assertEquals(0.0, cfDef1.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef1.getMemtable_throughput_in_mb());
      assertFalse(cfDef1.isSetRow_cache_save_period_in_seconds());
      assertEquals("Standard", cfDef1.getColumn_type());
      assertFalse(cfDef1.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef1.getMerge_shards_chance(), 0.01);
      assertEquals(0, cfDef1.getId());
      assertFalse(cfDef1.isSetSubcomparator_type());
      assertFalse(cfDef1.isSetDefault_validation_class());
      assertFalse(cfDef1.isSetCompaction_strategy_options());
      assertEquals(0.0, cfDef1.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef1.getRow_cache_keys_to_save());
      assertEquals("keys_only", cfDef1.getCaching());
      assertEquals(0.0, cfDef1.getRead_repair_chance(), 0.01);
      assertFalse(cfDef1.isSetId());
      assertFalse(cfDef1.isSetKey_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetName());
      assertEquals(0.0, cfDef1.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0, cfDef1.getGc_grace_seconds());
      assertFalse(cfDef1.isReplicate_on_write());
      assertEquals(0, cfDef1.getMax_compaction_threshold());
      assertEquals(0, cfDef1.getMemtable_flush_after_mins());
      assertFalse(cfDef1.isSetKey_validation_class());
      assertFalse(cfDef1.isSetMemtable_flush_after_mins());
      assertNull(cfDef1.getKeyspace());
      assertFalse(cfDef1.isSetRow_cache_size());
      assertFalse(cfDef1.isSetRow_cache_provider());
      assertFalse(cfDef1.isSetKey_cache_size());
      assertFalse(cfDef1.isSetCompression_options());
      assertFalse(cfDef1.isSetMemtable_operations_in_millions());
      assertEquals(0, cfDef1.getKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef1.getMin_compaction_threshold());
      assertNull(cfDef1.getSubcomparator_type());
      assertEquals(0, cfDef1.getCompaction_strategy_optionsSize());
      assertFalse(cfDef1.isSetMax_compaction_threshold());
      
      hThriftClient0.setkeyspaceName(string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(21L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(".n85U!}pAc16%G:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(".n85U!}pAc16%G", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(".n85U!}pAc16%G(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(".n85U!}pAc16%G", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(21L, hThriftClient0.getmySerial());
      
      Map<String, String> map0 = cfDef1.getCompaction_strategy_options();
      assertTrue(cfDef0.equals((Object)cfDef1));
      assertTrue(cfDef1.equals((Object)cfDef0));
      assertEquals(0, cfDef0.id);
      assertEquals(0, cfDef0.max_compaction_threshold);
      assertEquals(0.0, cfDef0.row_cache_size, 0.01);
      assertEquals(0.0, cfDef0.memtable_operations_in_millions, 0.01);
      assertEquals(0.0, cfDef0.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef0.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef0.gc_grace_seconds);
      assertEquals(0, cfDef0.memtable_flush_after_mins);
      assertEquals(0.0, cfDef0.key_cache_size, 0.01);
      assertEquals(0, cfDef0.memtable_throughput_in_mb);
      assertEquals(0.0, cfDef0.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef0.read_repair_chance, 0.01);
      assertEquals(0.0, cfDef0.merge_shards_chance, 0.01);
      assertEquals(0, cfDef0.row_cache_save_period_in_seconds);
      assertFalse(cfDef0.replicate_on_write);
      assertEquals(0, cfDef0.row_cache_keys_to_save);
      assertEquals(0, cfDef0.min_compaction_threshold);
      assertEquals(0.0, cfDef1.dclocal_read_repair_chance, 0.01);
      assertEquals(0, cfDef1.row_cache_save_period_in_seconds);
      assertEquals(0.0, cfDef1.read_repair_chance, 0.01);
      assertEquals(0, cfDef1.key_cache_save_period_in_seconds);
      assertEquals(0, cfDef1.row_cache_keys_to_save);
      assertEquals(0.0, cfDef1.merge_shards_chance, 0.01);
      assertEquals(0, cfDef1.max_compaction_threshold);
      assertEquals(0, cfDef1.min_compaction_threshold);
      assertEquals(0.0, cfDef1.memtable_operations_in_millions, 0.01);
      assertFalse(cfDef1.replicate_on_write);
      assertEquals(0, cfDef1.id);
      assertEquals(0, cfDef1.gc_grace_seconds);
      assertEquals(0, cfDef1.memtable_throughput_in_mb);
      assertEquals(0, cfDef1.memtable_flush_after_mins);
      assertEquals(0.0, cfDef1.bloom_filter_fp_chance, 0.01);
      assertEquals(0.0, cfDef1.row_cache_size, 0.01);
      assertEquals(0.0, cfDef1.key_cache_size, 0.01);
      assertNull(map0);
      assertNotSame(cfDef0, cfDef1);
      assertNotSame(cfDef1, cfDef0);
      assertNull(cfDef0.getKey_validation_class());
      assertEquals(0.0, cfDef0.getBloom_filter_fp_chance(), 0.01);
      assertEquals(0, cfDef0.getColumn_metadataSize());
      assertNull(cfDef0.getCompaction_strategy());
      assertFalse(cfDef0.isSetRead_repair_chance());
      assertFalse(cfDef0.isSetMin_compaction_threshold());
      assertFalse(cfDef0.isSetMemtable_throughput_in_mb());
      assertNull(cfDef0.getComment());
      assertEquals(0, cfDef0.getKey_cache_save_period_in_seconds());
      assertFalse(cfDef0.isSetRow_cache_save_period_in_seconds());
      assertTrue(cfDef0.isSetComparator_type());
      assertEquals(0, cfDef0.getCompression_optionsSize());
      assertFalse(cfDef0.isSetReplicate_on_write());
      assertFalse(cfDef0.isSetMerge_shards_chance());
      assertEquals(0, cfDef0.getMemtable_throughput_in_mb());
      assertFalse(cfDef0.isSetRow_cache_size());
      assertEquals(0.0, cfDef0.getMerge_shards_chance(), 0.01);
      assertEquals(0.0, cfDef0.getMemtable_operations_in_millions(), 0.01);
      assertEquals("Standard", cfDef0.getColumn_type());
      assertFalse(cfDef0.isSetCompaction_strategy_options());
      assertEquals(0, cfDef0.getMax_compaction_threshold());
      assertNull(cfDef0.getName());
      assertFalse(cfDef0.isSetComment());
      assertTrue(cfDef0.isSetColumn_type());
      assertFalse(cfDef0.isSetKeyspace());
      assertFalse(cfDef0.isSetCompaction_strategy());
      assertFalse(cfDef0.isSetKey_cache_save_period_in_seconds());
      assertNull(cfDef0.getRow_cache_provider());
      assertFalse(cfDef0.isSetGc_grace_seconds());
      assertEquals(0.0, cfDef0.getKey_cache_size(), 0.01);
      assertFalse(cfDef0.isSetKey_alias());
      assertEquals("BytesType", cfDef0.getComparator_type());
      assertFalse(cfDef0.isSetId());
      assertEquals(0.0, cfDef0.getRow_cache_size(), 0.01);
      assertFalse(cfDef0.isReplicate_on_write());
      assertFalse(cfDef0.isSetDefault_validation_class());
      assertFalse(cfDef0.isSetMax_compaction_threshold());
      assertFalse(cfDef0.isSetSubcomparator_type());
      assertFalse(cfDef0.isSetColumn_metadata());
      assertEquals(0, cfDef0.getMemtable_flush_after_mins());
      assertEquals(0, cfDef0.getGc_grace_seconds());
      assertEquals(0, cfDef0.getId());
      assertNull(cfDef0.getSubcomparator_type());
      assertEquals(0, cfDef0.getMin_compaction_threshold());
      assertEquals(0.0, cfDef0.getDclocal_read_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetBloom_filter_fp_chance());
      assertFalse(cfDef0.isSetDclocal_read_repair_chance());
      assertFalse(cfDef0.isSetRow_cache_provider());
      assertFalse(cfDef0.isSetName());
      assertNull(cfDef0.getDefault_validation_class());
      assertFalse(cfDef0.isSetMemtable_operations_in_millions());
      assertFalse(cfDef0.isSetKey_cache_size());
      assertEquals(0, cfDef0.getCompaction_strategy_optionsSize());
      assertEquals(0, cfDef0.getRow_cache_save_period_in_seconds());
      assertEquals(0, cfDef0.getRow_cache_keys_to_save());
      assertFalse(cfDef0.isSetRow_cache_keys_to_save());
      assertEquals(0.0, cfDef0.getRead_repair_chance(), 0.01);
      assertFalse(cfDef0.isSetMemtable_flush_after_mins());
      assertTrue(cfDef0.isSetCaching());
      assertFalse(cfDef0.isSetKey_validation_class());
      assertEquals("keys_only", cfDef0.getCaching());
      assertNull(cfDef0.getKeyspace());
      assertFalse(cfDef0.isSetCompression_options());
      assertFalse(cfDef1.isSetCompaction_strategy());
      assertNull(cfDef1.getRow_cache_provider());
      assertTrue(cfDef1.isSetCaching());
      assertFalse(cfDef1.isSetMin_compaction_threshold());
      assertNull(cfDef1.getName());
      assertFalse(cfDef1.isSetMemtable_throughput_in_mb());
      assertEquals("BytesType", cfDef1.getComparator_type());
      assertEquals(0.0, cfDef1.getBloom_filter_fp_chance(), 0.01);
      assertFalse(cfDef1.isSetReplicate_on_write());
      assertFalse(cfDef1.isSetKeyspace());
      assertFalse(cfDef1.isSetRow_cache_keys_to_save());
      assertEquals(0, cfDef1.getColumn_metadataSize());
      assertTrue(cfDef1.isSetComparator_type());
      assertFalse(cfDef1.isSetKey_alias());
      assertEquals(0.0, cfDef1.getKey_cache_size(), 0.01);
      assertNull(cfDef1.getDefault_validation_class());
      assertNull(cfDef1.getCompaction_strategy());
      assertFalse(cfDef1.isSetComment());
      assertEquals(0, cfDef1.getRow_cache_save_period_in_seconds());
      assertNull(cfDef1.getComment());
      assertNull(cfDef1.getKey_validation_class());
      assertFalse(cfDef1.isSetRead_repair_chance());
      assertFalse(cfDef1.isSetMerge_shards_chance());
      assertFalse(cfDef1.isSetGc_grace_seconds());
      assertEquals(0, cfDef1.getCompression_optionsSize());
      assertFalse(cfDef1.isSetDclocal_read_repair_chance());
      assertTrue(cfDef1.isSetColumn_type());
      assertFalse(cfDef1.isSetColumn_metadata());
      assertEquals(0.0, cfDef1.getRow_cache_size(), 0.01);
      assertEquals(0, cfDef1.getMemtable_throughput_in_mb());
      assertFalse(cfDef1.isSetRow_cache_save_period_in_seconds());
      assertEquals("Standard", cfDef1.getColumn_type());
      assertFalse(cfDef1.isSetBloom_filter_fp_chance());
      assertEquals(0.0, cfDef1.getMerge_shards_chance(), 0.01);
      assertEquals(0, cfDef1.getId());
      assertFalse(cfDef1.isSetSubcomparator_type());
      assertFalse(cfDef1.isSetDefault_validation_class());
      assertFalse(cfDef1.isSetCompaction_strategy_options());
      assertEquals(0.0, cfDef1.getDclocal_read_repair_chance(), 0.01);
      assertEquals(0, cfDef1.getRow_cache_keys_to_save());
      assertEquals("keys_only", cfDef1.getCaching());
      assertEquals(0.0, cfDef1.getRead_repair_chance(), 0.01);
      assertFalse(cfDef1.isSetId());
      assertFalse(cfDef1.isSetKey_cache_save_period_in_seconds());
      assertFalse(cfDef1.isSetName());
      assertEquals(0.0, cfDef1.getMemtable_operations_in_millions(), 0.01);
      assertEquals(0, cfDef1.getGc_grace_seconds());
      assertFalse(cfDef1.isReplicate_on_write());
      assertEquals(0, cfDef1.getMax_compaction_threshold());
      assertEquals(0, cfDef1.getMemtable_flush_after_mins());
      assertFalse(cfDef1.isSetKey_validation_class());
      assertFalse(cfDef1.isSetMemtable_flush_after_mins());
      assertNull(cfDef1.getKeyspace());
      assertFalse(cfDef1.isSetRow_cache_size());
      assertFalse(cfDef1.isSetRow_cache_provider());
      assertFalse(cfDef1.isSetKey_cache_size());
      assertFalse(cfDef1.isSetCompression_options());
      assertFalse(cfDef1.isSetMemtable_operations_in_millions());
      assertEquals(0, cfDef1.getKey_cache_save_period_in_seconds());
      assertEquals(0, cfDef1.getMin_compaction_threshold());
      assertNull(cfDef1.getSubcomparator_type());
      assertEquals(0, cfDef1.getCompaction_strategy_optionsSize());
      assertFalse(cfDef1.isSetMax_compaction_threshold());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get client socket: 
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "73x^0j3FkLP`b?kJNk";
      int int0 = (-571);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals((-571), cassandraHost0.getPort());
      assertEquals("73x^0j3FkLP`b?kJNk(200.42.42.0):-571", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("73x^0j3FkLP`b?kJNk", cassandraHost0.getHost());
      assertEquals("73x^0j3FkLP`b?kJNk:-571", cassandraHost0.getUrl());
      assertEquals("73x^0j3FkLP`b?kJNk(200.42.42.0):-571", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      
      String string1 = "";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = string1;
      stringArray0[4] = string0;
      stringArray0[5] = string1;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(22L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals((-571), cassandraHost0.getPort());
      assertEquals("73x^0j3FkLP`b?kJNk(200.42.42.0):-571", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("73x^0j3FkLP`b?kJNk", cassandraHost0.getHost());
      assertEquals("73x^0j3FkLP`b?kJNk:-571", cassandraHost0.getUrl());
      assertEquals("73x^0j3FkLP`b?kJNk(200.42.42.0):-571", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(22L, hThriftClient0.getmySerial());
      
      String string2 = "hhRmQU";
      int int1 = 0;
      CassandraHost cassandraHost1 = new CassandraHost(string2, int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(cassandraHost1.equals((Object)cassandraHost0));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost1);
      assertEquals("hhRmQU(200.42.42.1):0", cassandraHost1.getName());
      assertEquals("200.42.42.1", cassandraHost1.getIp());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals(0, cassandraHost1.getPort());
      assertEquals("hhRmQU:0", cassandraHost1.getUrl());
      assertEquals("hhRmQU(200.42.42.1):0", cassandraHost1.toString());
      assertEquals("hhRmQU", cassandraHost1.getHost());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost1.getLifo());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      
      int int2 = hThriftClient0.getTimeout(cassandraHost1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(cassandraHost1.equals((Object)cassandraHost0));
      assertEquals(6, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(22L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(cassandraHost1, cassandraHost0);
      assertEquals(0, int2);
      assertEquals((-571), cassandraHost0.getPort());
      assertEquals("73x^0j3FkLP`b?kJNk(200.42.42.0):-571", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("73x^0j3FkLP`b?kJNk", cassandraHost0.getHost());
      assertEquals("73x^0j3FkLP`b?kJNk:-571", cassandraHost0.getUrl());
      assertEquals("73x^0j3FkLP`b?kJNk(200.42.42.0):-571", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(22L, hThriftClient0.getmySerial());
      assertEquals("hhRmQU(200.42.42.1):0", cassandraHost1.getName());
      assertEquals("200.42.42.1", cassandraHost1.getIp());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals(0, cassandraHost1.getPort());
      assertEquals("hhRmQU:0", cassandraHost1.getUrl());
      assertEquals("hhRmQU(200.42.42.1):0", cassandraHost1.toString());
      assertEquals("hhRmQU", cassandraHost1.getHost());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost1.getLifo());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      
      String string3 = "Open called on already open connection. You should not have gotten here.";
      hThriftClient0.setkeyspaceName(string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(6, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(22L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals((-571), cassandraHost0.getPort());
      assertEquals("73x^0j3FkLP`b?kJNk(200.42.42.0):-571", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("73x^0j3FkLP`b?kJNk", cassandraHost0.getHost());
      assertEquals("73x^0j3FkLP`b?kJNk:-571", cassandraHost0.getUrl());
      assertEquals("73x^0j3FkLP`b?kJNk(200.42.42.0):-571", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(22L, hThriftClient0.getmySerial());
      assertEquals("Open called on already open connection. You should not have gotten here.", hThriftClient0.getkeyspaceName());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters1 = hThriftClient0.getparams();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(6, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(22L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(tSSLTransportFactory_TSSLTransportParameters1, tSSLTransportFactory_TSSLTransportParameters0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertEquals((-571), cassandraHost0.getPort());
      assertEquals("73x^0j3FkLP`b?kJNk(200.42.42.0):-571", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("73x^0j3FkLP`b?kJNk", cassandraHost0.getHost());
      assertEquals("73x^0j3FkLP`b?kJNk:-571", cassandraHost0.getUrl());
      assertEquals("73x^0j3FkLP`b?kJNk(200.42.42.0):-571", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(22L, hThriftClient0.getmySerial());
      assertEquals("Open called on already open connection. You should not have gotten here.", hThriftClient0.getkeyspaceName());
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(23L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(23L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      assertNotNull(nOPLogger0);
      
      hThriftClient0.setlog(nOPLogger0);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(23L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(23L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = " , ";
      int int0 = (-2143);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(" , :-2143", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.getName());
      assertEquals(" , ", cassandraHost0.getHost());
      assertEquals((-2143), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals(" , :-2143", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.getName());
      assertEquals(" , ", cassandraHost0.getHost());
      assertEquals((-2143), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      TBinaryProtocol tBinaryProtocol0 = new TBinaryProtocol(hThriftClient0.transport, boolean0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(tBinaryProtocol0);
      assertEquals(" , :-2143", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.getName());
      assertEquals(" , ", cassandraHost0.getHost());
      assertEquals((-2143), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tBinaryProtocol0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(cassandra_Client0);
      assertEquals(" , :-2143", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.getName());
      assertEquals(" , ", cassandraHost0.getHost());
      assertEquals((-2143), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.setcassandraClient(cassandra_Client0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(" , :-2143", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.getName());
      assertEquals(" , ", cassandraHost0.getHost());
      assertEquals((-2143), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(1L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(" , :-2143", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.getName());
      assertEquals(" , ", cassandraHost0.getHost());
      assertEquals((-2143), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      Map<String, String> map0 = hThriftClient1.getcredentials();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(1L, hThriftClient1.mySerial);
      assertNotNull(map0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(" , :-2143", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.getName());
      assertEquals(" , ", cassandraHost0.getHost());
      assertEquals((-2143), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      hThriftClient1.setlog(hThriftClient0.log);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(1L, hThriftClient1.mySerial);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(" , :-2143", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.getName());
      assertEquals(" , ", cassandraHost0.getHost());
      assertEquals((-2143), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      boolean boolean2 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(1L, hThriftClient1.mySerial);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(boolean2);
      assertEquals(" , :-2143", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(" , (200.42.42.0):-2143", cassandraHost0.getName());
      assertEquals(" , ", cassandraHost0.getHost());
      assertEquals((-2143), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "' not allowed";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals("' not allowed", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("' not allowed(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("' not allowed:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("' not allowed(200.42.42.0):0", cassandraHost0.getName());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("' not allowed", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("' not allowed(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("' not allowed:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("' not allowed(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      
      String string1 = "_N";
      cassandraHost0.setMaxActive(hThriftClient0.timeout);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertEquals("' not allowed", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("' not allowed(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("' not allowed:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("' not allowed(200.42.42.0):0", cassandraHost0.getName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      
      hThriftClient0.setkeyspaceName(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("' not allowed", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("' not allowed(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("' not allowed:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("' not allowed(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("_N", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hThriftClient0.getmySerial());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNull(tTransport0);
      assertNotSame(string0, string1);
      assertEquals("' not allowed", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("' not allowed(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("' not allowed:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("' not allowed(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("_N", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hThriftClient0.getmySerial());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "M&3=g]c";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("M&3=g]c", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("M&3=g]c:9160", cassandraHost0.getUrl());
      
      String string1 = "Scheme registry may not be null";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string1;
      String string2 = "";
      stringArray0[1] = string2;
      stringArray0[2] = string1;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0, cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("M&3=g]c", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("M&3=g]c:9160", cassandraHost0.getUrl());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("M&3=g]c", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("M&3=g]c:9160", cassandraHost0.getUrl());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      String string3 = "df|M)+";
      MockFile mockFile0 = new MockFile(stringArray0[0], string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(mockPrintStream0);
      
      String string4 = mockFile0.getCanonicalPath();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null/df|M)+", string4);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("df|M)+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null/df|M)+", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      mockPrintStream0.flush();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("df|M)+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null/df|M)+", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      PrintStream printStream0 = mockPrintStream0.format(stringArray0[4], (Object[]) stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(mockPrintStream0, printStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("df|M)+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null/df|M)+", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(7L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setExecutable(boolean0);
      assertTrue(boolean1 == boolean0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertTrue(boolean1);
      assertFalse(mockFile0.isDirectory());
      assertEquals("df|M)+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null/df|M)+", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(7L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(printStream0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(tIOStreamTransport0);
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertFalse(mockFile0.isDirectory());
      assertEquals("df|M)+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null/df|M)+", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(7L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      tIOStreamTransport0.open();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(mockPrintStream0, printStream0);
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertFalse(mockFile0.isDirectory());
      assertEquals("df|M)+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null/df|M)+", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(7L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      tIOStreamTransport0.close();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(mockPrintStream0, printStream0);
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertFalse(mockFile0.isDirectory());
      assertEquals("df|M)+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null/df|M)+", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(7L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      boolean boolean2 = false;
      boolean boolean3 = mockFile0.setReadable(cassandraHost0.DEFAULT_LIFO, boolean2);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertTrue(boolean3);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("M&3=g]c", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("M&3=g]c:9160", cassandraHost0.getUrl());
      assertFalse(mockFile0.isDirectory());
      assertEquals("df|M)+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null/df|M)+", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(7L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      hThriftClient0.settransport(tIOStreamTransport0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("M&3=g]c", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("M&3=g]c:9160", cassandraHost0.getUrl());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertFalse(mockFile0.isDirectory());
      assertEquals("df|M)+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null/df|M)+", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(7L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(string0, string4);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("M&3=g]c(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("M&3=g]c", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("M&3=g]c:9160", cassandraHost0.getUrl());
      assertFalse(mockFile0.isDirectory());
      assertEquals("df|M)+", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null/df|M)+", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(7L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/hector/a33a46506656a39d1b0f7780973905665d3b6145/evosuite_14/Scheme registry may not be null", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "D>Zikq?RBSgt3N\\`<";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("D>Zikq?RBSgt3N\\`<(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("D>Zikq?RBSgt3N\\`<(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("D>Zikq?RBSgt3N\\`<", cassandraHost0.getHost());
      assertEquals("D>Zikq?RBSgt3N\\`<:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("D>Zikq?RBSgt3N\\`<(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("D>Zikq?RBSgt3N\\`<(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("D>Zikq?RBSgt3N\\`<", cassandraHost0.getHost());
      assertEquals("D>Zikq?RBSgt3N\\`<:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      TProtocol tProtocol0 = null;
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tProtocol0);
      assertNotNull(cassandra_Client0);
      
      hThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("D>Zikq?RBSgt3N\\`<(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("D>Zikq?RBSgt3N\\`<(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("D>Zikq?RBSgt3N\\`<", cassandraHost0.getHost());
      assertEquals("D>Zikq?RBSgt3N\\`<:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(tTransport0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("D>Zikq?RBSgt3N\\`<(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("D>Zikq?RBSgt3N\\`<(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("D>Zikq?RBSgt3N\\`<", cassandraHost0.getHost());
      assertEquals("D>Zikq?RBSgt3N\\`<:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "0*lHc6{3[k+[BP";
      int int0 = 3047;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("0*lHc6{3[k+[BP", cassandraHost0.getHost());
      assertEquals(3047, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0*lHc6{3[k+[BP:3047", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("0*lHc6{3[k+[BP", cassandraHost0.getHost());
      assertEquals(3047, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0*lHc6{3[k+[BP:3047", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(4L, hThriftClient0.getmySerial());
      
      String string1 = "@>sq&N?.b5%i:";
      String string2 = " tzy3pzZE";
      int int1 = 707;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      hThriftClient0.setAuthenticated(hashMap0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("0*lHc6{3[k+[BP", cassandraHost0.getHost());
      assertEquals(3047, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0*lHc6{3[k+[BP:3047", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      cassandraHost0.setMaxActive(int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.toString());
      assertEquals(707, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("0*lHc6{3[k+[BP", cassandraHost0.getHost());
      assertEquals(3047, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0*lHc6{3[k+[BP:3047", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(string1, string2, string0, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      boolean boolean0 = false;
      cassandraHost0.setLifo(boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.toString());
      assertEquals(707, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("0*lHc6{3[k+[BP", cassandraHost0.getHost());
      assertEquals(3047, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0*lHc6{3[k+[BP:3047", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      int int2 = 1;
      HashMap<String, String> hashMap1 = new HashMap<String, String>(int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      boolean boolean1 = hThriftClient0.isAlreadyAuthenticated(hashMap1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(boolean1);
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.toString());
      assertEquals(707, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("0*lHc6{3[k+[BP", cassandraHost0.getHost());
      assertEquals(3047, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0*lHc6{3[k+[BP:3047", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      hThriftClient0.clearAuthentication();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.toString());
      assertEquals(707, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("0*lHc6{3[k+[BP", cassandraHost0.getHost());
      assertEquals(3047, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0*lHc6{3[k+[BP:3047", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(4L, hThriftClient0.getmySerial());
      
      hThriftClient0.clearAuthentication();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.toString());
      assertEquals(707, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("0*lHc6{3[k+[BP", cassandraHost0.getHost());
      assertEquals(3047, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0*lHc6{3[k+[BP:3047", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(4L, hThriftClient0.getmySerial());
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(1392409281320L, long0);
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.toString());
      assertEquals(707, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("0*lHc6{3[k+[BP", cassandraHost0.getHost());
      assertEquals(3047, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0*lHc6{3[k+[BP:3047", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(4L, hThriftClient0.getmySerial());
      
      long long1 = 0L;
      hThriftClient0.setuseageStartTime(long1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(long1 == long0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.getName());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("0*lHc6{3[k+[BP(200.42.42.0):3047", cassandraHost0.toString());
      assertEquals(707, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("0*lHc6{3[k+[BP", cassandraHost0.getHost());
      assertEquals(3047, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0*lHc6{3[k+[BP:3047", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(4L, hThriftClient0.getmySerial());
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "@N?u<_%S(2G1OqW";
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      String string1 = "";
      stringArray0[8] = string1;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(9, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(9, stringArray0.length);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals(5L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      String string2 = "";
      String string3 = "Unable to open transport to ";
      KsDef ksDef0 = new KsDef();
      assertTrue(ksDef0.durable_writes);
      assertEquals(0, ksDef0.replication_factor);
      assertNotNull(ksDef0);
      assertEquals(0, ksDef0.getCf_defsSize());
      assertTrue(ksDef0.isDurable_writes());
      assertNull(ksDef0.getStrategy_class());
      assertEquals(0, ksDef0.getStrategy_optionsSize());
      assertEquals(0, ksDef0.getReplication_factor());
      assertFalse(ksDef0.isSetReplication_factor());
      assertFalse(ksDef0.isSetDurable_writes());
      assertFalse(ksDef0.isSetCf_defs());
      assertFalse(ksDef0.isSetStrategy_options());
      assertFalse(ksDef0.isSetStrategy_class());
      assertFalse(ksDef0.isSetName());
      assertNull(ksDef0.getName());
      
      KsDef ksDef1 = new KsDef(ksDef0);
      assertTrue(ksDef1.equals((Object)ksDef0));
      assertTrue(ksDef0.durable_writes);
      assertEquals(0, ksDef0.replication_factor);
      assertTrue(ksDef1.durable_writes);
      assertEquals(0, ksDef1.replication_factor);
      assertNotNull(ksDef1);
      assertEquals(0, ksDef0.getCf_defsSize());
      assertTrue(ksDef0.isDurable_writes());
      assertNull(ksDef0.getStrategy_class());
      assertEquals(0, ksDef0.getStrategy_optionsSize());
      assertEquals(0, ksDef0.getReplication_factor());
      assertFalse(ksDef0.isSetReplication_factor());
      assertFalse(ksDef0.isSetDurable_writes());
      assertFalse(ksDef0.isSetCf_defs());
      assertFalse(ksDef0.isSetStrategy_options());
      assertFalse(ksDef0.isSetStrategy_class());
      assertFalse(ksDef0.isSetName());
      assertNull(ksDef0.getName());
      assertTrue(ksDef1.isDurable_writes());
      assertNull(ksDef1.getName());
      assertNull(ksDef1.getStrategy_class());
      assertFalse(ksDef1.isSetStrategy_options());
      assertEquals(0, ksDef1.getReplication_factor());
      assertEquals(0, ksDef1.getCf_defsSize());
      assertFalse(ksDef1.isSetReplication_factor());
      assertFalse(ksDef1.isSetDurable_writes());
      assertEquals(0, ksDef1.getStrategy_optionsSize());
      assertFalse(ksDef1.isSetCf_defs());
      assertFalse(ksDef1.isSetStrategy_class());
      assertFalse(ksDef1.isSetName());
      
      List<CfDef> list0 = ksDef1.getCf_defs();
      assertTrue(ksDef0.equals((Object)ksDef1));
      assertTrue(ksDef1.equals((Object)ksDef0));
      assertTrue(ksDef0.durable_writes);
      assertEquals(0, ksDef0.replication_factor);
      assertTrue(ksDef1.durable_writes);
      assertEquals(0, ksDef1.replication_factor);
      assertNull(list0);
      assertNotSame(ksDef0, ksDef1);
      assertNotSame(ksDef1, ksDef0);
      assertEquals(0, ksDef0.getCf_defsSize());
      assertTrue(ksDef0.isDurable_writes());
      assertNull(ksDef0.getStrategy_class());
      assertEquals(0, ksDef0.getStrategy_optionsSize());
      assertEquals(0, ksDef0.getReplication_factor());
      assertFalse(ksDef0.isSetReplication_factor());
      assertFalse(ksDef0.isSetDurable_writes());
      assertFalse(ksDef0.isSetCf_defs());
      assertFalse(ksDef0.isSetStrategy_options());
      assertFalse(ksDef0.isSetStrategy_class());
      assertFalse(ksDef0.isSetName());
      assertNull(ksDef0.getName());
      assertTrue(ksDef1.isDurable_writes());
      assertNull(ksDef1.getName());
      assertNull(ksDef1.getStrategy_class());
      assertFalse(ksDef1.isSetStrategy_options());
      assertEquals(0, ksDef1.getReplication_factor());
      assertEquals(0, ksDef1.getCf_defsSize());
      assertFalse(ksDef1.isSetReplication_factor());
      assertFalse(ksDef1.isSetDurable_writes());
      assertEquals(0, ksDef1.getStrategy_optionsSize());
      assertFalse(ksDef1.isSetCf_defs());
      assertFalse(ksDef1.isSetStrategy_class());
      assertFalse(ksDef1.isSetName());
      
      KsDef ksDef2 = new KsDef(string2, string3, list0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(ksDef0.equals((Object)ksDef1));
      assertTrue(ksDef1.equals((Object)ksDef0));
      assertFalse(ksDef2.equals((Object)ksDef1));
      assertFalse(ksDef2.equals((Object)ksDef0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertTrue(ksDef0.durable_writes);
      assertEquals(0, ksDef0.replication_factor);
      assertTrue(ksDef1.durable_writes);
      assertEquals(0, ksDef1.replication_factor);
      assertEquals(0, ksDef2.replication_factor);
      assertTrue(ksDef2.durable_writes);
      assertNotNull(ksDef2);
      assertEquals(0, ksDef0.getCf_defsSize());
      assertTrue(ksDef0.isDurable_writes());
      assertNull(ksDef0.getStrategy_class());
      assertEquals(0, ksDef0.getStrategy_optionsSize());
      assertEquals(0, ksDef0.getReplication_factor());
      assertFalse(ksDef0.isSetReplication_factor());
      assertFalse(ksDef0.isSetDurable_writes());
      assertFalse(ksDef0.isSetCf_defs());
      assertFalse(ksDef0.isSetStrategy_options());
      assertFalse(ksDef0.isSetStrategy_class());
      assertFalse(ksDef0.isSetName());
      assertNull(ksDef0.getName());
      assertTrue(ksDef1.isDurable_writes());
      assertNull(ksDef1.getName());
      assertNull(ksDef1.getStrategy_class());
      assertFalse(ksDef1.isSetStrategy_options());
      assertEquals(0, ksDef1.getReplication_factor());
      assertEquals(0, ksDef1.getCf_defsSize());
      assertFalse(ksDef1.isSetReplication_factor());
      assertFalse(ksDef1.isSetDurable_writes());
      assertEquals(0, ksDef1.getStrategy_optionsSize());
      assertFalse(ksDef1.isSetCf_defs());
      assertFalse(ksDef1.isSetStrategy_class());
      assertFalse(ksDef1.isSetName());
      assertFalse(ksDef2.isSetDurable_writes());
      assertFalse(ksDef2.isSetReplication_factor());
      assertFalse(ksDef2.isSetCf_defs());
      assertEquals(0, ksDef2.getReplication_factor());
      assertEquals(0, ksDef2.getStrategy_optionsSize());
      assertTrue(ksDef2.isSetName());
      assertEquals("", ksDef2.getName());
      assertTrue(ksDef2.isDurable_writes());
      assertTrue(ksDef2.isSetStrategy_class());
      assertEquals(0, ksDef2.getCf_defsSize());
      assertEquals("Unable to open transport to ", ksDef2.getStrategy_class());
      assertFalse(ksDef2.isSetStrategy_options());
      
      Map<String, String> map0 = ksDef2.getStrategy_options();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(ksDef0.equals((Object)ksDef1));
      assertFalse(ksDef0.equals((Object)ksDef2));
      assertFalse(ksDef1.equals((Object)ksDef2));
      assertTrue(ksDef1.equals((Object)ksDef0));
      assertFalse(ksDef2.equals((Object)ksDef1));
      assertFalse(ksDef2.equals((Object)ksDef0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertTrue(ksDef0.durable_writes);
      assertEquals(0, ksDef0.replication_factor);
      assertTrue(ksDef1.durable_writes);
      assertEquals(0, ksDef1.replication_factor);
      assertEquals(0, ksDef2.replication_factor);
      assertTrue(ksDef2.durable_writes);
      assertNull(map0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(ksDef0, ksDef2);
      assertNotSame(ksDef0, ksDef1);
      assertNotSame(ksDef1, ksDef2);
      assertNotSame(ksDef1, ksDef0);
      assertNotSame(ksDef2, ksDef1);
      assertNotSame(ksDef2, ksDef0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals(0, ksDef0.getCf_defsSize());
      assertTrue(ksDef0.isDurable_writes());
      assertNull(ksDef0.getStrategy_class());
      assertEquals(0, ksDef0.getStrategy_optionsSize());
      assertEquals(0, ksDef0.getReplication_factor());
      assertFalse(ksDef0.isSetReplication_factor());
      assertFalse(ksDef0.isSetDurable_writes());
      assertFalse(ksDef0.isSetCf_defs());
      assertFalse(ksDef0.isSetStrategy_options());
      assertFalse(ksDef0.isSetStrategy_class());
      assertFalse(ksDef0.isSetName());
      assertNull(ksDef0.getName());
      assertTrue(ksDef1.isDurable_writes());
      assertNull(ksDef1.getName());
      assertNull(ksDef1.getStrategy_class());
      assertFalse(ksDef1.isSetStrategy_options());
      assertEquals(0, ksDef1.getReplication_factor());
      assertEquals(0, ksDef1.getCf_defsSize());
      assertFalse(ksDef1.isSetReplication_factor());
      assertFalse(ksDef1.isSetDurable_writes());
      assertEquals(0, ksDef1.getStrategy_optionsSize());
      assertFalse(ksDef1.isSetCf_defs());
      assertFalse(ksDef1.isSetStrategy_class());
      assertFalse(ksDef1.isSetName());
      assertFalse(ksDef2.isSetDurable_writes());
      assertFalse(ksDef2.isSetReplication_factor());
      assertFalse(ksDef2.isSetCf_defs());
      assertEquals(0, ksDef2.getReplication_factor());
      assertEquals(0, ksDef2.getStrategy_optionsSize());
      assertTrue(ksDef2.isSetName());
      assertEquals("", ksDef2.getName());
      assertTrue(ksDef2.isDurable_writes());
      assertTrue(ksDef2.isSetStrategy_class());
      assertEquals(0, ksDef2.getCf_defsSize());
      assertEquals("Unable to open transport to ", ksDef2.getStrategy_class());
      assertFalse(ksDef2.isSetStrategy_options());
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(ksDef0.equals((Object)ksDef1));
      assertFalse(ksDef0.equals((Object)ksDef2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(ksDef1.equals((Object)ksDef2));
      assertTrue(ksDef1.equals((Object)ksDef0));
      assertFalse(ksDef2.equals((Object)ksDef1));
      assertFalse(ksDef2.equals((Object)ksDef0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertEquals(9, stringArray0.length);
      assertTrue(ksDef0.durable_writes);
      assertEquals(0, ksDef0.replication_factor);
      assertTrue(ksDef1.durable_writes);
      assertEquals(0, ksDef1.replication_factor);
      assertEquals(0, ksDef2.replication_factor);
      assertTrue(ksDef2.durable_writes);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(ksDef0, ksDef2);
      assertNotSame(ksDef0, ksDef1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(ksDef1, ksDef2);
      assertNotSame(ksDef1, ksDef0);
      assertNotSame(ksDef2, ksDef1);
      assertNotSame(ksDef2, ksDef0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(boolean0);
      assertEquals(0, ksDef0.getCf_defsSize());
      assertTrue(ksDef0.isDurable_writes());
      assertNull(ksDef0.getStrategy_class());
      assertEquals(0, ksDef0.getStrategy_optionsSize());
      assertEquals(0, ksDef0.getReplication_factor());
      assertFalse(ksDef0.isSetReplication_factor());
      assertFalse(ksDef0.isSetDurable_writes());
      assertFalse(ksDef0.isSetCf_defs());
      assertFalse(ksDef0.isSetStrategy_options());
      assertFalse(ksDef0.isSetStrategy_class());
      assertFalse(ksDef0.isSetName());
      assertNull(ksDef0.getName());
      assertTrue(ksDef1.isDurable_writes());
      assertNull(ksDef1.getName());
      assertNull(ksDef1.getStrategy_class());
      assertFalse(ksDef1.isSetStrategy_options());
      assertEquals(0, ksDef1.getReplication_factor());
      assertEquals(0, ksDef1.getCf_defsSize());
      assertFalse(ksDef1.isSetReplication_factor());
      assertFalse(ksDef1.isSetDurable_writes());
      assertEquals(0, ksDef1.getStrategy_optionsSize());
      assertFalse(ksDef1.isSetCf_defs());
      assertFalse(ksDef1.isSetStrategy_class());
      assertFalse(ksDef1.isSetName());
      assertFalse(ksDef2.isSetDurable_writes());
      assertFalse(ksDef2.isSetReplication_factor());
      assertFalse(ksDef2.isSetCf_defs());
      assertEquals(0, ksDef2.getReplication_factor());
      assertEquals(0, ksDef2.getStrategy_optionsSize());
      assertTrue(ksDef2.isSetName());
      assertEquals("", ksDef2.getName());
      assertTrue(ksDef2.isDurable_writes());
      assertTrue(ksDef2.isSetStrategy_class());
      assertEquals(0, ksDef2.getCf_defsSize());
      assertEquals("Unable to open transport to ", ksDef2.getStrategy_class());
      assertFalse(ksDef2.isSetStrategy_options());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "H5KN";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      
      String string1 = "";
      String[] stringArray0 = new String[0];
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      tSSLTransportFactory_TSSLTransportParameters0.requireClientAuth(cassandraHost0.DEFAULT_LIFO);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNull(tTransport0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      hThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(6L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient1.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      String string2 = hThriftClient0.toString();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("CassandraClient<H5KN:9160-6>", string2);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      hThriftClient1.setcassandraClient(hThriftClient0.cassandraClient);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(6L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient1.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      String string3 = hThriftClient0.getkeyspaceName();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNull(string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      boolean boolean0 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(boolean0);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      int int0 = hThriftClient1.getTimeout(hThriftClient0.cassandraHost);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(6L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, int0);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient1.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      String string4 = hThriftClient1.toString();
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(6L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("CassandraClient<H5KN:9160-6>", string4);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient1.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      hThriftClient0.setkeyspaceName(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(6L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("H5KN", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("H5KN:9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("H5KN(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<H5KN:9160-6>", hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(6L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<H5KN:9160-6>", hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      CassandraHost cassandraHost1 = null;
      try {
        cassandraHost1 = new CassandraHost(string3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.service.CassandraHost", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "3j>";
      int int0 = 536;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("3j>:536", cassandraHost0.getUrl());
      assertEquals(536, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("3j>", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.toString());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = null;
      boolean boolean0 = false;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(536, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("3j>:536", cassandraHost0.getUrl());
      assertEquals(536, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("3j>", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.toString());
      
      boolean boolean1 = true;
      boolean boolean2 = cassandraHost0.isPerformNameResolution();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean2);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(536, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("3j>:536", cassandraHost0.getUrl());
      assertEquals(536, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("3j>", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.toString());
      
      cassandraHost0.setLifo(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(536, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("3j>:536", cassandraHost0.getUrl());
      assertEquals(536, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("3j>", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.toString());
      
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(536, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("3j>:536", cassandraHost0.getUrl());
      assertEquals(536, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("3j>", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.toString());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(536, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(536, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("3j>:536", cassandraHost0.getUrl());
      assertEquals(536, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("3j>", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("3j>(200.42.42.0):536", cassandraHost0.toString());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(7L, hThriftClient0.getmySerial());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to 3j>(200.42.42.0):536 , java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2727a520
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "6";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      int int0 = 23;
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(23, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(8L, hThriftClient1.getmySerial());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hThriftClient1.equals(object0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(23, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(8L, hThriftClient1.getmySerial());
      
      boolean boolean1 = hThriftClient0.isOpen();
      assertTrue(boolean1 == boolean0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(boolean1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      
      String string1 = "4J*yHjhcP_fv;.8S-D";
      hThriftClient0.startToUse();
      assertFalse(string0.equals((Object)string1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(8L, hThriftClient0.getmySerial());
      
      int int1 = (-2362);
      CassandraHost cassandraHost1 = new CassandraHost(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(cassandraHost1.equals((Object)cassandraHost0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost1);
      assertEquals("4J*yHjhcP_fv;.8S-D(200.42.42.0):-2362", cassandraHost1.toString());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("4J*yHjhcP_fv;.8S-D:-2362", cassandraHost1.getUrl());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getLifo());
      assertEquals((-2362), cassandraHost1.getPort());
      assertEquals("4J*yHjhcP_fv;.8S-D", cassandraHost1.getHost());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("4J*yHjhcP_fv;.8S-D(200.42.42.0):-2362", cassandraHost1.getName());
      
      boolean boolean2 = true;
      int int2 = 1;
      cassandraHost1.setCassandraThriftSocketTimeout(int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(cassandraHost1.equals((Object)cassandraHost0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string1, string0);
      assertNotSame(cassandraHost1, cassandraHost0);
      assertEquals("4J*yHjhcP_fv;.8S-D(200.42.42.0):-2362", cassandraHost1.toString());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("4J*yHjhcP_fv;.8S-D:-2362", cassandraHost1.getUrl());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getLifo());
      assertEquals((-2362), cassandraHost1.getPort());
      assertEquals("4J*yHjhcP_fv;.8S-D", cassandraHost1.getHost());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(1, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("4J*yHjhcP_fv;.8S-D(200.42.42.0):-2362", cassandraHost1.getName());
      
      cassandraHost1.setMaxWaitTimeWhenExhausted(cassandraHost0.DEFAULT_PORT);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(cassandraHost1.equals((Object)cassandraHost0));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertNotSame(string1, string0);
      assertNotSame(cassandraHost1, cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("4J*yHjhcP_fv;.8S-D(200.42.42.0):-2362", cassandraHost1.toString());
      assertEquals("4J*yHjhcP_fv;.8S-D:-2362", cassandraHost1.getUrl());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getLifo());
      assertEquals((-2362), cassandraHost1.getPort());
      assertEquals("4J*yHjhcP_fv;.8S-D", cassandraHost1.getHost());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(1, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("4J*yHjhcP_fv;.8S-D(200.42.42.0):-2362", cassandraHost1.getName());
      assertEquals(9160L, cassandraHost1.getMaxWaitTimeWhenExhausted());
      
      cassandraHost1.setUseThriftFramedTransport(boolean2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(cassandraHost1.equals((Object)cassandraHost0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string1, string0);
      assertNotSame(cassandraHost1, cassandraHost0);
      assertEquals("4J*yHjhcP_fv;.8S-D(200.42.42.0):-2362", cassandraHost1.toString());
      assertEquals("4J*yHjhcP_fv;.8S-D:-2362", cassandraHost1.getUrl());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getLifo());
      assertEquals((-2362), cassandraHost1.getPort());
      assertEquals("4J*yHjhcP_fv;.8S-D", cassandraHost1.getHost());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(1, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("4J*yHjhcP_fv;.8S-D(200.42.42.0):-2362", cassandraHost1.getName());
      assertEquals(9160L, cassandraHost1.getMaxWaitTimeWhenExhausted());
      
      int int3 = hThriftClient1.getTimeout(cassandraHost1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(cassandraHost1.equals((Object)cassandraHost0));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(23, hThriftClient1.timeout);
      assertEquals(8L, hThriftClient1.mySerial);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(string1, string0);
      assertNotSame(cassandraHost1, cassandraHost0);
      assertEquals(1, int3);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals("4J*yHjhcP_fv;.8S-D(200.42.42.0):-2362", cassandraHost1.toString());
      assertEquals("4J*yHjhcP_fv;.8S-D:-2362", cassandraHost1.getUrl());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertTrue(cassandraHost1.getLifo());
      assertEquals((-2362), cassandraHost1.getPort());
      assertEquals("4J*yHjhcP_fv;.8S-D", cassandraHost1.getHost());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(1, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("4J*yHjhcP_fv;.8S-D(200.42.42.0):-2362", cassandraHost1.getName());
      assertEquals(9160L, cassandraHost1.getMaxWaitTimeWhenExhausted());
      
      boolean boolean3 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      TTransport tTransport0 = hThriftClient1.gettransport();
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(23, hThriftClient1.timeout);
      assertEquals(8L, hThriftClient1.mySerial);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertNull(tTransport0);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      
      TTransport tTransport1 = hThriftClient0.gettransport();
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertNull(tTransport1);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(8L, hThriftClient0.getmySerial());
      
      int int4 = 1;
      cassandraHost0.setMaxActive(int4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      
      cassandraHost0.setCassandraThriftSocketTimeout(hThriftClient0.timeout);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(8L, hThriftClient0.getmySerial());
      
      HThriftClient hThriftClient2 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(1392409281320L, hThriftClient2.useageStartTime);
      assertEquals(8L, hThriftClient2.mySerial);
      assertEquals(23, hThriftClient2.timeout);
      assertNotNull(hThriftClient2);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertEquals(8L, hThriftClient2.getmySerial());
      assertEquals(0L, hThriftClient2.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient2.getNAME_FORMAT());
      assertNull(hThriftClient2.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient2.getuseageStartTime());
      
      Map<String, String> map0 = hThriftClient2.getcredentials();
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(1392409281320L, hThriftClient2.useageStartTime);
      assertEquals(8L, hThriftClient2.mySerial);
      assertEquals(23, hThriftClient2.timeout);
      assertNotNull(map0);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertEquals(8L, hThriftClient2.getmySerial());
      assertEquals(0L, hThriftClient2.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient2.getNAME_FORMAT());
      assertNull(hThriftClient2.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient2.getuseageStartTime());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      hThriftClient2.setuseageStartTime(cassandraHost0.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(8L, hThriftClient2.mySerial);
      assertEquals(23, hThriftClient2.timeout);
      assertEquals((-1L), hThriftClient2.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertEquals(8L, hThriftClient2.getmySerial());
      assertEquals(1392409281321L, hThriftClient2.getSinceLastUsed());
      assertEquals((-1L), hThriftClient2.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient2.getNAME_FORMAT());
      assertNull(hThriftClient2.getkeyspaceName());
      
      hThriftClient0.clearAuthentication();
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      
      Logger logger0 = hThriftClient0.getlog();
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertNotNull(logger0);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      
      String string2 = hThriftClient0.getNAME_FORMAT();
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("CassandraClient<%s-%d>", string2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      
      hThriftClient0.setcassandraClient(hThriftClient2.cassandraClient);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(8L, hThriftClient2.mySerial);
      assertEquals(23, hThriftClient2.timeout);
      assertEquals((-1L), hThriftClient2.useageStartTime);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertEquals(8L, hThriftClient2.getmySerial());
      assertEquals(1392409281321L, hThriftClient2.getSinceLastUsed());
      assertEquals((-1L), hThriftClient2.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient2.getNAME_FORMAT());
      assertNull(hThriftClient2.getkeyspaceName());
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean4 = hThriftClient2.equals(object1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(8L, hThriftClient2.mySerial);
      assertEquals(23, hThriftClient2.timeout);
      assertEquals((-1L), hThriftClient2.useageStartTime);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(object1, object0);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertFalse(boolean4);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertEquals(8L, hThriftClient2.getmySerial());
      assertEquals(1392409281321L, hThriftClient2.getSinceLastUsed());
      assertEquals((-1L), hThriftClient2.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient2.getNAME_FORMAT());
      assertNull(hThriftClient2.getkeyspaceName());
      
      hThriftClient1.setcassandraClient(hThriftClient2.cassandraClient);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(23, hThriftClient1.timeout);
      assertEquals((-1L), hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertEquals(8L, hThriftClient2.mySerial);
      assertEquals(23, hThriftClient2.timeout);
      assertEquals((-1L), hThriftClient2.useageStartTime);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertEquals(1392409281321L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals((-1L), hThriftClient1.getuseageStartTime());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(8L, hThriftClient2.getmySerial());
      assertEquals(1392409281321L, hThriftClient2.getSinceLastUsed());
      assertEquals((-1L), hThriftClient2.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient2.getNAME_FORMAT());
      assertNull(hThriftClient2.getkeyspaceName());
      
      String string3 = "Closing client {}";
      hThriftClient2.setkeyspaceName(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(8L, hThriftClient2.mySerial);
      assertEquals(23, hThriftClient2.timeout);
      assertEquals((-1L), hThriftClient2.useageStartTime);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertEquals("Closing client {}", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertEquals(8L, hThriftClient2.getmySerial());
      assertEquals(1392409281321L, hThriftClient2.getSinceLastUsed());
      assertEquals((-1L), hThriftClient2.getuseageStartTime());
      assertEquals("Closing client {}", hThriftClient2.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient2.getNAME_FORMAT());
      
      hThriftClient0.setcassandraClient(hThriftClient1.cassandraClient);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(cassandraHost0.equals((Object)cassandraHost1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(23, hThriftClient0.timeout);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(23, hThriftClient1.timeout);
      assertEquals((-1L), hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("0.0.0.6", cassandraHost0.getIp());
      assertEquals("6", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("6:9160", cassandraHost0.getUrl());
      assertEquals("6(0.0.0.6):9160", cassandraHost0.toString());
      assertEquals(23, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(1, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertEquals("Closing client {}", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertEquals(1392409281321L, hThriftClient1.getSinceLastUsed());
      assertEquals("Closing client {}", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals((-1L), hThriftClient1.getuseageStartTime());
      assertEquals(8L, hThriftClient1.getmySerial());
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "TOA%";
      int int0 = 2;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      
      int int1 = 114;
      cassandraHost0.setMaxActive(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertFalse(int0 == int1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      assertNotNull(nOPLogger0);
      
      hThriftClient0.setlog(nOPLogger0);
      assertFalse(int0 == int1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      hThriftClient0.keyspaceName = string0;
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("TOA%", hThriftClient0.getkeyspaceName());
      
      String string1 = "index_clause";
      hThriftClient0.keyspaceName = string1;
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("index_clause", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      AtomicLong atomicLong0 = hThriftClient0.getserial();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertNotNull(atomicLong0);
      assertNotSame(string0, string1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("index_clause", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(9L, atomicLong0.get());
      assertEquals((short)9, atomicLong0.shortValue());
      assertEquals("9", atomicLong0.toString());
      assertEquals((byte)9, atomicLong0.byteValue());
      assertEquals(9L, atomicLong0.longValue());
      assertEquals(9, atomicLong0.intValue());
      assertEquals(9.0F, atomicLong0.floatValue(), 0.01F);
      
      String string2 = hThriftClient0.getkeyspaceName();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("index_clause", string2);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("index_clause", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      String string3 = hThriftClient0.getNAME_FORMAT();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertNotNull(string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("CassandraClient<%s-%d>", string3);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("index_clause", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      AtomicLong atomicLong1 = hThriftClient0.getserial();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertNotNull(atomicLong1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(atomicLong1, atomicLong0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("index_clause", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(9.0, atomicLong1.doubleValue(), 0.01);
      assertEquals((short)9, atomicLong1.shortValue());
      assertEquals(9L, atomicLong1.get());
      assertEquals(9, atomicLong1.intValue());
      assertEquals((byte)9, atomicLong1.byteValue());
      assertEquals(9L, atomicLong1.longValue());
      assertEquals(9.0F, atomicLong1.floatValue(), 0.01F);
      assertEquals("9", atomicLong1.toString());
      
      Cassandra.Client cassandra_Client0 = hThriftClient0.getcassandraClient();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertNull(cassandra_Client0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("index_clause", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      long long0 = hThriftClient0.getmySerial();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertEquals(9L, long0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(114, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.getName());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("TOA%(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("TOA%:2", cassandraHost0.getUrl());
      assertEquals("TOA%", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals("index_clause", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "daCRa<=kIi._";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("daCRa<=kIi._(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("daCRa<=kIi._", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("daCRa<=kIi._(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("daCRa<=kIi._:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      String string1 = "s~v5Q?Ssm-y+|";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      String string2 = "Transport open status {} for client {}";
      stringArray0[2] = string2;
      boolean boolean0 = true;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0, boolean0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("daCRa<=kIi._(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("daCRa<=kIi._", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("daCRa<=kIi._(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("daCRa<=kIi._:9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      AuthenticationRequest authenticationRequest0 = new AuthenticationRequest();
      assertNotNull(authenticationRequest0);
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertFalse(authenticationRequest0.isSetCredentials());
      
      boolean boolean1 = false;
      AuthenticationRequest authenticationRequest1 = new AuthenticationRequest();
      assertTrue(authenticationRequest1.equals((Object)authenticationRequest0));
      assertNotNull(authenticationRequest1);
      assertFalse(authenticationRequest1.isSetCredentials());
      assertEquals(0, authenticationRequest1.getCredentialsSize());
      
      int int0 = authenticationRequest0.compareTo(authenticationRequest1);
      assertTrue(authenticationRequest0.equals((Object)authenticationRequest1));
      assertTrue(authenticationRequest1.equals((Object)authenticationRequest0));
      assertNotSame(authenticationRequest0, authenticationRequest1);
      assertNotSame(authenticationRequest1, authenticationRequest0);
      assertEquals(0, int0);
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertFalse(authenticationRequest0.isSetCredentials());
      assertFalse(authenticationRequest1.isSetCredentials());
      assertEquals(0, authenticationRequest1.getCredentialsSize());
      
      authenticationRequest0.setCredentialsIsSet(boolean1);
      assertTrue(authenticationRequest0.equals((Object)authenticationRequest1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(authenticationRequest0, authenticationRequest1);
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertFalse(authenticationRequest0.isSetCredentials());
      
      Map<String, String> map0 = authenticationRequest0.getCredentials();
      assertTrue(authenticationRequest0.equals((Object)authenticationRequest1));
      assertNull(map0);
      assertNotSame(authenticationRequest0, authenticationRequest1);
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertFalse(authenticationRequest0.isSetCredentials());
      
      // Undeclared exception!
      try { 
        hThriftClient0.setAuthenticated(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "A[_c5GnR%c zZOm";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.setkeyspaceName(string0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      String string1 = hThriftClient0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("CassandraClient<A[_c5GnR%c zZOm:0-3>", string1);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      cassandraHost0.setMaxActive(int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      
      hThriftClient0.startToUse();
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.startToUse();
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      boolean boolean0 = false;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      
      boolean boolean1 = false;
      cassandraHost0.setUseSocketKeepalive(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      
      TBinaryProtocol tBinaryProtocol0 = new TBinaryProtocol(hThriftClient0.transport);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotNull(tBinaryProtocol0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tBinaryProtocol0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotNull(cassandra_Client0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.setcassandraClient(cassandra_Client0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      Map<String, String> map0 = hThriftClient0.getcredentials();
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotNull(map0);
      assertNotSame(string0, string1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      boolean boolean2 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertTrue(boolean2);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      cassandraHost0.setMaxActive(int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotNull(cassandraHost1);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost1.toString());
      assertEquals(0, cassandraHost1.getMaxActive());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost1.getUrl());
      assertTrue(cassandraHost1.getLifo());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertFalse(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost1.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost1.getHost());
      assertEquals(0, cassandraHost1.getPort());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      CassandraHost cassandraHost2 = hThriftClient0.getCassandraHost();
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost2);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertSame(cassandraHost2, cassandraHost1);
      assertSame(cassandraHost2, cassandraHost0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals(0, cassandraHost2.getPort());
      assertTrue(cassandraHost2.getLifo());
      assertFalse(cassandraHost2.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost2.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost2.getMaxWaitTimeWhenExhausted());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost2.getUrl());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost2.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost2.getHost());
      assertEquals("200.42.42.0", cassandraHost2.getIp());
      assertFalse(cassandraHost2.getUseSocketKeepalive());
      assertEquals(0, cassandraHost2.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost2.toString());
      
      String string2 = hThriftClient0.getNAME_FORMAT();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("CassandraClient<%s-%d>", string2);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      Map<String, String> map1 = hThriftClient0.getcredentials();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotNull(map1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertSame(map1, map0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      
      hThriftClient0.clearAuthentication();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNull(tTransport0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      String string3 = "";
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(string2, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.clearAuthentication();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertEquals(0L, long0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(3L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient1.getkeyspaceName());
      assertEquals(3L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      
      hThriftClient0.startToUse();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      hThriftClient1.setcassandraClient(cassandra_Client0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(3L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient1.getkeyspaceName());
      assertEquals(3L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      
      hThriftClient1.setuseageStartTime(long0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(3L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals("A[_c5GnR%c zZOm:0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("A[_c5GnR%c zZOm(200.42.42.0):0", cassandraHost0.getName());
      assertEquals("A[_c5GnR%c zZOm", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("A[_c5GnR%c zZOm", hThriftClient1.getkeyspaceName());
      assertEquals(3L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      OutputStream outputStream0 = null;
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(outputStream0);
      assertNotNull(tIOStreamTransport0);
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(4L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getCassandra(hThriftClient0.keyspaceName);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(4L, hThriftClient1.mySerial);
      assertNotNull(cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      
      try { 
        tIOStreamTransport0.flush();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot flush null outputStream
         //
         verifyException("org.apache.thrift.transport.TIOStreamTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "CD~`";
      int int0 = (-227);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      
      String string1 = "";
      String[] stringArray0 = new String[2];
      hThriftClient0.setuseageStartTime(int0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals((-227L), hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals((-227L), hThriftClient0.getuseageStartTime());
      assertEquals(1392409281547L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      stringArray0[0] = hThriftClient0.NAME_FORMAT;
      stringArray0[1] = hThriftClient0.NAME_FORMAT;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters1 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0, cassandraHost0.DEFAULT_LIFO);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters1.equals((Object)tSSLTransportFactory_TSSLTransportParameters0));
      assertEquals(2, stringArray0.length);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      
      TNonblockingSocket tNonblockingSocket0 = new TNonblockingSocket(hThriftClient0.NAME_FORMAT, cassandraHost0.DEFAULT_MAX_ACTIVE);
      assertFalse(string0.equals((Object)string1));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals((-227L), hThriftClient0.useageStartTime);
      assertNotNull(tNonblockingSocket0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals((-227L), hThriftClient0.getuseageStartTime());
      assertEquals(1392409281547L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      
      hThriftClient0.transport = (TTransport) tNonblockingSocket0;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals((-227L), hThriftClient0.getuseageStartTime());
      assertEquals(1392409281547L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      hThriftClient0.params = tSSLTransportFactory_TSSLTransportParameters1;
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals((-227L), hThriftClient0.getuseageStartTime());
      assertEquals(1392409281547L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      int int1 = hThriftClient0.getTimeout(cassandraHost0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertFalse(int1 == int0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals((-227L), hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertEquals(0, int1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals((-227L), hThriftClient0.getuseageStartTime());
      assertEquals(1392409281547L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals((-227L), hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals((-227L), hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals((-227L), hThriftClient0.getuseageStartTime());
      assertEquals(1392409281547L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281547L, hThriftClient1.getSinceLastUsed());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals((-227L), hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      
      boolean boolean0 = tNonblockingSocket0.isOpen();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals((-227L), hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertSame(hThriftClient0, hThriftClient1);
      assertFalse(boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals((-227L), hThriftClient0.getuseageStartTime());
      assertEquals(1392409281547L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters2 = hThriftClient1.getparams();
      assertFalse(string0.equals((Object)string1));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters2.equals((Object)tSSLTransportFactory_TSSLTransportParameters0));
      assertFalse(int0 == int1);
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals((-227L), hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals((-227L), hThriftClient1.useageStartTime);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters2);
      assertNotSame(string0, string1);
      assertSame(tSSLTransportFactory_TSSLTransportParameters2, tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters2, tSSLTransportFactory_TSSLTransportParameters0);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals((-227L), hThriftClient0.getuseageStartTime());
      assertEquals(1392409281547L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281547L, hThriftClient1.getSinceLastUsed());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals((-227L), hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      
      hThriftClient0.clearAuthentication();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters2));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals((-227L), hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters2);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals((-227L), hThriftClient0.getuseageStartTime());
      assertEquals(1392409281547L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      long long0 = hThriftClient1.getSinceLastUsed();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters2));
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals((-227L), hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals((-227L), hThriftClient1.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(1392409281547L, long0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals((-227L), hThriftClient0.getuseageStartTime());
      assertEquals(1392409281547L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281547L, hThriftClient1.getSinceLastUsed());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals((-227L), hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      
      hThriftClient0.setuseageStartTime(int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters2));
      assertFalse(int1 == int0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters2);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      
      String string2 = null;
      int int2 = hThriftClient1.getTimeout(hThriftClient0.cassandraHost);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters1));
      assertFalse(tSSLTransportFactory_TSSLTransportParameters0.equals((Object)tSSLTransportFactory_TSSLTransportParameters2));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters1);
      assertNotSame(tSSLTransportFactory_TSSLTransportParameters0, tSSLTransportFactory_TSSLTransportParameters2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, int2);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.toString());
      assertEquals("CD~`", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CD~`(200.42.42.0):-227", cassandraHost0.getName());
      assertEquals((-227), cassandraHost0.getPort());
      assertEquals("CD~`:-227", cassandraHost0.getUrl());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertNull(hThriftClient1.getkeyspaceName());
      
      // Undeclared exception!
      try { 
        hThriftClient0.equals(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      CassandraHost cassandraHost0 = null;
      String string0 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      String string1 = "{!.n'l";
      String string2 = "*}ufP;w PF:qSsf(?";
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(stringArray0[0], stringArray0[0], string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      String string3 = "";
      String string4 = "";
      String string5 = "O";
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string3, string4, string5, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(1, stringArray0.length);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string3, string4);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      
      int int0 = hThriftClient0.getTimeout(cassandraHost0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertEquals(0, int0);
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      Map<String, String> map0 = hThriftClient0.getcredentials();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(map0);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String string6 = "jP=,26_kJ";
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      tSSLTransportFactory_TSSLTransportParameters0.requireClientAuth(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      boolean boolean0 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      boolean boolean1 = false;
      tSSLTransportFactory_TSSLTransportParameters0.requireClientAuth(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      Logger logger0 = hThriftClient0.getlog();
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(logger0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.setuseageStartTime(cassandraHost0.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      
      hThriftClient0.setlog(logger0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      
      Cassandra.Client cassandra_Client0 = hThriftClient0.getcassandraClient();
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(cassandra_Client0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      
      long long0 = hThriftClient0.getSinceLastUsed();
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1392409281321L, long0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      
      String string1 = hThriftClient0.getkeyspaceName();
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(string1);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      
      long long1 = hThriftClient0.getuseageStartTime();
      assertFalse(long1 == long0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals((-1L), long1);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(1392409281321L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals((-1L), hThriftClient0.getuseageStartTime());
      
      hThriftClient0.startToUse();
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      String string2 = hThriftClient0.toString();
      assertFalse(string2.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertEquals("CassandraClient<:9160-7>", string2);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      AtomicLong atomicLong0 = hThriftClient0.getserial();
      assertFalse(string0.equals((Object)string2));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(atomicLong0);
      assertNotSame(string0, string2);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("7", atomicLong0.toString());
      assertEquals((short)7, atomicLong0.shortValue());
      assertEquals(7, atomicLong0.intValue());
      assertEquals(7.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)7, atomicLong0.byteValue());
      assertEquals(7.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(7L, atomicLong0.get());
      assertEquals(7L, atomicLong0.longValue());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.setcassandraClient(cassandra_Client0);
      assertFalse(string0.equals((Object)string2));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string2);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      int int0 = hThriftClient0.getTimeout(cassandraHost0);
      assertFalse(string0.equals((Object)string2));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string2);
      assertEquals(0, int0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string2));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string2);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      
      Logger logger1 = hThriftClient0.getlog();
      assertFalse(string0.equals((Object)string2));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(logger1);
      assertNotSame(string0, string2);
      assertSame(logger1, logger0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "hbd<`LvH;rP!-[mV";
      int int0 = (-1067);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      
      CassandraHost cassandraHost1 = hThriftClient1.getCassandraHost();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1L, hThriftClient1.mySerial);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost1, cassandraHost0);
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost1.getName());
      assertEquals((-1067), cassandraHost1.getPort());
      assertTrue(cassandraHost1.getUseSocketKeepalive());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost1.getHost());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost1.toString());
      assertTrue(cassandraHost1.getLifo());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost1.getUrl());
      
      Logger logger0 = hThriftClient0.getlog();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(logger0);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      AuthenticationRequest authenticationRequest0 = new AuthenticationRequest(hThriftClient1.credentials);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1L, hThriftClient1.mySerial);
      assertNotNull(authenticationRequest0);
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertTrue(authenticationRequest0.isSetCredentials());
      
      AuthenticationRequest authenticationRequest1 = new AuthenticationRequest(authenticationRequest0);
      assertTrue(authenticationRequest1.equals((Object)authenticationRequest0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1L, hThriftClient1.mySerial);
      assertNotNull(authenticationRequest1);
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertTrue(authenticationRequest0.isSetCredentials());
      assertTrue(authenticationRequest1.isSetCredentials());
      assertEquals(0, authenticationRequest1.getCredentialsSize());
      
      AuthenticationRequest._Fields authenticationRequest__Fields0 = AuthenticationRequest._Fields.CREDENTIALS;
      boolean boolean1 = true;
      authenticationRequest1.setCredentialsIsSet(boolean1);
      assertTrue(authenticationRequest0.equals((Object)authenticationRequest1));
      assertTrue(authenticationRequest1.equals((Object)authenticationRequest0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1L, hThriftClient1.mySerial);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(authenticationRequest0, authenticationRequest1);
      assertNotSame(authenticationRequest1, authenticationRequest0);
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertTrue(authenticationRequest0.isSetCredentials());
      assertTrue(authenticationRequest1.isSetCredentials());
      assertEquals(0, authenticationRequest1.getCredentialsSize());
      
      boolean boolean2 = authenticationRequest1.isSet(authenticationRequest__Fields0);
      assertTrue(authenticationRequest0.equals((Object)authenticationRequest1));
      assertTrue(authenticationRequest1.equals((Object)authenticationRequest0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1L, hThriftClient1.mySerial);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(authenticationRequest0, authenticationRequest1);
      assertNotSame(authenticationRequest1, authenticationRequest0);
      assertTrue(boolean2);
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertTrue(authenticationRequest0.isSetCredentials());
      assertTrue(authenticationRequest1.isSetCredentials());
      assertEquals(0, authenticationRequest1.getCredentialsSize());
      
      Map<String, String> map0 = authenticationRequest1.getCredentials();
      assertTrue(authenticationRequest0.equals((Object)authenticationRequest1));
      assertTrue(authenticationRequest1.equals((Object)authenticationRequest0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1L, hThriftClient1.mySerial);
      assertNotNull(map0);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(authenticationRequest0, authenticationRequest1);
      assertNotSame(authenticationRequest1, authenticationRequest0);
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertTrue(authenticationRequest0.isSetCredentials());
      assertTrue(authenticationRequest1.isSetCredentials());
      assertEquals(0, authenticationRequest1.getCredentialsSize());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      hThriftClient0.setAuthenticated(map0);
      assertTrue(authenticationRequest0.equals((Object)authenticationRequest1));
      assertTrue(authenticationRequest1.equals((Object)authenticationRequest0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1L, hThriftClient1.mySerial);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(authenticationRequest0, authenticationRequest1);
      assertNotSame(authenticationRequest1, authenticationRequest0);
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("hbd<`LvH;rP!-[mV:-1067", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("hbd<`LvH;rP!-[mV", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1067), cassandraHost0.getPort());
      assertEquals("hbd<`LvH;rP!-[mV(200.42.42.0):-1067", cassandraHost0.toString());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0, authenticationRequest0.getCredentialsSize());
      assertTrue(authenticationRequest0.isSetCredentials());
      assertTrue(authenticationRequest1.isSetCredentials());
      assertEquals(0, authenticationRequest1.getCredentialsSize());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "";
      int int0 = 403;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      
      String string1 = "";
      cassandraHost0.setCassandraThriftSocketTimeout(int0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertSame(string0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      boolean boolean0 = cassandraHost0.isPerformNameResolution();
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertSame(string0, string1);
      assertFalse(boolean0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(string0, string1);
      assertEquals(4, stringArray0.length);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(4, stringArray0.length);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertEquals(4, stringArray0.length);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNull(tTransport0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      String string2 = "";
      String string3 = "k)|M5i%<C|";
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(stringArray0[2], string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertEquals(4, stringArray0.length);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(string2, string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertEquals(4, stringArray0.length);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertSame(string2, string0);
      assertSame(string2, string1);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertEquals(4, stringArray0.length);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(403, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(2L, hThriftClient1.mySerial);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(2L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      boolean boolean1 = true;
      cassandraHost0.setUseSocketKeepalive(boolean1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      
      String string4 = "org.apache.http.conn.scheme.PlainSocketFactory";
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(string1, stringArray0[2], string4, stringArray0[3]);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      
      long long0 = 714L;
      String string5 = "d3C'dE1qv%h:.@";
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(string3, string5);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4, stringArray0.length);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertEquals(714L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getcassandraClient();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertEquals(4, stringArray0.length);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(403, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(2L, hThriftClient1.mySerial);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNull(cassandra_Client0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertEquals(714L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(2L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.setkeyspaceName(string1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertEquals(4, stringArray0.length);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertEquals(714L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      hThriftClient1.setlog(hThriftClient0.log);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertEquals(4, stringArray0.length);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(403, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(2L, hThriftClient1.mySerial);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertEquals(714L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(2L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals("", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      boolean boolean2 = hThriftClient0.isAlreadyAuthenticated(hThriftClient1.credentials);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, stringArray0.length);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(403, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(2L, hThriftClient1.mySerial);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(hThriftClient0, hThriftClient1);
      assertTrue(boolean2);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertEquals(714L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(2L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals("", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.setcassandraClient(hThriftClient1.cassandraClient);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertEquals(4, stringArray0.length);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(403, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(2L, hThriftClient1.mySerial);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertEquals(714L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(2L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals("", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      CassandraHost cassandraHost1 = hThriftClient0.getCassandraHost();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertEquals(4, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotNull(cassandraHost1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertSame(cassandraHost1, cassandraHost0);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(hThriftClient0, hThriftClient1);
      assertTrue(cassandraHost1.getUseSocketKeepalive());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals(":403", cassandraHost1.getUrl());
      assertTrue(cassandraHost1.getLifo());
      assertEquals("127.0.0.1", cassandraHost1.getIp());
      assertEquals(403, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals(714L, cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):403", cassandraHost1.getName());
      assertEquals("", cassandraHost1.getHost());
      assertEquals(403, cassandraHost1.getPort());
      assertEquals("(127.0.0.1):403", cassandraHost1.toString());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertEquals(714L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      HThriftClient hThriftClient2 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertEquals(4, stringArray0.length);
      assertEquals(2L, hThriftClient2.mySerial);
      assertEquals(403, hThriftClient2.timeout);
      assertEquals(0L, hThriftClient2.useageStartTime);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertSame(hThriftClient2, hThriftClient0);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("", hThriftClient2.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(0L, hThriftClient2.getuseageStartTime());
      assertEquals(2L, hThriftClient2.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient2.getNAME_FORMAT());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertEquals(714L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      String string6 = ".]iJcwN7z`D_BwRfYu";
      hThriftClient0.setkeyspaceName(string6);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertEquals(4, stringArray0.length);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(403, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(cassandraHost0, cassandraHost1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(403, cassandraHost0.getPort());
      assertEquals(403, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("(127.0.0.1):403", cassandraHost0.getName());
      assertEquals("(127.0.0.1):403", cassandraHost0.toString());
      assertEquals(":403", cassandraHost0.getUrl());
      assertEquals(714L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(".]iJcwN7z`D_BwRfYu", hThriftClient0.getkeyspaceName());
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      Cassandra.Client cassandra_Client0 = hThriftClient0.getcassandraClient();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(cassandra_Client0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      hThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      String string1 = null;
      int int1 = (-1403);
      cassandraHost0.setMaxActive(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals((-1403), cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      cassandraHost0.setLifo(boolean1);
      assertFalse(int0 == int1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals((-1403), cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertFalse(int0 == int1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals((-1403), cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getLifo());
      
      hThriftClient0.setkeyspaceName(string1);
      assertFalse(int0 == int1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals((-1403), cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(int0 == int1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(1L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1403), cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      
      hThriftClient1.setuseageStartTime(cassandraHost0.DEFAULT_MAX_ACTIVE);
      assertFalse(int0 == int1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1L, hThriftClient1.mySerial);
      assertEquals(50L, hThriftClient1.useageStartTime);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals((-1403), cassandraHost0.getMaxActive());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(50L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281270L, hThriftClient0.getSinceLastUsed());
      assertEquals(1392409281270L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals(50L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      
      long long0 = (-2500L);
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):0 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      String string1 = "bn;dxFr8R'";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      String string2 = "Xt*5";
      stringArray0[2] = string2;
      long long0 = (-1719L);
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1719L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      boolean boolean0 = false;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string1, stringArray0, boolean0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1719L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      String string3 = " , ";
      int int0 = 0;
      TSocket tSocket0 = new TSocket(string3, int0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(tSocket0);
      assertEquals(0, tSocket0.getBufferPosition());
      assertFalse(tSocket0.isOpen());
      assertEquals((-1), tSocket0.getBytesRemainingInBuffer());
      
      hThriftClient0.transport = (TTransport) tSocket0;
      assertEquals(0, tSocket0.getBufferPosition());
      assertFalse(tSocket0.isOpen());
      assertEquals((-1), tSocket0.getBytesRemainingInBuffer());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1719L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      hThriftClient0.clearAuthentication();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertEquals(5, stringArray0.length);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1719L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      boolean boolean1 = hThriftClient0.isOpen();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertFalse(boolean1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1719L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      byte[] byteArray0 = tSocket0.getBuffer();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNull(byteArray0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals(0, tSocket0.getBufferPosition());
      assertFalse(tSocket0.isOpen());
      assertEquals((-1), tSocket0.getBytesRemainingInBuffer());
      
      Map<String, String> map0 = hThriftClient0.getcredentials();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(boolean0 == boolean1);
      assertEquals(5, stringArray0.length);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(map0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1719L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      boolean boolean2 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertEquals(5, stringArray0.length);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertTrue(boolean2);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1719L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      boolean boolean0 = cassandraHost0.isPerformNameResolution();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertFalse(boolean0);
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      int int1 = (-200);
      cassandraHost0.setMaxActive(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals((-200), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(string0, string0);
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(int0 == int1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":0", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals((-200), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      boolean boolean1 = false;
      cassandraHost0.setLifo(boolean1);
      assertFalse(int0 == int1);
      assertTrue(boolean1 == boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":0", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals((-200), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      TFramedTransport tFramedTransport0 = new TFramedTransport(hThriftClient0.transport, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(tFramedTransport0);
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":0", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals((-200), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, tFramedTransport0.getBufferPosition());
      assertEquals(0, tFramedTransport0.getBytesRemainingInBuffer());
      
      String string1 = "}yXm57Xe<QYT";
      String string2 = "V${>2<OWFB~<T(20R9";
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(hThriftClient0.keyspaceName, string1, string2, hThriftClient0.keyspaceName);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":0", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals((-200), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      hThriftClient0.settransport(tFramedTransport0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("(127.0.0.1):0", cassandraHost0.getName());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(":0", cassandraHost0.getUrl());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):0", cassandraHost0.toString());
      assertEquals((-200), cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, tFramedTransport0.getBufferPosition());
      assertEquals(0, tFramedTransport0.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hThriftClient0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.transport.TFramedTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "Ucl;&)l;U";
      int int0 = 2;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      boolean boolean0 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string1 = "!x";
      stringArray0[5] = string1;
      stringArray0[6] = string0;
      String string2 = "mC3y}-> *1Q/5\\<l(gp";
      stringArray0[7] = string2;
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(string0, stringArray0, cassandraHost0.DEFAULT_LIFO);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      CassandraHost cassandraHost1 = hThriftClient1.getCassandraHost();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost1, cassandraHost0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost1.toString());
      assertEquals("Ucl;&)l;U:2", cassandraHost1.getUrl());
      assertTrue(cassandraHost1.getLifo());
      assertFalse(cassandraHost1.getUseSocketKeepalive());
      assertEquals(0, cassandraHost1.getCassandraThriftSocketTimeout());
      assertEquals("200.42.42.0", cassandraHost1.getIp());
      assertEquals(50, cassandraHost1.getMaxActive());
      assertEquals("Ucl;&)l;U", cassandraHost1.getHost());
      assertEquals((-1L), cassandraHost1.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost1.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost1.getName());
      assertEquals(2, cassandraHost1.getPort());
      
      hThriftClient1.clearAuthentication();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      boolean boolean1 = false;
      int int1 = 229;
      cassandraHost0.setMaxActive(int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(229, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      cassandraHost0.setLifo(boolean1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals(2, cassandraHost0.getPort());
      assertEquals(229, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      int int2 = (-1587);
      cassandraHost0.setMaxActive(int2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1587), cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      cassandraHost0.setMaxWaitTimeWhenExhausted(hThriftClient0.useageStartTime);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1587), cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      hThriftClient1.setAuthenticated(hThriftClient0.credentials);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1587), cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      int int3 = hThriftClient1.getTimeout(cassandraHost0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals(0, int3);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1587), cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      hThriftClient1.clearAuthentication();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1587), cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      hThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1587), cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNull(tTransport0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1587), cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      String string3 = hThriftClient1.getkeyspaceName();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNull(string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1587), cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      boolean boolean2 = hThriftClient0.isOpen();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(cassandraHost0, cassandraHost1);
      assertFalse(boolean2);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1587), cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      hThriftClient1.setkeyspaceName(hThriftClient0.keyspaceName);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost0, cassandraHost1);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1587), cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      CassandraHost cassandraHost2 = hThriftClient1.getCassandraHost();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertEquals(8, stringArray0.length);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandraHost0, cassandraHost1);
      assertSame(cassandraHost0, cassandraHost2);
      assertSame(cassandraHost2, cassandraHost1);
      assertSame(cassandraHost2, cassandraHost0);
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.getName());
      assertEquals("Ucl;&)l;U", cassandraHost0.getHost());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Ucl;&)l;U:2", cassandraHost0.getUrl());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost0.toString());
      assertEquals((-1587), cassandraHost0.getMaxActive());
      assertEquals(2, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost2.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost2.getUseSocketKeepalive());
      assertEquals("Ucl;&)l;U:2", cassandraHost2.getUrl());
      assertEquals((-1587), cassandraHost2.getMaxActive());
      assertFalse(cassandraHost2.getLifo());
      assertEquals(0L, cassandraHost2.getMaxWaitTimeWhenExhausted());
      assertEquals(2, cassandraHost2.getPort());
      assertEquals("Ucl;&)l;U", cassandraHost2.getHost());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost2.toString());
      assertEquals("200.42.42.0", cassandraHost2.getIp());
      assertTrue(cassandraHost2.getUseThriftFramedTransport());
      assertEquals("Ucl;&)l;U(200.42.42.0):2", cassandraHost2.getName());
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "";
      int int0 = (-2190);
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(5L, hThriftClient0.getmySerial());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      hThriftClient1.transport = hThriftClient0.transport;
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      HThriftClient hThriftClient2 = hThriftClient0.close();
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(5L, hThriftClient2.mySerial);
      assertEquals(0, hThriftClient2.timeout);
      assertEquals(0L, hThriftClient2.useageStartTime);
      assertNotNull(hThriftClient2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(5L, hThriftClient2.getmySerial());
      assertNull(hThriftClient2.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(0L, hThriftClient2.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient2.getNAME_FORMAT());
      
      boolean boolean0 = hThriftClient2.isOpen();
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(5L, hThriftClient2.mySerial);
      assertEquals(0, hThriftClient2.timeout);
      assertEquals(0L, hThriftClient2.useageStartTime);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertFalse(boolean0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(5L, hThriftClient2.getmySerial());
      assertNull(hThriftClient2.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient2.getSinceLastUsed());
      assertEquals(0L, hThriftClient2.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient2.getNAME_FORMAT());
      
      hThriftClient1.setparams(hThriftClient0.params);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      boolean boolean1 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      hThriftClient0.setparams(hThriftClient1.params);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      hThriftClient1.params = hThriftClient0.params;
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      int int1 = 0;
      cassandraHost0.setMaxActive(int1);
      assertFalse(int1 == int0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      long long0 = 1082L;
      boolean boolean2 = cassandraHost0.isPerformNameResolution();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertFalse(boolean2);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      boolean boolean3 = true;
      cassandraHost0.setLifo(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      hThriftClient0.setuseageStartTime(long0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(1082L, hThriftClient0.useageStartTime);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1082L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409280238L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      
      boolean boolean4 = true;
      cassandraHost0.setLifo(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      long long1 = 1010L;
      cassandraHost0.setMaxWaitTimeWhenExhausted(long1);
      assertFalse(long1 == long0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(1010L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      String string1 = "Closing client {}";
      hThriftClient0.setkeyspaceName(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(1082L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertNotSame(string1, string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(1010L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1082L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("Closing client {}", hThriftClient0.getkeyspaceName());
      assertEquals(1392409280238L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      
      AtomicLong atomicLong0 = hThriftClient1.getserial();
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(1082L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1082L, hThriftClient1.useageStartTime);
      assertNotNull(atomicLong0);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(1010L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1082L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("Closing client {}", hThriftClient0.getkeyspaceName());
      assertEquals(1392409280238L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(1392409280238L, hThriftClient1.getSinceLastUsed());
      assertEquals("Closing client {}", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1082L, hThriftClient1.getuseageStartTime());
      assertEquals(5.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("5", atomicLong0.toString());
      assertEquals((byte)5, atomicLong0.byteValue());
      assertEquals(5L, atomicLong0.longValue());
      assertEquals(5.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((short)5, atomicLong0.shortValue());
      assertEquals(5L, atomicLong0.get());
      assertEquals(5, atomicLong0.intValue());
      
      cassandraHost0.setMaxWaitTimeWhenExhausted(hThriftClient1.useageStartTime);
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(1082L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1082L, hThriftClient1.useageStartTime);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1082L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1082L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("Closing client {}", hThriftClient0.getkeyspaceName());
      assertEquals(1392409280238L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(1392409280238L, hThriftClient1.getSinceLastUsed());
      assertEquals("Closing client {}", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1082L, hThriftClient1.getuseageStartTime());
      
      String string2 = hThriftClient0.getkeyspaceName();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(1082L, hThriftClient0.useageStartTime);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("Closing client {}", string2);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1082L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1082L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("Closing client {}", hThriftClient0.getkeyspaceName());
      assertEquals(1392409280238L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      
      AtomicLong atomicLong1 = hThriftClient1.getserial();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(1082L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1082L, hThriftClient1.useageStartTime);
      assertNotNull(atomicLong1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(atomicLong1, atomicLong0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1082L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1082L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("Closing client {}", hThriftClient0.getkeyspaceName());
      assertEquals(1392409280238L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(1392409280238L, hThriftClient1.getSinceLastUsed());
      assertEquals("Closing client {}", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1082L, hThriftClient1.getuseageStartTime());
      assertEquals("5", atomicLong1.toString());
      assertEquals((short)5, atomicLong1.shortValue());
      assertEquals(5, atomicLong1.intValue());
      assertEquals((byte)5, atomicLong1.byteValue());
      assertEquals(5.0F, atomicLong1.floatValue(), 0.01F);
      assertEquals(5L, atomicLong1.get());
      assertEquals(5.0, atomicLong1.doubleValue(), 0.01);
      assertEquals(5L, atomicLong1.longValue());
      
      long long2 = hThriftClient1.getuseageStartTime();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(1082L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1082L, hThriftClient1.useageStartTime);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertEquals(1082L, long2);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1082L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1082L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("Closing client {}", hThriftClient0.getkeyspaceName());
      assertEquals(1392409280238L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(1392409280238L, hThriftClient1.getSinceLastUsed());
      assertEquals("Closing client {}", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1082L, hThriftClient1.getuseageStartTime());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(1082L, hThriftClient0.useageStartTime);
      assertNull(tTransport0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(1082L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(1082L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("Closing client {}", hThriftClient0.getkeyspaceName());
      assertEquals(1392409280238L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):9160 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "";
      int int0 = (-1930);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1930), cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-1930", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1930", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):-1930", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1930), cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-1930", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1930", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):-1930", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals((-1930), cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":-1930", cassandraHost0.getUrl());
      assertEquals("(127.0.0.1):-1930", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(127.0.0.1):-1930", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to open transport to (127.0.0.1):-1930 , Cannot open null host.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "^~V;';eHOMl";
      int int0 = 0;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      assertNotNull(nOPLogger0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      hThriftClient0.setAuthenticated(map0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      HThriftClient.log = (Logger) nOPLogger0;
      String[] stringArray0 = new String[0];
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters(hThriftClient0.NAME_FORMAT, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      boolean boolean0 = false;
      String string1 = "STRATEGY_CLASS";
      String string2 = "netscape";
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string1, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      cassandraHost0.setUseThriftFramedTransport(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      
      String string3 = null;
      String string4 = "3$#7xA;";
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string3, string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertFalse(boolean1);
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(7L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(7L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      
      boolean boolean2 = hThriftClient1.isOpen();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(7L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(boolean2);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(7L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      
      String string5 = "";
      boolean boolean3 = true;
      cassandraHost0.setLifo(boolean2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean3);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(7L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(7L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      
      tSSLTransportFactory_TSSLTransportParameters0.requireClientAuth(boolean3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(0, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      hThriftClient1.setuseageStartTime(hThriftClient0.useageStartTime);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(7L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(7L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(string3, string5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      hThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      String string6 = hThriftClient0.getNAME_FORMAT();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertEquals("CassandraClient<%s-%d>", string6);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      String string7 = "P|RX[QpC|6K0;";
      hThriftClient0.setkeyspaceName(string7);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertSame(hThriftClient0, hThriftClient1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("P|RX[QpC|6K0;", hThriftClient0.getkeyspaceName());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      String string8 = hThriftClient1.getNAME_FORMAT();
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(7L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(string8);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string4);
      assertSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("CassandraClient<%s-%d>", string8);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("P|RX[QpC|6K0;", hThriftClient0.getkeyspaceName());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("P|RX[QpC|6K0;", hThriftClient1.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals(7L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      long long0 = 1L;
      hThriftClient1.setuseageStartTime(long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient1.useageStartTime);
      assertEquals(7L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281319L, hThriftClient0.getSinceLastUsed());
      assertEquals("P|RX[QpC|6K0;", hThriftClient0.getkeyspaceName());
      assertEquals(1L, hThriftClient0.getuseageStartTime());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1L, hThriftClient1.getuseageStartTime());
      assertEquals("P|RX[QpC|6K0;", hThriftClient1.getkeyspaceName());
      assertEquals(7L, hThriftClient1.getmySerial());
      assertEquals(1392409281319L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.useageStartTime);
      assertNull(tTransport0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281319L, hThriftClient0.getSinceLastUsed());
      assertEquals("P|RX[QpC|6K0;", hThriftClient0.getkeyspaceName());
      assertEquals(1L, hThriftClient0.getuseageStartTime());
      assertEquals(7L, hThriftClient0.getmySerial());
      
      hThriftClient0.setparams(hThriftClient1.params);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient1.useageStartTime);
      assertEquals(7L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281319L, hThriftClient0.getSinceLastUsed());
      assertEquals("P|RX[QpC|6K0;", hThriftClient0.getkeyspaceName());
      assertEquals(1L, hThriftClient0.getuseageStartTime());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1L, hThriftClient1.getuseageStartTime());
      assertEquals("P|RX[QpC|6K0;", hThriftClient1.getkeyspaceName());
      assertEquals(7L, hThriftClient1.getmySerial());
      assertEquals(1392409281319L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      String string9 = hThriftClient1.getkeyspaceName();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient1.useageStartTime);
      assertEquals(7L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(string9);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string9);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(string9, string0);
      assertNotSame(string9, string8);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertSame(string9, string7);
      assertNotSame(string9, string4);
      assertNotSame(string9, string6);
      assertNotSame(string9, string5);
      assertEquals("P|RX[QpC|6K0;", string9);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281319L, hThriftClient0.getSinceLastUsed());
      assertEquals("P|RX[QpC|6K0;", hThriftClient0.getkeyspaceName());
      assertEquals(1L, hThriftClient0.getuseageStartTime());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1L, hThriftClient1.getuseageStartTime());
      assertEquals("P|RX[QpC|6K0;", hThriftClient1.getkeyspaceName());
      assertEquals(7L, hThriftClient1.getmySerial());
      assertEquals(1392409281319L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      Map<String, String> map1 = hThriftClient0.getcredentials();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertTrue(map1.equals((Object)map0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.useageStartTime);
      assertNotNull(map1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string9);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.getName());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getLifo());
      assertEquals(0, cassandraHost0.getPort());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertFalse(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("^~V;';eHOMl(200.42.42.0):0", cassandraHost0.toString());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("^~V;';eHOMl:0", cassandraHost0.getUrl());
      assertEquals("^~V;';eHOMl", cassandraHost0.getHost());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281319L, hThriftClient0.getSinceLastUsed());
      assertEquals("P|RX[QpC|6K0;", hThriftClient0.getkeyspaceName());
      assertEquals(1L, hThriftClient0.getuseageStartTime());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      String string0 = "|~qtwVi`1E";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals("|~qtwVi`1E", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("|~qtwVi`1E:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.getName());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("|~qtwVi`1E", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("|~qtwVi`1E:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      TBinaryProtocol tBinaryProtocol0 = new TBinaryProtocol(hThriftClient0.transport);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(tBinaryProtocol0);
      assertEquals("|~qtwVi`1E", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("|~qtwVi`1E:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tBinaryProtocol0, tBinaryProtocol0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(cassandra_Client0);
      assertEquals("|~qtwVi`1E", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("|~qtwVi`1E:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      hThriftClient0.setcassandraClient(cassandra_Client0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals("|~qtwVi`1E", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("|~qtwVi`1E:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "AjJq<bq[t^megR;P";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      hThriftClient0.setuseageStartTime(cassandraHost0.DEFAULT_PORT);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(9160L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertEquals("|~qtwVi`1E", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("|~qtwVi`1E:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-9160L), hThriftClient0.getSinceLastUsed());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(9160L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(9160L, hThriftClient1.useageStartTime);
      assertEquals(1L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("|~qtwVi`1E", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("|~qtwVi`1E:9160", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("|~qtwVi`1E(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(9160L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals((-9160L), hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals((-9160L), hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(9160L, hThriftClient1.getuseageStartTime());
      
      int int0 = (-3492);
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      CassandraHost cassandraHost1 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost1);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      OutputStream outputStream0 = null;
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(outputStream0);
      assertNotNull(tIOStreamTransport0);
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hThriftClient0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      long long0 = 234L;
      System.setCurrentTimeMillis(long0);
      String string0 = "cfName";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = " cL_]";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)51;
      byteArray0[0] = byte0;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)51}, byteArray0);
      assertFalse(boolean1);
      
      int int0 = 774;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Transfer-encoding header already present", 11);
      boolean boolean2 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      cassandraHost0.setMaxActive(byteArray0[0]);
      assertFalse(string0.equals((Object)string1));
      assertEquals(1, byteArray0.length);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertArrayEquals(new byte[] {(byte)51}, byteArray0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      cassandraHost0.setMaxActive(byte0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(hThriftClient0);
      assertEquals(3L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(234L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      String string2 = hThriftClient0.toString();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("CassandraClient<cfName:774-3>", string2);
      assertEquals(3L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(234L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      Logger logger0 = hThriftClient0.getlog();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(logger0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(3L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(234L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      int int1 = 3947;
      TFastFramedTransport tFastFramedTransport0 = new TFastFramedTransport(hThriftClient0.transport, int1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1024, TFastFramedTransport.DEFAULT_BUF_CAPACITY);
      assertEquals(Integer.MAX_VALUE, TFastFramedTransport.DEFAULT_MAX_LENGTH);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(tFastFramedTransport0);
      assertEquals(3L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(234L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      hThriftClient0.transport = (TTransport) tFastFramedTransport0;
      assertEquals(3L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(234L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, tFastFramedTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tFastFramedTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      boolean boolean3 = true;
      cassandraHost0.setUseThriftFramedTransport(boolean3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(int0 == int1);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = hThriftClient0.equals(object0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(int0 == int1);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(boolean4);
      assertEquals(3L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(234L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      int int2 = hThriftClient0.getTimeout(cassandraHost0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, int2);
      assertEquals(3L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(234L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      AtomicLong atomicLong0 = hThriftClient0.getserial();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(atomicLong0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(3L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(234L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals((short)3, atomicLong0.shortValue());
      assertEquals("3", atomicLong0.toString());
      assertEquals((byte)3, atomicLong0.byteValue());
      assertEquals(3.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(3.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(3, atomicLong0.intValue());
      assertEquals(3L, atomicLong0.get());
      assertEquals(3L, atomicLong0.longValue());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      AtomicLong atomicLong1 = hThriftClient0.getserial();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(atomicLong1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(atomicLong1, atomicLong0);
      assertEquals(3L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(234L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("3", atomicLong1.toString());
      assertEquals((short)3, atomicLong1.shortValue());
      assertEquals(3L, atomicLong1.get());
      assertEquals(3.0, atomicLong1.doubleValue(), 0.01);
      assertEquals(3.0F, atomicLong1.floatValue(), 0.01F);
      assertEquals(3, atomicLong1.intValue());
      assertEquals((byte)3, atomicLong1.byteValue());
      assertEquals(3L, atomicLong1.longValue());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("cfName:774", cassandraHost0.getUrl());
      assertEquals(774, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.getName());
      assertEquals("cfName(200.42.42.0):774", cassandraHost0.toString());
      assertEquals(51, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("cfName", cassandraHost0.getHost());
      
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.transport.TFastFramedTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "6Q4Td%{r";
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean0, boolean0, boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      TBinaryProtocol tBinaryProtocol0 = new TBinaryProtocol(hThriftClient0.transport);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(tBinaryProtocol0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tBinaryProtocol0);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(cassandra_Client0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      hThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      String string1 = "Error on transport close for client: ";
      hThriftClient0.keyspaceName = string1;
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      int int0 = hThriftClient0.getTimeout(cassandraHost0);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, int0);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      hThriftClient0.useageStartTime = (long) int0;
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      int int1 = hThriftClient0.getTimeout(cassandraHost0);
      assertTrue(int1 == int0);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, int1);
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      TNonblockingSocket tNonblockingSocket0 = new TNonblockingSocket(hThriftClient0.keyspaceName, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(hThriftClient0.keyspaceName.equals((Object)string0));
      assertTrue(int0 == int1);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(tNonblockingSocket0);
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      hThriftClient0.transport = (TTransport) tNonblockingSocket0;
      assertEquals(0, tNonblockingSocket0.getBufferPosition());
      assertEquals((-1), tNonblockingSocket0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      long long0 = 1000L;
      hThriftClient0.setuseageStartTime(long0);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      long long1 = hThriftClient0.getmySerial();
      assertFalse(long1 == long0);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(4L, long1);
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      hThriftClient0.settransport(hThriftClient0.transport);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      long long2 = hThriftClient0.getmySerial();
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(4L, long2);
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      boolean boolean4 = hThriftClient0.isOpen();
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertFalse(boolean4);
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      AtomicLong atomicLong0 = hThriftClient0.getserial();
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertNotNull(atomicLong0);
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals(4.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte)4, atomicLong0.byteValue());
      assertEquals(4L, atomicLong0.longValue());
      assertEquals(4.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)4, atomicLong0.shortValue());
      assertEquals(4L, atomicLong0.get());
      assertEquals("4", atomicLong0.toString());
      assertEquals(4, atomicLong0.intValue());
      
      hThriftClient0.setparams(hThriftClient0.params);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      long long3 = hThriftClient0.getSinceLastUsed();
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(1392409280320L, long3);
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertNotNull(tTransport0);
      assertSame(tTransport0, tNonblockingSocket0);
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals((-1), tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
      
      String string2 = "zG3jq].h*+Yj";
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      
      OutputStream outputStream0 = null;
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(outputStream0);
      assertNotNull(tIOStreamTransport0);
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getCassandra(hThriftClient0.keyspaceName);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      boolean boolean0 = hThriftClient1.isOpen();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(boolean0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      long long0 = hThriftClient0.getmySerial();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(5L, long0);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      
      String string1 = hThriftClient1.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(string1, string0);
      assertEquals("CassandraClient<:9160-5>", string1);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      boolean boolean1 = hThriftClient0.isAlreadyAuthenticated(hThriftClient1.credentials);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(boolean1);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      long long1 = hThriftClient1.getuseageStartTime();
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0L, long1);
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(6L, hThriftClient0.getmySerial());
      
      OutputStream outputStream0 = null;
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(outputStream0);
      assertNotNull(tIOStreamTransport0);
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(6L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(6L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      
      Cassandra.Client cassandra_Client0 = hThriftClient0.getCassandra();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(6L, hThriftClient0.mySerial);
      assertNotNull(cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(6L, hThriftClient0.getmySerial());
      
      try { 
        tIOStreamTransport0.flush();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot flush null outputStream
         //
         verifyException("org.apache.thrift.transport.TIOStreamTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "6Q4Td%{r";
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean0, boolean0, boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      String string1 = "CassandraClient<cfName:786-22>";
      boolean boolean4 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertNotSame(string1, string0);
      assertFalse(boolean4);
      
      CassandraHost cassandraHost0 = null;
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      TBinaryProtocol tBinaryProtocol0 = new TBinaryProtocol(hThriftClient0.transport);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(tBinaryProtocol0);
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tBinaryProtocol0);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(cassandra_Client0);
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      String string2 = "Error on transport close for client: ";
      hThriftClient0.keyspaceName = string2;
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      int int0 = hThriftClient0.getTimeout(cassandraHost0);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, int0);
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.useageStartTime = (long) int0;
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      int int1 = hThriftClient0.getTimeout(cassandraHost0);
      assertTrue(int1 == int0);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, int1);
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      long long0 = 1000L;
      hThriftClient0.setuseageStartTime(long0);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      long long1 = hThriftClient0.getmySerial();
      assertFalse(long1 == long0);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(7L, long1);
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.settransport(hThriftClient0.transport);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      long long2 = hThriftClient0.getmySerial();
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(7L, long2);
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      boolean boolean5 = hThriftClient0.isAlreadyAuthenticated(hThriftClient0.credentials);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertTrue(boolean5);
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      AtomicLong atomicLong0 = hThriftClient0.getserial();
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertNotNull(atomicLong0);
      assertEquals(7.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(7.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(7L, atomicLong0.get());
      assertEquals(7, atomicLong0.intValue());
      assertEquals((short)7, atomicLong0.shortValue());
      assertEquals((byte)7, atomicLong0.byteValue());
      assertEquals("7", atomicLong0.toString());
      assertEquals(7L, atomicLong0.longValue());
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.setparams(hThriftClient0.params);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      long long3 = hThriftClient0.getSinceLastUsed();
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertEquals(1392409280320L, long3);
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      Cassandra.Client cassandra_Client1 = hThriftClient0.getcassandraClient();
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertNotNull(cassandra_Client1);
      assertSame(cassandra_Client1, cassandra_Client0);
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1000L, hThriftClient0.useageStartTime);
      assertNull(tTransport0);
      assertEquals(1392409280320L, hThriftClient0.getSinceLastUsed());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals(1000L, hThriftClient0.getuseageStartTime());
      assertEquals("Error on transport close for client: ", hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      String string3 = "zG3jq].h*+Yj";
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      OutputStream outputStream0 = null;
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(outputStream0);
      assertNotNull(tIOStreamTransport0);
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      tIOStreamTransport0.consumeBuffer(hThriftClient1.timeout);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getCassandra(hThriftClient0.keyspaceName);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertNotNull(cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      boolean boolean0 = hThriftClient1.isOpen();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(boolean0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      long long0 = hThriftClient0.getmySerial();
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(8L, long0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      String string1 = hThriftClient1.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(string1, string0);
      assertEquals("CassandraClient<:9160-8>", string1);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      boolean boolean1 = hThriftClient0.isAlreadyAuthenticated(hThriftClient1.credentials);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(boolean1);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      long long1 = hThriftClient1.getuseageStartTime();
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0L, long1);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      Cassandra.Client cassandra_Client1 = hThriftClient1.getCassandra();
      assertFalse(string0.equals((Object)string1));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertNotNull(cassandra_Client1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandra_Client1, cassandra_Client0);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      boolean boolean2 = hThriftClient1.equals(cassandraHost0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(8L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(8L, hThriftClient1.mySerial);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(boolean2);
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(8L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(8L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":9160", cassandraHost0.getUrl());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      OutputStream outputStream0 = null;
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(outputStream0);
      assertNotNull(tIOStreamTransport0);
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(9L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(9L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getCassandra(hThriftClient0.keyspaceName);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(9L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(9L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      
      boolean boolean0 = hThriftClient1.isOpen();
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(9L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(boolean0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(9L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      
      long long0 = hThriftClient0.getmySerial();
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(9L, long0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      String string1 = hThriftClient1.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(9L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(9L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(string1, string0);
      assertEquals("CassandraClient<:9160-9>", string1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(9L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(9L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      
      String string2 = "NQ'H[>}F$qyB5Q\\H!";
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot write to null outputStream
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertNotNull(cassandraHost0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(10L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(10L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      OutputStream outputStream0 = null;
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(outputStream0);
      assertNotNull(tIOStreamTransport0);
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(10L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      
      String string1 = "P~V~R";
      hThriftClient0.setkeyspaceName(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(10L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(10L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("P~V~R", hThriftClient0.getkeyspaceName());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(10L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(10L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(10L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("P~V~R", hThriftClient0.getkeyspaceName());
      assertEquals("P~V~R", hThriftClient1.getkeyspaceName());
      assertEquals(10L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getCassandra(hThriftClient0.keyspaceName);
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(10L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(10L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(cassandra_Client0);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(10L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("P~V~R", hThriftClient0.getkeyspaceName());
      assertEquals("P~V~R", hThriftClient1.getkeyspaceName());
      assertEquals(10L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      boolean boolean0 = hThriftClient1.isOpen();
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(10L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(10L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertTrue(boolean0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(10L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("P~V~R", hThriftClient0.getkeyspaceName());
      assertEquals("P~V~R", hThriftClient1.getkeyspaceName());
      assertEquals(10L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      long long0 = hThriftClient0.getmySerial();
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(10L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(10L, long0);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(10L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("P~V~R", hThriftClient0.getkeyspaceName());
      
      String string2 = hThriftClient1.toString();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(10L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(10L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("CassandraClient<:9160-10>", string2);
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(10L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("P~V~R", hThriftClient0.getkeyspaceName());
      assertEquals("P~V~R", hThriftClient1.getkeyspaceName());
      assertEquals(10L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      String string3 = "NQ'H[>}F$qyB5Q\\H!";
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot write to null outputStream
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "Transport open status {}or client {}";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 1366);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      int int0 = 1366;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      cassandraHost0.setLifo(cassandraHost0.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(11L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(11L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      String string1 = hThriftClient1.getNAME_FORMAT();
      assertFalse(string1.equals((Object)string0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(11L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(string1, string0);
      assertEquals("CassandraClient<%s-%d>", string1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(11L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      long long0 = hThriftClient0.getmySerial();
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(11L, long0);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.setAuthenticated(hThriftClient0.credentials);
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.params = hThriftClient1.params;
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(11L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      long long1 = (-1640L);
      hThriftClient0.startToUse();
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      cassandraHost0.setUseSocketKeepalive(cassandraHost0.DEFAULT_LIFO);
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotSame(string0, string1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      
      boolean boolean1 = hThriftClient1.equals(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(11L, hThriftClient1.mySerial);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(boolean1);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(11L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      
      HThriftClient hThriftClient2 = hThriftClient1.close();
      assertFalse(string0.equals((Object)string1));
      assertEquals(11L, hThriftClient2.mySerial);
      assertEquals(0, hThriftClient2.timeout);
      assertEquals(1392409281320L, hThriftClient2.useageStartTime);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(11L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient2);
      assertSame(hThriftClient2, hThriftClient1);
      assertSame(hThriftClient2, hThriftClient0);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertEquals(11L, hThriftClient2.getmySerial());
      assertEquals(1392409281320L, hThriftClient2.getuseageStartTime());
      assertEquals(0L, hThriftClient2.getSinceLastUsed());
      assertNull(hThriftClient2.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient2.getNAME_FORMAT());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(11L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      
      HThriftClient hThriftClient3 = hThriftClient0.open();
      assertFalse(string0.equals((Object)string1));
      assertEquals(11L, hThriftClient3.mySerial);
      assertEquals(1392409281320L, hThriftClient3.useageStartTime);
      assertEquals(0, hThriftClient3.timeout);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient3);
      assertNotSame(string0, string1);
      assertSame(hThriftClient3, hThriftClient0);
      assertSame(hThriftClient3, hThriftClient1);
      assertSame(hThriftClient3, hThriftClient2);
      assertSame(hThriftClient0, hThriftClient3);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertEquals(1392409281320L, hThriftClient3.getuseageStartTime());
      assertNull(hThriftClient3.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient3.getNAME_FORMAT());
      assertEquals(11L, hThriftClient3.getmySerial());
      assertEquals(0L, hThriftClient3.getSinceLastUsed());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      long long2 = hThriftClient1.getSinceLastUsed();
      assertFalse(string0.equals((Object)string1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(11L, hThriftClient1.mySerial);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient3);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient3);
      assertEquals(0L, long2);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(11L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
      
      long long3 = hThriftClient1.getmySerial();
      assertFalse(string0.equals((Object)string1));
      assertFalse(long3 == long1);
      assertTrue(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(1392409281320L, hThriftClient0.useageStartTime);
      assertEquals(11L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1392409281320L, hThriftClient1.useageStartTime);
      assertEquals(11L, hThriftClient1.mySerial);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient3);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient0, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(hThriftClient1, hThriftClient2);
      assertSame(hThriftClient1, hThriftClient3);
      assertEquals(11L, long3);
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Transport open status {}or client {}:1366", cassandraHost0.getUrl());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.getName());
      assertEquals("Transport open status {}or client {}(200.42.42.0):1366", cassandraHost0.toString());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(1366, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("Transport open status {}or client {}", cassandraHost0.getHost());
      assertEquals(1392409281320L, hThriftClient0.getuseageStartTime());
      assertEquals(11L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getSinceLastUsed());
      assertEquals(11L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient1.getuseageStartTime());
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      long long0 = (-1L);
      System.setCurrentTimeMillis(long0);
      String string0 = "Afi/rhBq R>";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      String string1 = "VT)+>5kWH%+5";
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(hThriftClient0.keyspaceName, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      boolean boolean0 = true;
      String string2 = null;
      String string3 = "multiget_count_result";
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(string0, string2, string0, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      
      tSSLTransportFactory_TSSLTransportParameters0.requireClientAuth(boolean0);
      boolean boolean1 = false;
      tSSLTransportFactory_TSSLTransportParameters0.requireClientAuth(boolean1);
      assertFalse(boolean1 == boolean0);
      
      tSSLTransportFactory_TSSLTransportParameters0.requireClientAuth(boolean0);
      assertFalse(boolean0 == boolean1);
      
      hThriftClient0.clearAuthentication();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      HThriftClient.log = hThriftClient0.log;
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.setparams(tSSLTransportFactory_TSSLTransportParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      boolean boolean2 = hThriftClient0.isOpen();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertFalse(boolean2);
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      long long1 = hThriftClient0.getSinceLastUsed();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(long1 == long0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals((-1L), long1);
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(12L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals((-1L), hThriftClient1.getSinceLastUsed());
      
      AtomicLong atomicLong0 = hThriftClient1.getserial();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(12L, hThriftClient1.mySerial);
      assertNotNull(atomicLong0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals((-1L), hThriftClient1.getSinceLastUsed());
      assertEquals("12", atomicLong0.toString());
      assertEquals(12.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(12.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte)12, atomicLong0.byteValue());
      assertEquals(12, atomicLong0.intValue());
      assertEquals(12L, atomicLong0.longValue());
      assertEquals((short)12, atomicLong0.shortValue());
      assertEquals(12L, atomicLong0.get());
      
      hThriftClient1.keyspaceName = hThriftClient0.keyspaceName;
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals((-1L), hThriftClient1.getSinceLastUsed());
      
      AtomicLong atomicLong1 = hThriftClient1.getserial();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(12L, hThriftClient1.mySerial);
      assertNotNull(atomicLong1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(atomicLong1, atomicLong0);
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals((-1L), hThriftClient1.getSinceLastUsed());
      assertEquals((short)12, atomicLong1.shortValue());
      assertEquals(12.0F, atomicLong1.floatValue(), 0.01F);
      assertEquals("12", atomicLong1.toString());
      assertEquals(12L, atomicLong1.longValue());
      assertEquals(12.0, atomicLong1.doubleValue(), 0.01);
      assertEquals(12, atomicLong1.intValue());
      assertEquals((byte)12, atomicLong1.byteValue());
      assertEquals(12L, atomicLong1.get());
      
      Map<String, String> map0 = hThriftClient1.getcredentials();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(12L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(12L, hThriftClient1.mySerial);
      assertNotNull(map0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("Afi/rhBq R>:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("Afi/rhBq R>(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("Afi/rhBq R>", cassandraHost0.getHost());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(12L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(12L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals((-1L), hThriftClient1.getSinceLastUsed());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      // Undeclared exception!
      try { 
        hThriftClient1.getCassandra();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getCassandra called on client that was not open. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "A$bolq~jrg4b*Bm2} __";
      String string1 = "key";
      int int0 = 100000;
      CassandraHost cassandraHost0 = new CassandraHost(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(100000, cassandraHost0.getPort());
      assertEquals("key(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("key(200.42.42.0):100000", cassandraHost0.getName());
      assertEquals("key", cassandraHost0.getHost());
      assertEquals("key:100000", cassandraHost0.getUrl());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(1L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(100000, cassandraHost0.getPort());
      assertEquals("key(200.42.42.0):100000", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("key(200.42.42.0):100000", cassandraHost0.getName());
      assertEquals("key", cassandraHost0.getHost());
      assertEquals("key:100000", cassandraHost0.getUrl());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:100000
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = "[v29K";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertNotNull(cassandraHost0);
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[v29K:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("[v29K", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.toString());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[2] = string0;
      boolean boolean0 = cassandraHost0.isPerformNameResolution();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertFalse(boolean0);
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[v29K:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("[v29K", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.toString());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = new TSSLTransportFactory.TSSLTransportParameters();
      assertNotNull(tSSLTransportFactory_TSSLTransportParameters0);
      
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(stringArray0[1], string0);
      assertEquals(5, stringArray0.length);
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0, tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[v29K:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("[v29K", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      String string1 = "";
      tSSLTransportFactory_TSSLTransportParameters0.setKeyStore(hThriftClient0.NAME_FORMAT, string0, stringArray0[0], string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[v29K:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("[v29K", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      Logger logger0 = hThriftClient0.getlog();
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotNull(logger0);
      assertNotSame(string0, string1);
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[v29K:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("[v29K", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      Cassandra.Client cassandra_Client0 = null;
      hThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[v29K:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("[v29K", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean1 = hThriftClient0.isAlreadyAuthenticated(map0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertFalse(boolean1);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[v29K:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("[v29K", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      long long0 = hThriftClient0.getmySerial();
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotSame(string0, string1);
      assertEquals(2L, long0);
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[v29K:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("[v29K", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      String string2 = ">'zx8!Unng";
      tSSLTransportFactory_TSSLTransportParameters0.setTrustStore(hThriftClient0.keyspaceName, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[v29K:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("[v29K", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)109;
      SaslClient saslClient0 = mock(SaslClient.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(saslClient0).getMechanismName();
      TSaslClientTransport tSaslClientTransport0 = new TSaslClientTransport(saslClient0, hThriftClient0.transport);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotNull(tSaslClientTransport0);
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[v29K:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("[v29K", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1), tSaslClientTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tSaslClientTransport0.getBufferPosition());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      hThriftClient0.settransport(tSaslClientTransport0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("[v29K:9160", cassandraHost0.getUrl());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("[v29K", cassandraHost0.getHost());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("[v29K(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals((-1), tSaslClientTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tSaslClientTransport0.getBufferPosition());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertNull(hThriftClient0.getkeyspaceName());
      
      byte byte1 = (byte) (-91);
      byteArray0[0] = byte1;
      byteArray0[2] = byteArray0[0];
      byte byte2 = (byte) (-40);
      String string3 = "dkI;nm:\\";
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.transport.TSaslTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      String string0 = "CassandraClient<Transport open status {} for client {}:1366-25>";
      int int0 = (-1704);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<Transport open status {} for client {}:-1704", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<Transport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.toString());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals((-1704), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      
      boolean boolean0 = true;
      cassandraHost0.setUseSocketKeepalive(boolean0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<Transport open status {} for client {}:-1704", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<Transport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.toString());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1704), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      
      boolean boolean1 = true;
      cassandraHost0.setLifo(boolean1);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<Transport open status {} for client {}:-1704", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<Transport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.toString());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1704), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotNull(hThriftClient0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<Transport open status {} for client {}:-1704", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<Transport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.toString());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1704), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      
      TSaslServerTransport tSaslServerTransport0 = new TSaslServerTransport(hThriftClient0.transport);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertNotNull(tSaslServerTransport0);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<Transport open status {} for client {}:-1704", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<Transport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.toString());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1704), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0, tSaslServerTransport0.getBufferPosition());
      assertEquals((-1), tSaslServerTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.settransport(tSaslServerTransport0);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<Transport open status {} for client {}:-1704", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseSocketKeepalive());
      assertEquals("CassandraClient<Transport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.toString());
      assertEquals("CassandraClient<Transport open status {} for client {}(200.42.42.0):-1704", cassandraHost0.getName());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1704), cassandraHost0.getPort());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0, tSaslServerTransport0.getBufferPosition());
      assertEquals((-1), tSaslServerTransport0.getBytesRemainingInBuffer());
      
      // Undeclared exception!
      try { 
        hThriftClient0.isOpen();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.thrift.transport.TSaslTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      OutputStream outputStream0 = null;
      hThriftClient0.setkeyspaceName(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      
      TIOStreamTransport tIOStreamTransport0 = new TIOStreamTransport(outputStream0);
      assertNotNull(tIOStreamTransport0);
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      
      hThriftClient0.transport = (TTransport) tIOStreamTransport0;
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tIOStreamTransport0.getBufferPosition());
      assertEquals((-1), tIOStreamTransport0.getBytesRemainingInBuffer());
      assertTrue(tIOStreamTransport0.isOpen());
      assertEquals((-1), hThriftClient0.transport.getBytesRemainingInBuffer());
      assertEquals(0, hThriftClient0.transport.getBufferPosition());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertNotNull(hThriftClient1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      Cassandra.Client cassandra_Client0 = hThriftClient1.getCassandra(hThriftClient0.keyspaceName);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertNotNull(cassandra_Client0);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      String string1 = hThriftClient1.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertNotSame(string1, string0);
      assertEquals("CassandraClient<:9160-4>", string1);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      Cassandra.Client cassandra_Client1 = hThriftClient1.getCassandra(string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertNotNull(cassandra_Client1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(cassandra_Client1, cassandra_Client0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      String string2 = hThriftClient1.getkeyspaceName();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(4L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(4L, hThriftClient1.mySerial);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", string2);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(9160, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(4L, hThriftClient0.getmySerial());
      assertEquals("", hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("", hThriftClient1.getkeyspaceName());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(4L, hThriftClient1.getmySerial());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      String string0 = "B/d=odvJ@>r[=);?";
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      String string1 = "CassandraClient<Transport open status {} for client {}:1366-6>";
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      
      int int0 = 431;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.toString());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.getName());
      assertEquals("B/d=odvJ@>r[=);?", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("B/d=odvJ@>r[=);?:431", cassandraHost0.getUrl());
      assertEquals(431, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.toString());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.getName());
      assertEquals("B/d=odvJ@>r[=);?", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("B/d=odvJ@>r[=);?:431", cassandraHost0.getUrl());
      assertEquals(431, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      
      HThriftClient hThriftClient1 = hThriftClient0.close();
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.toString());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.getName());
      assertEquals("B/d=odvJ@>r[=);?", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("B/d=odvJ@>r[=);?:431", cassandraHost0.getUrl());
      assertEquals(431, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      boolean boolean1 = cassandraHost0.isPerformNameResolution();
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotSame(string0, string1);
      assertFalse(boolean1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.toString());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.getName());
      assertEquals("B/d=odvJ@>r[=);?", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("B/d=odvJ@>r[=);?:431", cassandraHost0.getUrl());
      assertEquals(431, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      hThriftClient0.params = hThriftClient1.params;
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.toString());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.getName());
      assertEquals("B/d=odvJ@>r[=);?", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("B/d=odvJ@>r[=);?:431", cassandraHost0.getUrl());
      assertEquals(431, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      hThriftClient1.setcassandraClient(hThriftClient0.cassandraClient);
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.toString());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.getName());
      assertEquals("B/d=odvJ@>r[=);?", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("B/d=odvJ@>r[=);?:431", cassandraHost0.getUrl());
      assertEquals(431, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      cassandraHost0.setMaxWaitTimeWhenExhausted(hThriftClient0.timeout);
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.toString());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.getName());
      assertEquals("B/d=odvJ@>r[=);?", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("B/d=odvJ@>r[=);?:431", cassandraHost0.getUrl());
      assertEquals(431, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      
      long long0 = (-1216L);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)81;
      byteArray0[0] = byte0;
      byte byte1 = (byte)47;
      byteArray0[1] = byte1;
      byte byte2 = (byte)24;
      byteArray0[2] = byte2;
      byte byte3 = (byte)93;
      byteArray0[3] = byte3;
      byte byte4 = (byte)2;
      byteArray0[4] = byte4;
      byte byte5 = (byte)86;
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      byte byte7 = (byte)95;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-82);
      byteArray0[8] = byte8;
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(tMemoryInputTransport0);
      assertArrayEquals(new byte[] {(byte)81, (byte)47, (byte)24, (byte)93, (byte)2, (byte)86, (byte)1, (byte)95, (byte) (-82)}, byteArray0);
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(9, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      
      hThriftClient0.settransport(tMemoryInputTransport0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(9, byteArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertArrayEquals(new byte[] {(byte)81, (byte)47, (byte)24, (byte)93, (byte)2, (byte)86, (byte)1, (byte)95, (byte) (-82)}, byteArray0);
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(9, tMemoryInputTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.toString());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.getName());
      assertEquals("B/d=odvJ@>r[=);?", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("B/d=odvJ@>r[=);?:431", cassandraHost0.getUrl());
      assertEquals(431, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      
      hThriftClient1.setuseageStartTime(long0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals((-1216L), hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals((-1216L), hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.toString());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.getName());
      assertEquals("B/d=odvJ@>r[=);?", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("B/d=odvJ@>r[=);?:431", cassandraHost0.getUrl());
      assertEquals(431, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals((-1216L), hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409282536L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(1392409282536L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals((-1216L), hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      Logger logger0 = hThriftClient1.getlog();
      assertFalse(string0.equals((Object)string1));
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals((-1216L), hThriftClient0.useageStartTime);
      assertEquals(5L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(5L, hThriftClient1.mySerial);
      assertEquals((-1216L), hThriftClient1.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertNotNull(logger0);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.toString());
      assertEquals("B/d=odvJ@>r[=);?(200.42.42.0):431", cassandraHost0.getName());
      assertEquals("B/d=odvJ@>r[=);?", cassandraHost0.getHost());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals(0L, cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("B/d=odvJ@>r[=);?:431", cassandraHost0.getUrl());
      assertEquals(431, cassandraHost0.getPort());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals((-1216L), hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409282536L, hThriftClient0.getSinceLastUsed());
      assertEquals(5L, hThriftClient0.getmySerial());
      assertEquals(5L, hThriftClient1.getmySerial());
      assertEquals(1392409282536L, hThriftClient1.getSinceLastUsed());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals((-1216L), hThriftClient1.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      
      String string2 = "3\\x8yx&c+Zd~VvIq";
      // Undeclared exception!
      try { 
        hThriftClient0.getCassandra(string2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No writing allowed!
         //
         verifyException("org.apache.thrift.transport.TMemoryInputTransport", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient0.getmySerial());
      
      String string1 = hThriftClient0.getkeyspaceName();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(string1);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient0.getmySerial());
      
      TFramedTransport tFramedTransport0 = new TFramedTransport(hThriftClient0.transport);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(tFramedTransport0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0, tFramedTransport0.getBufferPosition());
      assertEquals(0, tFramedTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.settransport(tFramedTransport0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0, tFramedTransport0.getBufferPosition());
      assertEquals(0, tFramedTransport0.getBytesRemainingInBuffer());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = hThriftClient0.getparams();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient0.getmySerial());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(6L, hThriftClient0.mySerial);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(tTransport0);
      assertSame(tTransport0, tFramedTransport0);
      assertEquals("(127.0.0.1):9160", cassandraHost0.toString());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("127.0.0.1", cassandraHost0.getIp());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("(127.0.0.1):9160", cassandraHost0.getName());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(6L, hThriftClient0.getmySerial());
      assertEquals(0, tTransport0.getBufferPosition());
      assertEquals(0, tTransport0.getBytesRemainingInBuffer());
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      String string0 = "CassandraClient<Tranport open status {} for client {}:9160-38>";
      int int0 = (-1319);
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      
      boolean boolean0 = false;
      Logger logger0 = null;
      hThriftClient0.setlog(logger0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      
      cassandraHost0.setLifo(boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      
      long long0 = hThriftClient0.getmySerial();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, long0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      
      Logger logger1 = hThriftClient0.getlog();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNull(logger1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      
      Map<String, String> map0 = hThriftClient0.getcredentials();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(map0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      System.setCurrentTimeMillis(cassandraHost0.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNull(tTransport0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      
      boolean boolean1 = hThriftClient0.equals(string0);
      assertTrue(boolean1 == boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertFalse(boolean1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      
      System.setCurrentTimeMillis(cassandraHost0.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      
      long long1 = hThriftClient0.getmySerial();
      assertTrue(long1 == long0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(7L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(7L, long1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("CassandraClient<Tranport open status {} for client {}:-1319", cassandraHost0.getUrl());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.toString());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertFalse(cassandraHost0.getLifo());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("CassandraClient<Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("CassandraClient<Tranport open status {} for client {}(200.42.42.0):-1319", cassandraHost0.getName());
      assertEquals((-1319), cassandraHost0.getPort());
      assertEquals(7L, hThriftClient0.getmySerial());
      assertEquals((-1L), hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertNull(hThriftClient0.getkeyspaceName());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      String string0 = "Tranport open status {} for client {}";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 9160);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("Tranport open status {} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("Tranport open status {} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      String string1 = hThriftClient0.getNAME_FORMAT();
      assertFalse(string1.equals((Object)string0));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("CassandraClient<%s-%d>", string1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("Tranport open status {} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      hThriftClient0.setAuthenticated(hThriftClient0.credentials);
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("Tranport open status {} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      long long0 = (-2335L);
      cassandraHost0.setMaxWaitTimeWhenExhausted(long0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotSame(string0, string1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("Tranport open status {} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals((-2335L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      
      boolean boolean1 = hThriftClient0.equals(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertFalse(boolean1);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("Tranport open status {} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals((-2335L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      
      HThriftClient hThriftClient1 = hThriftClient0.open();
      assertFalse(string0.equals((Object)string1));
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient1.timeout);
      assertEquals(1L, hThriftClient1.mySerial);
      assertEquals(0L, hThriftClient1.useageStartTime);
      assertNotNull(hThriftClient1);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertSame(hThriftClient1, hThriftClient0);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("Tranport open status {} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals((-2335L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient1.getkeyspaceName());
      assertEquals(1L, hThriftClient1.getmySerial());
      assertEquals("CassandraClient<%s-%d>", hThriftClient1.getNAME_FORMAT());
      assertEquals(0L, hThriftClient1.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient1.getSinceLastUsed());
      
      boolean boolean2 = hThriftClient0.isOpen();
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(1L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotSame(string0, string1);
      assertSame(hThriftClient0, hThriftClient1);
      assertTrue(boolean2);
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals("Tranport open status {} for client {}", cassandraHost0.getHost());
      assertEquals("Tranport open status {} for client {}:9160", cassandraHost0.getUrl());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals("Tranport open status {} for client {}(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals(9160, cassandraHost0.getPort());
      assertEquals((-2335L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertTrue(cassandraHost0.getLifo());
      assertEquals(1L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      String string0 = "&2x<[BrJ_";
      int int0 = 201;
      CassandraHost cassandraHost0 = new CassandraHost(string0, int0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertNotNull(cassandraHost0);
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.toString());
      assertEquals(201, cassandraHost0.getPort());
      assertEquals("&2x<[BrJ_:201", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(hThriftClient0);
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.toString());
      assertEquals(201, cassandraHost0.getPort());
      assertEquals("&2x<[BrJ_:201", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      
      TMemoryBuffer tMemoryBuffer0 = new TMemoryBuffer(hThriftClient0.timeout);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertNotNull(tMemoryBuffer0);
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.toString());
      assertEquals(201, cassandraHost0.getPort());
      assertEquals("&2x<[BrJ_:201", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      long long0 = (-2010L);
      hThriftClient0.setuseageStartTime(long0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals((-2010L), hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.toString());
      assertEquals(201, cassandraHost0.getPort());
      assertEquals("&2x<[BrJ_:201", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-2010L), hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409283330L, hThriftClient0.getSinceLastUsed());
      
      TCompactProtocol tCompactProtocol0 = new TCompactProtocol(tMemoryBuffer0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals((-2010L), hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotNull(tCompactProtocol0);
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.toString());
      assertEquals(201, cassandraHost0.getPort());
      assertEquals("&2x<[BrJ_:201", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-2010L), hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409283330L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      Cassandra.Client cassandra_Client0 = new Cassandra.Client(tCompactProtocol0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals((-2010L), hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotNull(cassandra_Client0);
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.toString());
      assertEquals(201, cassandraHost0.getPort());
      assertEquals("&2x<[BrJ_:201", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-2010L), hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409283330L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      hThriftClient0.cassandraClient = cassandra_Client0;
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.toString());
      assertEquals(201, cassandraHost0.getPort());
      assertEquals("&2x<[BrJ_:201", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-2010L), hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409283330L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      boolean boolean1 = tMemoryBuffer0.peek();
      assertTrue(boolean1 == boolean0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals((-2010L), hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertTrue(boolean1);
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.toString());
      assertEquals(201, cassandraHost0.getPort());
      assertEquals("&2x<[BrJ_:201", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-2010L), hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409283330L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, cassandraHost0.DEFAULT_LIFO, boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertFalse(boolean3);
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.toString());
      assertEquals(201, cassandraHost0.getPort());
      assertEquals("&2x<[BrJ_:201", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      
      hThriftClient0.settransport(tMemoryBuffer0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals((-2010L), hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.toString());
      assertEquals(201, cassandraHost0.getPort());
      assertEquals("&2x<[BrJ_:201", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-2010L), hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(1392409283330L, hThriftClient0.getSinceLastUsed());
      assertEquals(0, tMemoryBuffer0.getBufferPosition());
      assertEquals((-1), tMemoryBuffer0.getBytesRemainingInBuffer());
      assertTrue(tMemoryBuffer0.isOpen());
      
      Cassandra.Client cassandra_Client1 = hThriftClient0.getCassandra(string0);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertEquals(0, hThriftClient0.timeout);
      assertEquals((-2010L), hThriftClient0.useageStartTime);
      assertEquals(2L, hThriftClient0.mySerial);
      assertNotNull(cassandra_Client1);
      assertSame(cassandra_Client1, cassandra_Client0);
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.getName());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("&2x<[BrJ_(200.42.42.0):201", cassandraHost0.toString());
      assertEquals(201, cassandraHost0.getPort());
      assertEquals("&2x<[BrJ_:201", cassandraHost0.getUrl());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertEquals("&2x<[BrJ_", cassandraHost0.getHost());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertEquals((-2010L), hThriftClient0.getuseageStartTime());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertEquals("&2x<[BrJ_", hThriftClient0.getkeyspaceName());
      assertEquals(2L, hThriftClient0.getmySerial());
      assertEquals(1392409283330L, hThriftClient0.getSinceLastUsed());
      
      // Undeclared exception!
      try { 
        hThriftClient0.open();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Open called on already open connection. You should not have gotten here.
         //
         verifyException("me.prettyprint.cassandra.connection.client.HThriftClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      String string0 = "";
      CassandraHost cassandraHost0 = new CassandraHost(string0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertNotNull(cassandraHost0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      HThriftClient hThriftClient0 = new HThriftClient(cassandraHost0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(hThriftClient0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      String string1 = hThriftClient0.getkeyspaceName();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(string1);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)122;
      byteArray0[2] = byte2;
      boolean boolean0 = true;
      cassandraHost0.setLifo(boolean0);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      
      byte byte3 = (byte)86;
      byteArray0[3] = byte3;
      byte byte4 = (byte)25;
      byteArray0[4] = byte4;
      byte byte5 = (byte)20;
      byteArray0[5] = byte5;
      byte byte6 = (byte)46;
      byteArray0[6] = byte6;
      TMemoryInputTransport tMemoryInputTransport0 = new TMemoryInputTransport(byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(tMemoryInputTransport0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)122, (byte)86, (byte)25, (byte)20, (byte)46}, byteArray0);
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(7, tMemoryInputTransport0.getBytesRemainingInBuffer());
      
      hThriftClient0.settransport(tMemoryInputTransport0);
      assertEquals(7, byteArray0.length);
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)122, (byte)86, (byte)25, (byte)20, (byte)46}, byteArray0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertTrue(tMemoryInputTransport0.isOpen());
      assertEquals(0, tMemoryInputTransport0.getBufferPosition());
      assertEquals(7, tMemoryInputTransport0.getBytesRemainingInBuffer());
      
      TSSLTransportFactory.TSSLTransportParameters tSSLTransportFactory_TSSLTransportParameters0 = hThriftClient0.getparams();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNull(tSSLTransportFactory_TSSLTransportParameters0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      
      TTransport tTransport0 = hThriftClient0.gettransport();
      assertEquals(50, CassandraHost.DEFAULT_MAX_ACTIVE);
      assertTrue(CassandraHost.DEFAULT_LIFO);
      assertEquals(9160, CassandraHost.DEFAULT_PORT);
      assertTrue(CassandraHost.DEFAULT_USE_FRAMED_THRIFT_TRANSPORT);
      assertEquals((-1L), CassandraHost.DEFAULT_MAX_WAITTIME_WHEN_EXHAUSTED);
      assertEquals(3L, hThriftClient0.mySerial);
      assertEquals(0L, hThriftClient0.useageStartTime);
      assertEquals(0, hThriftClient0.timeout);
      assertNotNull(tTransport0);
      assertSame(tTransport0, tMemoryInputTransport0);
      assertEquals("200.42.42.0", cassandraHost0.getIp());
      assertTrue(cassandraHost0.getUseThriftFramedTransport());
      assertEquals(50, cassandraHost0.getMaxActive());
      assertEquals("(200.42.42.0):9160", cassandraHost0.getName());
      assertEquals("(200.42.42.0):9160", cassandraHost0.toString());
      assertEquals(":9160", cassandraHost0.getUrl());
      assertEquals(0, cassandraHost0.getCassandraThriftSocketTimeout());
      assertEquals((-1L), cassandraHost0.getMaxWaitTimeWhenExhausted());
      assertTrue(cassandraHost0.getLifo());
      assertEquals("", cassandraHost0.getHost());
      assertEquals(9160, cassandraHost0.getPort());
      assertFalse(cassandraHost0.getUseSocketKeepalive());
      assertEquals(3L, hThriftClient0.getmySerial());
      assertEquals(1392409281320L, hThriftClient0.getSinceLastUsed());
      assertEquals("CassandraClient<%s-%d>", hThriftClient0.getNAME_FORMAT());
      assertNull(hThriftClient0.getkeyspaceName());
      assertEquals(0L, hThriftClient0.getuseageStartTime());
      assertTrue(tTransport0.isOpen());
      assertEquals(7, tTransport0.getBytesRemainingInBuffer());
      assertEquals(0, tTransport0.getBufferPosition());
  }
}
