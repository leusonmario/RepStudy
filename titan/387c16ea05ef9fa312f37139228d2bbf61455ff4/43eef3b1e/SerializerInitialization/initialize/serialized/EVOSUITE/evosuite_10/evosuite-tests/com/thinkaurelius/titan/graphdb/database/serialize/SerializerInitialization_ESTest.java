/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 03 11:24:12 GMT 2021
 */

package com.thinkaurelius.titan.graphdb.database.serialize;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thinkaurelius.titan.graphdb.database.serialize.DataOutput;
import com.thinkaurelius.titan.graphdb.database.serialize.SerializedObjectSupporter;
import com.thinkaurelius.titan.graphdb.database.serialize.Serializer;
import com.thinkaurelius.titan.graphdb.database.serialize.SerializerInitialization;
import com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer;
import com.thinkaurelius.titan.graphdb.types.IndexType;
import com.thinkaurelius.titan.graphdb.types.TypeAttributeType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SerializerInitialization_ESTest extends SerializerInitialization_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      KryoSerializer kryoSerializer0 = serializedObjectSupporter0.deserializeObjectKryoSerializer997();
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.initialized);
      assertNotNull(kryoSerializer0);
      assertFalse(kryoSerializer0.getinitialized());
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getregisterRequired());
      
      SerializerInitialization.initialize(kryoSerializer0);
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.initialized);
      assertFalse(kryoSerializer0.getinitialized());
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getregisterRequired());
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertNotNull(serializerInitialization0);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      int int0 = serializerInitialization0.getRESERVED_ID_OFFSET();
      assertEquals(256, int0);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      int int1 = serializerInitialization0.getKRYO_OFFSET();
      assertFalse(int1 == int0);
      assertEquals(40, int1);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertNotNull(serializerInitialization0);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      
      int int0 = serializerInitialization0.getKRYO_OFFSET();
      assertEquals(40, int0);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertNotNull(serializerInitialization0);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      
      Serializer serializer0 = null;
      // Undeclared exception!
      try { 
        SerializerInitialization.initialize(serializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thinkaurelius.titan.graphdb.database.serialize.SerializerInitialization", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertNotNull(serializerInitialization0);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      Serializer serializer0 = null;
      // Undeclared exception!
      try { 
        SerializerInitialization.initialize(serializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thinkaurelius.titan.graphdb.database.serialize.SerializerInitialization", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertNotNull(serializerInitialization0);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      serializerInitialization0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      
      KryoSerializer kryoSerializer0 = serializerInitialization0.serializedObjectSupporter.deserializeObjectKryoSerializer832();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.initialized);
      assertNotNull(kryoSerializer0);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertFalse(kryoSerializer0.getregisterRequired());
      assertFalse(kryoSerializer0.getinitialized());
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      
      SerializerInitialization.initialize(kryoSerializer0);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.initialized);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertFalse(kryoSerializer0.getregisterRequired());
      assertFalse(kryoSerializer0.getinitialized());
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      KryoSerializer kryoSerializer0 = serializedObjectSupporter0.deserializeObjectKryoSerializer971();
      assertFalse(kryoSerializer0.initialized);
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertNotNull(kryoSerializer0);
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getinitialized());
      assertFalse(kryoSerializer0.getregisterRequired());
      
      KryoSerializer kryoSerializer1 = serializedObjectSupporter0.deserializeObjectKryoSerializer1816();
      assertFalse(kryoSerializer1.equals((Object)kryoSerializer0));
      assertNotSame(kryoSerializer1, kryoSerializer0);
      assertFalse(kryoSerializer1.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer1.initialized);
      assertNotNull(kryoSerializer1);
      assertFalse(kryoSerializer1.getregisterRequired());
      assertFalse(kryoSerializer1.getinitialized());
      assertEquals(10485760, kryoSerializer1.getMAX_OUTPUT_SIZE());
      
      SerializerInitialization.initialize(kryoSerializer0);
      assertFalse(kryoSerializer0.equals((Object)kryoSerializer1));
      assertNotSame(kryoSerializer0, kryoSerializer1);
      assertFalse(kryoSerializer0.initialized);
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getinitialized());
      assertFalse(kryoSerializer0.getregisterRequired());
      
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertNotNull(serializerInitialization0);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      SerializerInitialization.initialize(kryoSerializer1);
      assertFalse(kryoSerializer1.equals((Object)kryoSerializer0));
      assertNotSame(kryoSerializer1, kryoSerializer0);
      assertFalse(kryoSerializer1.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer1.initialized);
      assertFalse(kryoSerializer1.getregisterRequired());
      assertFalse(kryoSerializer1.getinitialized());
      assertEquals(10485760, kryoSerializer1.getMAX_OUTPUT_SIZE());
      
      // Undeclared exception!
      try { 
        SerializerInitialization.initialize(kryoSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ID has already been registered: 41
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      boolean boolean0 = true;
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertNotNull(serializerInitialization0);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      
      int int0 = serializerInitialization0.getRESERVED_ID_OFFSET();
      assertEquals(256, int0);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertNotNull(serializerInitialization0);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      KryoSerializer kryoSerializer0 = serializedObjectSupporter0.deserializeObjectKryoSerializer909();
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.initialized);
      assertNotNull(kryoSerializer0);
      assertFalse(kryoSerializer0.getinitialized());
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getregisterRequired());
      
      serializerInitialization0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      int int0 = 1557;
      boolean boolean0 = true;
      DataOutput dataOutput0 = kryoSerializer0.getDataOutput(int0, boolean0);
      assertFalse(kryoSerializer0.registerRequired);
      assertTrue(kryoSerializer0.initialized);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertNotNull(dataOutput0);
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getregisterRequired());
      assertTrue(kryoSerializer0.getinitialized());
      
      serializerInitialization0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      int int1 = serializerInitialization0.getKRYO_OFFSET();
      assertFalse(int1 == int0);
      assertEquals(40, int1);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      int int2 = serializerInitialization0.getRESERVED_ID_OFFSET();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(256, int2);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      // Undeclared exception!
      try { 
        SerializerInitialization.initialize(kryoSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Serializer has already been initialized!
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
