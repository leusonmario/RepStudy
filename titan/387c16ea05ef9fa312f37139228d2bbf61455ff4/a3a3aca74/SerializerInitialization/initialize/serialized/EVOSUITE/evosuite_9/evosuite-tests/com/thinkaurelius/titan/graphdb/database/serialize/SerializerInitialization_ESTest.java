/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 03 11:18:33 GMT 2021
 */

package com.thinkaurelius.titan.graphdb.database.serialize;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.esotericsoftware.kryo.Kryo;
import com.thinkaurelius.titan.core.AttributeSerializer;
import com.thinkaurelius.titan.diskstorage.util.ReadArrayBuffer;
import com.thinkaurelius.titan.graphdb.database.serialize.DataOutput;
import com.thinkaurelius.titan.graphdb.database.serialize.SerializedObjectSupporter;
import com.thinkaurelius.titan.graphdb.database.serialize.Serializer;
import com.thinkaurelius.titan.graphdb.database.serialize.SerializerInitialization;
import com.thinkaurelius.titan.graphdb.database.serialize.attribute.CharacterSerializer;
import com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SerializerInitialization_ESTest extends SerializerInitialization_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      KryoSerializer kryoSerializer0 = serializedObjectSupporter0.deserializeObjectKryoSerializer1760();
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.initialized);
      assertFalse(kryoSerializer0.getregisterRequired());
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getinitialized());
      assertNotNull(kryoSerializer0);
      
      SerializerInitialization.initialize(kryoSerializer0);
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.initialized);
      assertFalse(kryoSerializer0.getregisterRequired());
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getinitialized());
      
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertNotNull(serializerInitialization0);
      
      int int0 = serializerInitialization0.getRESERVED_ID_OFFSET();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, int0);
      
      int int1 = serializerInitialization0.getKRYO_OFFSET();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertFalse(int1 == int0);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(40, int1);
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertNotNull(serializerInitialization0);
      
      int int0 = serializerInitialization0.getRESERVED_ID_OFFSET();
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, int0);
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertNotNull(serializerInitialization0);
      
      int int0 = serializerInitialization0.getKRYO_OFFSET();
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(40, int0);
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      KryoSerializer kryoSerializer0 = serializedObjectSupporter0.deserializeObjectKryoSerializer327();
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.registerRequired);
      assertFalse(kryoSerializer0.initialized);
      assertFalse(kryoSerializer0.getregisterRequired());
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getinitialized());
      assertNotNull(kryoSerializer0);
      
      SerializerInitialization.initialize(kryoSerializer0);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.registerRequired);
      assertFalse(kryoSerializer0.initialized);
      assertFalse(kryoSerializer0.getregisterRequired());
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getinitialized());
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      KryoSerializer kryoSerializer0 = serializedObjectSupporter0.deserializeObjectKryoSerializer1399();
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.initialized);
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getinitialized());
      assertFalse(kryoSerializer0.getregisterRequired());
      assertNotNull(kryoSerializer0);
      
      Class<Character> class0 = Character.class;
      CharacterSerializer characterSerializer0 = new CharacterSerializer();
      assertNotNull(characterSerializer0);
      
      int int0 = 907;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-94);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)44;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-59);
      byteArray0[3] = byte3;
      byte byte4 = (byte)14;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-128);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-1);
      byteArray0[6] = byte6;
      ReadArrayBuffer readArrayBuffer0 = new ReadArrayBuffer(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)0, (byte)44, (byte) (-59), (byte)14, (byte) (-128), (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, readArrayBuffer0.getPosition());
      assertEquals(7, readArrayBuffer0.length());
      assertTrue(readArrayBuffer0.hasRemaining());
      assertNotNull(readArrayBuffer0);
      
      Character character0 = characterSerializer0.read(readArrayBuffer0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)0, (byte)44, (byte) (-59), (byte)14, (byte) (-128), (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(2, readArrayBuffer0.getPosition());
      assertEquals(7, readArrayBuffer0.length());
      assertTrue(readArrayBuffer0.hasRemaining());
      assertEquals('\uA200', (char)character0);
      assertNotNull(character0);
      
      KryoSerializer kryoSerializer1 = serializedObjectSupporter0.deserializeObjectKryoSerializer65();
      assertNotSame(kryoSerializer1, kryoSerializer0);
      assertFalse(kryoSerializer1.initialized);
      assertFalse(kryoSerializer1.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer1.equals((Object)kryoSerializer0));
      assertFalse(kryoSerializer1.getregisterRequired());
      assertEquals(10485760, kryoSerializer1.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer1.getinitialized());
      assertNotNull(kryoSerializer1);
      
      kryoSerializer0.registerClass(class0, (AttributeSerializer<Character>) characterSerializer0, int0);
      assertNotSame(kryoSerializer0, kryoSerializer1);
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.initialized);
      assertFalse(kryoSerializer0.equals((Object)kryoSerializer1));
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getinitialized());
      assertFalse(kryoSerializer0.getregisterRequired());
      
      Kryo kryo0 = kryoSerializer0.getKryo();
      assertNotSame(kryoSerializer0, kryoSerializer1);
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertTrue(kryoSerializer0.initialized);
      assertEquals((byte)0, Kryo.NULL);
      assertEquals((byte)1, Kryo.NOT_NULL);
      assertFalse(kryoSerializer0.equals((Object)kryoSerializer1));
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getregisterRequired());
      assertTrue(kryoSerializer0.getinitialized());
      assertFalse(kryo0.isRegistrationRequired());
      assertEquals(0, kryo0.getDepth());
      assertTrue(kryo0.getReferences());
      assertNotNull(kryo0);
      
      // Undeclared exception!
      try { 
        SerializerInitialization.initialize(kryoSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Serializer has already been initialized!
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertNotNull(serializerInitialization0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      serializerInitialization0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      KryoSerializer kryoSerializer0 = serializedObjectSupporter0.deserializeObjectKryoSerializer1544();
      assertFalse(kryoSerializer0.initialized);
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer0.getregisterRequired());
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getinitialized());
      assertNotNull(kryoSerializer0);
      
      KryoSerializer kryoSerializer1 = serializerInitialization0.serializedObjectSupporter.deserializeObjectKryoSerializer197();
      assertSame(serializerInitialization0.serializedObjectSupporter, serializedObjectSupporter0);
      assertNotSame(kryoSerializer1, kryoSerializer0);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertFalse(kryoSerializer1.initialized);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer1.registerRequired);
      assertFalse(kryoSerializer1.equals((Object)kryoSerializer0));
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertFalse(kryoSerializer1.getregisterRequired());
      assertEquals(10485760, kryoSerializer1.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer1.getinitialized());
      assertNotNull(kryoSerializer1);
      
      KryoSerializer kryoSerializer2 = serializedObjectSupporter0.deserializeObjectKryoSerializer462();
      assertNotSame(kryoSerializer2, kryoSerializer1);
      assertNotSame(kryoSerializer2, kryoSerializer0);
      assertFalse(kryoSerializer2.initialized);
      assertFalse(kryoSerializer2.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer2.equals((Object)kryoSerializer1));
      assertFalse(kryoSerializer2.equals((Object)kryoSerializer0));
      assertEquals(10485760, kryoSerializer2.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer2.getinitialized());
      assertFalse(kryoSerializer2.getregisterRequired());
      assertNotNull(kryoSerializer2);
      
      KryoSerializer kryoSerializer3 = serializedObjectSupporter0.deserializeObjectKryoSerializer825();
      assertNotSame(kryoSerializer3, kryoSerializer0);
      assertNotSame(kryoSerializer3, kryoSerializer2);
      assertNotSame(kryoSerializer3, kryoSerializer1);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer3.registerRequired);
      assertFalse(kryoSerializer3.initialized);
      assertFalse(kryoSerializer3.equals((Object)kryoSerializer0));
      assertFalse(kryoSerializer3.equals((Object)kryoSerializer2));
      assertFalse(kryoSerializer3.equals((Object)kryoSerializer1));
      assertEquals(10485760, kryoSerializer3.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer3.getregisterRequired());
      assertFalse(kryoSerializer3.getinitialized());
      assertNotNull(kryoSerializer3);
      
      KryoSerializer kryoSerializer4 = serializerInitialization0.serializedObjectSupporter.deserializeObjectKryoSerializer334();
      assertSame(serializerInitialization0.serializedObjectSupporter, serializedObjectSupporter0);
      assertNotSame(kryoSerializer4, kryoSerializer0);
      assertNotSame(kryoSerializer4, kryoSerializer3);
      assertNotSame(kryoSerializer4, kryoSerializer2);
      assertNotSame(kryoSerializer4, kryoSerializer1);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer4.registerRequired);
      assertFalse(kryoSerializer4.initialized);
      assertFalse(kryoSerializer4.equals((Object)kryoSerializer0));
      assertFalse(kryoSerializer4.equals((Object)kryoSerializer3));
      assertFalse(kryoSerializer4.equals((Object)kryoSerializer2));
      assertFalse(kryoSerializer4.equals((Object)kryoSerializer1));
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(10485760, kryoSerializer4.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer4.getregisterRequired());
      assertFalse(kryoSerializer4.getinitialized());
      assertNotNull(kryoSerializer4);
      
      SerializerInitialization.initialize(kryoSerializer4);
      assertSame(serializerInitialization0.serializedObjectSupporter, serializedObjectSupporter0);
      assertNotSame(kryoSerializer4, kryoSerializer0);
      assertNotSame(kryoSerializer4, kryoSerializer3);
      assertNotSame(kryoSerializer4, kryoSerializer2);
      assertNotSame(kryoSerializer4, kryoSerializer1);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer4.registerRequired);
      assertFalse(kryoSerializer4.initialized);
      assertFalse(kryoSerializer4.equals((Object)kryoSerializer0));
      assertFalse(kryoSerializer4.equals((Object)kryoSerializer3));
      assertFalse(kryoSerializer4.equals((Object)kryoSerializer2));
      assertFalse(kryoSerializer4.equals((Object)kryoSerializer1));
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(10485760, kryoSerializer4.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer4.getregisterRequired());
      assertFalse(kryoSerializer4.getinitialized());
      
      int int0 = serializerInitialization0.getRESERVED_ID_OFFSET();
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(256, int0);
      
      DataOutput dataOutput0 = kryoSerializer3.getDataOutput(kryoSerializer0.MAX_OUTPUT_SIZE, kryoSerializer2.registerRequired);
      assertNotSame(kryoSerializer0, kryoSerializer1);
      assertNotSame(kryoSerializer0, kryoSerializer2);
      assertNotSame(kryoSerializer0, kryoSerializer3);
      assertNotSame(kryoSerializer0, kryoSerializer4);
      assertNotSame(kryoSerializer2, kryoSerializer4);
      assertNotSame(kryoSerializer2, kryoSerializer1);
      assertNotSame(kryoSerializer2, kryoSerializer0);
      assertNotSame(kryoSerializer2, kryoSerializer3);
      assertNotSame(kryoSerializer3, kryoSerializer0);
      assertNotSame(kryoSerializer3, kryoSerializer2);
      assertNotSame(kryoSerializer3, kryoSerializer1);
      assertNotSame(kryoSerializer3, kryoSerializer4);
      assertFalse(kryoSerializer0.initialized);
      assertFalse(kryoSerializer0.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer2.initialized);
      assertFalse(kryoSerializer2.registerRequired);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer3.registerRequired);
      assertFalse(kryoSerializer3.initialized);
      assertFalse(kryoSerializer0.equals((Object)kryoSerializer1));
      assertFalse(kryoSerializer0.equals((Object)kryoSerializer2));
      assertFalse(kryoSerializer0.equals((Object)kryoSerializer3));
      assertFalse(kryoSerializer0.equals((Object)kryoSerializer4));
      assertFalse(kryoSerializer2.equals((Object)kryoSerializer4));
      assertFalse(kryoSerializer2.equals((Object)kryoSerializer1));
      assertFalse(kryoSerializer2.equals((Object)kryoSerializer0));
      assertFalse(kryoSerializer2.equals((Object)kryoSerializer3));
      assertFalse(kryoSerializer3.equals((Object)kryoSerializer0));
      assertFalse(kryoSerializer3.equals((Object)kryoSerializer2));
      assertFalse(kryoSerializer3.equals((Object)kryoSerializer1));
      assertFalse(kryoSerializer3.equals((Object)kryoSerializer4));
      assertFalse(kryoSerializer0.getregisterRequired());
      assertEquals(10485760, kryoSerializer0.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer0.getinitialized());
      assertEquals(10485760, kryoSerializer2.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer2.getinitialized());
      assertFalse(kryoSerializer2.getregisterRequired());
      assertEquals(10485760, kryoSerializer3.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer3.getregisterRequired());
      assertFalse(kryoSerializer3.getinitialized());
      assertEquals(0, dataOutput0.getPosition());
      assertNotNull(dataOutput0);
      
      int int1 = serializerInitialization0.getKRYO_OFFSET();
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertFalse(int1 == int0);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, int1);
      
      SerializerInitialization.initialize(kryoSerializer3);
      assertNotSame(kryoSerializer3, kryoSerializer0);
      assertNotSame(kryoSerializer3, kryoSerializer2);
      assertNotSame(kryoSerializer3, kryoSerializer1);
      assertNotSame(kryoSerializer3, kryoSerializer4);
      assertEquals(10485760, KryoSerializer.MAX_OUTPUT_SIZE);
      assertFalse(kryoSerializer3.registerRequired);
      assertFalse(kryoSerializer3.initialized);
      assertFalse(kryoSerializer3.equals((Object)kryoSerializer0));
      assertFalse(kryoSerializer3.equals((Object)kryoSerializer2));
      assertFalse(kryoSerializer3.equals((Object)kryoSerializer1));
      assertFalse(kryoSerializer3.equals((Object)kryoSerializer4));
      assertEquals(10485760, kryoSerializer3.getMAX_OUTPUT_SIZE());
      assertFalse(kryoSerializer3.getregisterRequired());
      assertFalse(kryoSerializer3.getinitialized());
      
      Serializer serializer0 = null;
      // Undeclared exception!
      try { 
        SerializerInitialization.initialize(serializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thinkaurelius.titan.graphdb.database.serialize.SerializerInitialization", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertNotNull(serializerInitialization0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      serializerInitialization0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      SerializedObjectSupporter serializedObjectSupporter1 = null;
      serializerInitialization0.serializedObjectSupporter = serializedObjectSupporter1;
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      int int0 = serializerInitialization0.getRESERVED_ID_OFFSET();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(256, int0);
      
      int int1 = serializerInitialization0.getRESERVED_ID_OFFSET();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertTrue(int1 == int0);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(256, int1);
      
      int int2 = serializerInitialization0.getKRYO_OFFSET();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, int2);
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      SerializerInitialization serializerInitialization0 = new SerializerInitialization();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertNotNull(serializerInitialization0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = serializerInitialization0.serializedObjectSupporter;
      assertNull(serializedObjectSupporter0);
      
      serializerInitialization0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      
      int int0 = serializerInitialization0.getKRYO_OFFSET();
      assertEquals(256, SerializerInitialization.RESERVED_ID_OFFSET);
      assertEquals(40, SerializerInitialization.KRYO_OFFSET);
      assertEquals(40, serializerInitialization0.getKRYO_OFFSET());
      assertEquals(256, serializerInitialization0.getRESERVED_ID_OFFSET());
      assertEquals(40, int0);
  }
}
