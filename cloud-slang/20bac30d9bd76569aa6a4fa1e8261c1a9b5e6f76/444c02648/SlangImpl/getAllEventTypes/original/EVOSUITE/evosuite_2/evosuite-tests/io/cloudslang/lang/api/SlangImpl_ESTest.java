/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 04:58:28 GMT 2021
 */

package io.cloudslang.lang.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.cloudslang.lang.api.SlangImpl;
import io.cloudslang.lang.compiler.SlangCompiler;
import io.cloudslang.lang.compiler.SlangSource;
import io.cloudslang.lang.entities.CompilationArtifact;
import io.cloudslang.lang.entities.bindings.Input;
import io.cloudslang.lang.systemtests.BranchAggregatorListener;
import io.cloudslang.lang.systemtests.JoinAggregatorListener;
import io.cloudslang.lang.systemtests.RunDataAggregatorListener;
import io.cloudslang.score.api.ExecutionPlan;
import io.cloudslang.score.api.ExecutionStep;
import io.cloudslang.score.api.Score;
import io.cloudslang.score.api.TriggeringProperties;
import io.cloudslang.score.events.EventBus;
import io.cloudslang.score.events.ScoreEventListener;
import java.io.File;
import java.net.URI;
import java.net.URL;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.log4j.helpers.OptionConverter;
import org.apache.log4j.spi.LoggerRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlangImpl_ESTest extends SlangImpl_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedHashSet<Input> linkedHashSet0 = new LinkedHashSet<Input>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, hashMap0, linkedList0, linkedHashSet0);
      assertNotNull(compilationArtifact0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = 1922L;
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1922L, (long)long1);
      
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long1.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = "net.sf.cglib.coSe.Debug\"ngClasWriter";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      assertNotNull(slangSource0);
      assertEquals("net.sf.cglib.coSe.Debug\"ngClasWriter", slangSource0.getName());
      assertEquals("net.sf.cglib.coSe.Debug\"ngClasWriter", slangSource0.getSource());
      
      LinkedHashSet<SlangSource> linkedHashSet1 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertFalse(linkedHashSet1.contains(slangSource0));
      
      Long long2 = slangImpl0.compileAndRun(slangSource0, linkedHashSet1, hashMap0, hashMap0);
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1922L, (long)long2);
      assertEquals("net.sf.cglib.coSe.Debug\"ngClasWriter", slangSource0.getName());
      assertEquals("net.sf.cglib.coSe.Debug\"ngClasWriter", slangSource0.getSource());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(linkedHashSet1.contains(slangSource0));
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = 23L;
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(23L, (long)long1);
      
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long1.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      RunDataAggregatorListener runDataAggregatorListener0 = new RunDataAggregatorListener();
      assertNotNull(runDataAggregatorListener0);
      
      slangImpl0.unSubscribeOnEvents(runDataAggregatorListener0);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      
      Map<String, String> map0 = null;
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, hashMap0, linkedList0, linkedList0);
      assertNotNull(compilationArtifact0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      Long long2 = slangImpl0.run(compilationArtifact0, map0, hashMap0);
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(23L, (long)long2);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      slangImpl0.subscribeOnAllEvents(joinAggregatorListener0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte)12;
      byteArray0[1] = byte1;
      byte byte2 = (byte)34;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-87);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-60);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      String string0 = "$_PyInner.class";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      assertEquals(9, byteArray0.length);
      assertNotNull(slangSource0);
      assertEquals("\uFFFD\f\"\u0000\uFFFD\uFFFD\u0000\u0000\u0000", slangSource0.getSource());
      assertEquals("$_PyInner.class", slangSource0.getName());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)12, (byte)34, (byte)0, (byte) (-87), (byte) (-60), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      // Undeclared exception!
      try { 
        slangImpl0.compile(slangSource0, linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.cloudslang.lang.api.SlangImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = null;
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = null;
      Input input0 = null;
      Set<Map.Entry<String, ExecutionPlan>> set0 = (Set<Map.Entry<String, ExecutionPlan>>)hashMap0.entrySet();
      assertNotNull(set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = linkedList0.add(input0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      ExecutionPlan executionPlan1 = hashMap0.put(string0, executionPlan0);
      assertNull(executionPlan1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, hashMap0, linkedList0, linkedList0);
      assertNotNull(compilationArtifact0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = compilationArtifact0.equals(linkedList0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.TriggeringProperties", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = "";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      assertNotNull(slangSource0);
      assertEquals("", slangSource0.getName());
      assertEquals("", slangSource0.getSource());
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      CompilationArtifact compilationArtifact0 = slangImpl0.compile(slangSource0, linkedHashSet0);
      assertNull(compilationArtifact0);
      assertEquals("", slangSource0.getName());
      assertEquals("", slangSource0.getSource());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Input> linkedList1 = new LinkedList<Input>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, hashMap0, linkedList0, linkedList1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(compilationArtifact0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      Long long0 = slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = ",g(TlL6";
      String string1 = null;
      SlangSource slangSource0 = new SlangSource(string0, string1);
      assertNotNull(slangSource0);
      assertEquals(",g(TlL6", slangSource0.getSource());
      assertNull(slangSource0.getName());
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      BranchAggregatorListener branchAggregatorListener0 = new BranchAggregatorListener();
      assertNotNull(branchAggregatorListener0);
      
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = "6b/eu-dQ";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      assertNotNull(slangSource0);
      assertEquals("6b/eu-dQ", slangSource0.getSource());
      assertEquals("6b/eu-dQ", slangSource0.getName());
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, map0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      RunDataAggregatorListener runDataAggregatorListener0 = new RunDataAggregatorListener();
      assertNotNull(runDataAggregatorListener0);
      
      slangImpl0.subscribeOnAllEvents(runDataAggregatorListener0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ScoreEventListener scoreEventListener0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("score"));
      
      slangImpl0.subscribeOnEvents(scoreEventListener0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("score"));
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = "th?a]$i$E1z4:>i";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertEquals("th?a]$i$E1z4:>i", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("th?a]$i$E1z4:>i", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("a]$i$E1z4:>i", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      
      LoggerRepository loggerRepository0 = mock(LoggerRepository.class, new ViolatedAssumptionAnswer());
      OptionConverter.selectAndConfigure(uRL0, string0, loggerRepository0);
      assertEquals("th?a]$i$E1z4:>i", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("th?a]$i$E1z4:>i", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("a]$i$E1z4:>i", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)7;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-85);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-108);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-33);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)3;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-1);
      byteArray0[8] = byte8;
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      assertEquals(9, byteArray0.length);
      assertNotNull(slangSource0);
      assertEquals("\u0007\uFFFD\u0000\u0000\uFFFD\uFFFD\u0000\u0003\uFFFD", slangSource0.getSource());
      assertEquals("th?a]$i$E1z4:>i", slangSource0.getName());
      assertArrayEquals(new byte[] {(byte)7, (byte) (-85), (byte)0, (byte)0, (byte) (-108), (byte) (-33), (byte)0, (byte)3, (byte) (-1)}, byteArray0);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      CompilationArtifact compilationArtifact0 = slangImpl0.compile(slangSource0, linkedHashSet0);
      assertEquals(9, byteArray0.length);
      assertNull(compilationArtifact0);
      assertEquals("\u0007\uFFFD\u0000\u0000\uFFFD\uFFFD\u0000\u0003\uFFFD", slangSource0.getSource());
      assertEquals("th?a]$i$E1z4:>i", slangSource0.getName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      assertArrayEquals(new byte[] {(byte)7, (byte) (-85), (byte)0, (byte)0, (byte) (-108), (byte) (-33), (byte)0, (byte)3, (byte) (-1)}, byteArray0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setPlatformMetadata(map0);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertNotNull(triggeringProperties1);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNull(triggeringProperties1.getStartStep());
      
      ExecutionPlan executionPlan1 = triggeringProperties1.getExecutionPlan();
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getBeginStep());
      
      Map<String, ExecutionPlan> map1 = null;
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan1, map1, linkedList0, linkedList0);
      assertNotNull(compilationArtifact0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getBeginStep());
      assertEquals(0, linkedList0.size());
      
      Long long0 = slangImpl0.run(compilationArtifact0, map1, map1);
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getBeginStep());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("score"));
      
      boolean boolean0 = linkedList0.retainAll(set0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("score"));
      
      ExecutionPlan executionPlan1 = executionPlan0.addSteps(linkedList0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      String string0 = "SCORE_FINISHED_EVENT";
      ExecutionPlan executionPlan2 = executionPlan1.setFlowUuid(string0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      assertNotNull(executionPlan2);
      assertNull(executionPlan0.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan1);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan0.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      Map<String, String> map0 = null;
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setPlatformMetadata(map0);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(triggeringProperties1);
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan0.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      Map<String, ExecutionPlan> map1 = triggeringProperties1.getDependencies();
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(map1);
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNull(executionPlan0.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      LinkedList<Input> linkedList1 = new LinkedList<Input>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Input input0 = mock(Input.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = linkedList1.add(input0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(input0));
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan2, map1, linkedList1, linkedList1);
      assertNotNull(compilationArtifact0);
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertEquals(1, linkedList1.size());
      assertNull(executionPlan0.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertTrue(linkedList1.contains(input0));
      
      Long long0 = slangImpl0.run(compilationArtifact0, map0, map1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertEquals(1, linkedList1.size());
      assertNull(executionPlan0.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertTrue(linkedList1.contains(input0));
      
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      slangImpl0.subscribeOnAllEvents(joinAggregatorListener0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ScoreEventListener scoreEventListener0 = null;
      slangImpl0.unSubscribeOnEvents(scoreEventListener0);
      slangImpl0.subscribeOnAllEvents(scoreEventListener0);
      SlangSource slangSource0 = null;
      LinkedList<SlangSource> linkedList0 = new LinkedList<SlangSource>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>(linkedList0);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        slangImpl0.compile(slangSource0, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = 3527L;
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(3527L, (long)long1);
      
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long1.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("score"));
      
      boolean boolean0 = linkedList0.retainAll(set0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("score"));
      
      ExecutionPlan executionPlan1 = executionPlan0.addSteps(linkedList0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      String string0 = "SCORE_FINISHED_EVENT";
      ExecutionPlan executionPlan2 = executionPlan1.setFlowUuid(string0);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertNotNull(executionPlan2);
      assertEquals("SCORE_FINISHED_EVENT", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan1);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertNotNull(triggeringProperties0);
      assertNull(triggeringProperties0.getStartStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      Map<String, String> map0 = null;
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setPlatformMetadata(map0);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertNotNull(triggeringProperties1);
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      Map<String, ExecutionPlan> map1 = triggeringProperties1.getDependencies();
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertNotNull(map1);
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      LinkedList<Input> linkedList1 = new LinkedList<Input>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Input input0 = mock(Input.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = linkedList1.add(input0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(input0));
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan2, map1, linkedList1, linkedList1);
      assertNotNull(compilationArtifact0);
      assertEquals("SCORE_FINISHED_EVENT", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals(1, linkedList1.size());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertTrue(linkedList1.contains(input0));
      
      Long long2 = slangImpl0.run(compilationArtifact0, map0, map1);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(3527L, (long)long2);
      assertEquals("SCORE_FINISHED_EVENT", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals(1, linkedList1.size());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertEquals("SCORE_FINISHED_EVENT", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertTrue(linkedList1.contains(input0));
      
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      slangImpl0.subscribeOnAllEvents(joinAggregatorListener0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compilationArtifact0).toString();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      slangImpl0.unSubscribeOnEvents(joinAggregatorListener0);
      String string0 = "2\")7-My Rnxf;\\vjz";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("/2\")7-My Rnxf;\\vjz", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("2\")7-My Rnxf;\\vjz", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("2\")7-My Rnxf;\\vjz0", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/2\")7-My Rnxf;\\vjz/2\")7-My Rnxf;\\vjz0", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/2\")7-My Rnxf;\\vjz", file0.getParent());
      assertTrue(file0.canExecute());
      
      SlangSource slangSource0 = SlangSource.fromFile(file0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(slangSource0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("/2\")7-My Rnxf;\\vjz", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("2\")7-My Rnxf;\\vjz", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("2\")7-My Rnxf;\\vjz0", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/2\")7-My Rnxf;\\vjz/2\")7-My Rnxf;\\vjz0", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/2\")7-My Rnxf;\\vjz", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("", slangSource0.getSource());
      assertEquals("2\")7-My Rnxf;\\vjz0", slangSource0.getName());
      
      int int0 = 0;
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>(int0);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      CompilationArtifact compilationArtifact1 = slangImpl0.compile(slangSource0, linkedHashSet0);
      assertSame(compilationArtifact1, compilationArtifact0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(compilationArtifact1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("/2\")7-My Rnxf;\\vjz", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("2\")7-My Rnxf;\\vjz", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("2\")7-My Rnxf;\\vjz0", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/2\")7-My Rnxf;\\vjz/2\")7-My Rnxf;\\vjz0", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/2\")7-My Rnxf;\\vjz", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("", slangSource0.getSource());
      assertEquals("2\")7-My Rnxf;\\vjz0", slangSource0.getName());
      assertFalse(linkedHashSet0.contains(slangSource0));
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = null;
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, hashMap0, linkedList0, linkedList0);
      assertNotNull(compilationArtifact0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-37);
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte byte1 = (byte)0;
      byteArray0[2] = byte1;
      byte byte2 = (byte)39;
      byteArray0[3] = byte2;
      byte byte3 = (byte) (-19);
      byteArray0[4] = byte3;
      byte byte4 = (byte)0;
      byte byte5 = (byte)0;
      String string0 = "$eLmO!E8SC*$CITe";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      assertEquals(7, byteArray0.length);
      assertNotNull(slangSource0);
      assertEquals("\uFFFD\uFFFD\u0000'\uFFFD\u0000\u0000", slangSource0.getSource());
      assertEquals("$eLmO!E8SC*$CITe", slangSource0.getName());
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37), (byte)0, (byte)39, (byte) (-19), (byte)0, (byte)0}, byteArray0);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      assertNotNull(hashMap2);
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap1, hashMap2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.TriggeringProperties", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ExecutionPlan executionPlan1 = executionPlan0.addSteps(linkedList0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      List<Input> list0 = null;
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan1, hashMap0, list0, list0);
      assertNotNull(compilationArtifact0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean0 = compilationArtifact0.equals(hashMap0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertFalse(boolean0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = "H39?J5As6;G}8a";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      assertNotNull(slangSource0);
      assertEquals("H39?J5As6;G}8a", slangSource0.getSource());
      assertEquals("H39?J5As6;G}8a", slangSource0.getName());
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      boolean boolean1 = linkedHashSet0.add(slangSource0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("H39?J5As6;G}8a", slangSource0.getSource());
      assertEquals("H39?J5As6;G}8a", slangSource0.getName());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(slangSource0));
      
      String string1 = null;
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = hashMap1.put(string1, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNull(integer1);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      assertNotNull(hashMap2);
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      
      Long long0 = slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap1, hashMap2);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      assertEquals("H39?J5As6;G}8a", slangSource0.getSource());
      assertEquals("H39?J5As6;G}8a", slangSource0.getName());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertTrue(linkedHashSet0.contains(slangSource0));
      
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertFalse(linkedHashSet1.contains("compiler"));
      
      slangImpl0.subscribeOnEvents(joinAggregatorListener0, linkedHashSet1);
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertFalse(linkedHashSet1.contains("compiler"));
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      slangImpl0.subscribeOnAllEvents(joinAggregatorListener0);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setPlatformMetadata(map0);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertNotNull(triggeringProperties1);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      
      ExecutionPlan executionPlan1 = triggeringProperties1.getExecutionPlan();
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      Map<String, ExecutionPlan> map1 = null;
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan1, map1, linkedList0, linkedList0);
      assertNotNull(compilationArtifact0);
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      Long long0 = slangImpl0.run(compilationArtifact0, map1, map1);
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan1, executionPlan0);
      assertNull(long0);
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      
      String string0 = "ETe9ZU8z`q)xV";
      String string1 = "s|B!a<JWtvQD";
      File file0 = MockFile.createTempFile(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp/ETe9ZU8z`q)xV0s|B!a<JWtvQD", file0.toString());
      assertEquals("ETe9ZU8z`q)xV0s|B!a<JWtvQD", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      
      SlangSource slangSource0 = SlangSource.fromFile(file0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(slangSource0);
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp/ETe9ZU8z`q)xV0s|B!a<JWtvQD", file0.toString());
      assertEquals("ETe9ZU8z`q)xV0s|B!a<JWtvQD", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("", slangSource0.getSource());
      assertEquals("ETe9ZU8z`q)xV0s|B!a<JWtvQD", slangSource0.getName());
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, map1, map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      
      ExecutionStep executionStep0 = new ExecutionStep();
      assertNotNull(executionStep0);
      assertNull(executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      
      ExecutionPlan executionPlan1 = executionPlan0.addStep(executionStep0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      
      long long0 = 1L;
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      ExecutionPlan executionPlan2 = executionPlan1.setBeginStep(long1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(executionPlan2);
      assertNull(executionPlan0.getLanguage());
      assertEquals(1L, (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertEquals(1L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals(1L, (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      
      String string0 = "a0Q^wPpVVUt";
      ExecutionPlan executionPlan3 = executionPlan2.setFlowUuid(string0);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(executionPlan3);
      assertNull(executionPlan0.getLanguage());
      assertEquals(1L, (long)executionPlan0.getBeginStep());
      assertEquals("a0Q^wPpVVUt", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertNull(executionPlan1.getName());
      assertEquals("a0Q^wPpVVUt", executionPlan1.getFlowUuid());
      assertEquals(1L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals(1L, (long)executionPlan2.getBeginStep());
      assertEquals("a0Q^wPpVVUt", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan2.getName());
      assertEquals("a0Q^wPpVVUt", executionPlan3.getFlowUuid());
      assertEquals(1L, (long)executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getLanguage());
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan3, hashMap0, linkedList0, linkedList0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(compilationArtifact0);
      assertNull(executionPlan0.getLanguage());
      assertEquals(1L, (long)executionPlan0.getBeginStep());
      assertEquals("a0Q^wPpVVUt", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertNull(executionPlan1.getName());
      assertEquals("a0Q^wPpVVUt", executionPlan1.getFlowUuid());
      assertEquals(1L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals(1L, (long)executionPlan2.getBeginStep());
      assertEquals("a0Q^wPpVVUt", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan2.getName());
      assertEquals("a0Q^wPpVVUt", executionPlan3.getFlowUuid());
      assertEquals(1L, (long)executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getLanguage());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan1);
      assertTrue(long1.equals((Object)long0));
      assertNull(executionPlan0.getLanguage());
      assertEquals(1L, (long)executionPlan0.getBeginStep());
      assertEquals("a0Q^wPpVVUt", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertNull(executionPlan1.getName());
      assertEquals("a0Q^wPpVVUt", executionPlan1.getFlowUuid());
      assertEquals(1L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals(1L, (long)executionPlan2.getBeginStep());
      assertEquals("a0Q^wPpVVUt", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan2.getName());
      assertEquals("a0Q^wPpVVUt", executionPlan3.getFlowUuid());
      assertEquals(1L, (long)executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getLanguage());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long1.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      slangImpl0.subscribeOnAllEvents(joinAggregatorListener0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)61;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      String string1 = "q-MjG2zb.";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string1);
      assertNotSame(string1, string0);
      assertEquals(2, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(slangSource0);
      assertEquals("q-MjG2zb.", slangSource0.getName());
      assertEquals("=\uFFFD", slangSource0.getSource());
      assertArrayEquals(new byte[] {(byte)61, (byte) (-1)}, byteArray0);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      CompilationArtifact compilationArtifact1 = slangImpl0.compile(slangSource0, linkedHashSet0);
      assertNotSame(string1, string0);
      assertSame(compilationArtifact1, compilationArtifact0);
      assertEquals(2, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(compilationArtifact1);
      assertEquals("q-MjG2zb.", slangSource0.getName());
      assertEquals("=\uFFFD", slangSource0.getSource());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      assertArrayEquals(new byte[] {(byte)61, (byte) (-1)}, byteArray0);
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Long long2 = slangImpl0.run(compilationArtifact1, hashMap1, hashMap1);
      assertNotSame(string1, string0);
      assertSame(compilationArtifact1, compilationArtifact0);
      assertEquals(2, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      assertEquals("q-MjG2zb.", slangSource0.getName());
      assertEquals("=\uFFFD", slangSource0.getSource());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      assertArrayEquals(new byte[] {(byte)61, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = (-1L);
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1, long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long1.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      
      long long2 = (-3815L);
      Long long3 = new Long(long2);
      assertFalse(long2 == long0);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-3815L), (long)long3);
      
      ExecutionPlan executionPlan1 = executionPlan0.setBeginStep(long3);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertFalse(long2 == long0);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals((-3815L), (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals((-3815L), (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      
      long long4 = 246L;
      Long long5 = new Long(long4);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals(246L, (long)long5);
      
      ExecutionStep executionStep0 = new ExecutionStep(long5);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertNotNull(executionStep0);
      assertFalse(executionStep0.isSplitStep());
      assertEquals(246L, (long)executionStep0.getExecStepId());
      
      ExecutionPlan executionPlan2 = executionPlan1.addStep(executionStep0);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long4);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long4));
      assertFalse(long3.equals((Object)long5));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertNotNull(executionPlan2);
      assertFalse(executionStep0.isSplitStep());
      assertEquals(246L, (long)executionStep0.getExecStepId());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertEquals((-3815L), (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals((-3815L), (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals((-3815L), (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan2, hashMap0, linkedList0, linkedList0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long4);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long4));
      assertFalse(long3.equals((Object)long5));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertNotNull(compilationArtifact0);
      assertFalse(executionStep0.isSplitStep());
      assertEquals(246L, (long)executionStep0.getExecStepId());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertEquals((-3815L), (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals((-3815L), (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals((-3815L), (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      
      Long long6 = slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long4);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long4));
      assertFalse(long3.equals((Object)long5));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertFalse(long6.equals((Object)long4));
      assertTrue(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertNotNull(long6);
      assertEquals((-1L), (long)long6);
      assertFalse(executionStep0.isSplitStep());
      assertEquals(246L, (long)executionStep0.getExecStepId());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertEquals((-3815L), (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals((-3815L), (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals((-3815L), (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      
      ScoreEventListener scoreEventListener0 = null;
      slangImpl0.unSubscribeOnEvents(scoreEventListener0);
      CompilationArtifact compilationArtifact1 = new CompilationArtifact(executionPlan2, hashMap0, linkedList0, linkedList0);
      assertTrue(compilationArtifact1.equals((Object)compilationArtifact0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long4);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long4));
      assertFalse(long3.equals((Object)long5));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long6));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long6));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertNotNull(compilationArtifact1);
      assertFalse(executionStep0.isSplitStep());
      assertEquals(246L, (long)executionStep0.getExecStepId());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertEquals((-3815L), (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals((-3815L), (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals((-3815L), (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      
      Long long7 = slangImpl0.run(compilationArtifact1, hashMap0, hashMap0);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      assertNotSame(compilationArtifact1, compilationArtifact0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long4);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long4));
      assertFalse(long3.equals((Object)long5));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long6));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long6));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertTrue(compilationArtifact1.equals((Object)compilationArtifact0));
      assertFalse(long7.equals((Object)long2));
      assertTrue(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long3));
      assertNotNull(long7);
      assertEquals((-1L), (long)long7);
      assertFalse(executionStep0.isSplitStep());
      assertEquals(246L, (long)executionStep0.getExecStepId());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertEquals((-3815L), (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals((-3815L), (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals((-3815L), (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("eventBus"));
      
      slangImpl0.subscribeOnEvents(scoreEventListener0, linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("eventBus"));
      
      slangImpl0.subscribeOnAllEvents(scoreEventListener0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      
      ExecutionPlan executionPlan1 = triggeringProperties0.getExecutionPlan();
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedHashSet<Input> linkedHashSet0 = new LinkedHashSet<Input>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>(linkedHashSet0);
      assertNotNull(linkedList0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan1, hashMap0, linkedList0, linkedHashSet0);
      assertNotNull(compilationArtifact0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0, compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = 0L;
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = null;
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1, long2).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long1.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-13);
      byteArray0[0] = byte0;
      Long long3 = slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      String string0 = "net.sf.cglib.core.DebuggingClassWriter";
      String string1 = "net.sf.cglib.core.ClassEmitter$3";
      SlangSource slangSource0 = new SlangSource(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(slangSource0);
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      
      LinkedHashSet<SlangSource> linkedHashSet1 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertFalse(linkedHashSet1.contains(slangSource0));
      
      boolean boolean0 = linkedHashSet1.add(slangSource0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertTrue(linkedHashSet1.contains(slangSource0));
      
      CompilationArtifact compilationArtifact1 = slangImpl0.compile(slangSource0, linkedHashSet1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(compilationArtifact1, compilationArtifact0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(compilationArtifact1);
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertTrue(linkedHashSet1.contains(slangSource0));
      
      Long long4 = slangImpl0.compileAndRun(slangSource0, linkedHashSet1, hashMap0, hashMap0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(long4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertTrue(linkedHashSet1.contains(slangSource0));
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getBeginStep());
      
      ExecutionStep executionStep0 = new ExecutionStep();
      assertNotNull(executionStep0);
      assertFalse(executionStep0.isSplitStep());
      assertNull(executionStep0.getExecStepId());
      
      ExecutionPlan executionPlan1 = executionPlan0.addStep(executionStep0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getBeginStep());
      assertFalse(executionStep0.isSplitStep());
      assertNull(executionStep0.getExecStepId());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getBeginStep());
      
      long long0 = (-588L);
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-588L), (long)long1);
      
      ExecutionPlan executionPlan2 = executionPlan1.setBeginStep(long1);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(executionPlan2);
      assertNull(executionPlan0.getLanguage());
      assertEquals((-588L), (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertFalse(executionStep0.isSplitStep());
      assertNull(executionStep0.getExecStepId());
      assertEquals((-588L), (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan2.getName());
      assertEquals((-588L), (long)executionPlan2.getBeginStep());
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<Input> list0 = null;
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan2, hashMap0, list0, list0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(compilationArtifact0);
      assertNull(executionPlan0.getLanguage());
      assertEquals((-588L), (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertFalse(executionStep0.isSplitStep());
      assertNull(executionStep0.getExecStepId());
      assertEquals((-588L), (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan2.getName());
      assertEquals((-588L), (long)executionPlan2.getBeginStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan1);
      assertTrue(long1.equals((Object)long0));
      assertNull(executionPlan0.getLanguage());
      assertEquals((-588L), (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertFalse(executionStep0.isSplitStep());
      assertNull(executionStep0.getExecStepId());
      assertEquals((-588L), (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan2.getName());
      assertEquals((-588L), (long)executionPlan2.getBeginStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long1.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-52);
      byteArray0[0] = byte0;
      byte byte1 = (byte)5;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)80;
      byteArray0[4] = byte4;
      byte byte5 = (byte)64;
      byteArray0[5] = byte5;
      String string0 = "";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      assertNotNull(slangSource0);
      assertEquals("", slangSource0.getName());
      assertEquals("", slangSource0.getSource());
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      Long long2 = slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, hashMap0);
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-588L), (long)long2);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", slangSource0.getName());
      assertEquals("", slangSource0.getSource());
      assertFalse(linkedHashSet0.contains(slangSource0));
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      
      String string0 = executionPlan0.toString();
      assertNotNull(string0);
      assertEquals("ExecutionPlan: \nFlowUuid= 'null'\n BeginStep= null\n Name= 'null'\n Steps: \n", string0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      
      ExecutionPlan executionPlan1 = triggeringProperties0.getExecutionPlan();
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedHashSet<Input> linkedHashSet0 = new LinkedHashSet<Input>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>(linkedHashSet0);
      assertNotNull(linkedList0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan1, hashMap0, linkedList0, linkedHashSet0);
      assertNotNull(compilationArtifact0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedList0.size());
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0, compilationArtifact0, (CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedList0.size());
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = 0L;
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      long long2 = 2245L;
      Long long3 = new Long(long2);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long2 == long0);
      assertNotNull(long3);
      assertEquals(2245L, (long)long3);
      
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1, long3).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long0 == long2);
      assertFalse(long1.equals((Object)long3));
      assertTrue(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertFalse(long2 == long0);
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-13);
      byteArray0[0] = byte0;
      Long long4 = slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedList0.size());
      
      String string1 = "net.sf.cglib.core.DebuggingClassWriter";
      String string2 = "net.sf.cglib.core.ClassEmitter$3";
      SlangSource slangSource0 = new SlangSource(string1, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(slangSource0);
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      
      LinkedHashSet<SlangSource> linkedHashSet1 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertFalse(linkedHashSet1.contains(slangSource0));
      
      boolean boolean0 = linkedHashSet1.add(slangSource0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean0);
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.contains(slangSource0));
      
      CompilationArtifact compilationArtifact1 = slangImpl0.compile(slangSource0, linkedHashSet1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(compilationArtifact1, compilationArtifact0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(compilationArtifact1);
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.contains(slangSource0));
      
      Long long5 = slangImpl0.compileAndRun(slangSource0, linkedHashSet1, hashMap0, hashMap0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertNotNull(long5);
      assertEquals(2245L, (long)long5);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.contains(slangSource0));
      
      Map<String, Integer> map0 = null;
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet1, map0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      
      ExecutionPlan executionPlan1 = triggeringProperties0.getExecutionPlan();
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedHashSet<Input> linkedHashSet0 = new LinkedHashSet<Input>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>(linkedHashSet0);
      assertNotNull(linkedList0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan1, hashMap0, linkedList0, linkedHashSet0);
      assertNotNull(compilationArtifact0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0, compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = 0L;
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      long long2 = 1057L;
      Long long3 = new Long(long2);
      assertFalse(long2 == long0);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(1057L, (long)long3);
      
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1, long3).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertFalse(long0 == long2);
      assertFalse(long1.equals((Object)long3));
      assertFalse(long1.equals((Object)long2));
      assertTrue(long1.equals((Object)long0));
      assertFalse(long2 == long0);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-13);
      byteArray0[0] = byte0;
      Long long4 = slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      String string0 = "net.sf.cglib.core.DebuggingClassWriter";
      String string1 = "net.sf.cglib.core.ClassEmitter$3";
      SlangSource slangSource0 = new SlangSource(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(slangSource0);
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      
      LinkedHashSet<SlangSource> linkedHashSet1 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertFalse(linkedHashSet1.contains(slangSource0));
      
      boolean boolean0 = linkedHashSet1.add(slangSource0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.contains(slangSource0));
      
      CompilationArtifact compilationArtifact1 = slangImpl0.compile(slangSource0, linkedHashSet1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(compilationArtifact1, compilationArtifact0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(compilationArtifact1);
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.contains(slangSource0));
      
      Long long5 = slangImpl0.compileAndRun(slangSource0, linkedHashSet1, hashMap0, hashMap0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertNotNull(long5);
      assertEquals(1057L, (long)long5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("net.sf.cglib.core.DebuggingClassWriter", slangSource0.getSource());
      assertEquals("net.sf.cglib.core.ClassEmitter$3", slangSource0.getName());
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.contains(slangSource0));
  }
}
