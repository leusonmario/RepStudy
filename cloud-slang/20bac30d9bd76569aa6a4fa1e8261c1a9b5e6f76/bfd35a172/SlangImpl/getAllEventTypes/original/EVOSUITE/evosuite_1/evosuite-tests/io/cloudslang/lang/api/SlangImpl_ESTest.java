/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 04:53:55 GMT 2021
 */

package io.cloudslang.lang.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.cloudslang.lang.api.SlangImpl;
import io.cloudslang.lang.compiler.SlangCompiler;
import io.cloudslang.lang.compiler.SlangSource;
import io.cloudslang.lang.entities.CompilationArtifact;
import io.cloudslang.lang.entities.bindings.Input;
import io.cloudslang.lang.systemtests.BranchAggregatorListener;
import io.cloudslang.lang.systemtests.JoinAggregatorListener;
import io.cloudslang.lang.systemtests.RunDataAggregatorListener;
import io.cloudslang.score.api.ControlActionMetadata;
import io.cloudslang.score.api.ExecutionPlan;
import io.cloudslang.score.api.ExecutionStep;
import io.cloudslang.score.api.Score;
import io.cloudslang.score.api.TriggeringProperties;
import io.cloudslang.score.events.EventBus;
import io.cloudslang.score.events.ScoreEventListener;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.log4j.LogManager;
import org.apache.log4j.helpers.Loader;
import org.apache.log4j.helpers.LogLog;
import org.apache.log4j.spi.RepositorySelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlangImpl_ESTest extends SlangImpl_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ExecutionPlan executionPlan1 = executionPlan0.addSteps(linkedList0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      
      String string0 = "";
      ExecutionPlan executionPlan2 = executionPlan1.setFlowUuid(string0);
      assertNotNull(executionPlan2);
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan2.getName());
      assertEquals("", executionPlan2.getFlowUuid());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null, (Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      int int0 = (-528);
      Integer integer0 = new Integer(int0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-528), (int)integer0);
      
      LogManager.setRepositorySelector(repositorySelector0, integer0);
      assertTrue(integer0.equals((Object)int0));
      
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      slangImpl0.unSubscribeOnEvents(joinAggregatorListener0);
      ExecutionPlan executionPlan3 = new ExecutionPlan();
      assertNotNull(executionPlan3);
      assertFalse(executionPlan3.equals((Object)executionPlan2));
      assertFalse(executionPlan3.equals((Object)executionPlan0));
      assertFalse(executionPlan3.equals((Object)executionPlan1));
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getFlowUuid());
      assertNull(executionPlan3.getLanguage());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan3);
      assertNotNull(triggeringProperties0);
      assertFalse(executionPlan3.equals((Object)executionPlan2));
      assertFalse(executionPlan3.equals((Object)executionPlan0));
      assertFalse(executionPlan3.equals((Object)executionPlan1));
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getFlowUuid());
      assertNull(executionPlan3.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNotSame(executionPlan3, executionPlan2);
      assertNotSame(executionPlan3, executionPlan0);
      assertNotSame(executionPlan3, executionPlan1);
      
      Map<String, ExecutionPlan> map0 = null;
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setDependencies(map0);
      assertNotNull(triggeringProperties1);
      assertFalse(executionPlan3.equals((Object)executionPlan2));
      assertFalse(executionPlan3.equals((Object)executionPlan0));
      assertFalse(executionPlan3.equals((Object)executionPlan1));
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getFlowUuid());
      assertNull(executionPlan3.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertNotSame(executionPlan3, executionPlan2);
      assertNotSame(executionPlan3, executionPlan0);
      assertNotSame(executionPlan3, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      
      Map<String, ExecutionPlan> map1 = triggeringProperties1.getDependencies();
      assertNull(map1);
      assertFalse(executionPlan3.equals((Object)executionPlan2));
      assertFalse(executionPlan3.equals((Object)executionPlan0));
      assertFalse(executionPlan3.equals((Object)executionPlan1));
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getFlowUuid());
      assertNull(executionPlan3.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertNotSame(executionPlan3, executionPlan2);
      assertNotSame(executionPlan3, executionPlan0);
      assertNotSame(executionPlan3, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      
      LinkedList<Input> linkedList1 = new LinkedList<Input>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan3, map1, linkedList1, linkedList1);
      assertNotNull(compilationArtifact0);
      assertFalse(executionPlan3.equals((Object)executionPlan2));
      assertFalse(executionPlan3.equals((Object)executionPlan0));
      assertFalse(executionPlan3.equals((Object)executionPlan1));
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getFlowUuid());
      assertNull(executionPlan3.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertEquals(0, linkedList1.size());
      
      Long long0 = slangImpl0.run(compilationArtifact0, map1, map0);
      assertNotNull(long0);
      assertFalse(executionPlan3.equals((Object)executionPlan2));
      assertFalse(executionPlan3.equals((Object)executionPlan0));
      assertFalse(executionPlan3.equals((Object)executionPlan1));
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getFlowUuid());
      assertNull(executionPlan3.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertEquals(0, linkedList1.size());
      assertNotSame(executionPlan3, executionPlan2);
      assertNotSame(executionPlan3, executionPlan0);
      assertNotSame(executionPlan3, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertEquals(0L, (long)long0);
      
      Input input0 = mock(Input.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedList1.add(input0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(input0));
      assertTrue(boolean0);
      
      ScoreEventListener scoreEventListener0 = null;
      slangImpl0.subscribeOnAllEvents(scoreEventListener0);
      Long long1 = slangImpl0.run(compilationArtifact0, map1, map0);
      assertNotNull(long1);
      assertFalse(executionPlan3.equals((Object)executionPlan2));
      assertFalse(executionPlan3.equals((Object)executionPlan0));
      assertFalse(executionPlan3.equals((Object)executionPlan1));
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getFlowUuid());
      assertNull(executionPlan3.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(triggeringProperties1.getStartStep());
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(input0));
      assertNotSame(executionPlan3, executionPlan2);
      assertNotSame(executionPlan3, executionPlan0);
      assertNotSame(executionPlan3, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertEquals(0L, (long)long1);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)61;
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      CompilationArtifact compilationArtifact0 = null;
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ExecutionPlan executionPlan1 = executionPlan0.addSteps(linkedList0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      
      String string0 = "";
      ExecutionPlan executionPlan2 = executionPlan1.setFlowUuid(string0);
      assertNotNull(executionPlan2);
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan1);
      
      LinkedList<ExecutionStep> linkedList1 = new LinkedList<ExecutionStep>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      ExecutionPlan executionPlan3 = executionPlan2.addSteps(linkedList1);
      assertNotNull(executionPlan3);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertEquals(0, linkedList1.size());
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getLanguage());
      assertEquals("", executionPlan3.getFlowUuid());
      assertNull(executionPlan3.getName());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan2);
      assertNotSame(linkedList0, linkedList1);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan1);
      assertNotSame(linkedList1, linkedList0);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionPlan3, executionPlan1);
      
      long long0 = (-1L);
      Long long1 = new Long(long0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      ExecutionPlan executionPlan4 = executionPlan2.setBeginStep(long1);
      assertNotNull(executionPlan4);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(long1.equals((Object)long0));
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertEquals((-1L), (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertEquals((-1L), (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertEquals((-1L), (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertEquals((-1L), (long)executionPlan4.getBeginStep());
      assertNull(executionPlan4.getName());
      assertEquals("", executionPlan4.getFlowUuid());
      assertNull(executionPlan4.getLanguage());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan4);
      assertSame(executionPlan0, executionPlan2);
      assertNotSame(linkedList0, linkedList1);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan4);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan4);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan4, executionPlan0);
      assertSame(executionPlan4, executionPlan1);
      assertSame(executionPlan4, executionPlan3);
      assertSame(executionPlan4, executionPlan2);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      RunDataAggregatorListener runDataAggregatorListener0 = new RunDataAggregatorListener();
      assertNotNull(runDataAggregatorListener0);
      
      ExecutionPlan executionPlan5 = new ExecutionPlan();
      assertNotNull(executionPlan5);
      assertFalse(executionPlan5.equals((Object)executionPlan0));
      assertFalse(executionPlan5.equals((Object)executionPlan3));
      assertFalse(executionPlan5.equals((Object)executionPlan2));
      assertFalse(executionPlan5.equals((Object)executionPlan1));
      assertFalse(executionPlan5.equals((Object)executionPlan4));
      assertNull(executionPlan5.getBeginStep());
      assertNull(executionPlan5.getName());
      assertNull(executionPlan5.getLanguage());
      assertNull(executionPlan5.getFlowUuid());
      
      long long2 = 190L;
      Long long3 = new Long(long2);
      assertNotNull(long3);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertEquals(190L, (long)long3);
      
      ExecutionPlan executionPlan6 = executionPlan5.setBeginStep(long3);
      assertNotNull(executionPlan6);
      assertFalse(executionPlan5.equals((Object)executionPlan0));
      assertFalse(executionPlan5.equals((Object)executionPlan3));
      assertFalse(executionPlan5.equals((Object)executionPlan2));
      assertFalse(executionPlan5.equals((Object)executionPlan1));
      assertFalse(executionPlan5.equals((Object)executionPlan4));
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(executionPlan6.equals((Object)executionPlan1));
      assertFalse(executionPlan6.equals((Object)executionPlan3));
      assertFalse(executionPlan6.equals((Object)executionPlan2));
      assertFalse(executionPlan6.equals((Object)executionPlan4));
      assertFalse(executionPlan6.equals((Object)executionPlan0));
      assertEquals(190L, (long)executionPlan5.getBeginStep());
      assertNull(executionPlan5.getName());
      assertNull(executionPlan5.getLanguage());
      assertNull(executionPlan5.getFlowUuid());
      assertEquals(190L, (long)executionPlan6.getBeginStep());
      assertNull(executionPlan6.getLanguage());
      assertNull(executionPlan6.getFlowUuid());
      assertNull(executionPlan6.getName());
      assertNotSame(executionPlan5, executionPlan0);
      assertNotSame(executionPlan5, executionPlan3);
      assertNotSame(executionPlan5, executionPlan2);
      assertNotSame(executionPlan5, executionPlan1);
      assertSame(executionPlan5, executionPlan6);
      assertNotSame(executionPlan5, executionPlan4);
      assertNotSame(executionPlan6, executionPlan1);
      assertNotSame(executionPlan6, executionPlan3);
      assertNotSame(executionPlan6, executionPlan2);
      assertNotSame(executionPlan6, executionPlan4);
      assertNotSame(executionPlan6, executionPlan0);
      assertSame(executionPlan6, executionPlan5);
      
      ExecutionStep executionStep0 = new ExecutionStep(long3);
      assertNotNull(executionStep0);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(executionStep0.isSplitStep());
      assertEquals(190L, (long)executionStep0.getExecStepId());
      
      ControlActionMetadata controlActionMetadata0 = new ControlActionMetadata();
      assertNotNull(controlActionMetadata0);
      assertNull(controlActionMetadata0.getMethodName());
      assertNull(controlActionMetadata0.getClassName());
      
      ExecutionStep executionStep1 = executionStep0.setNavigation(controlActionMetadata0);
      assertNotNull(executionStep1);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(executionStep0.isSplitStep());
      assertEquals(190L, (long)executionStep0.getExecStepId());
      assertNull(controlActionMetadata0.getMethodName());
      assertNull(controlActionMetadata0.getClassName());
      assertFalse(executionStep1.isSplitStep());
      assertEquals(190L, (long)executionStep1.getExecStepId());
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      
      long long4 = 0L;
      long long5 = 1L;
      long long6 = Long.remainderUnsigned(long4, long5);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long5);
      assertFalse(long5 == long0);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertTrue(long6 == long4);
      assertFalse(long6 == long2);
      assertFalse(long6 == long5);
      assertFalse(long6 == long0);
      assertEquals(0L, long6);
      
      ExecutionPlan executionPlan7 = executionPlan6.addStep(executionStep1);
      assertNotNull(executionPlan7);
      assertFalse(executionPlan5.equals((Object)executionPlan0));
      assertFalse(executionPlan5.equals((Object)executionPlan3));
      assertFalse(executionPlan5.equals((Object)executionPlan2));
      assertFalse(executionPlan5.equals((Object)executionPlan1));
      assertFalse(executionPlan5.equals((Object)executionPlan4));
      assertFalse(long2 == long5);
      assertFalse(long2 == long4);
      assertFalse(long2 == long6);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long5));
      assertFalse(long3.equals((Object)long4));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long6));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(executionPlan6.equals((Object)executionPlan1));
      assertFalse(executionPlan6.equals((Object)executionPlan3));
      assertFalse(executionPlan6.equals((Object)executionPlan2));
      assertFalse(executionPlan6.equals((Object)executionPlan4));
      assertFalse(executionPlan6.equals((Object)executionPlan0));
      assertFalse(executionPlan7.equals((Object)executionPlan3));
      assertFalse(executionPlan7.equals((Object)executionPlan2));
      assertFalse(executionPlan7.equals((Object)executionPlan1));
      assertFalse(executionPlan7.equals((Object)executionPlan0));
      assertFalse(executionPlan7.equals((Object)executionPlan4));
      assertEquals(190L, (long)executionPlan5.getBeginStep());
      assertNull(executionPlan5.getName());
      assertNull(executionPlan5.getLanguage());
      assertNull(executionPlan5.getFlowUuid());
      assertEquals(190L, (long)executionPlan6.getBeginStep());
      assertNull(executionPlan6.getLanguage());
      assertNull(executionPlan6.getFlowUuid());
      assertNull(executionPlan6.getName());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(190L, (long)executionStep0.getExecStepId());
      assertNull(controlActionMetadata0.getMethodName());
      assertNull(controlActionMetadata0.getClassName());
      assertFalse(executionStep1.isSplitStep());
      assertEquals(190L, (long)executionStep1.getExecStepId());
      assertEquals(190L, (long)executionPlan7.getBeginStep());
      assertNull(executionPlan7.getLanguage());
      assertNull(executionPlan7.getFlowUuid());
      assertNull(executionPlan7.getName());
      assertNotSame(executionPlan5, executionPlan0);
      assertNotSame(executionPlan5, executionPlan3);
      assertSame(executionPlan5, executionPlan7);
      assertNotSame(executionPlan5, executionPlan2);
      assertNotSame(executionPlan5, executionPlan1);
      assertSame(executionPlan5, executionPlan6);
      assertNotSame(executionPlan5, executionPlan4);
      assertNotSame(executionPlan6, executionPlan1);
      assertNotSame(executionPlan6, executionPlan3);
      assertNotSame(executionPlan6, executionPlan2);
      assertNotSame(executionPlan6, executionPlan4);
      assertNotSame(executionPlan6, executionPlan0);
      assertSame(executionPlan6, executionPlan7);
      assertSame(executionPlan6, executionPlan5);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan7, executionPlan5);
      assertNotSame(executionPlan7, executionPlan3);
      assertNotSame(executionPlan7, executionPlan2);
      assertNotSame(executionPlan7, executionPlan1);
      assertNotSame(executionPlan7, executionPlan0);
      assertNotSame(executionPlan7, executionPlan4);
      assertSame(executionPlan7, executionPlan6);
      
      Set<String> set0 = executionPlan7.getSysAccPaths();
      assertNotNull(set0);
      assertFalse(executionPlan5.equals((Object)executionPlan0));
      assertFalse(executionPlan5.equals((Object)executionPlan3));
      assertFalse(executionPlan5.equals((Object)executionPlan2));
      assertFalse(executionPlan5.equals((Object)executionPlan1));
      assertFalse(executionPlan5.equals((Object)executionPlan4));
      assertFalse(long2 == long5);
      assertFalse(long2 == long4);
      assertFalse(long2 == long6);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long5));
      assertFalse(long3.equals((Object)long4));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long6));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(executionPlan6.equals((Object)executionPlan1));
      assertFalse(executionPlan6.equals((Object)executionPlan3));
      assertFalse(executionPlan6.equals((Object)executionPlan2));
      assertFalse(executionPlan6.equals((Object)executionPlan4));
      assertFalse(executionPlan6.equals((Object)executionPlan0));
      assertFalse(executionPlan7.equals((Object)executionPlan3));
      assertFalse(executionPlan7.equals((Object)executionPlan2));
      assertFalse(executionPlan7.equals((Object)executionPlan1));
      assertFalse(executionPlan7.equals((Object)executionPlan0));
      assertFalse(executionPlan7.equals((Object)executionPlan4));
      assertEquals(190L, (long)executionPlan5.getBeginStep());
      assertNull(executionPlan5.getName());
      assertNull(executionPlan5.getLanguage());
      assertNull(executionPlan5.getFlowUuid());
      assertEquals(190L, (long)executionPlan6.getBeginStep());
      assertNull(executionPlan6.getLanguage());
      assertNull(executionPlan6.getFlowUuid());
      assertNull(executionPlan6.getName());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(190L, (long)executionStep0.getExecStepId());
      assertNull(controlActionMetadata0.getMethodName());
      assertNull(controlActionMetadata0.getClassName());
      assertFalse(executionStep1.isSplitStep());
      assertEquals(190L, (long)executionStep1.getExecStepId());
      assertEquals(190L, (long)executionPlan7.getBeginStep());
      assertNull(executionPlan7.getLanguage());
      assertNull(executionPlan7.getFlowUuid());
      assertNull(executionPlan7.getName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("compiler"));
      assertNotSame(executionPlan5, executionPlan0);
      assertNotSame(executionPlan5, executionPlan3);
      assertSame(executionPlan5, executionPlan7);
      assertNotSame(executionPlan5, executionPlan2);
      assertNotSame(executionPlan5, executionPlan1);
      assertSame(executionPlan5, executionPlan6);
      assertNotSame(executionPlan5, executionPlan4);
      assertNotSame(executionPlan6, executionPlan1);
      assertNotSame(executionPlan6, executionPlan3);
      assertNotSame(executionPlan6, executionPlan2);
      assertNotSame(executionPlan6, executionPlan4);
      assertNotSame(executionPlan6, executionPlan0);
      assertSame(executionPlan6, executionPlan7);
      assertSame(executionPlan6, executionPlan5);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan7, executionPlan5);
      assertNotSame(executionPlan7, executionPlan3);
      assertNotSame(executionPlan7, executionPlan2);
      assertNotSame(executionPlan7, executionPlan1);
      assertNotSame(executionPlan7, executionPlan0);
      assertNotSame(executionPlan7, executionPlan4);
      assertSame(executionPlan7, executionPlan6);
      
      slangImpl0.subscribeOnEvents(runDataAggregatorListener0, set0);
      assertFalse(executionPlan5.equals((Object)executionPlan0));
      assertFalse(executionPlan5.equals((Object)executionPlan3));
      assertFalse(executionPlan5.equals((Object)executionPlan2));
      assertFalse(executionPlan5.equals((Object)executionPlan1));
      assertFalse(executionPlan5.equals((Object)executionPlan4));
      assertFalse(long2 == long5);
      assertFalse(long2 == long4);
      assertFalse(long2 == long6);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long5));
      assertFalse(long3.equals((Object)long4));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long6));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(executionPlan6.equals((Object)executionPlan1));
      assertFalse(executionPlan6.equals((Object)executionPlan3));
      assertFalse(executionPlan6.equals((Object)executionPlan2));
      assertFalse(executionPlan6.equals((Object)executionPlan4));
      assertFalse(executionPlan6.equals((Object)executionPlan0));
      assertFalse(executionPlan7.equals((Object)executionPlan3));
      assertFalse(executionPlan7.equals((Object)executionPlan2));
      assertFalse(executionPlan7.equals((Object)executionPlan1));
      assertFalse(executionPlan7.equals((Object)executionPlan0));
      assertFalse(executionPlan7.equals((Object)executionPlan4));
      assertEquals(190L, (long)executionPlan5.getBeginStep());
      assertNull(executionPlan5.getName());
      assertNull(executionPlan5.getLanguage());
      assertNull(executionPlan5.getFlowUuid());
      assertEquals(190L, (long)executionPlan6.getBeginStep());
      assertNull(executionPlan6.getLanguage());
      assertNull(executionPlan6.getFlowUuid());
      assertNull(executionPlan6.getName());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(190L, (long)executionStep0.getExecStepId());
      assertNull(controlActionMetadata0.getMethodName());
      assertNull(controlActionMetadata0.getClassName());
      assertFalse(executionStep1.isSplitStep());
      assertEquals(190L, (long)executionStep1.getExecStepId());
      assertEquals(190L, (long)executionPlan7.getBeginStep());
      assertNull(executionPlan7.getLanguage());
      assertNull(executionPlan7.getFlowUuid());
      assertNull(executionPlan7.getName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("compiler"));
      assertNotSame(executionPlan5, executionPlan0);
      assertNotSame(executionPlan5, executionPlan3);
      assertSame(executionPlan5, executionPlan7);
      assertNotSame(executionPlan5, executionPlan2);
      assertNotSame(executionPlan5, executionPlan1);
      assertSame(executionPlan5, executionPlan6);
      assertNotSame(executionPlan5, executionPlan4);
      assertNotSame(executionPlan6, executionPlan1);
      assertNotSame(executionPlan6, executionPlan3);
      assertNotSame(executionPlan6, executionPlan2);
      assertNotSame(executionPlan6, executionPlan4);
      assertNotSame(executionPlan6, executionPlan0);
      assertSame(executionPlan6, executionPlan7);
      assertSame(executionPlan6, executionPlan5);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan7, executionPlan5);
      assertNotSame(executionPlan7, executionPlan3);
      assertNotSame(executionPlan7, executionPlan2);
      assertNotSame(executionPlan7, executionPlan1);
      assertNotSame(executionPlan7, executionPlan0);
      assertNotSame(executionPlan7, executionPlan4);
      assertSame(executionPlan7, executionPlan6);
      
      String string1 = "8,q}!";
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = (-1L);
      Long long1 = new Long(long0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long1.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Map<String, ExecutionPlan> map0 = triggeringProperties0.getDependencies();
      assertNotNull(map0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setDependencies(map0);
      assertNotNull(triggeringProperties1);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      
      TriggeringProperties triggeringProperties2 = triggeringProperties0.setPlatformMetadata(hashMap0);
      assertNotNull(triggeringProperties2);
      assertNull(triggeringProperties2.getStartStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(triggeringProperties2, triggeringProperties0);
      assertSame(triggeringProperties2, triggeringProperties1);
      assertSame(triggeringProperties0, triggeringProperties2);
      assertSame(triggeringProperties0, triggeringProperties1);
      
      ExecutionPlan executionPlan1 = triggeringProperties2.getExecutionPlan();
      assertNotNull(executionPlan1);
      assertNull(triggeringProperties2.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(triggeringProperties2, triggeringProperties0);
      assertSame(triggeringProperties2, triggeringProperties1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties2);
      assertSame(triggeringProperties0, triggeringProperties1);
      
      HashMap<String, ExecutionPlan> hashMap1 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan1, hashMap1, linkedList0, linkedList0);
      assertNotNull(compilationArtifact0);
      assertNull(triggeringProperties2.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long2 = slangImpl0.run(compilationArtifact0, hashMap1, hashMap0);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertNull(triggeringProperties2.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(triggeringProperties2, triggeringProperties0);
      assertSame(triggeringProperties2, triggeringProperties1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties2);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertEquals((-1L), (long)long2);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      slangImpl0.unSubscribeOnEvents(joinAggregatorListener0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      long long0 = (-68L);
      System.setCurrentTimeMillis(long0);
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      SlangSource slangSource0 = null;
      Set<SlangSource> set0 = null;
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, set0, map0, map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = null;
      ExecutionPlan executionPlan1 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-51);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      String string0 = "userInputs";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      assertNotNull(slangSource0);
      assertEquals("userInputs", slangSource0.getName());
      assertEquals("\uFFFD\u0000", slangSource0.getSource());
      assertArrayEquals(new byte[] {(byte) (-51), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      // Undeclared exception!
      try { 
        slangImpl0.compile(slangSource0, linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.cloudslang.lang.api.SlangImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)88;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)103;
      byteArray0[4] = byte4;
      byte byte5 = (byte)8;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      String string0 = "~8EF8KYyW\"pus";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      assertNotNull(slangSource0);
      assertEquals("\u0000X\u0000\u0000g\b\u0000\u0000", slangSource0.getSource());
      assertEquals("~8EF8KYyW\"pus", slangSource0.getName());
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)0, (byte)0, (byte)103, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      CompilationArtifact compilationArtifact0 = slangImpl0.compile(slangSource0, linkedHashSet0);
      assertNull(compilationArtifact0);
      assertEquals("\u0000X\u0000\u0000g\b\u0000\u0000", slangSource0.getSource());
      assertEquals("~8EF8KYyW\"pus", slangSource0.getName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)0, (byte)0, (byte)103, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      SlangSource slangSource0 = null;
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(linkedHashSet1.contains(SlangImpl.class));
      
      boolean boolean0 = linkedHashSet0.retainAll(linkedHashSet1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(linkedHashSet1.contains(SlangImpl.class));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        slangImpl0.compile(slangSource0, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      BranchAggregatorListener branchAggregatorListener0 = new BranchAggregatorListener();
      assertNotNull(branchAggregatorListener0);
      
      Set<String> set0 = null;
      slangImpl0.subscribeOnEvents(branchAggregatorListener0, set0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-20);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)80;
      byteArray0[2] = byte2;
      String string0 = "";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      assertNotNull(slangSource0);
      assertEquals("\uFFFD\u0001P", slangSource0.getSource());
      assertEquals("", slangSource0.getName());
      assertArrayEquals(new byte[] {(byte) (-20), (byte)1, (byte)80}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, map0, map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      
      long long0 = 0L;
      Long long1 = new Long(long0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setStartStep(long1);
      assertNotNull(triggeringProperties1);
      assertTrue(long1.equals((Object)long0));
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      
      Map<String, ExecutionPlan> map0 = triggeringProperties1.getDependencies();
      assertNotNull(map0);
      assertTrue(long1.equals((Object)long0));
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, map0, linkedList0, linkedList0);
      assertNotNull(compilationArtifact0);
      assertTrue(long1.equals((Object)long0));
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long2 = slangImpl0.run(compilationArtifact0, map0, hashMap0);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long1.equals((Object)long0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertEquals(0L, (long)long2);
      
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      slangImpl0.subscribeOnAllEvents(joinAggregatorListener0);
      RunDataAggregatorListener runDataAggregatorListener0 = new RunDataAggregatorListener();
      assertNotNull(runDataAggregatorListener0);
      
      // Undeclared exception!
      try { 
        runDataAggregatorListener0.aggregate();
        fail("Expecting exception: IncompatibleClassChangeError");
      
      } catch(IncompatibleClassChangeError e) {
         //
         // Expected non-static field net.sf.cglib.proxy.Enhancer.serialVersionUID
         //
         verifyException("net.sf.cglib.proxy.Enhancer", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)16;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-86);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-66);
      byteArray0[4] = byte4;
      String string0 = "";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      assertNotNull(slangSource0);
      assertEquals("", slangSource0.getName());
      assertEquals("\u0000\u0000\u0010\uFFFD\uFFFD", slangSource0.getSource());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)16, (byte) (-86), (byte) (-66)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, map0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = null;
      int int0 = 0;
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>(int0);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, hashMap0, linkedList0, linkedList0);
      assertNotNull(compilationArtifact0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      
      Input input0 = mock(Input.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedList0.add(input0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(input0));
      assertTrue(boolean0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(input0));
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-5);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-105);
      byteArray0[4] = byte4;
      byte byte5 = (byte)32;
      byteArray0[5] = byte5;
      byte byte6 = (byte)125;
      byteArray0[6] = byte6;
      String string0 = "";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      assertNotNull(slangSource0);
      assertEquals("", slangSource0.getName());
      assertEquals("\u0001\u0000\u0000\uFFFD\uFFFD }", slangSource0.getSource());
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte) (-5), (byte) (-105), (byte)32, (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      CompilationArtifact compilationArtifact1 = slangImpl0.compile(slangSource0, linkedHashSet0);
      assertNotNull(compilationArtifact1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("", slangSource0.getName());
      assertEquals("\u0001\u0000\u0000\uFFFD\uFFFD }", slangSource0.getSource());
      assertFalse(linkedHashSet0.contains(slangSource0));
      assertSame(compilationArtifact1, compilationArtifact0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte) (-5), (byte) (-105), (byte)32, (byte)125}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Long long0 = null;
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      
      Map<String, ExecutionPlan> map0 = triggeringProperties0.getDependencies();
      assertNotNull(map0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setDependencies(map0);
      assertNotNull(triggeringProperties1);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      
      ExecutionPlan executionPlan1 = triggeringProperties1.getExecutionPlan();
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan1, executionPlan0);
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Input> linkedList1 = new LinkedList<Input>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan1, map0, linkedList0, linkedList1);
      assertNotNull(compilationArtifact0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      Long long1 = slangImpl0.run(compilationArtifact0, map0, map0);
      assertNull(long1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan1, executionPlan0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutionPlan) null).when(compilationArtifact0).getExecutionPlan();
      doReturn((String) null).when(compilationArtifact0).toString();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-20);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)80;
      byteArray0[2] = byte2;
      String string0 = "";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      assertNotNull(slangSource0);
      assertEquals("\uFFFD\u0001P", slangSource0.getSource());
      assertEquals("", slangSource0.getName());
      assertArrayEquals(new byte[] {(byte) (-20), (byte)1, (byte)80}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, map0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.TriggeringProperties", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = 302L;
      Long long1 = new Long(long0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(302L, (long)long1);
      
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long1.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      
      String string0 = "=uyGNzX#lBD7_=g8M-";
      ExecutionPlan executionPlan1 = executionPlan0.setFlowUuid(string0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan0.getFlowUuid());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      
      long long2 = 0L;
      Long long3 = new Long(long2);
      assertNotNull(long3);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertEquals(0L, (long)long3);
      
      ExecutionPlan executionPlan2 = executionPlan1.setBeginStep(long3);
      assertNotNull(executionPlan2);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0L, (long)executionPlan0.getBeginStep());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan0.getFlowUuid());
      assertEquals(0L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertEquals(0L, (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getName());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan1);
      assertNotNull(triggeringProperties0);
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0L, (long)executionPlan0.getBeginStep());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan0.getFlowUuid());
      assertEquals(0L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      
      Map<String, String> map0 = null;
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setRuntimeValues(map0);
      assertNotNull(triggeringProperties1);
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0L, (long)executionPlan0.getBeginStep());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan0.getFlowUuid());
      assertEquals(0L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      
      Map<String, ExecutionPlan> map1 = triggeringProperties1.getDependencies();
      assertNotNull(map1);
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0L, (long)executionPlan0.getBeginStep());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan0.getFlowUuid());
      assertEquals(0L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan2, map1, linkedList0, linkedList0);
      assertNotNull(compilationArtifact0);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0L, (long)executionPlan0.getBeginStep());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan0.getFlowUuid());
      assertEquals(0L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertEquals(0L, (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getName());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      
      Long long4 = slangImpl0.run(compilationArtifact0, map0, map0);
      assertNotNull(long4);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(0L, (long)executionPlan0.getBeginStep());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan0.getFlowUuid());
      assertEquals(0L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertEquals(0L, (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getName());
      assertEquals("=uyGNzX#lBD7_=g8M-", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      assertEquals(302L, (long)long4);
      
      ScoreEventListener scoreEventListener0 = null;
      slangImpl0.subscribeOnAllEvents(scoreEventListener0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = (-465L);
      Long long1 = new Long(long0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-465L), (long)long1);
      
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long1.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      BranchAggregatorListener branchAggregatorListener0 = new BranchAggregatorListener();
      assertNotNull(branchAggregatorListener0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertNotNull(set0);
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("eventBus"));
      
      slangImpl0.subscribeOnEvents(branchAggregatorListener0, set0);
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("eventBus"));
      
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
      slangImpl0.subscribeOnEvents(branchAggregatorListener0, set0);
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("eventBus"));
      
      slangImpl0.subscribeOnAllEvents(branchAggregatorListener0);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getBeginStep());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      
      long long2 = 0L;
      Long long3 = new Long(long2);
      assertNotNull(long3);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals(0L, (long)long3);
      
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setStartStep(long3);
      assertNotNull(triggeringProperties1);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      
      ExecutionPlan executionPlan1 = triggeringProperties1.getExecutionPlan();
      assertNotNull(executionPlan1);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan1, executionPlan0);
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, ExecutionPlan> hashMap1 = new HashMap<String, ExecutionPlan>(hashMap0);
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact1 = new CompilationArtifact(executionPlan1, hashMap1, linkedList0, linkedList0);
      assertNotNull(compilationArtifact1);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(compilationArtifact1.equals((Object)compilationArtifact0));
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedList0.size());
      
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      assertNotNull(hashMap2);
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      
      Long long4 = slangImpl0.run(compilationArtifact1, hashMap2, hashMap1);
      assertNotNull(long4);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(compilationArtifact1.equals((Object)compilationArtifact0));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getBeginStep());
      assertEquals(0L, (long)triggeringProperties0.getStartStep());
      assertEquals(0L, (long)triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan1, executionPlan0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertEquals((-465L), (long)long4);
      
      byte byte0 = (byte)65;
      byte byte1 = (byte) (-92);
      byte byte2 = (byte)118;
      byte byte3 = (byte)0;
      byte byte4 = (byte) (-120);
      byte byte5 = (byte)8;
      byte byte6 = (byte)110;
      byte byte7 = (byte)50;
      byte byte8 = (byte)0;
      String string0 = "";
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutionPlan) null).when(compilationArtifact0).getExecutionPlan();
      doReturn((String) null).when(compilationArtifact0).toString();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)74;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      String string0 = "";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      assertNotNull(slangSource0);
      assertEquals("J\u0000\u0000\u0000", slangSource0.getSource());
      assertEquals("", slangSource0.getName());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      CompilationArtifact compilationArtifact1 = slangImpl0.compile(slangSource0, linkedHashSet0);
      assertNotNull(compilationArtifact1);
      assertEquals("J\u0000\u0000\u0000", slangSource0.getSource());
      assertEquals("", slangSource0.getName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      assertSame(compilationArtifact1, compilationArtifact0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ExecutionPlan executionPlan1 = executionPlan0.addSteps(linkedList0);
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertSame(executionPlan0, executionPlan1);
      
      Map<String, ExecutionPlan> map0 = triggeringProperties0.getDependencies();
      assertNotNull(map0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(triggeringProperties0.getStartStep());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(executionPlan0, executionPlan1);
      
      LinkedList<Input> linkedList1 = new LinkedList<Input>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      CompilationArtifact compilationArtifact2 = new CompilationArtifact(executionPlan1, map0, linkedList1, linkedList1);
      assertNotNull(compilationArtifact2);
      assertFalse(compilationArtifact2.equals((Object)compilationArtifact1));
      assertFalse(compilationArtifact2.equals((Object)compilationArtifact0));
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedList1.size());
      
      Map<String, ExecutionPlan> map1 = compilationArtifact2.getDependencies();
      assertNotNull(map1);
      assertFalse(compilationArtifact2.equals((Object)compilationArtifact1));
      assertFalse(compilationArtifact2.equals((Object)compilationArtifact0));
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(map0, map1);
      assertSame(map1, map0);
      
      // Undeclared exception!
      try { 
        slangImpl0.run(compilationArtifact1, map1, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.TriggeringProperties", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      
      Map<String, ExecutionPlan> map0 = null;
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, map0, linkedList0, linkedList0);
      assertNotNull(compilationArtifact0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertEquals(0, linkedList0.size());
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertEquals(0, linkedList0.size());
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ScoreEventListener scoreEventListener0 = null;
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("compiler"));
      
      slangImpl0.subscribeOnEvents(scoreEventListener0, set0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("compiler"));
      
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      slangImpl0.unSubscribeOnEvents(joinAggregatorListener0);
      String string0 = "g4n)LmgMLx4W";
      String string1 = "";
      SlangSource slangSource0 = new SlangSource(string0, string1);
      assertNotNull(slangSource0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", slangSource0.getName());
      assertEquals("g4n)LmgMLx4W", slangSource0.getSource());
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      hashMap0.clear();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long0 = slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, hashMap0);
      assertNotNull(long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", slangSource0.getName());
      assertEquals("g4n)LmgMLx4W", slangSource0.getSource());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = 4317L;
      Long long1 = new Long(long0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(4317L, (long)long1);
      
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertTrue(long1.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      assertNotNull(joinAggregatorListener0);
      
      slangImpl0.subscribeOnAllEvents(joinAggregatorListener0);
      RunDataAggregatorListener runDataAggregatorListener0 = new RunDataAggregatorListener();
      assertNotNull(runDataAggregatorListener0);
      
      slangImpl0.subscribeOnAllEvents(runDataAggregatorListener0);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertNotNull(set0);
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("eventBus"));
      
      executionPlan0.setSubflowsUUIDs(set0);
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertFalse(set0.contains("eventBus"));
      
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setDependencies(hashMap0);
      assertNotNull(triggeringProperties1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(triggeringProperties0, triggeringProperties1);
      
      ExecutionPlan executionPlan1 = triggeringProperties1.getExecutionPlan();
      assertNotNull(executionPlan1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan1, hashMap0, linkedList0, linkedList0);
      assertNotNull(compilationArtifact0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      
      Long long2 = slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(triggeringProperties1.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertSame(triggeringProperties1, triggeringProperties0);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan0, executionPlan1);
      assertSame(triggeringProperties0, triggeringProperties1);
      assertEquals(4317L, (long)long2);
      
      String string0 = "";
      String string1 = ".class";
      long long3 = (-7083L);
      System.setCurrentTimeMillis(long3);
      assertFalse(long3 == long0);
      
      String string2 = "log4j.factory";
      try { 
        MockURI.URI(string0, string1, string1, string2);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://.class.class#log4j.factory
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      
      ExecutionPlan executionPlan1 = triggeringProperties0.getExecutionPlan();
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ExecutionPlan executionPlan2 = executionPlan1.addSteps(linkedList0);
      assertNotNull(executionPlan2);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      
      String string0 = "";
      ExecutionPlan executionPlan3 = executionPlan2.setFlowUuid(string0);
      assertNotNull(executionPlan3);
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getName());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, linkedList0.size());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan3.getLanguage());
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertEquals("", executionPlan3.getFlowUuid());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan1);
      assertSame(executionPlan3, executionPlan0);
      
      long long0 = 1L;
      Long long1 = new Long(long0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      
      ExecutionStep executionStep0 = new ExecutionStep(long1);
      assertNotNull(executionStep0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExecutionStep executionStep1 = executionStep0.setNavigationData(hashMap0);
      assertNotNull(executionStep1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(executionStep1.isSplitStep());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      
      ExecutionPlan executionPlan4 = executionPlan3.addStep(executionStep1);
      assertNotNull(executionPlan4);
      assertTrue(long1.equals((Object)long0));
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getName());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, linkedList0.size());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan3.getLanguage());
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertEquals("", executionPlan3.getFlowUuid());
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(executionStep1.isSplitStep());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertEquals("", executionPlan4.getFlowUuid());
      assertNull(executionPlan4.getName());
      assertNull(executionPlan4.getBeginStep());
      assertNull(executionPlan4.getLanguage());
      assertFalse(linkedList0.contains(executionStep1));
      assertSame(executionPlan0, executionPlan4);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan4);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan4);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan4);
      assertSame(executionPlan3, executionPlan1);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan4, executionPlan1);
      assertSame(executionPlan4, executionPlan3);
      assertSame(executionPlan4, executionPlan0);
      assertSame(executionPlan4, executionPlan2);
      
      long long2 = 4147L;
      Long long3 = new Long(long2);
      assertNotNull(long3);
      assertFalse(long2 == long0);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals(4147L, (long)long3);
      
      ExecutionPlan executionPlan5 = executionPlan4.setBeginStep(long3);
      assertNotNull(executionPlan5);
      assertFalse(long0 == long2);
      assertFalse(long1.equals((Object)long3));
      assertFalse(long1.equals((Object)long2));
      assertTrue(long1.equals((Object)long0));
      assertFalse(long2 == long0);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNull(executionPlan5.getLanguage());
      assertNull(executionPlan5.getName());
      assertEquals("", executionPlan5.getFlowUuid());
      assertEquals(4147L, (long)executionPlan5.getBeginStep());
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(4147L, (long)executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(4147L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, linkedList0.size());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertEquals(4147L, (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan3.getLanguage());
      assertEquals(4147L, (long)executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertEquals("", executionPlan3.getFlowUuid());
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(executionStep1.isSplitStep());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertEquals("", executionPlan4.getFlowUuid());
      assertNull(executionPlan4.getName());
      assertEquals(4147L, (long)executionPlan4.getBeginStep());
      assertNull(executionPlan4.getLanguage());
      assertFalse(linkedList0.contains(executionStep1));
      assertSame(executionPlan0, executionPlan4);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan5);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan5);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan4);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan4);
      assertSame(executionPlan2, executionPlan5);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan3, executionPlan5);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan4);
      assertSame(executionPlan3, executionPlan1);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan4, executionPlan1);
      assertSame(executionPlan4, executionPlan5);
      assertSame(executionPlan4, executionPlan3);
      assertSame(executionPlan4, executionPlan0);
      assertSame(executionPlan4, executionPlan2);
      assertSame(executionPlan5, executionPlan0);
      assertSame(executionPlan5, executionPlan3);
      assertSame(executionPlan5, executionPlan2);
      assertSame(executionPlan5, executionPlan4);
      assertSame(executionPlan5, executionPlan1);
      
      String string1 = "Ovhn?6c\\gdYT";
      HashMap<String, ExecutionPlan> hashMap1 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap1).when(compilationArtifact0).getDependencies();
      doReturn(executionPlan5).when(compilationArtifact0).getExecutionPlan();
      doReturn(string1).when(compilationArtifact0).toString();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long2);
      assertFalse(long1.equals((Object)long3));
      assertFalse(long1.equals((Object)long2));
      assertTrue(long1.equals((Object)long0));
      assertFalse(long2 == long0);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(4147L, (long)executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(4147L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getName());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, linkedList0.size());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertEquals(4147L, (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan3.getLanguage());
      assertEquals(4147L, (long)executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertEquals("", executionPlan3.getFlowUuid());
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(executionStep1.isSplitStep());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertEquals("", executionPlan4.getFlowUuid());
      assertNull(executionPlan4.getName());
      assertEquals(4147L, (long)executionPlan4.getBeginStep());
      assertNull(executionPlan4.getLanguage());
      assertNull(executionPlan5.getLanguage());
      assertNull(executionPlan5.getName());
      assertEquals("", executionPlan5.getFlowUuid());
      assertEquals(4147L, (long)executionPlan5.getBeginStep());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(linkedList0.contains(executionStep1));
      assertSame(executionPlan0, executionPlan4);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan5);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan5);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan4);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan4);
      assertSame(executionPlan2, executionPlan5);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan3);
      assertNotSame(string0, string1);
      assertSame(executionPlan3, executionPlan5);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan4);
      assertSame(executionPlan3, executionPlan1);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan4, executionPlan1);
      assertSame(executionPlan4, executionPlan5);
      assertSame(executionPlan4, executionPlan3);
      assertSame(executionPlan4, executionPlan0);
      assertSame(executionPlan4, executionPlan2);
      assertSame(executionPlan5, executionPlan0);
      assertSame(executionPlan5, executionPlan3);
      assertSame(executionPlan5, executionPlan2);
      assertSame(executionPlan5, executionPlan4);
      assertSame(executionPlan5, executionPlan1);
      assertNotSame(string1, string0);
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long3).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertFalse(long2 == long0);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-20);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)80;
      String string2 = "";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string2);
      assertNotNull(slangSource0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", slangSource0.getName());
      assertEquals("\uFFFD\u0001\u0000", slangSource0.getSource());
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)1, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Long long4 = slangImpl0.compileAndRun(slangSource0, linkedHashSet0, map0, map0);
      assertNotNull(long4);
      assertFalse(string2.equals((Object)string1));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long2));
      assertEquals("", slangSource0.getName());
      assertEquals("\uFFFD\u0001\u0000", slangSource0.getSource());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)1, (byte)0}, byteArray0);
      assertEquals(4147L, (long)long4);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      
      ExecutionPlan executionPlan1 = triggeringProperties0.getExecutionPlan();
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ExecutionPlan executionPlan2 = executionPlan1.addSteps(linkedList0);
      assertNotNull(executionPlan2);
      assertNull(executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan2.getBeginStep());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      
      String string0 = "";
      ExecutionPlan executionPlan3 = executionPlan2.setFlowUuid(string0);
      assertNotNull(executionPlan3);
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan2.getName());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getLanguage());
      assertNull(executionPlan3.getName());
      assertEquals("", executionPlan3.getFlowUuid());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan1);
      assertSame(executionPlan3, executionPlan0);
      
      long long0 = 1L;
      Long long1 = new Long(long0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      
      ExecutionStep executionStep0 = new ExecutionStep(long1);
      assertNotNull(executionStep0);
      assertTrue(long1.equals((Object)long0));
      assertFalse(executionStep0.isSplitStep());
      assertEquals(1L, (long)executionStep0.getExecStepId());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExecutionStep executionStep1 = executionStep0.setNavigationData(hashMap0);
      assertNotNull(executionStep1);
      assertTrue(long1.equals((Object)long0));
      assertFalse(executionStep0.isSplitStep());
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertFalse(executionStep1.isSplitStep());
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      
      ExecutionPlan executionPlan4 = executionPlan3.addStep(executionStep1);
      assertNotNull(executionPlan4);
      assertTrue(long1.equals((Object)long0));
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getBeginStep());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan2.getName());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan3.getBeginStep());
      assertNull(executionPlan3.getLanguage());
      assertNull(executionPlan3.getName());
      assertEquals("", executionPlan3.getFlowUuid());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertFalse(executionStep1.isSplitStep());
      assertNull(executionPlan4.getLanguage());
      assertNull(executionPlan4.getName());
      assertNull(executionPlan4.getBeginStep());
      assertEquals("", executionPlan4.getFlowUuid());
      assertFalse(linkedList0.contains(executionStep0));
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan4);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan4);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan4);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan1);
      assertSame(executionPlan3, executionPlan4);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan4, executionPlan3);
      assertSame(executionPlan4, executionPlan1);
      assertSame(executionPlan4, executionPlan2);
      assertSame(executionPlan4, executionPlan0);
      
      long long2 = 4147L;
      Long long3 = new Long(long2);
      assertNotNull(long3);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals(4147L, (long)long3);
      
      ExecutionPlan executionPlan5 = executionPlan4.setBeginStep(long3);
      assertNotNull(executionPlan5);
      assertFalse(long0 == long2);
      assertFalse(long1.equals((Object)long2));
      assertTrue(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long3));
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNull(executionPlan5.getLanguage());
      assertNull(executionPlan5.getName());
      assertEquals(4147L, (long)executionPlan5.getBeginStep());
      assertEquals("", executionPlan5.getFlowUuid());
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(4147L, (long)executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(4147L, (long)executionPlan1.getBeginStep());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, linkedList0.size());
      assertEquals(4147L, (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getName());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan3.getLanguage());
      assertEquals(4147L, (long)executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertEquals("", executionPlan3.getFlowUuid());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertFalse(executionStep1.isSplitStep());
      assertNull(executionPlan4.getLanguage());
      assertNull(executionPlan4.getName());
      assertEquals(4147L, (long)executionPlan4.getBeginStep());
      assertEquals("", executionPlan4.getFlowUuid());
      assertFalse(linkedList0.contains(executionStep0));
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan4);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan5);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan4);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan1, executionPlan5);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan4);
      assertSame(executionPlan2, executionPlan5);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan3, executionPlan5);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan1);
      assertSame(executionPlan3, executionPlan4);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan4, executionPlan3);
      assertSame(executionPlan4, executionPlan5);
      assertSame(executionPlan4, executionPlan1);
      assertSame(executionPlan4, executionPlan2);
      assertSame(executionPlan4, executionPlan0);
      assertSame(executionPlan5, executionPlan2);
      assertSame(executionPlan5, executionPlan3);
      assertSame(executionPlan5, executionPlan0);
      assertSame(executionPlan5, executionPlan4);
      assertSame(executionPlan5, executionPlan1);
      
      String string1 = "Ovhn?6c\\gdYT";
      HashMap<String, ExecutionPlan> hashMap1 = new HashMap<String, ExecutionPlan>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap1).when(compilationArtifact0).getDependencies();
      doReturn(executionPlan5).when(compilationArtifact0).getExecutionPlan();
      doReturn(string1).when(compilationArtifact0).toString();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long2);
      assertFalse(long1.equals((Object)long2));
      assertTrue(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long3));
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getLanguage());
      assertEquals(4147L, (long)executionPlan0.getBeginStep());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(4147L, (long)executionPlan1.getBeginStep());
      assertEquals("", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getLanguage());
      assertEquals(0, linkedList0.size());
      assertEquals(4147L, (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getName());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan3.getLanguage());
      assertEquals(4147L, (long)executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertEquals("", executionPlan3.getFlowUuid());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertFalse(executionStep1.isSplitStep());
      assertNull(executionPlan4.getLanguage());
      assertNull(executionPlan4.getName());
      assertEquals(4147L, (long)executionPlan4.getBeginStep());
      assertEquals("", executionPlan4.getFlowUuid());
      assertNull(executionPlan5.getLanguage());
      assertNull(executionPlan5.getName());
      assertEquals(4147L, (long)executionPlan5.getBeginStep());
      assertEquals("", executionPlan5.getFlowUuid());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(linkedList0.contains(executionStep0));
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan4);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan5);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan1, executionPlan4);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan1, executionPlan5);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan4);
      assertSame(executionPlan2, executionPlan5);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan0);
      assertNotSame(string0, string1);
      assertSame(executionPlan3, executionPlan5);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan1);
      assertSame(executionPlan3, executionPlan4);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan4, executionPlan3);
      assertSame(executionPlan4, executionPlan5);
      assertSame(executionPlan4, executionPlan1);
      assertSame(executionPlan4, executionPlan2);
      assertSame(executionPlan4, executionPlan0);
      assertSame(executionPlan5, executionPlan2);
      assertSame(executionPlan5, executionPlan3);
      assertSame(executionPlan5, executionPlan0);
      assertSame(executionPlan5, executionPlan4);
      assertSame(executionPlan5, executionPlan1);
      assertNotSame(string1, string0);
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long4 = (-1871L);
      Long long5 = new Long(long4);
      assertNotNull(long5);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertEquals((-1871L), (long)long5);
      
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long5).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-20);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)80;
      byteArray0[2] = byte2;
      String string2 = "";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string2);
      assertNotNull(slangSource0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("\uFFFD\u0001P", slangSource0.getSource());
      assertEquals("", slangSource0.getName());
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)1, (byte)80}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Long long6 = slangImpl0.compileAndRun(slangSource0, linkedHashSet0, map0, map0);
      assertNotNull(long6);
      assertFalse(string2.equals((Object)string1));
      assertFalse(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertEquals("\uFFFD\u0001P", slangSource0.getSource());
      assertEquals("", slangSource0.getName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(linkedHashSet0.contains(slangSource0));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)1, (byte)80}, byteArray0);
      assertEquals((-1871L), (long)long6);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      assertNotNull(triggeringProperties0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      
      ExecutionPlan executionPlan1 = triggeringProperties0.getExecutionPlan();
      assertNotNull(executionPlan1);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ExecutionPlan executionPlan2 = executionPlan1.addSteps(linkedList0);
      assertNotNull(executionPlan2);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getName());
      assertNull(executionPlan1.getFlowUuid());
      assertEquals(0, linkedList0.size());
      assertNull(executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan1);
      
      String string0 = "";
      ExecutionPlan executionPlan3 = executionPlan2.setFlowUuid(string0);
      assertNotNull(executionPlan3);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getName());
      assertEquals("", executionPlan1.getFlowUuid());
      assertEquals(0, linkedList0.size());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getLanguage());
      assertNull(executionPlan3.getBeginStep());
      assertEquals("", executionPlan3.getFlowUuid());
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan1);
      
      long long0 = 1L;
      Long long1 = new Long(long0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      
      ExecutionStep executionStep0 = new ExecutionStep(long1);
      assertNotNull(executionStep0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExecutionStep executionStep1 = executionStep0.setNavigationData(hashMap0);
      assertNotNull(executionStep1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertFalse(executionStep1.isSplitStep());
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      
      ExecutionPlan executionPlan4 = executionPlan3.addStep(executionStep1);
      assertNotNull(executionPlan4);
      assertTrue(long1.equals((Object)long0));
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertNull(executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getName());
      assertEquals("", executionPlan1.getFlowUuid());
      assertEquals(0, linkedList0.size());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getLanguage());
      assertNull(executionPlan3.getBeginStep());
      assertEquals("", executionPlan3.getFlowUuid());
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertFalse(executionStep1.isSplitStep());
      assertNull(executionPlan4.getLanguage());
      assertNull(executionPlan4.getBeginStep());
      assertNull(executionPlan4.getName());
      assertEquals("", executionPlan4.getFlowUuid());
      assertFalse(linkedList0.contains(executionStep0));
      assertSame(executionPlan0, executionPlan4);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan1, executionPlan4);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan4);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan4);
      assertSame(executionPlan3, executionPlan1);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan4, executionPlan3);
      assertSame(executionPlan4, executionPlan0);
      assertSame(executionPlan4, executionPlan2);
      assertSame(executionPlan4, executionPlan1);
      
      long long2 = 4147L;
      Long long3 = new Long(long2);
      assertNotNull(long3);
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertEquals(4147L, (long)long3);
      
      ExecutionPlan executionPlan5 = executionPlan4.setBeginStep(long3);
      assertNotNull(executionPlan5);
      assertFalse(long0 == long2);
      assertTrue(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long3));
      assertFalse(long1.equals((Object)long2));
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertEquals(4147L, (long)executionPlan5.getBeginStep());
      assertNull(executionPlan5.getName());
      assertNull(executionPlan5.getLanguage());
      assertEquals("", executionPlan5.getFlowUuid());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertEquals(4147L, (long)executionPlan0.getBeginStep());
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(4147L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getName());
      assertEquals("", executionPlan1.getFlowUuid());
      assertEquals(0, linkedList0.size());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getLanguage());
      assertEquals(4147L, (long)executionPlan2.getBeginStep());
      assertEquals(4147L, (long)executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getLanguage());
      assertEquals("", executionPlan3.getFlowUuid());
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertFalse(executionStep1.isSplitStep());
      assertNull(executionPlan4.getLanguage());
      assertNull(executionPlan4.getName());
      assertEquals(4147L, (long)executionPlan4.getBeginStep());
      assertEquals("", executionPlan4.getFlowUuid());
      assertFalse(linkedList0.contains(executionStep0));
      assertSame(executionPlan0, executionPlan4);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan5);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan1, executionPlan4);
      assertSame(executionPlan1, executionPlan5);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan5);
      assertSame(executionPlan2, executionPlan4);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan4);
      assertSame(executionPlan3, executionPlan5);
      assertSame(executionPlan3, executionPlan1);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan4, executionPlan3);
      assertSame(executionPlan4, executionPlan0);
      assertSame(executionPlan4, executionPlan2);
      assertSame(executionPlan4, executionPlan1);
      assertSame(executionPlan4, executionPlan5);
      assertSame(executionPlan5, executionPlan0);
      assertSame(executionPlan5, executionPlan3);
      assertSame(executionPlan5, executionPlan4);
      assertSame(executionPlan5, executionPlan1);
      assertSame(executionPlan5, executionPlan2);
      
      String string1 = "Ovhn?6c\\gdYT";
      Map<String, ExecutionPlan> map0 = triggeringProperties0.getDependencies();
      assertNotNull(map0);
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertEquals(4147L, (long)executionPlan0.getBeginStep());
      assertEquals("", executionPlan0.getFlowUuid());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNull(triggeringProperties0.getStartStep());
      assertSame(executionPlan0, executionPlan4);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan5);
      assertSame(executionPlan0, executionPlan1);
      
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      doReturn(map0).when(compilationArtifact0).getDependencies();
      doReturn(executionPlan5).when(compilationArtifact0).getExecutionPlan();
      doReturn(string1).when(compilationArtifact0).toString();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long2);
      assertTrue(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long3));
      assertFalse(long1.equals((Object)long2));
      assertFalse(long2 == long0);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(string1.equals((Object)string0));
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getName());
      assertEquals(4147L, (long)executionPlan0.getBeginStep());
      assertEquals("", executionPlan0.getFlowUuid());
      assertNull(triggeringProperties0.getStartStep());
      assertEquals(4147L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getName());
      assertEquals("", executionPlan1.getFlowUuid());
      assertEquals(0, linkedList0.size());
      assertEquals("", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertNull(executionPlan2.getLanguage());
      assertEquals(4147L, (long)executionPlan2.getBeginStep());
      assertEquals(4147L, (long)executionPlan3.getBeginStep());
      assertNull(executionPlan3.getName());
      assertNull(executionPlan3.getLanguage());
      assertEquals("", executionPlan3.getFlowUuid());
      assertEquals(1L, (long)executionStep0.getExecStepId());
      assertFalse(executionStep0.isSplitStep());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1L, (long)executionStep1.getExecStepId());
      assertFalse(executionStep1.isSplitStep());
      assertNull(executionPlan4.getLanguage());
      assertNull(executionPlan4.getName());
      assertEquals(4147L, (long)executionPlan4.getBeginStep());
      assertEquals("", executionPlan4.getFlowUuid());
      assertEquals(4147L, (long)executionPlan5.getBeginStep());
      assertNull(executionPlan5.getName());
      assertNull(executionPlan5.getLanguage());
      assertEquals("", executionPlan5.getFlowUuid());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(linkedList0.contains(executionStep0));
      assertSame(executionPlan0, executionPlan4);
      assertSame(executionPlan0, executionPlan3);
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan5);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan3);
      assertSame(executionPlan1, executionPlan4);
      assertSame(executionPlan1, executionPlan5);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan2, executionPlan0);
      assertSame(executionPlan2, executionPlan3);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan5);
      assertSame(executionPlan2, executionPlan4);
      assertNotSame(string0, string1);
      assertSame(executionPlan3, executionPlan0);
      assertSame(executionPlan3, executionPlan2);
      assertSame(executionPlan3, executionPlan4);
      assertSame(executionPlan3, executionPlan5);
      assertSame(executionPlan3, executionPlan1);
      assertSame(executionStep0, executionStep1);
      assertSame(executionStep1, executionStep0);
      assertSame(executionPlan4, executionPlan3);
      assertSame(executionPlan4, executionPlan0);
      assertSame(executionPlan4, executionPlan2);
      assertSame(executionPlan4, executionPlan1);
      assertSame(executionPlan4, executionPlan5);
      assertSame(executionPlan5, executionPlan0);
      assertSame(executionPlan5, executionPlan3);
      assertSame(executionPlan5, executionPlan4);
      assertSame(executionPlan5, executionPlan1);
      assertSame(executionPlan5, executionPlan2);
      assertNotSame(string1, string0);
      
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-20);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)80;
      byteArray0[2] = byte2;
      String string2 = "";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string2);
      assertNotNull(slangSource0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("\uFFFD\u0001P", slangSource0.getSource());
      assertEquals("", slangSource0.getName());
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)1, (byte)80}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      Long long4 = slangImpl0.compileAndRun(slangSource0, linkedHashSet0, map1, map1);
      assertNull(long4);
      assertFalse(string2.equals((Object)string1));
      assertEquals("\uFFFD\u0001P", slangSource0.getSource());
      assertEquals("", slangSource0.getName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertFalse(linkedHashSet0.contains(slangSource0));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)1, (byte)80}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      assertNotNull(slangImpl0);
      
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      assertNotNull(executionPlan0);
      assertNull(executionPlan0.getName());
      assertNull(executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getFlowUuid());
      
      long long0 = 2085L;
      Long long1 = new Long(long0);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(2085L, (long)long1);
      
      ExecutionPlan executionPlan1 = executionPlan0.setBeginStep(long1);
      assertNotNull(executionPlan1);
      assertTrue(long1.equals((Object)long0));
      assertNull(executionPlan0.getName());
      assertEquals(2085L, (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertNull(executionPlan0.getFlowUuid());
      assertEquals(2085L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertNull(executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      
      String string0 = "org.apache.commons.io.filefilter.DelegateFileFilter";
      ExecutionPlan executionPlan2 = executionPlan1.setFlowUuid(string0);
      assertNotNull(executionPlan2);
      assertTrue(long1.equals((Object)long0));
      assertNull(executionPlan0.getName());
      assertEquals(2085L, (long)executionPlan0.getBeginStep());
      assertNull(executionPlan0.getLanguage());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", executionPlan0.getFlowUuid());
      assertEquals(2085L, (long)executionPlan1.getBeginStep());
      assertNull(executionPlan1.getLanguage());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", executionPlan1.getFlowUuid());
      assertNull(executionPlan1.getName());
      assertEquals(2085L, (long)executionPlan2.getBeginStep());
      assertNull(executionPlan2.getLanguage());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", executionPlan2.getFlowUuid());
      assertNull(executionPlan2.getName());
      assertSame(executionPlan0, executionPlan2);
      assertSame(executionPlan0, executionPlan1);
      assertSame(executionPlan1, executionPlan0);
      assertSame(executionPlan1, executionPlan2);
      assertSame(executionPlan2, executionPlan1);
      assertSame(executionPlan2, executionPlan0);
      
      ExecutionStep executionStep0 = null;
      // Undeclared exception!
      try { 
        executionPlan2.addStep(executionStep0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.ExecutionPlan", e);
      }
  }
}
