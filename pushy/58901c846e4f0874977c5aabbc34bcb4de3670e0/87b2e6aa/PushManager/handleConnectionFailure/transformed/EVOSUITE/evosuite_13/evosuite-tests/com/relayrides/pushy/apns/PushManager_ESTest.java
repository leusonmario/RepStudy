/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 07:19:12 GMT 2021
 */

package com.relayrides.pushy.apns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.relayrides.pushy.apns.ApnsConnection;
import com.relayrides.pushy.apns.ApnsConnectionPool;
import com.relayrides.pushy.apns.ApnsEnvironment;
import com.relayrides.pushy.apns.ExpiredToken;
import com.relayrides.pushy.apns.FailedConnectionListener;
import com.relayrides.pushy.apns.FeedbackServiceClient;
import com.relayrides.pushy.apns.KnownBadPushNotification;
import com.relayrides.pushy.apns.PushManager;
import com.relayrides.pushy.apns.RejectedNotificationListener;
import com.relayrides.pushy.apns.RejectedNotificationReason;
import io.netty.channel.Channel;
import io.netty.channel.ChannelDuplexHandler;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.ChannelOutboundHandlerAdapter;
import io.netty.channel.DefaultChannelProgressivePromise;
import io.netty.channel.EventLoop;
import io.netty.channel.embedded.EmbeddedChannel;
import io.netty.channel.local.LocalChannel;
import io.netty.channel.local.LocalServerChannel;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.util.concurrent.DefaultThreadFactory;
import io.netty.util.concurrent.EventExecutor;
import io.netty.util.concurrent.GlobalEventExecutor;
import io.netty.util.concurrent.ImmediateEventExecutor;
import io.netty.util.concurrent.ScheduledFuture;
import java.io.PrintWriter;
import java.time.Instant;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Spliterator;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;
import java.util.stream.Stream;
import javax.net.ssl.SSLContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PushManager_ESTest extends PushManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "Interrupted while waiting for closed connection's pending operations to finish.";
      int int0 = 17;
      int int1 = 0;
      ApnsEnvironment apnsEnvironment0 = new ApnsEnvironment(string0, int0, string0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("Interrupted while waiting for closed connection's pending operations to finish.", apnsEnvironment0.getFeedbackHost());
      assertEquals(0, apnsEnvironment0.getFeedbackPort());
      assertEquals("Interrupted while waiting for closed connection's pending operations to finish.", apnsEnvironment0.getApnsGatewayHost());
      assertEquals(17, apnsEnvironment0.getApnsGatewayPort());
      assertNotNull(apnsEnvironment0);
      
      SSLContext sSLContext0 = SSLContext.getDefault();
      assertNotNull(sSLContext0);
      
      int int2 = (-384);
      int int3 = 806;
      DefaultThreadFactory defaultThreadFactory0 = null;
      try {
        defaultThreadFactory0 = new DefaultThreadFactory(string0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // priority: -384 (expected: Thread.MIN_PRIORITY <= priority <= Thread.MAX_PRIORITY)
         //
         verifyException("io.netty.util.concurrent.DefaultThreadFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      String string0 = "";
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(string0, mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      Throwable[] throwableArray0 = mockThrowable1.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable1.toString());
      assertEquals("", mockThrowable1.getMessage());
      assertNotNull(throwableArray0);
      
      MockThrowable mockThrowable2 = new MockThrowable(mockThrowable1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(mockThrowable2.equals((Object)mockThrowable1));
      assertFalse(mockThrowable2.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable2);
      
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager0.dispatchThread, mockThrowable2);
      assertNotSame(mockThrowable0, mockThrowable2);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(mockThrowable1, mockThrowable2);
      assertNotSame(mockThrowable2, mockThrowable1);
      assertNotSame(mockThrowable2, mockThrowable0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable2));
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(mockThrowable1.equals((Object)mockThrowable2));
      assertFalse(mockThrowable2.equals((Object)mockThrowable1));
      assertFalse(mockThrowable2.equals((Object)mockThrowable0));
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable1.toString());
      assertEquals("", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable2.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable2.toString());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(apnsConnection0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionClosure(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      int int0 = 2775;
      pushManager0.concurrentConnectionCount = int0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertNotNull(pushManager1);
      
      boolean boolean0 = true;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      pushManager1.retryQueue = pushManager0.retryQueue;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      
      MockDate mockDate0 = new MockDate(pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(mockDate0);
      
      pushManager1.waitForAllOperationsToFinish(mockDate0);
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertSame(pushManager0, pushManager1);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(thread0);
      
      boolean boolean1 = pushManager1.isStarted();
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(boolean1 == boolean0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(boolean1);
      
      pushManager1.createAndStartDispatchThread();
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager1.getQueue();
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertNull(blockingQueue0);
      
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        pushManager1.shutdown(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertNotNull(pushManager0);
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      boolean boolean0 = true;
      pushManager0.shutDown = boolean0;
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.isShutDown());
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertTrue(pushManager0.shutDown);
      assertNotNull(apnsConnection0);
      
      apnsConnection0.shutdownImmediately();
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertTrue(pushManager0.shutDown);
      
      pushManager0.handleConnectionSuccess(apnsConnection0);
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals((-1), pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertTrue(pushManager0.shutDown);
      
      // Undeclared exception!
      try { 
        pushManager0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has already been shut down and may not be restarted.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertNotNull(thread0);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        pushManager_DispatchThreadExceptionHandler0.uncaughtException(thread0, throwable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager$DispatchThreadExceptionHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager0);
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerFailedConnectionListener(failedConnectionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      String string0 = "";
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(string0, mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      Throwable[] throwableArray0 = mockThrowable1.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable1.toString());
      assertNotNull(throwableArray0);
      
      MockThrowable mockThrowable2 = new MockThrowable(mockThrowable1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(mockThrowable2.equals((Object)mockThrowable1));
      assertFalse(mockThrowable2.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable2);
      
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager0.dispatchThread, mockThrowable2);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable0, mockThrowable2);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(mockThrowable1, mockThrowable2);
      assertNotSame(mockThrowable2, mockThrowable1);
      assertNotSame(mockThrowable2, mockThrowable0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable0.equals((Object)mockThrowable2));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(mockThrowable1.equals((Object)mockThrowable2));
      assertFalse(mockThrowable2.equals((Object)mockThrowable1));
      assertFalse(mockThrowable2.equals((Object)mockThrowable0));
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable1.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable2.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable2.toString());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(apnsConnection0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionClosure(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      boolean boolean0 = true;
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertNotNull(apnsConnection0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionClosure(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      boolean boolean0 = pushManager0.isShutDown();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(apnsConnection0);
      
      apnsConnection0.shutdownGracefully();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      apnsConnection0.shutdownGracefully();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertNotNull(pushManager0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertNotNull(apnsConnection0);
      
      apnsConnection0.shutdownImmediately();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      apnsConnection0.shutdownGracefully();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      MockDate mockDate0 = new MockDate(pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(mockDate0);
      
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      assertEquals("feedback.sandbox.push.apple.com", apnsEnvironment0.getFeedbackHost());
      assertEquals(2195, apnsEnvironment0.getApnsGatewayPort());
      assertEquals(2196, apnsEnvironment0.getFeedbackPort());
      assertEquals("gateway.sandbox.push.apple.com", apnsEnvironment0.getApnsGatewayHost());
      assertNotNull(apnsEnvironment0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      SSLContext sSLContext0 = pushManager0.sslContext;
      assertNull(sSLContext0);
      
      long long0 = 1L;
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      assertNull(apnsEnvironment0);
      
      int int0 = 0;
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, int0, pushManager0.eventLoopGroup, pushManager0.listenerExecutorService, pushManager0.retryQueue);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertNotNull(pushManager0);
      
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      assertNull(apnsEnvironment0);
      
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager0.unfinishedConnectionCount, pushManager0.eventLoopGroup, pushManager0.listenerExecutorService, pushManager0.queue);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager0);
      
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      assertNull(apnsEnvironment0);
      
      int int0 = 145;
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, int0, pushManager0.eventLoopGroup, pushManager0.eventLoopGroup, pushManager0.queue);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      boolean boolean0 = pushManager0.isStarted();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(boolean0);
      
      long long0 = 1460L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens(long0, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isShutDown());
      assertTrue(pushManager1.isStarted());
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertTrue(pushManager1.started);
      assertNotNull(pushManager1);
      
      // Undeclared exception!
      try { 
        pushManager1.createAndStartDispatchThread();
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = null;
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      PushManager<KnownBadPushNotification> pushManager1 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager1.equals((Object)pushManager0));
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertNotNull(pushManager1);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager1);
      assertFalse(pushManager0.equals((Object)pushManager1));
      assertFalse(pushManager1.equals((Object)pushManager0));
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertNotNull(apnsConnection0);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertEquals("", knownBadPushNotification0.getPayload());
      assertNotNull(knownBadPushNotification0);
      
      String string0 = "";
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleWriteFailure(apnsConnection0, knownBadPushNotification0, mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertNotNull(apnsConnection0);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertEquals("", knownBadPushNotification0.getPayload());
      assertNotNull(knownBadPushNotification0);
      
      String string0 = "U/";
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<Object> forkJoinTask0 = ForkJoinTask.adapt((Callable<?>) callable0);
      assertNotNull(forkJoinTask0);
      
      ForkJoinTask<Object> forkJoinTask1 = forkJoinPool0.submit(forkJoinTask0);
      assertSame(forkJoinTask0, forkJoinTask1);
      assertSame(forkJoinTask1, forkJoinTask0);
      assertNotNull(forkJoinTask1);
      
      Throwable throwable0 = forkJoinTask1.getException();
      assertSame(forkJoinTask0, forkJoinTask1);
      assertSame(forkJoinTask1, forkJoinTask0);
      assertNull(throwable0);
      
      MockThrowable mockThrowable0 = new MockThrowable(string0, throwable0);
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleWriteFailure(apnsConnection0, knownBadPushNotification0, mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      assertEquals(2196, apnsEnvironment0.getFeedbackPort());
      assertEquals("feedback.sandbox.push.apple.com", apnsEnvironment0.getFeedbackHost());
      assertEquals(2195, apnsEnvironment0.getApnsGatewayPort());
      assertEquals("gateway.sandbox.push.apple.com", apnsEnvironment0.getApnsGatewayHost());
      assertNotNull(apnsEnvironment0);
      
      SynchronousQueue<KnownBadPushNotification> synchronousQueue0 = new SynchronousQueue<KnownBadPushNotification>();
      assertNotNull(synchronousQueue0);
      
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager0.concurrentConnectionCount, pushManager0.eventLoopGroup, pushManager0.eventLoopGroup, synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      
      long long0 = 3992L;
      // Undeclared exception!
      try { 
        pushManager0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has already been started.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      boolean boolean0 = true;
      pushManager0.shouldShutDownEventLoopGroup = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      boolean boolean1 = pushManager0.isStarted();
      assertFalse(boolean1 == boolean0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertTrue(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(boolean1);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(pushManager0.concurrentConnectionCount);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertNull(blockingQueue0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertNotNull(pushManager0);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertEquals(0, thread0.countStackFrames());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertNotNull(thread0);
      
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      assertNull(apnsEnvironment0);
      
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager0.unfinishedConnectionCount, pushManager0.eventLoopGroup, pushManager0.eventLoopGroup, pushManager0.retryQueue);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager0);
      
      Vector<RejectedNotificationListener<KnownBadPushNotification>> vector0 = new Vector<RejectedNotificationListener<KnownBadPushNotification>>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      int int0 = 0;
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = vector0.add(rejectedNotificationListener0);
      assertTrue(vector0.contains(rejectedNotificationListener0));
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener1 = vector0.remove(int0);
      assertSame(rejectedNotificationListener1, rejectedNotificationListener0);
      assertFalse(vector0.contains(rejectedNotificationListener1));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(rejectedNotificationListener1);
      
      pushManager0.rejectedNotificationListeners = vector0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(pushManager0.rejectedNotificationListeners.isEmpty());
      assertEquals("[]", pushManager0.rejectedNotificationListeners.toString());
      assertEquals(0, pushManager0.rejectedNotificationListeners.size());
      assertEquals(10, pushManager0.rejectedNotificationListeners.capacity());
      
      int int1 = 0;
      int int2 = 2022;
      int int3 = 0;
      int int4 = 734;
      MockDate mockDate0 = new MockDate(int1, int2, int3, int0, pushManager0.concurrentConnectionCount, int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(mockDate0);
      
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("Sat Jun 30 00:12:14 GMT 2068", mockDate0.toString());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      Stream<RejectedNotificationListener<KnownBadPushNotification>> stream0 = vector0.stream();
      assertFalse(vector0.contains(rejectedNotificationListener1));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(stream0);
      
      Iterator<RejectedNotificationListener<KnownBadPushNotification>> iterator0 = vector0.iterator();
      assertFalse(vector0.contains(rejectedNotificationListener1));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(iterator0);
      
      Spliterator<RejectedNotificationListener<KnownBadPushNotification>> spliterator0 = vector0.spliterator();
      assertFalse(vector0.contains(rejectedNotificationListener1));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(spliterator0);
      
      pushManager0.registerRejectedNotificationListener(rejectedNotificationListener1);
      assertSame(rejectedNotificationListener1, rejectedNotificationListener0);
      assertTrue(vector0.contains(rejectedNotificationListener1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      boolean boolean1 = pushManager0.isStarted();
      assertTrue(boolean1 == boolean0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(apnsConnection0);
      
      PriorityBlockingQueue<KnownBadPushNotification> priorityBlockingQueue0 = new PriorityBlockingQueue<KnownBadPushNotification>();
      assertNotNull(priorityBlockingQueue0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleUnprocessedNotifications(apnsConnection0, priorityBlockingQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.unregisterRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      String string0 = "";
      boolean boolean0 = true;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      String string1 = null;
      MockThrowable mockThrowable1 = new MockThrowable(string1, mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      Throwable[] throwableArray0 = mockThrowable1.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
      assertNull(mockThrowable1.getMessage());
      assertNotNull(throwableArray0);
      
      MockThrowable mockThrowable2 = new MockThrowable(mockThrowable1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(mockThrowable2.equals((Object)mockThrowable0));
      assertFalse(mockThrowable2.equals((Object)mockThrowable1));
      assertNotNull(mockThrowable2);
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte)93;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-120);
      byteArray0[2] = byte2;
      byte byte3 = (byte)83;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)93, (byte) (-120), (byte)83, (byte)1, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        pushManager0.unregisterFailedConnectionListener(failedConnectionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      boolean boolean0 = false;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      boolean boolean1 = pushManager0.isStarted();
      assertTrue(boolean1 == boolean0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(boolean1);
      
      boolean boolean2 = pushManager0.isShutDown();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(boolean2);
  }
}
