/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 06:33:12 GMT 2021
 */

package com.relayrides.pushy.apns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.relayrides.pushy.apns.ApnsConnection;
import com.relayrides.pushy.apns.ApnsConnectionPool;
import com.relayrides.pushy.apns.ApnsEnvironment;
import com.relayrides.pushy.apns.FailedConnectionListener;
import com.relayrides.pushy.apns.FeedbackServiceClient;
import com.relayrides.pushy.apns.KnownBadPushNotification;
import com.relayrides.pushy.apns.PushManager;
import com.relayrides.pushy.apns.RejectedNotificationListener;
import com.relayrides.pushy.apns.RejectedNotificationReason;
import io.netty.channel.Channel;
import io.netty.channel.ChannelHandler;
import io.netty.channel.DefaultChannelProgressivePromise;
import io.netty.channel.EventLoop;
import io.netty.channel.embedded.EmbeddedChannel;
import io.netty.channel.local.LocalChannel;
import io.netty.channel.local.LocalServerChannel;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.util.concurrent.DefaultThreadFactory;
import io.netty.util.concurrent.GlobalEventExecutor;
import java.io.File;
import java.io.PrintWriter;
import java.nio.channels.spi.SelectorProvider;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.Condition;
import java.util.stream.Stream;
import javax.net.ssl.SSLContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PushManager_ESTest extends PushManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(apnsConnection0);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertEquals("", knownBadPushNotification0.getPayload());
      assertNotNull(knownBadPushNotification0);
      
      String string0 = "";
      String string1 = "";
      MockThrowable mockThrowable0 = new MockThrowable(string1);
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(string0, mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      // Undeclared exception!
      try { 
        pushManager0.handleWriteFailure(apnsConnection0, knownBadPushNotification0, mockThrowable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      assertEquals(2196, apnsEnvironment0.getFeedbackPort());
      assertEquals("feedback.sandbox.push.apple.com", apnsEnvironment0.getFeedbackHost());
      assertEquals(2195, apnsEnvironment0.getApnsGatewayPort());
      assertEquals("gateway.sandbox.push.apple.com", apnsEnvironment0.getApnsGatewayHost());
      assertNotNull(apnsEnvironment0);
      
      SSLContext sSLContext0 = SSLContext.getDefault();
      assertNotNull(sSLContext0);
      
      int int0 = 0;
      NioEventLoopGroup nioEventLoopGroup0 = null;
      LinkedBlockingQueue<KnownBadPushNotification> linkedBlockingQueue0 = new LinkedBlockingQueue<KnownBadPushNotification>();
      assertNotNull(linkedBlockingQueue0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      Date date0 = null;
      pushManager0.waitForAllOperationsToFinish(date0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      boolean boolean0 = pushManager0.isStarted();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(boolean0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      String string0 = "y9/";
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager0.dispatchThread, mockThrowable0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: y9/", mockThrowable0.toString());
      assertEquals("y9/", mockThrowable0.getMessage());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens((long) int0, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(thread0);
      
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isStarted());
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertSame(pushManager1, pushManager0);
      assertNotNull(pushManager1);
      
      // Undeclared exception!
      try { 
        pushManager1.getExpiredTokens();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "S2?'(2!9N$*#u4]J.R";
      int int0 = 0;
      String string1 = "";
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      assertEquals(2195, apnsEnvironment0.getApnsGatewayPort());
      assertEquals(2196, apnsEnvironment0.getFeedbackPort());
      assertEquals("gateway.sandbox.push.apple.com", apnsEnvironment0.getApnsGatewayHost());
      assertEquals("feedback.sandbox.push.apple.com", apnsEnvironment0.getFeedbackHost());
      assertNotNull(apnsEnvironment0);
      
      SSLContext sSLContext0 = SSLContext.getDefault();
      assertNotNull(sSLContext0);
      
      int int1 = 0;
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertSame(pushManager1, pushManager0);
      assertNotNull(pushManager1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertEquals("", knownBadPushNotification0.getPayload());
      assertNotNull(knownBadPushNotification0);
      
      Date date0 = knownBadPushNotification0.getDeliveryInvalidationTime();
      assertEquals("", knownBadPushNotification0.getPayload());
      assertNull(date0);
      
      pushManager0.waitForAllOperationsToFinish(date0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("", knownBadPushNotification0.getPayload());
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertSame(pushManager0, pushManager1);
      
      NioEventLoopGroup nioEventLoopGroup0 = pushManager1.eventLoopGroup;
      assertNull(nioEventLoopGroup0);
      
      PushManager<KnownBadPushNotification> pushManager2 = null;
      try {
        pushManager2 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, int1, nioEventLoopGroup0, pushManager1.eventLoopGroup, pushManager0.retryQueue);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      boolean boolean1 = true;
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      assertEquals("gateway.sandbox.push.apple.com", apnsEnvironment0.getApnsGatewayHost());
      assertEquals(2196, apnsEnvironment0.getFeedbackPort());
      assertEquals("feedback.sandbox.push.apple.com", apnsEnvironment0.getFeedbackHost());
      assertEquals(2195, apnsEnvironment0.getApnsGatewayPort());
      assertNotNull(apnsEnvironment0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertSame(pushManager1, pushManager0);
      assertNotNull(pushManager1);
      
      SSLContext sSLContext0 = pushManager1.sslContext;
      assertNull(sSLContext0);
      
      PushManager<KnownBadPushNotification> pushManager2 = null;
      try {
        pushManager2 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, pushManager1.unfinishedConnectionCount, pushManager0.eventLoopGroup, pushManager1.eventLoopGroup, pushManager1.retryQueue);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      AbstractQueuedSynchronizer.ConditionObject abstractQueuedSynchronizer_ConditionObject0 = (AbstractQueuedSynchronizer.ConditionObject)pushManager0.connectionsFinished;
      assertNotNull(abstractQueuedSynchronizer_ConditionObject0);
      
      pushManager0.connectionsFinished = (Condition) abstractQueuedSynchronizer_ConditionObject0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      boolean boolean0 = true;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      
      boolean boolean1 = false;
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertTrue(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertTrue(pushManager0.shouldShutDownEventLoopGroup);
      
      pushManager0.shutDown = boolean1;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager0);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      FeedbackServiceClient feedbackServiceClient0 = null;
      boolean boolean0 = true;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.isShutDown());
      
      pushManager0.feedbackServiceClient = feedbackServiceClient0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.isShutDown());
      
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerFailedConnectionListener(failedConnectionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(apnsConnection0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      boolean boolean0 = true;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertTrue(pushManager0.shouldShutDownListenerExecutorService);
      
      pushManager0.shutDown = boolean0;
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.isShutDown());
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      assertEquals(2196, apnsEnvironment0.getFeedbackPort());
      assertEquals("gateway.sandbox.push.apple.com", apnsEnvironment0.getApnsGatewayHost());
      assertEquals("feedback.sandbox.push.apple.com", apnsEnvironment0.getFeedbackHost());
      assertEquals(2195, apnsEnvironment0.getApnsGatewayPort());
      assertNotNull(apnsEnvironment0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      SSLContext sSLContext0 = pushManager0.sslContext;
      assertNull(sSLContext0);
      
      int int0 = 102;
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, int0, pushManager0.eventLoopGroup, pushManager0.listenerExecutorService, pushManager0.queue);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      assertNull(apnsEnvironment0);
      
      LinkedTransferQueue<KnownBadPushNotification> linkedTransferQueue0 = new LinkedTransferQueue<KnownBadPushNotification>();
      assertNotNull(linkedTransferQueue0);
      
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager0.concurrentConnectionCount, pushManager0.eventLoopGroup, pushManager0.listenerExecutorService, linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler1 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager_DispatchThreadExceptionHandler1.equals((Object)pushManager_DispatchThreadExceptionHandler0));
      assertNotNull(pushManager_DispatchThreadExceptionHandler1);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      int int0 = 4009;
      String string1 = "GUGfRk=]kv";
      ApnsEnvironment apnsEnvironment0 = new ApnsEnvironment(string0, int0, string1, int0);
      assertEquals(4009, apnsEnvironment0.getApnsGatewayPort());
      assertEquals("GUGfRk=]kv", apnsEnvironment0.getFeedbackHost());
      assertEquals(4009, apnsEnvironment0.getFeedbackPort());
      assertEquals("", apnsEnvironment0.getApnsGatewayHost());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(apnsEnvironment0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertSame(pushManager1, pushManager0);
      assertNotNull(pushManager1);
      
      SSLContext sSLContext0 = pushManager1.sslContext;
      assertNull(sSLContext0);
      
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager1;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isStarted());
      
      PushManager<KnownBadPushNotification> pushManager2 = null;
      try {
        pushManager2 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, int0, pushManager1.eventLoopGroup, pushManager0.eventLoopGroup, pushManager1.retryQueue);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertSame(pushManager1, pushManager0);
      assertNotNull(pushManager1);
      
      // Undeclared exception!
      try { 
        pushManager1.getExpiredTokens();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertNotNull(pushManager0);
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertNotNull(apnsConnection0);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertEquals("", knownBadPushNotification0.getPayload());
      assertNotNull(knownBadPushNotification0);
      
      apnsConnection0.shutdownImmediately();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      long long0 = 1000000L;
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.unregisterFailedConnectionListener(failedConnectionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager0.dispatchThread, mockThrowable1);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      pushManager0.shutDown = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      // Undeclared exception!
      try { 
        pushManager0.unregisterFailedConnectionListener(failedConnectionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertSame(pushManager1, pushManager0);
      assertNotNull(pushManager1);
      
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager1;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isStarted());
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        pushManager1.getExpiredTokens((long) pushManager0.concurrentConnectionCount, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertNotNull(pushManager0);
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertNull(blockingQueue0);
      
      pushManager0.queue = blockingQueue0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      ApnsConnectionPool<KnownBadPushNotification> apnsConnectionPool0 = new ApnsConnectionPool<KnownBadPushNotification>();
      assertNotNull(apnsConnectionPool0);
      
      pushManager0.connectionPool = apnsConnectionPool0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      boolean boolean0 = pushManager0.isShutDown();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(boolean0);
      
      long long0 = (-472L);
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(apnsConnection0);
      
      long long0 = 226L;
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      String string0 = "";
      int int0 = 0;
      ApnsEnvironment apnsEnvironment0 = new ApnsEnvironment(string0, int0, string0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals("", apnsEnvironment0.getApnsGatewayHost());
      assertEquals("", apnsEnvironment0.getFeedbackHost());
      assertEquals(0, apnsEnvironment0.getFeedbackPort());
      assertEquals(0, apnsEnvironment0.getApnsGatewayPort());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(apnsEnvironment0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals("", apnsEnvironment0.getApnsGatewayHost());
      assertEquals("", apnsEnvironment0.getFeedbackHost());
      assertEquals(0, apnsEnvironment0.getFeedbackPort());
      assertEquals(0, apnsEnvironment0.getApnsGatewayPort());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(apnsConnection0);
      
      int int1 = 0;
      float float0 = 1.0F;
      LinkedHashSet<KnownBadPushNotification> linkedHashSet0 = new LinkedHashSet<KnownBadPushNotification>(int1, float0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleUnprocessedNotifications(apnsConnection0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(apnsConnection0);
      
      LinkedTransferQueue<KnownBadPushNotification> linkedTransferQueue0 = new LinkedTransferQueue<KnownBadPushNotification>();
      assertNotNull(linkedTransferQueue0);
      
      Stream<KnownBadPushNotification> stream0 = linkedTransferQueue0.parallelStream();
      assertNotNull(stream0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleUnprocessedNotifications(apnsConnection0, linkedTransferQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertNotNull(thread0);
      
      boolean boolean0 = true;
      pushManager0.started = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(apnsConnection0);
      
      apnsConnection0.shutdownGracefully();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      
      // Undeclared exception!
      try { 
        apnsConnection0.connect();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(apnsConnection0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertNotNull(apnsConnection0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionClosure(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertNotNull(apnsConnection0);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertEquals("", knownBadPushNotification0.getPayload());
      assertNotNull(knownBadPushNotification0);
      
      String string0 = "h_^8*s6vO^<s=P9*SK";
      apnsConnection0.shutdownGracefully();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleWriteFailure(apnsConnection0, knownBadPushNotification0, mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      boolean boolean0 = pushManager0.isStarted();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(boolean0);
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNull(blockingQueue0);
      
      SSLContext sSLContext0 = null;
      Class<Object> class0 = Object.class;
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory(class0, pushManager0.shutDownFinished);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(defaultThreadFactory0);
      
      SelectorProvider selectorProvider0 = null;
      NioEventLoopGroup nioEventLoopGroup0 = null;
      try {
        nioEventLoopGroup0 = new NioEventLoopGroup(pushManager0.unfinishedConnectionCount, defaultThreadFactory0, selectorProvider0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      boolean boolean0 = true;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      boolean boolean1 = false;
      pushManager0.shutDown = boolean1;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isStarted());
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertSame(pushManager1, pushManager0);
      assertNotNull(pushManager1);
      
      boolean boolean0 = true;
      pushManager1.shutDownFinished = boolean0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager1.registerFailedConnectionListener(failedConnectionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertSame(pushManager1, pushManager0);
      assertNotNull(pushManager1);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertEquals("", knownBadPushNotification0.getPayload());
      assertNotNull(knownBadPushNotification0);
      
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.NO_ERROR;
      // Undeclared exception!
      try { 
        pushManager1.handleRejectedNotification(apnsConnection0, knownBadPushNotification0, rejectedNotificationReason0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertNotNull(thread0);
      
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isStarted());
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.started);
      assertSame(pushManager1, pushManager0);
      assertNotNull(pushManager1);
      
      // Undeclared exception!
      try { 
        pushManager1.getExpiredTokens();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertNotNull(pushManager0);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      
      Vector<FailedConnectionListener<KnownBadPushNotification>> vector0 = new Vector<FailedConnectionListener<KnownBadPushNotification>>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      pushManager0.failedConnectionListeners = vector0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", pushManager0.failedConnectionListeners.toString());
      assertEquals(10, pushManager0.failedConnectionListeners.capacity());
      assertEquals(0, pushManager0.failedConnectionListeners.size());
      assertTrue(pushManager0.failedConnectionListeners.isEmpty());
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      boolean boolean0 = true;
      pushManager0.started = boolean0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertEquals("", knownBadPushNotification0.getPayload());
      assertNotNull(knownBadPushNotification0);
      
      long long0 = 0L;
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = null;
      boolean boolean1 = vector0.add(failedConnectionListener0);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      boolean boolean0 = true;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      boolean boolean1 = true;
      pushManager0.shutDown = boolean1;
      assertTrue(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      List<KnownBadPushNotification> list0 = new Vector<KnownBadPushNotification>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertTrue(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertTrue(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      String string0 = "Failed connection listeners may not be registered after a push manager has been shut down.";
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager0.dispatchThread, mockThrowable0);
      assertTrue(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("Failed connection listeners may not be registered after a push manager has been shut down.", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Failed connection listeners may not be registered after a push manager has been shut down.", mockThrowable0.toString());
      assertTrue(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.started);
      assertTrue(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler1 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertFalse(pushManager_DispatchThreadExceptionHandler1.equals((Object)pushManager_DispatchThreadExceptionHandler0));
      assertNotNull(pushManager_DispatchThreadExceptionHandler1);
      
      String string1 = "Bs";
      Throwable throwable0 = null;
      MockThrowable mockThrowable1 = new MockThrowable(string1, throwable0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      // Undeclared exception!
      try { 
        pushManager_DispatchThreadExceptionHandler1.uncaughtException(pushManager0.dispatchThread, mockThrowable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager$DispatchThreadExceptionHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertNotNull(pushManager0);
      
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      assertEquals(2195, apnsEnvironment0.getApnsGatewayPort());
      assertEquals(2196, apnsEnvironment0.getFeedbackPort());
      assertEquals("gateway.sandbox.push.apple.com", apnsEnvironment0.getApnsGatewayHost());
      assertEquals("feedback.sandbox.push.apple.com", apnsEnvironment0.getFeedbackHost());
      assertNotNull(apnsEnvironment0);
      
      PushManager<KnownBadPushNotification> pushManager1 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.equals((Object)pushManager0));
      assertNotNull(pushManager1);
      
      boolean boolean0 = pushManager1.isShutDown();
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertNotSame(pushManager1, pushManager0);
      assertFalse(boolean0);
      assertFalse(pushManager1.equals((Object)pushManager0));
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      int int0 = (-2589);
      pushManager1.unfinishedConnectionCount = int0;
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      
      // Undeclared exception!
      try { 
        pushManager1.getExpiredTokens((long) pushManager0.unfinishedConnectionCount, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertNotNull(pushManager0);
      
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isStarted());
      
      int int0 = 1333;
      pushManager0.concurrentConnectionCount = int0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(1333, pushManager1.concurrentConnectionCount);
      assertSame(pushManager1, pushManager0);
      assertNotNull(pushManager1);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler1 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager1);
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(1333, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager_DispatchThreadExceptionHandler1.equals((Object)pushManager_DispatchThreadExceptionHandler0));
      assertNotNull(pushManager_DispatchThreadExceptionHandler1);
      
      // Undeclared exception!
      try { 
        pushManager0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager0);
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        pushManager0.unregisterRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertNotNull(pushManager0);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      boolean boolean0 = true;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      boolean boolean1 = false;
      boolean boolean2 = true;
      pushManager0.shutDownFinished = boolean2;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertTrue(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertTrue(pushManager0.shouldShutDownListenerExecutorService);
      assertNotNull(thread0);
      
      pushManager0.shutDown = boolean1;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertNotNull(pushManager0);
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      Vector<FailedConnectionListener<KnownBadPushNotification>> vector0 = new Vector<FailedConnectionListener<KnownBadPushNotification>>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      boolean boolean0 = true;
      pushManager0.started = boolean0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      long long0 = 0L;
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = null;
      boolean boolean1 = vector0.add(failedConnectionListener0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<KnownBadPushNotification> list0 = new Vector<KnownBadPushNotification>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener1 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener2 = vector0.set(pushManager0.unfinishedConnectionCount, failedConnectionListener1);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertTrue(vector0.contains(failedConnectionListener1));
      assertNull(failedConnectionListener2);
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      boolean boolean0 = true;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      boolean boolean1 = false;
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertTrue(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      pushManager0.shutDown = boolean1;
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "S2?'(2!9N$*#u4]J.R";
      int int0 = 0;
      String string1 = "B";
      int int1 = (-3904);
      ApnsEnvironment apnsEnvironment0 = new ApnsEnvironment(string0, int0, string1, int1);
      assertEquals(0, apnsEnvironment0.getApnsGatewayPort());
      assertEquals((-3904), apnsEnvironment0.getFeedbackPort());
      assertEquals("B", apnsEnvironment0.getFeedbackHost());
      assertEquals("S2?'(2!9N$*#u4]J.R", apnsEnvironment0.getApnsGatewayHost());
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotNull(apnsEnvironment0);
      
      SSLContext sSLContext0 = SSLContext.getDefault();
      assertNotNull(sSLContext0);
      
      int int2 = (-18);
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertSame(pushManager1, pushManager0);
      assertNotNull(pushManager1);
      
      NioEventLoopGroup nioEventLoopGroup0 = pushManager1.eventLoopGroup;
      assertNull(nioEventLoopGroup0);
      
      PushManager<KnownBadPushNotification> pushManager2 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertFalse(pushManager2.isShutDown());
      assertFalse(pushManager2.isStarted());
      assertFalse(pushManager2.shutDownFinished);
      assertEquals(0, pushManager2.unfinishedConnectionCount);
      assertEquals(0, pushManager2.concurrentConnectionCount);
      assertFalse(pushManager2.shouldShutDownListenerExecutorService);
      assertFalse(pushManager2.started);
      assertFalse(pushManager2.shouldShutDownEventLoopGroup);
      assertFalse(pushManager2.shutDown);
      assertSame(pushManager2, pushManager0);
      assertSame(pushManager2, pushManager1);
      assertNotNull(pushManager2);
      
      String string2 = null;
      String string3 = "";
      int int3 = 10;
      ApnsEnvironment apnsEnvironment1 = new ApnsEnvironment(string2, int0, string3, int3);
      assertEquals(0, apnsEnvironment1.getApnsGatewayPort());
      assertNull(apnsEnvironment1.getApnsGatewayHost());
      assertEquals(10, apnsEnvironment1.getFeedbackPort());
      assertEquals("", apnsEnvironment1.getFeedbackHost());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(apnsEnvironment1.equals((Object)apnsEnvironment0));
      assertNotNull(apnsEnvironment1);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(apnsEnvironment1, pushManager1.sslContext, nioEventLoopGroup0, pushManager2);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager2.isShutDown());
      assertFalse(pushManager2.isStarted());
      assertEquals(0, apnsEnvironment1.getApnsGatewayPort());
      assertNull(apnsEnvironment1.getApnsGatewayHost());
      assertEquals(10, apnsEnvironment1.getFeedbackPort());
      assertEquals("", apnsEnvironment1.getFeedbackHost());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownListenerExecutorService);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager2.shutDownFinished);
      assertEquals(0, pushManager2.unfinishedConnectionCount);
      assertEquals(0, pushManager2.concurrentConnectionCount);
      assertFalse(pushManager2.shouldShutDownListenerExecutorService);
      assertFalse(pushManager2.started);
      assertFalse(pushManager2.shouldShutDownEventLoopGroup);
      assertFalse(pushManager2.shutDown);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(apnsEnvironment1.equals((Object)apnsEnvironment0));
      assertNotNull(apnsConnection0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        pushManager2.handleConnectionFailure(apnsConnection0, mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      boolean boolean0 = true;
      pushManager0.shutDown = boolean0;
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.isShutDown());
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        pushManager0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has already been shut down and may not be restarted.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertNotNull(pushManager0);
      
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownListenerExecutorService);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      
      FeedbackServiceClient feedbackServiceClient0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        pushManager0.createAndStartDispatchThread();
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }
}
