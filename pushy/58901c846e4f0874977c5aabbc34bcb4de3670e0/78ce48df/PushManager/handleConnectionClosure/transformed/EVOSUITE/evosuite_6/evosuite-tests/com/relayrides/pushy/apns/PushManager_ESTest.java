/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 06:38:30 GMT 2021
 */

package com.relayrides.pushy.apns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.relayrides.pushy.apns.ApnsConnection;
import com.relayrides.pushy.apns.ApnsConnectionPool;
import com.relayrides.pushy.apns.ApnsEnvironment;
import com.relayrides.pushy.apns.FeedbackServiceClient;
import com.relayrides.pushy.apns.KnownBadPushNotification;
import com.relayrides.pushy.apns.PushManager;
import com.relayrides.pushy.apns.RejectedNotificationListener;
import com.relayrides.pushy.apns.RejectedNotificationReason;
import io.netty.channel.Channel;
import io.netty.channel.DefaultChannelProgressivePromise;
import io.netty.channel.local.LocalServerChannel;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.rxtx.RxtxChannel;
import io.netty.util.concurrent.DefaultThreadFactory;
import io.netty.util.concurrent.GlobalEventExecutor;
import io.netty.util.concurrent.ImmediateEventExecutor;
import java.nio.CharBuffer;
import java.nio.channels.spi.SelectorProvider;
import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.time.Clock;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.temporal.TemporalAmount;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import javax.net.ssl.SSLContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.security.MockSecureRandom;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PushManager_ESTest extends PushManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertNotNull(thread0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      
      int int0 = 3949;
      pushManager0.concurrentConnectionCount = int0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      long long0 = (-1864L);
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      Condition condition0 = pushManager0.connectionLock.newCondition();
      assertNotNull(condition0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      pushManager0.connectionsFinished = condition0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      boolean boolean0 = pushManager0.isShutDown();
      assertFalse(boolean0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      // Undeclared exception!
      try { 
        pushManager0.decrementConnectionCounter();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      assertNull(apnsEnvironment0);
      
      int int0 = 2577;
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, int0, pushManager0.eventLoopGroup, pushManager0.retryQueue);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      FeedbackServiceClient feedbackServiceClient0 = new FeedbackServiceClient(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup);
      assertNotNull(feedbackServiceClient0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      pushManager0.feedbackServiceClient = feedbackServiceClient0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens(long0, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      int int0 = 2869;
      boolean boolean0 = false;
      pushManager0.shutDown = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      int int1 = 1317;
      MockDate mockDate0 = new MockDate(pushManager0.unfinishedConnectionCount, pushManager0.unfinishedConnectionCount, pushManager0.concurrentConnectionCount, int0, int1);
      assertNotNull(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      MockDate mockDate1 = new MockDate(pushManager0.unfinishedConnectionCount, pushManager0.concurrentConnectionCount, int1);
      assertNotNull(mockDate1);
      assertFalse(int1 == int0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("Mon Apr 30 10:57:00 GMT 1900", mockDate0.toString());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("Mon Apr 30 10:57:00 GMT 1900", mockDate0.toString());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      long long0 = mockDate0.getTime();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals((-2198667780000L), long0);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("Mon Apr 30 10:57:00 GMT 1900", mockDate0.toString());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("Mon Apr 30 10:57:00 GMT 1900", mockDate0.toString());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("Mon Apr 30 10:57:00 GMT 1900", mockDate0.toString());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "?V!m4:!k";
      String string1 = "SO_SNDBUF";
      try { 
        SSLContext.getInstance(string1);
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      long long0 = (-1864L);
      Date date0 = null;
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      
      boolean boolean0 = pushManager1.isStarted();
      assertFalse(boolean0);
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      
      // Undeclared exception!
      try { 
        pushManager0.startNewConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      boolean boolean0 = false;
      pushManager0.shutDown = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertTrue(pushManager0.started);
      
      // Undeclared exception!
      try { 
        pushManager0.startNewConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      
      boolean boolean0 = pushManager1.isShutDown();
      assertFalse(boolean0);
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      // Undeclared exception!
      try { 
        pushManager0.decrementConnectionCounter();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.started);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager1.environment, pushManager1.sslContext, pushManager1.eventLoopGroup, pushManager1);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.started);
      
      // Undeclared exception!
      try { 
        pushManager1.handleConnectionClosure(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      
      ApnsEnvironment apnsEnvironment0 = pushManager1.environment;
      assertNull(apnsEnvironment0);
      
      PushManager<KnownBadPushNotification> pushManager2 = null;
      try {
        pushManager2 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager1.concurrentConnectionCount, pushManager0.eventLoopGroup, pushManager0.retryQueue);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      assertNotNull(mockThrowable1);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager0.dispatchThread, mockThrowable1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      
      ApnsEnvironment apnsEnvironment0 = pushManager1.environment;
      assertNull(apnsEnvironment0);
      
      LinkedBlockingDeque<KnownBadPushNotification> linkedBlockingDeque0 = new LinkedBlockingDeque<KnownBadPushNotification>();
      assertNotNull(linkedBlockingDeque0);
      
      PushManager<KnownBadPushNotification> pushManager2 = null;
      try {
        pushManager2 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager1.unfinishedConnectionCount, pushManager0.eventLoopGroup, linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      assertNull(blockingQueue0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      BlockingQueue<KnownBadPushNotification> blockingQueue1 = pushManager0.getQueue();
      assertNull(blockingQueue1);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertNotNull(thread0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      long long0 = (-803L);
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      boolean boolean0 = true;
      pushManager0.shutDownFinished = boolean0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      long long0 = 4L;
      System.setCurrentTimeMillis(long0);
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.started);
      assertTrue(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      boolean boolean1 = pushManager0.isStarted();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.started);
      assertTrue(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.started);
      assertTrue(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      long long0 = 1751L;
      boolean boolean0 = true;
      pushManager0.shutDownFinished = boolean0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean1 = true;
      pushManager0.shouldShutDownEventLoopGroup = boolean1;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens(long0, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      
      long long0 = 0L;
      boolean boolean0 = true;
      pushManager0.started = boolean0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens(long0, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      assertNull(blockingQueue0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      boolean boolean0 = pushManager0.isStarted();
      assertFalse(boolean0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      String string0 = null;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(string0, mockThrowable0);
      assertNotNull(mockThrowable1);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      mockThrowable1.printStackTrace();
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
      assertNull(mockThrowable1.getMessage());
      
      String string1 = mockThrowable1.getLocalizedMessage();
      assertNull(string1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
      assertNull(mockThrowable1.getMessage());
      
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager0.dispatchThread, mockThrowable1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
      assertNull(mockThrowable1.getMessage());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.started);
      
      pushManager1.start();
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertTrue(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertTrue(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      
      MockThrowable mockThrowable2 = new MockThrowable();
      assertNotNull(mockThrowable2);
      assertFalse(mockThrowable2.equals((Object)mockThrowable1));
      assertFalse(mockThrowable2.equals((Object)mockThrowable0));
      
      // Undeclared exception!
      try { 
        pushManager1.getExpiredTokens();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler1 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler1);
      assertFalse(pushManager_DispatchThreadExceptionHandler1.equals((Object)pushManager_DispatchThreadExceptionHandler0));
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      
      boolean boolean0 = pushManager0.isStarted();
      assertTrue(boolean0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      
      ReentrantLock reentrantLock0 = new ReentrantLock();
      assertNotNull(reentrantLock0);
      
      Condition condition0 = reentrantLock0.newCondition();
      assertNotNull(condition0);
      
      int int0 = 81;
      int int1 = 123;
      MockDate mockDate0 = new MockDate(pushManager0.unfinishedConnectionCount, int0, int1);
      assertNotNull(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("Thu Jan 31 00:00:00 GMT 1907", mockDate0.toString());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      
      pushManager0.connectionsFinished = condition0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      boolean boolean0 = pushManager0.isShutDown();
      assertFalse(boolean0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.queue;
      assertNull(blockingQueue0);
      
      pushManager0.queue = blockingQueue0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        pushManager0.handleWriteFailure(apnsConnection0, knownBadPushNotification0, throwable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      MockThread mockThread0 = new MockThread(pushManager0.dispatchThread);
      assertNotNull(mockThread0);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      pushManager0.dispatchThread = (Thread) mockThread0;
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, pushManager0.dispatchThread.countStackFrames());
      assertFalse(pushManager0.dispatchThread.isInterrupted());
      assertFalse(pushManager0.dispatchThread.isDaemon());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertEquals(20, map0.size());
      assertFalse(map0.isEmpty());
      
      String string0 = "";
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleWriteFailure(apnsConnection0, knownBadPushNotification0, mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      apnsConnection0.shutdownGracefully();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.INVALID_PAYLOAD_SIZE;
      // Undeclared exception!
      try { 
        pushManager0.handleRejectedNotification(apnsConnection0, knownBadPushNotification0, rejectedNotificationReason0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.PROCESSING_ERROR;
      // Undeclared exception!
      try { 
        pushManager0.handleRejectedNotification(apnsConnection0, knownBadPushNotification0, rejectedNotificationReason0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      boolean boolean0 = false;
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      Date date0 = knownBadPushNotification0.getDeliveryInvalidationTime();
      assertNull(date0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      pushManager0.waitForAllOperationsToFinish(date0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("", knownBadPushNotification0.getPayload());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      pushManager0.shouldShutDownEventLoopGroup = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      boolean boolean1 = pushManager0.isShutDown();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = null;
      // Undeclared exception!
      try { 
        pushManager0.unregisterRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      PriorityBlockingQueue<KnownBadPushNotification> priorityBlockingQueue0 = new PriorityBlockingQueue<KnownBadPushNotification>();
      assertNotNull(priorityBlockingQueue0);
      
      boolean boolean0 = false;
      pushManager0.shutDown = boolean0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      // Undeclared exception!
      try { 
        pushManager0.handleUnprocessedNotifications(apnsConnection0, priorityBlockingQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      assertNull(blockingQueue0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      // Undeclared exception!
      try { 
        pushManager0.handleUnprocessedNotifications(apnsConnection0, blockingQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      apnsConnection0.waitForPendingOperationsToFinish();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      Condition condition0 = pushManager0.connectionLock.newCondition();
      assertNotNull(condition0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      pushManager0.connectionsFinished = condition0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      boolean boolean0 = pushManager0.isShutDown();
      assertFalse(boolean0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      // Undeclared exception!
      try { 
        pushManager0.decrementConnectionCounter();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      
      boolean boolean0 = pushManager1.isStarted();
      assertFalse(boolean0);
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      
      String string0 = "2:n";
      long long0 = (-1746L);
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom(long0);
      assertNotNull(mockSecureRandom0);
      
      Provider provider0 = mockSecureRandom0.getProvider();
      assertNotNull(provider0);
      assertEquals("SUN version 1.8", provider0.toString());
      assertEquals(125, provider0.size());
      assertEquals(1.8, provider0.getVersion(), 0.01);
      assertEquals("SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; JKS & DKS keystores; PKIX CertPathValidator; PKIX CertPathBuilder; LDAP, Collection CertStores, JavaPolicy Policy; JavaLoginConfig Configuration)", provider0.getInfo());
      assertEquals("SUN", provider0.getName());
      assertFalse(provider0.isEmpty());
      
      try { 
        SSLContext.getInstance(string0, provider0);
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getProductionEnvironment();
      assertNotNull(apnsEnvironment0);
      assertEquals(2196, apnsEnvironment0.getFeedbackPort());
      assertEquals("gateway.push.apple.com", apnsEnvironment0.getApnsGatewayHost());
      assertEquals("feedback.push.apple.com", apnsEnvironment0.getFeedbackHost());
      assertEquals(2195, apnsEnvironment0.getApnsGatewayPort());
      
      String string0 = "";
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertEquals(2196, apnsEnvironment0.getFeedbackPort());
      assertEquals("gateway.push.apple.com", apnsEnvironment0.getApnsGatewayHost());
      assertEquals("feedback.push.apple.com", apnsEnvironment0.getFeedbackHost());
      assertEquals(2195, apnsEnvironment0.getApnsGatewayPort());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionFailure(apnsConnection0, mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertNotNull(thread0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      int int0 = 3949;
      pushManager0.concurrentConnectionCount = int0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      long long0 = (-1864L);
      // Undeclared exception!
      try { 
        pushManager0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has already been started.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      int int0 = 423;
      pushManager0.concurrentConnectionCount = int0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(423, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.started);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      pushManager1.waitForAllOperationsToFinish(mockDate0);
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(423, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shutDownFinished);
      assertEquals(423, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.started);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "com.relayrides.pushy.apns.PushManager";
      boolean boolean0 = true;
      pushManager0.shutDown = boolean0;
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.isShutDown());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = false;
      pushManager0.shutDownFinished = boolean3;
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.isShutDown());
      
      // Undeclared exception!
      try { 
        pushManager0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has already been shut down and may not be restarted.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      ReentrantLock reentrantLock0 = pushManager0.connectionLock;
      assertNotNull(reentrantLock0);
      
      pushManager0.connectionLock = reentrantLock0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      String string0 = "";
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertFalse(boolean0);
      
      boolean boolean1 = pushManager0.isStarted();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      PriorityBlockingQueue<KnownBadPushNotification> priorityBlockingQueue0 = new PriorityBlockingQueue<KnownBadPushNotification>();
      assertNotNull(priorityBlockingQueue0);
      
      KnownBadPushNotification knownBadPushNotification0 = priorityBlockingQueue0.poll();
      assertNull(knownBadPushNotification0);
      
      pushManager0.queue = (BlockingQueue<KnownBadPushNotification>) priorityBlockingQueue0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      boolean boolean2 = pushManager0.isStarted();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      assertNotNull(blockingQueue0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertNotNull(thread0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(thread0.isDaemon());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      int int0 = 3949;
      pushManager0.concurrentConnectionCount = int0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      long long0 = (-1864L);
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(3949, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      // Undeclared exception!
      try { 
        pushManager0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertNotNull(thread0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      boolean boolean0 = true;
      pushManager0.shouldShutDownEventLoopGroup = boolean0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      int int0 = 3949;
      pushManager0.concurrentConnectionCount = int0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(3949, pushManager0.concurrentConnectionCount);
      assertTrue(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(thread0, mockThrowable0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertEquals(0, thread0.countStackFrames());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(3949, pushManager0.concurrentConnectionCount);
      assertTrue(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      
      long long0 = (-1864L);
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      pushManager0.shouldShutDownEventLoopGroup = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      // Undeclared exception!
      try { 
        pushManager0.decrementConnectionCounter();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
