/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 07:24:23 GMT 2021
 */

package com.relayrides.pushy.apns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.relayrides.pushy.apns.ApnsConnection;
import com.relayrides.pushy.apns.ApnsConnectionListener;
import com.relayrides.pushy.apns.ApnsConnectionPool;
import com.relayrides.pushy.apns.ApnsEnvironment;
import com.relayrides.pushy.apns.FeedbackServiceClient;
import com.relayrides.pushy.apns.KnownBadPushNotification;
import com.relayrides.pushy.apns.PushManager;
import com.relayrides.pushy.apns.RejectedNotificationListener;
import com.relayrides.pushy.apns.RejectedNotificationReason;
import io.netty.channel.Channel;
import io.netty.channel.DefaultChannelProgressivePromise;
import io.netty.channel.local.LocalChannel;
import io.netty.channel.local.LocalServerChannel;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.util.concurrent.DefaultThreadFactory;
import io.netty.util.concurrent.EventExecutor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import javax.net.ssl.SSLContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PushManager_ESTest extends PushManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      String string0 = "{W6_";
      String string1 = "";
      int int0 = 1;
      StackTraceElement stackTraceElement0 = new StackTraceElement(string0, string1, string1, int0);
      assertNotNull(stackTraceElement0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("{W6_.(:1)", stackTraceElement0.toString());
      assertEquals("", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals(1, stackTraceElement0.getLineNumber());
      assertEquals("{W6_", stackTraceElement0.getClassName());
      
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("{W6_.(:1)", stackTraceElement0.toString());
      assertEquals("", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals(1, stackTraceElement0.getLineNumber());
      assertEquals("{W6_", stackTraceElement0.getClassName());
      
      int int1 = 0;
      mockThrowable0.printStackTrace();
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      
      StackTraceElement stackTraceElement1 = new StackTraceElement(string0, string0, string0, int1);
      assertNotNull(stackTraceElement1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("{W6_", stackTraceElement1.getFileName());
      assertEquals("{W6_.{W6_({W6_:0)", stackTraceElement1.toString());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals("{W6_", stackTraceElement1.getMethodName());
      assertEquals("{W6_", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.isNativeMethod());
      
      mockThrowable0.setOriginForDelegate(stackTraceElement1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotSame(string0, string1);
      assertNotSame(stackTraceElement1, stackTraceElement0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("{W6_", stackTraceElement1.getFileName());
      assertEquals("{W6_.{W6_({W6_:0)", stackTraceElement1.toString());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals("{W6_", stackTraceElement1.getMethodName());
      assertEquals("{W6_", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.isNativeMethod());
      
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isStarted());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isShutDown());
      
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager0.dispatchThread, mockThrowable0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      int int2 = 531;
      MockDate mockDate0 = new MockDate(int0, int2, pushManager_DispatchThreadExceptionHandler0.manager.unfinishedConnectionCount, int1, pushManager_DispatchThreadExceptionHandler0.manager.concurrentConnectionCount, int0);
      assertNotNull(mockDate0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("Sat Mar 31 00:00:01 GMT 1945", mockDate0.toString());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      pushManager_DispatchThreadExceptionHandler0.manager.waitForAllOperationsToFinish(mockDate0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("Sat Mar 31 00:00:01 GMT 1945", mockDate0.toString());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      MockThread mockThread0 = new MockThread(string1);
      assertNotNull(mockThread0);
      assertFalse(string1.equals((Object)string0));
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.started);
      
      boolean boolean0 = pushManager0.isStarted();
      assertFalse(boolean0);
      assertSame(pushManager0, pushManager1);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionClosure(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.started);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.SHUTDOWN;
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.started);
      
      boolean boolean0 = false;
      pushManager0.shouldShutDownEventLoopGroup = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      pushManager0.started = pushManager0.shutDown;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      assertNull(apnsEnvironment0);
      
      int int0 = (-1);
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, int0, pushManager0.eventLoopGroup, pushManager0.retryQueue);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      assertNull(apnsEnvironment0);
      
      int int0 = (-1);
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread(pushManager0.dispatchThread);
      assertNotNull(mockThread0);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      pushManager0.dispatchThread = (Thread) mockThread0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, pushManager0.dispatchThread.countStackFrames());
      assertFalse(pushManager0.dispatchThread.isInterrupted());
      assertFalse(pushManager0.dispatchThread.isDaemon());
      
      // Undeclared exception!
      try { 
        pushManager0.decrementConnectionCounter();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertNotNull(thread0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(thread0.isDaemon());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      long long0 = 919L;
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      pushManager0.dispatchThread = (Thread) mockThread0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, pushManager0.dispatchThread.countStackFrames());
      assertFalse(pushManager0.dispatchThread.isDaemon());
      assertFalse(pushManager0.dispatchThread.isInterrupted());
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      assertNull(blockingQueue0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      KnownBadPushNotification knownBadPushNotification0 = null;
      String string0 = "YG^Q@(wH";
      Throwable throwable0 = null;
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      MockThrowable mockThrowable0 = new MockThrowable(throwable0);
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(string0, mockThrowable0);
      assertNotNull(mockThrowable1);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionFailure(apnsConnection0, throwable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      boolean boolean0 = pushManager0.isShutDown();
      assertFalse(boolean0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      String string0 = ">";
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      pushManager0.dispatchThread = (Thread) mockThread0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(pushManager0.dispatchThread.isDaemon());
      assertEquals(0, pushManager0.dispatchThread.countStackFrames());
      assertFalse(pushManager0.dispatchThread.isInterrupted());
      
      Date date0 = knownBadPushNotification0.getDeliveryInvalidationTime();
      assertNull(date0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      pushManager0.waitForAllOperationsToFinish(date0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("", knownBadPushNotification0.getPayload());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      boolean boolean0 = true;
      pushManager0.shouldShutDownEventLoopGroup = boolean0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertNotNull(thread0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, thread0.countStackFrames());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertTrue(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.dispatchThread = thread0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, thread0.countStackFrames());
      assertEquals(0, pushManager0.dispatchThread.countStackFrames());
      assertFalse(pushManager0.dispatchThread.isDaemon());
      assertFalse(pushManager0.dispatchThread.isInterrupted());
      
      // Undeclared exception!
      try { 
        thread0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager$1", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "^QIfAdA@trzERA~nGm";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      assertNull(apnsEnvironment0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      apnsConnection0.shutdownImmediately();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionClosure(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      boolean boolean0 = true;
      pushManager0.shutDown = boolean0;
      assertFalse(pushManager0.isStarted());
      assertTrue(pushManager0.isShutDown());
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionClosure(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "com.relayrides.pushy.apns.PushManager$1";
      int int0 = 0;
      int int1 = 1914;
      ApnsEnvironment apnsEnvironment0 = new ApnsEnvironment(string0, int0, string0, int1);
      assertNotNull(apnsEnvironment0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1914, apnsEnvironment0.getFeedbackPort());
      assertEquals("com.relayrides.pushy.apns.PushManager$1", apnsEnvironment0.getApnsGatewayHost());
      assertEquals(0, apnsEnvironment0.getApnsGatewayPort());
      assertEquals("com.relayrides.pushy.apns.PushManager$1", apnsEnvironment0.getFeedbackHost());
      
      SSLContext sSLContext0 = SSLContext.getDefault();
      assertNotNull(sSLContext0);
      
      int int2 = (-313);
      NioEventLoopGroup nioEventLoopGroup0 = null;
      LinkedBlockingDeque<KnownBadPushNotification> linkedBlockingDeque0 = new LinkedBlockingDeque<KnownBadPushNotification>();
      assertNotNull(linkedBlockingDeque0);
      
      PushManager<KnownBadPushNotification> pushManager0 = null;
      try {
        pushManager0 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, int2, nioEventLoopGroup0, linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertNotNull(thread0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      
      pushManager1.createAndStartDispatchThread();
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      
      boolean boolean0 = pushManager1.isShutDown();
      assertFalse(boolean0);
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDown);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      // Undeclared exception!
      try { 
        pushManager1.handleConnectionSuccess(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.PROCESSING_ERROR;
      // Undeclared exception!
      try { 
        pushManager0.handleRejectedNotification(apnsConnection0, knownBadPushNotification0, rejectedNotificationReason0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      int int0 = (-509);
      int int1 = 2131;
      int int2 = (-58);
      MockDate mockDate0 = new MockDate(pushManager0.concurrentConnectionCount, int0, int1, int2, int2, pushManager0.concurrentConnectionCount);
      assertNotNull(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals("Fri May 29 13:02:00 GMT 1863", mockDate0.toString());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      assertNull(blockingQueue0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      pushManager0.dispatchThread = (Thread) mockThread0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(pushManager0.dispatchThread.isDaemon());
      assertFalse(pushManager0.dispatchThread.isInterrupted());
      assertEquals(0, pushManager0.dispatchThread.countStackFrames());
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      
      KnownBadPushNotification knownBadPushNotification0 = null;
      String string0 = "YG^Q@(wH";
      Throwable throwable0 = null;
      MockThrowable mockThrowable0 = new MockThrowable(throwable0);
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(string0, mockThrowable0);
      assertNotNull(mockThrowable1);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      // Undeclared exception!
      try { 
        pushManager0.handleWriteFailure(apnsConnection0, knownBadPushNotification0, mockThrowable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.INVALID_TOKEN_SIZE;
      // Undeclared exception!
      try { 
        pushManager0.handleRejectedNotification(apnsConnection0, knownBadPushNotification0, rejectedNotificationReason0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      pushManager0.dispatchThread = (Thread) mockThread0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, pushManager0.dispatchThread.countStackFrames());
      assertFalse(pushManager0.dispatchThread.isInterrupted());
      assertFalse(pushManager0.dispatchThread.isDaemon());
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      assertNull(blockingQueue0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      KnownBadPushNotification knownBadPushNotification0 = null;
      String string0 = "YG^Q@(wH";
      Throwable throwable0 = null;
      MockThrowable mockThrowable0 = new MockThrowable(throwable0);
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(string0, mockThrowable0);
      assertNotNull(mockThrowable1);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      // Undeclared exception!
      try { 
        pushManager0.handleWriteFailure(apnsConnection0, knownBadPushNotification0, mockThrowable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isStarted());
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler1 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager1);
      assertNotNull(pushManager_DispatchThreadExceptionHandler1);
      assertFalse(pushManager_DispatchThreadExceptionHandler1.equals((Object)pushManager_DispatchThreadExceptionHandler0));
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      
      // Undeclared exception!
      try { 
        pushManager0.startNewConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        pushManager0.startNewConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      Collection<KnownBadPushNotification> collection0 = null;
      // Undeclared exception!
      try { 
        pushManager0.handleUnprocessedNotifications(apnsConnection0, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getProductionEnvironment();
      assertNotNull(apnsEnvironment0);
      assertEquals("gateway.push.apple.com", apnsEnvironment0.getApnsGatewayHost());
      assertEquals(2196, apnsEnvironment0.getFeedbackPort());
      assertEquals("feedback.push.apple.com", apnsEnvironment0.getFeedbackHost());
      assertEquals(2195, apnsEnvironment0.getApnsGatewayPort());
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      ApnsEnvironment apnsEnvironment1 = ApnsEnvironment.getSandboxEnvironment();
      assertNotNull(apnsEnvironment1);
      assertFalse(apnsEnvironment1.equals((Object)apnsEnvironment0));
      assertNotSame(apnsEnvironment1, apnsEnvironment0);
      assertEquals("feedback.sandbox.push.apple.com", apnsEnvironment1.getFeedbackHost());
      assertEquals(2196, apnsEnvironment1.getFeedbackPort());
      assertEquals("gateway.sandbox.push.apple.com", apnsEnvironment1.getApnsGatewayHost());
      assertEquals(2195, apnsEnvironment1.getApnsGatewayPort());
      
      SSLContext sSLContext0 = pushManager0.sslContext;
      assertNull(sSLContext0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(apnsEnvironment1, sSLContext0, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(apnsEnvironment1.equals((Object)apnsEnvironment0));
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals("feedback.sandbox.push.apple.com", apnsEnvironment1.getFeedbackHost());
      assertEquals(2196, apnsEnvironment1.getFeedbackPort());
      assertEquals("gateway.sandbox.push.apple.com", apnsEnvironment1.getApnsGatewayHost());
      assertEquals(2195, apnsEnvironment1.getApnsGatewayPort());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      LinkedBlockingQueue<KnownBadPushNotification> linkedBlockingQueue0 = new LinkedBlockingQueue<KnownBadPushNotification>();
      assertNotNull(linkedBlockingQueue0);
      
      // Undeclared exception!
      try { 
        pushManager0.handleUnprocessedNotifications(apnsConnection0, linkedBlockingQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      String string0 = "";
      MockThread mockThread0 = new MockThread(pushManager0.dispatchThread, string0);
      assertNotNull(mockThread0);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      pushManager0.dispatchThread = (Thread) mockThread0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(pushManager0.dispatchThread.isInterrupted());
      assertFalse(pushManager0.dispatchThread.isDaemon());
      assertEquals(0, pushManager0.dispatchThread.countStackFrames());
      
      Date date0 = knownBadPushNotification0.getDeliveryInvalidationTime();
      assertNull(date0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      pushManager0.waitForAllOperationsToFinish(date0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals("", knownBadPushNotification0.getPayload());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      mockThread0.run();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      long long0 = (-2276L);
      FeedbackServiceClient feedbackServiceClient0 = pushManager0.feedbackServiceClient;
      assertNull(feedbackServiceClient0);
      
      pushManager0.feedbackServiceClient = feedbackServiceClient0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      FeedbackServiceClient feedbackServiceClient1 = null;
      pushManager0.feedbackServiceClient = feedbackServiceClient1;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens(long0, timeUnit0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      
      boolean boolean0 = pushManager1.isStarted();
      assertFalse(boolean0);
      assertSame(pushManager0, pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.started);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      String string0 = "Rejected notification listeners may not be registered after a push manager has been shut down.";
      MockThread mockThread0 = new MockThread(thread0, string0);
      assertNotNull(mockThread0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      assertNotNull(mockThrowable1);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      MockThrowable mockThrowable2 = new MockThrowable(string0, mockThrowable1);
      assertNotNull(mockThrowable2);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(mockThrowable2.equals((Object)mockThrowable1));
      assertFalse(mockThrowable2.equals((Object)mockThrowable0));
      
      // Undeclared exception!
      try { 
        pushManager_DispatchThreadExceptionHandler0.uncaughtException(mockThread0, mockThrowable2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager$DispatchThreadExceptionHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isShutDown());
      assertFalse(pushManager_DispatchThreadExceptionHandler0.manager.isStarted());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager0.dispatchThread, mockThrowable0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      assertNotNull(pushManager1);
      assertSame(pushManager1, pushManager0);
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      assertEquals(0, pushManager1.unfinishedConnectionCount);
      assertFalse(pushManager1.shutDownFinished);
      assertFalse(pushManager1.started);
      assertEquals(0, pushManager1.concurrentConnectionCount);
      assertFalse(pushManager1.shouldShutDownEventLoopGroup);
      assertFalse(pushManager1.shutDown);
      
      pushManager1.feedbackServiceClient = pushManager_DispatchThreadExceptionHandler0.manager.feedbackServiceClient;
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      
      pushManager1.retryQueue = pushManager0.retryQueue;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager1.isStarted());
      assertFalse(pushManager1.isShutDown());
      
      long long0 = 2992L;
      // Undeclared exception!
      try { 
        pushManager1.shutdown(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      boolean boolean0 = true;
      pushManager0.shouldShutDownEventLoopGroup = boolean0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertNotNull(thread0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertTrue(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      pushManager0.dispatchThread = thread0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, pushManager0.dispatchThread.countStackFrames());
      assertFalse(pushManager0.dispatchThread.isInterrupted());
      assertFalse(pushManager0.dispatchThread.isDaemon());
      
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertTrue(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertTrue(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      
      // Undeclared exception!
      try { 
        pushManager0.decrementConnectionCounter();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      pushManager0.start();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertNotNull(thread0);
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(thread0.isDaemon());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(thread0.isInterrupted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      pushManager0.createAndStartDispatchThread();
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      // Undeclared exception!
      try { 
        pushManager0.startNewConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.unregisterRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      
      long long0 = 500000L;
      boolean boolean0 = true;
      pushManager0.started = boolean0;
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens(long0, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      long long0 = 0L;
      boolean boolean0 = true;
      pushManager0.shutDown = boolean0;
      assertTrue(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.INVALID_TOKEN_SIZE;
      apnsConnection0.shutdownGracefully();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      
      boolean boolean0 = pushManager0.isStarted();
      assertFalse(boolean0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      pushManager0.dispatchThread = (Thread) mockThread0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, pushManager0.dispatchThread.countStackFrames());
      assertFalse(pushManager0.dispatchThread.isDaemon());
      assertFalse(pushManager0.dispatchThread.isInterrupted());
      
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      assertNull(blockingQueue0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      assertNotNull(apnsConnection0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      KnownBadPushNotification knownBadPushNotification0 = null;
      String string0 = "YG^Q@(wH";
      Throwable throwable0 = null;
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      MockThrowable mockThrowable0 = new MockThrowable(throwable0);
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(string0, mockThrowable0);
      assertNotNull(mockThrowable1);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionFailure(apnsConnection0, throwable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      boolean boolean0 = true;
      pushManager0.shouldShutDownEventLoopGroup = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      Thread thread0 = pushManager0.createDispatchThread();
      assertNotNull(thread0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, thread0.countStackFrames());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertTrue(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      pushManager0.dispatchThread = thread0;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, thread0.countStackFrames());
      assertEquals(0, pushManager0.dispatchThread.countStackFrames());
      assertFalse(pushManager0.dispatchThread.isInterrupted());
      assertFalse(pushManager0.dispatchThread.isDaemon());
      
      // Undeclared exception!
      try { 
        thread0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager$1", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shutDown);
      
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      assertNotNull(pushManager_DispatchThreadExceptionHandler0);
      
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      pushManager0.start();
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      assertTrue(pushManager0.started);
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      assertNull(apnsEnvironment0);
      
      // Undeclared exception!
      try { 
        pushManager0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Push manager has already been started.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      boolean boolean0 = true;
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.MISSING_TOKEN;
      pushManager0.createAndStartDispatchThread();
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.shutDown);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      
      boolean boolean1 = false;
      pushManager0.shouldShutDownEventLoopGroup = boolean1;
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      
      pushManager0.started = boolean0;
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = pushManager0.isShutDown();
      assertFalse(boolean0);
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.shutDownFinished);
      assertFalse(pushManager0.started);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      boolean boolean1 = true;
      pushManager0.started = boolean1;
      assertFalse(pushManager0.isShutDown());
      assertTrue(pushManager0.isStarted());
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      assertNotNull(pushManager0);
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      assertFalse(pushManager0.shutDownFinished);
      assertEquals(0, pushManager0.unfinishedConnectionCount);
      assertEquals(0, pushManager0.concurrentConnectionCount);
      assertFalse(pushManager0.started);
      assertFalse(pushManager0.shouldShutDownEventLoopGroup);
      assertFalse(pushManager0.shutDown);
      
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      assertNotNull(knownBadPushNotification0);
      assertEquals("", knownBadPushNotification0.getPayload());
      
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.SHUTDOWN;
      boolean boolean0 = true;
      pushManager0.shouldShutDownEventLoopGroup = boolean0;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      pushManager0.started = pushManager0.shutDown;
      assertFalse(pushManager0.isStarted());
      assertFalse(pushManager0.isShutDown());
      
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }
}
