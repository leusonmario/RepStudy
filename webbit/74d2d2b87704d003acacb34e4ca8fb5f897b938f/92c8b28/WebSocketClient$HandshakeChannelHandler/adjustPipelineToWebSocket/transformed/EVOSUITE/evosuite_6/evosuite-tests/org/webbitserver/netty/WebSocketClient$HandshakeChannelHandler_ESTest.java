/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 20:30:02 GMT 2021
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.nio.file.LinkOption;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelHandler;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.DownstreamMessageEvent;
import org.jboss.netty.channel.MessageEvent;
import org.jboss.netty.channel.SimpleChannelDownstreamHandler;
import org.jboss.netty.channel.SimpleChannelUpstreamHandler;
import org.jboss.netty.channel.StaticChannelPipeline;
import org.jboss.netty.channel.UpstreamMessageEvent;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.junit.runner.RunWith;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.netty.WebSocketClient;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient$HandshakeChannelHandler_ESTest extends WebSocketClient$HandshakeChannelHandler_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = null;
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      SimpleChannelDownstreamHandler simpleChannelDownstreamHandler0 = new SimpleChannelDownstreamHandler();
      assertNotNull(simpleChannelDownstreamHandler0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "vc";
      URI uRI0 = MockURI.create(string0);
      assertNotNull(uRI0);
      assertEquals("vc", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("vc", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      assertNotNull(webSocketClient0);
      assertEquals("vc", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("vc", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals(1L, WebSocketClient.nextId);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-78);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-69);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-36);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-56);
      byteArray0[5] = byte5;
      byte byte6 = (byte)101;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(9, byteArray0.length);
      assertEquals("vc", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("vc", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte) (-69), (byte) (-36), (byte) (-1), (byte) (-56), (byte)101, (byte)0, (byte)0}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      
      ChannelHandlerContext channelHandlerContext0 = null;
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isOpen());
      assertEquals(58, (int)localServerChannel0.getId());
      
      UpstreamMessageEvent upstreamMessageEvent0 = new UpstreamMessageEvent(localServerChannel0, webSocketClient_HandshakeChannelHandler0, webSocketClient0.remoteAddress);
      assertNotNull(upstreamMessageEvent0);
      assertEquals(9, byteArray0.length);
      assertEquals("vc", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("vc", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isOpen());
      assertEquals(58, (int)localServerChannel0.getId());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte) (-69), (byte) (-36), (byte) (-1), (byte) (-56), (byte)101, (byte)0, (byte)0}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      
      try { 
        webSocketClient_HandshakeChannelHandler0.messageReceived(channelHandlerContext0, upstreamMessageEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler cannot be cast to org.jboss.netty.handler.codec.http.HttpResponse
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      URI uRI0 = null;
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      URI uRI0 = MockURI.URI(string0);
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      assertNotNull(webSocketClient0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals(1L, WebSocketClient.nextId);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(webSocketClient0.base64Nonce);
      assertNotNull(mockThread0);
      assertEquals(1L, WebSocketClient.nextId);
      
      String string1 = "re4moteAddres";
      webSocketClient0.base64Nonce = string1;
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      
      ThreadGroup threadGroup1 = (ThreadGroup)mockThread0.getUncaughtExceptionHandler();
      assertNotNull(threadGroup1);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Test_Execution_Group", threadGroup1.getName());
      assertEquals(1L, WebSocketClient.nextId);
      
      WebSocketClient webSocketClient1 = webSocketClient0.connectionExceptionHandler(threadGroup1);
      assertNotNull(webSocketClient1);
      assertNotSame(string0, string1);
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Test_Execution_Group", threadGroup1.getName());
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      byte byte0 = (byte)113;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler();
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Test_Execution_Group", threadGroup1.getName());
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      String string2 = "gPO6kVyzo/Ypf5oj9lAdlWQ6HXc=";
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Sec-WebSocket-Accept header from server didn't match expected value of UOsUnHG+FQ/GdFsvGx/yeq83AgU=
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertNotNull(webSocketClient0);
      assertEquals(1L, WebSocketClient.nextId);
      
      long long0 = (-12L);
      WebSocketClient webSocketClient1 = webSocketClient0.uncaughtExceptionHandler(webSocketClient0.ioExceptionHandler);
      assertNotNull(webSocketClient1);
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler();
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(webSocketClient0.base64Nonce);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected Sec-WebSocket-Accept header from server
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      long long0 = 171L;
      System.setCurrentTimeMillis(long0);
      String string0 = "er/p2rO7eVXSps2MkXl6JIcZixU=";
      String string1 = "run9WXat3Qk6p0bAlLq2oa0+ABU=";
      URI uRI0 = MockURI.URI(string0, string0, string1);
      assertNotNull(uRI0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:er/p2rO7eVXSps2MkXl6JIcZixU=", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:er/p2rO7eVXSps2MkXl6JIcZixU=#run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.getRawFragment());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, executor0);
      assertNotNull(webSocketClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:er/p2rO7eVXSps2MkXl6JIcZixU=", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:er/p2rO7eVXSps2MkXl6JIcZixU=#run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.getRawFragment());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals(1L, WebSocketClient.nextId);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      
      WebSocketClient webSocketClient1 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      assertNotNull(webSocketClient1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:er/p2rO7eVXSps2MkXl6JIcZixU=", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:er/p2rO7eVXSps2MkXl6JIcZixU=#run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.getRawFragment());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler();
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:er/p2rO7eVXSps2MkXl6JIcZixU=", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:er/p2rO7eVXSps2MkXl6JIcZixU=#run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.getRawFragment());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals(171L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:er/p2rO7eVXSps2MkXl6JIcZixU=", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:er/p2rO7eVXSps2MkXl6JIcZixU=#run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.getRawFragment());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals(171L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertNotNull(webSocketClient0);
      assertEquals(1L, WebSocketClient.nextId);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = null;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler();
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      Class<ChannelHandler> class0 = ChannelHandler.class;
      ChannelHandlerContext channelHandlerContext0 = defaultChannelPipeline0.getContext(class0);
      assertNull(channelHandlerContext0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      MessageEvent messageEvent0 = null;
      ChannelHandler channelHandler0 = null;
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.adjustPipelineToWebSocket(channelHandlerContext0, messageEvent0, webSocketClient_HandshakeChannelHandler0, channelHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertNotNull(webSocketClient0);
      assertEquals(1L, WebSocketClient.nextId);
      
      byte[] byteArray0 = new byte[0];
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(0, byteArray0.length);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(webSocketClient0.base64Nonce);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected Sec-WebSocket-Accept header from server
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertNotNull(webSocketClient0);
      assertEquals(1L, WebSocketClient.nextId);
      
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler();
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(webSocketClient0.base64Nonce);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected Sec-WebSocket-Accept header from server
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertNotNull(webSocketClient0);
      assertEquals(1L, WebSocketClient.nextId);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)113;
      byteArray0[1] = byte1;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(2, byteArray0.length);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertArrayEquals(new byte[] {(byte)0, (byte)113}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      
      String string0 = "=.'T3{{S}\\9w<k";
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertNotNull(webSocketClient0);
      assertEquals(1L, WebSocketClient.nextId);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      
      WebSocketClient webSocketClient1 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      assertNotNull(webSocketClient1);
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      byte[] byteArray0 = new byte[0];
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(0, byteArray0.length);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      long long0 = webSocketClient_HandshakeChannelHandler0.timestamp();
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertEquals(0, byteArray0.length);
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertNotNull(webSocketClient0);
      assertEquals(1L, WebSocketClient.nextId);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byte byte1 = webSocketClient0.randomByte();
      assertEquals((byte)0, byte1);
      assertTrue(byte1 == byte0);
      assertEquals(1L, WebSocketClient.nextId);
      
      byteArray0[0] = byte0;
      byte byte2 = (byte)73;
      byteArray0[1] = byte2;
      byte byte3 = (byte)0;
      byteArray0[2] = byte3;
      byte byte4 = (byte)0;
      byteArray0[3] = byte4;
      byte byte5 = (byte)106;
      byteArray0[4] = byte5;
      byte byte6 = (byte)89;
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      
      webSocketClient0.ioExceptionHandler = thread_UncaughtExceptionHandler0;
      byteArray0[5] = byte6;
      byte byte7 = (byte)0;
      byteArray0[6] = byte7;
      byte byte8 = (byte)20;
      byteArray0[7] = byte8;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(8, byteArray0.length);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertArrayEquals(new byte[] {(byte)0, (byte)73, (byte)0, (byte)0, (byte)106, (byte)89, (byte)0, (byte)20}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      
      long long0 = webSocketClient_HandshakeChannelHandler0.timestamp();
      assertEquals(8, byteArray0.length);
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertArrayEquals(new byte[] {(byte)0, (byte)73, (byte)0, (byte)0, (byte)106, (byte)89, (byte)0, (byte)20}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      URI uRI0 = MockURI.create(string0);
      assertNotNull(uRI0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      assertNotNull(webSocketClient0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals(1L, WebSocketClient.nextId);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, webSocketClient0.base64Nonce);
      assertNotNull(mockThread0);
      assertEquals(1L, WebSocketClient.nextId);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(1L, WebSocketClient.nextId);
      
      WebSocketClient webSocketClient1 = webSocketClient0.connectionExceptionHandler(thread_UncaughtExceptionHandler0);
      assertNotNull(webSocketClient1);
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)113;
      byteArray0[0] = byte0;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(1, byteArray0.length);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertArrayEquals(new byte[] {(byte)113}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(webSocketClient1.ACCEPT_GUID);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Sec-WebSocket-Accept header from server didn't match expected value of run9WXat3Qk6p0bAlLq2oa0+ABU=
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertNotNull(webSocketClient0);
      assertEquals(1L, WebSocketClient.nextId);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-86);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)23;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-113);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)36;
      byteArray0[8] = byte8;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(9, byteArray0.length);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte)0, (byte)23, (byte)0, (byte) (-113), (byte)0, (byte)0, (byte)36}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      String string0 = "";
      ChannelHandlerContext channelHandlerContext0 = defaultChannelPipeline0.getContext(string0);
      assertNull(channelHandlerContext0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      assertNotNull(defaultLocalClientChannelFactory0);
      
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isOpen());
      assertEquals(10, (int)localChannel0.getId());
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, webSocketClient0.ACCEPT_GUID, byte1);
      assertNotNull(mockThread1);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte8);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte5);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(1L, WebSocketClient.nextId);
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, string0);
      assertNotNull(mockThread2);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte8);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte5);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals(1L, WebSocketClient.nextId);
      
      UpstreamMessageEvent upstreamMessageEvent0 = new UpstreamMessageEvent(localChannel0, mockThread2, webSocketClient0.remoteAddress);
      assertNotNull(upstreamMessageEvent0);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte8);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte5);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localChannel0.isOpen());
      assertEquals(10, (int)localChannel0.getId());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertEquals(1L, WebSocketClient.nextId);
      
      Class<ChannelHandler> class0 = ChannelHandler.class;
      ChannelHandler channelHandler0 = defaultChannelPipeline0.get(class0);
      assertNull(channelHandler0);
      assertTrue(defaultChannelPipeline0.isAttached());
      
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.adjustPipelineToWebSocket(channelHandlerContext0, upstreamMessageEvent0, channelHandler0, channelHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      long long0 = 171L;
      System.setCurrentTimeMillis(long0);
      String string0 = "er/p2rO7eVXSps2MkXl6JIcZixU=";
      String string1 = "2iOS7R6";
      String string2 = "run9WXat3Qk6p0bAlLq2oa0+ABU=";
      URI uRI0 = MockURI.URI(string0, string1, string2);
      assertNotNull(uRI0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getScheme());
      assertEquals("run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:2iOS7R6#run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:2iOS7R6", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0, executor0);
      assertNotNull(webSocketClient0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getScheme());
      assertEquals("run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:2iOS7R6#run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:2iOS7R6", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals(1L, WebSocketClient.nextId);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      
      WebSocketClient webSocketClient1 = webSocketClient0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      assertNotNull(webSocketClient1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getScheme());
      assertEquals("run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:2iOS7R6#run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:2iOS7R6", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler();
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getScheme());
      assertEquals("run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:2iOS7R6#run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:2iOS7R6", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals(171L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      
      webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getScheme());
      assertEquals("run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:2iOS7R6#run9WXat3Qk6p0bAlLq2oa0+ABU=", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("er/p2rO7eVXSps2MkXl6JIcZixU=:2iOS7R6", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals(171L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "pjc35jqgiV8WKO5sL2F4jcZ0rPs=";
      URI uRI0 = MockURI.URI(string0);
      assertNotNull(uRI0);
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertNotNull(uRI1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      
      String string1 = "C";
      URI uRI2 = MockURI.resolve(uRI1, string1);
      assertNotNull(uRI2);
      assertNotSame(string0, string1);
      assertNotSame(uRI0, uRI2);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotSame(uRI1, uRI2);
      assertNotSame(string1, string0);
      assertNotSame(uRI2, uRI1);
      assertNotSame(uRI2, uRI0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(uRI2.equals((Object)uRI1));
      assertFalse(uRI2.equals((Object)uRI0));
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("C", uRI2.toString());
      assertFalse(uRI2.isAbsolute());
      assertEquals("C", uRI2.getRawPath());
      assertNull(uRI2.getHost());
      assertNull(uRI2.getScheme());
      assertFalse(uRI2.isOpaque());
      assertNull(uRI2.getRawUserInfo());
      assertEquals((-1), uRI2.getPort());
      assertNull(uRI2.getRawAuthority());
      assertNull(uRI2.getRawQuery());
      assertNull(uRI2.getRawFragment());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI2, webSocketHandler0);
      assertNotNull(webSocketClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(uRI0.equals((Object)uRI2));
      assertFalse(uRI1.equals((Object)uRI2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(uRI2.equals((Object)uRI1));
      assertFalse(uRI2.equals((Object)uRI0));
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("C", uRI2.toString());
      assertFalse(uRI2.isAbsolute());
      assertEquals("C", uRI2.getRawPath());
      assertNull(uRI2.getHost());
      assertNull(uRI2.getScheme());
      assertFalse(uRI2.isOpaque());
      assertNull(uRI2.getRawUserInfo());
      assertEquals((-1), uRI2.getPort());
      assertNull(uRI2.getRawAuthority());
      assertNull(uRI2.getRawQuery());
      assertNull(uRI2.getRawFragment());
      assertEquals(1L, WebSocketClient.nextId);
      
      byte[] byteArray0 = new byte[0];
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(0, byteArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(uRI0.equals((Object)uRI2));
      assertFalse(uRI1.equals((Object)uRI2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(uRI2.equals((Object)uRI1));
      assertFalse(uRI2.equals((Object)uRI0));
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI0.toString());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertEquals("pjc35jqgiV8WKO5sL2F4jcZ0rPs=", uRI1.getRawPath());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("C", uRI2.toString());
      assertFalse(uRI2.isAbsolute());
      assertEquals("C", uRI2.getRawPath());
      assertNull(uRI2.getHost());
      assertNull(uRI2.getScheme());
      assertFalse(uRI2.isOpaque());
      assertNull(uRI2.getRawUserInfo());
      assertEquals((-1), uRI2.getPort());
      assertNull(uRI2.getRawAuthority());
      assertNull(uRI2.getRawQuery());
      assertNull(uRI2.getRawFragment());
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      
      ChannelHandlerContext channelHandlerContext0 = null;
      MessageEvent messageEvent0 = null;
      try { 
        webSocketClient_HandshakeChannelHandler0.messageReceived(channelHandlerContext0, messageEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "vG";
      URI uRI0 = MockURI.create(string0);
      assertNotNull(uRI0);
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("vG", uRI0.toString());
      assertEquals("vG", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, webSocketHandler0);
      assertNotNull(webSocketClient0);
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("vG", uRI0.toString());
      assertEquals("vG", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals(1L, WebSocketClient.nextId);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-78);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-69);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-36);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-56);
      byteArray0[5] = byte5;
      byte byte6 = (byte)101;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(9, byteArray0.length);
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("vG", uRI0.toString());
      assertEquals("vG", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte) (-69), (byte) (-36), (byte) (-1), (byte) (-56), (byte)101, (byte)0, (byte)0}, byteArray0);
      assertEquals(1L, WebSocketClient.nextId);
      
      ChannelHandlerContext channelHandlerContext0 = null;
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertNotNull(defaultChannelPipeline0);
      assertFalse(defaultChannelPipeline0.isAttached());
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertNotNull(localServerChannel0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isOpen());
      assertEquals(23, (int)localServerChannel0.getId());
      
      SimpleChannelUpstreamHandler simpleChannelUpstreamHandler0 = new SimpleChannelUpstreamHandler();
      assertNotNull(simpleChannelUpstreamHandler0);
      
      UpstreamMessageEvent upstreamMessageEvent0 = new UpstreamMessageEvent(localServerChannel0, simpleChannelUpstreamHandler0, webSocketClient0.remoteAddress);
      assertNotNull(upstreamMessageEvent0);
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("vG", uRI0.toString());
      assertEquals("vG", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isOpen());
      assertEquals(23, (int)localServerChannel0.getId());
      assertEquals(1L, WebSocketClient.nextId);
      
      try { 
        webSocketClient_HandshakeChannelHandler0.messageReceived(channelHandlerContext0, upstreamMessageEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jboss.netty.channel.SimpleChannelUpstreamHandler cannot be cast to org.jboss.netty.handler.codec.http.HttpResponse
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }
}
