/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 20:21:25 GMT 2021
 */

package org.webbitserver.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.channels.ClosedChannelException;
import java.sql.SQLClientInfoException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelHandler;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ChannelState;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.DefaultExceptionEvent;
import org.jboss.netty.channel.DownstreamChannelStateEvent;
import org.jboss.netty.channel.DownstreamMessageEvent;
import org.jboss.netty.channel.ExceptionEvent;
import org.jboss.netty.channel.FailedChannelFuture;
import org.jboss.netty.channel.MessageEvent;
import org.jboss.netty.channel.StaticChannelPipeline;
import org.jboss.netty.channel.UpstreamChannelStateEvent;
import org.jboss.netty.channel.UpstreamMessageEvent;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.handler.codec.http.DefaultHttpResponse;
import org.jboss.netty.handler.codec.http.HttpRequest;
import org.jboss.netty.handler.codec.http.HttpResponseStatus;
import org.jboss.netty.handler.codec.http.HttpVersion;
import org.junit.runner.RunWith;
import org.webbitserver.WebSocketHandler;
import org.webbitserver.handler.ReconnectingWebSocketHandler;
import org.webbitserver.netty.WebSocketClient;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketClient$HandshakeChannelHandler_ESTest extends WebSocketClient$HandshakeChannelHandler_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "gMU&9";
      String string1 = "uaHT7CPtvj<=O;759b";
      String string2 = "";
      int int0 = 0;
      String string3 = "";
      String string4 = "";
      try { 
        MockURI.URI(string0, string1, string2, int0, string2, string3, string4);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 3: gMU&9://uaHT7CPtvj%3C=O;759b@:0?#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient0);
      
      String string0 = "";
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[8];
      StaticChannelPipeline staticChannelPipeline0 = new StaticChannelPipeline(channelHandlerArray0);
      assertFalse(staticChannelPipeline0.isAttached());
      assertNotNull(staticChannelPipeline0);
      assertEquals(8, channelHandlerArray0.length);
      
      // Undeclared exception!
      try { 
        staticChannelPipeline0.getContext(channelHandlerArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // handler
         //
         verifyException("org.jboss.netty.channel.StaticChannelPipeline", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-33);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-19);
      String string0 = "r't/Hoa";
      String string1 = " [:b>QLBp8hW}{~";
      HttpRequest httpRequest0 = webSocketClient0.createNettyHttpRequest(string0, string1);
      assertEquals("r't/Hoa", httpRequest0.getUri());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(httpRequest0);
      
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)61;
      byteArray0[6] = byte6;
      boolean boolean0 = false;
      webSocketClient0.ssl = boolean0;
      WebSocketClient.ACCEPT_GUID = webSocketClient0.base64Nonce;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-33), (byte)0, (byte)0, (byte) (-19), (byte)0, (byte)61}, byteArray0);
      
      WebSocketClient.SHA_1 = webSocketClient0.SHA_1;
      assertEquals("SHA1 Message Digest from SUN, <initialized>\n", WebSocketClient.SHA_1.toString());
      assertEquals("SHA1", WebSocketClient.SHA_1.getAlgorithm());
      
      long long0 = webSocketClient_HandshakeChannelHandler0.timestamp();
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-33), (byte)0, (byte)0, (byte) (-19), (byte)0, (byte)61}, byteArray0);
      
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(webSocketClient0.base64Nonce);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Sec-WebSocket-Accept header from server didn't match expected value of PEq4GVFrI4u6Nxxz8V1DeAg9CeI=
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, webSocketClient0.ACCEPT_GUID);
      assertFalse(boolean0);
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      
      byte[] byteArray0 = null;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[3];
      channelHandlerArray0[0] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
      channelHandlerArray0[1] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
      channelHandlerArray0[2] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
      StaticChannelPipeline staticChannelPipeline0 = new StaticChannelPipeline(channelHandlerArray0);
      assertFalse(staticChannelPipeline0.isAttached());
      assertNotNull(staticChannelPipeline0);
      assertEquals(3, channelHandlerArray0.length);
      
      Class<ChannelHandler> class0 = ChannelHandler.class;
      ChannelHandlerContext channelHandlerContext0 = staticChannelPipeline0.getContext(class0);
      assertFalse(staticChannelPipeline0.isAttached());
      assertFalse(channelHandlerContext0.canHandleDownstream());
      assertEquals("0", channelHandlerContext0.getName());
      assertTrue(channelHandlerContext0.canHandleUpstream());
      assertNotNull(channelHandlerContext0);
      assertEquals(3, channelHandlerArray0.length);
      
      ChannelState channelState0 = ChannelState.OPEN;
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertNotNull(httpVersion0);
      
      HttpResponseStatus httpResponseStatus0 = HttpResponseStatus.CREATED;
      assertEquals(201, httpResponseStatus0.getCode());
      assertEquals("Created", httpResponseStatus0.getReasonPhrase());
      assertNotNull(httpResponseStatus0);
      
      DefaultHttpResponse defaultHttpResponse0 = new DefaultHttpResponse(httpVersion0, httpResponseStatus0);
      assertEquals(1, httpVersion0.getMajorVersion());
      assertEquals(1, httpVersion0.getMinorVersion());
      assertEquals("HTTP/1.1", httpVersion0.getText());
      assertTrue(httpVersion0.isKeepAliveDefault());
      assertEquals("HTTP/1.1", httpVersion0.toString());
      assertEquals("HTTP", httpVersion0.getProtocolName());
      assertEquals(201, httpResponseStatus0.getCode());
      assertEquals("Created", httpResponseStatus0.getReasonPhrase());
      assertNotNull(defaultHttpResponse0);
      
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = null;
      try {
        upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(webSocketClient0.channel, channelState0, defaultHttpResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // channel
         //
         verifyException("org.jboss.netty.channel.UpstreamChannelStateEvent", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-33);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-19);
      String string0 = "r't/Hoa";
      String string1 = " [:b>QLBp8hW}{~";
      HttpRequest httpRequest0 = webSocketClient0.createNettyHttpRequest(string0, string1);
      assertEquals("r't/Hoa", httpRequest0.getUri());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(httpRequest0);
      
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)61;
      byteArray0[6] = byte6;
      boolean boolean0 = false;
      webSocketClient0.ssl = boolean0;
      WebSocketClient.ACCEPT_GUID = string1;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-33), (byte)0, (byte)0, (byte) (-19), (byte)0, (byte)61}, byteArray0);
      
      WebSocketClient.SHA_1 = webSocketClient0.SHA_1;
      assertEquals("SHA1", WebSocketClient.SHA_1.getAlgorithm());
      assertEquals("SHA1 Message Digest from SUN, <initialized>\n", WebSocketClient.SHA_1.toString());
      
      long long0 = webSocketClient_HandshakeChannelHandler0.timestamp();
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-33), (byte)0, (byte)0, (byte) (-19), (byte)0, (byte)61}, byteArray0);
      
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(webSocketClient0.base64Nonce);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Sec-WebSocket-Accept header from server didn't match expected value of ETh8iZEQiEVJWf+Y1k96C3maxCI=
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNotNull(webSocketClient0);
      
      byte[] byteArray0 = null;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[3];
      channelHandlerArray0[0] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
      channelHandlerArray0[1] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      ChannelHandlerContext channelHandlerContext0 = defaultChannelPipeline0.getContext(webSocketClient0.ACCEPT_GUID);
      assertFalse(defaultChannelPipeline0.isAttached());
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNull(channelHandlerContext0);
      
      MessageEvent messageEvent0 = null;
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.adjustPipelineToWebSocket(channelHandlerContext0, messageEvent0, channelHandlerArray0[1], channelHandlerArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "<d#,5AC4";
      String string1 = "";
      int int0 = 1348;
      Random.setNextRandom(int0);
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNotNull(webSocketClient0);
      
      long long0 = 1584L;
      WebSocketClient webSocketClient1 = webSocketClient0.reconnectEvery(long0);
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient1.ssl);
      assertNotNull(webSocketClient1);
      
      byte[] byteArray0 = null;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient1.ssl);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      long long1 = webSocketClient_HandshakeChannelHandler0.timestamp();
      assertEquals(1392409281320L, long1);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertSame(webSocketClient0, webSocketClient1);
      assertSame(webSocketClient1, webSocketClient0);
      assertFalse(long1 == long0);
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient1.ssl);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNotNull(webSocketClient0);
      
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler();
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(webSocketClient0.base64Nonce);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected Sec-WebSocket-Accept header from server
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.aFileURI;
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getHost());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals("file", uRI0.getScheme());
          assertNotNull(uRI0);
          
          URI uRI1 = MockURI.relativize(uRI0, uRI0);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getHost());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI1.getRawFragment());
          assertFalse(uRI1.isOpaque());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertFalse(uRI1.isAbsolute());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertFalse(uRI1.equals((Object)uRI0));
          assertNotNull(uRI1);
          
          WebSocketHandler webSocketHandler0 = null;
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getHost());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI1.getRawFragment());
          assertFalse(uRI1.isOpaque());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertFalse(uRI1.isAbsolute());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(webSocketClient0);
          
          WebSocketClient webSocketClient1 = webSocketClient0.start();
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getHost());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI1.getRawFragment());
          assertFalse(uRI1.isOpaque());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertFalse(uRI1.isAbsolute());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(webSocketClient1);
          
          byte[] byteArray0 = new byte[3];
          byte byte0 = (byte) (-6);
          byteArray0[0] = byte0;
          byte byte1 = (byte)0;
          byteArray0[0] = byte1;
          byte byte2 = (byte)0;
          EvoSuiteFile evoSuiteFile0 = null;
          boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
          assertFalse(boolean0);
          
          byteArray0[2] = byte2;
          WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getHost());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI1.getRawFragment());
          assertFalse(uRI1.isOpaque());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertFalse(uRI1.isAbsolute());
          assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(webSocketClient_HandshakeChannelHandler0);
          assertEquals(3, byteArray0.length);
          assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
          
          ChannelHandler[] channelHandlerArray0 = new ChannelHandler[1];
          channelHandlerArray0[0] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
          StaticChannelPipeline staticChannelPipeline0 = new StaticChannelPipeline(channelHandlerArray0);
          assertFalse(staticChannelPipeline0.isAttached());
          assertNotNull(staticChannelPipeline0);
          assertEquals(1, channelHandlerArray0.length);
          
          Class<ChannelHandler> class0 = ChannelHandler.class;
          ChannelHandlerContext channelHandlerContext0 = staticChannelPipeline0.getContext(class0);
          assertFalse(staticChannelPipeline0.isAttached());
          assertFalse(channelHandlerContext0.canHandleDownstream());
          assertEquals("0", channelHandlerContext0.getName());
          assertTrue(channelHandlerContext0.canHandleUpstream());
          assertNotNull(channelHandlerContext0);
          assertEquals(1, channelHandlerArray0.length);
          
          DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
          assertNotNull(defaultLocalClientChannelFactory0);
          
          LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(staticChannelPipeline0);
          assertTrue(staticChannelPipeline0.isAttached());
          assertTrue(localChannel0.isOpen());
          assertEquals(126, (int)localChannel0.getId());
          assertNotNull(localChannel0);
          assertEquals(1, channelHandlerArray0.length);
          
          int int0 = (-694);
          SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(webSocketClient1.ACCEPT_GUID, webSocketClient1.base64Nonce, int0);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getHost());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI1.getRawFragment());
          assertFalse(uRI1.isOpaque());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertFalse(uRI1.isAbsolute());
          assertEquals((-694), sQLSyntaxErrorException0.getErrorCode());
          assertEquals("ABkzTGaAmbPM5gAZM0xmgA==", sQLSyntaxErrorException0.getSQLState());
          assertEquals("258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.getMessage());
          assertEquals("java.sql.SQLSyntaxErrorException: 258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.toString());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(sQLSyntaxErrorException0);
          
          SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(webSocketClient1.ACCEPT_GUID, sQLSyntaxErrorException0);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getHost());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI1.getRawFragment());
          assertFalse(uRI1.isOpaque());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertFalse(uRI1.isAbsolute());
          assertEquals((-694), sQLSyntaxErrorException0.getErrorCode());
          assertEquals("ABkzTGaAmbPM5gAZM0xmgA==", sQLSyntaxErrorException0.getSQLState());
          assertEquals("258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.getMessage());
          assertEquals("java.sql.SQLSyntaxErrorException: 258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.toString());
          assertEquals("258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException1.getMessage());
          assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
          assertNull(sQLSyntaxErrorException1.getSQLState());
          assertEquals("java.sql.SQLSyntaxErrorException: 258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException1.toString());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(sQLSyntaxErrorException1);
          
          sQLSyntaxErrorException0.setNextException(sQLSyntaxErrorException1);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getHost());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI1.getRawFragment());
          assertFalse(uRI1.isOpaque());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertFalse(uRI1.isAbsolute());
          assertEquals((-694), sQLSyntaxErrorException0.getErrorCode());
          assertEquals("ABkzTGaAmbPM5gAZM0xmgA==", sQLSyntaxErrorException0.getSQLState());
          assertEquals("258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.getMessage());
          assertEquals("java.sql.SQLSyntaxErrorException: 258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.toString());
          assertEquals("258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException1.getMessage());
          assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
          assertNull(sQLSyntaxErrorException1.getSQLState());
          assertEquals("java.sql.SQLSyntaxErrorException: 258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException1.toString());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
          assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
          assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          
          DefaultExceptionEvent defaultExceptionEvent0 = new DefaultExceptionEvent(localChannel0, sQLSyntaxErrorException0);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getHost());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals("file", uRI0.getScheme());
          assertTrue(staticChannelPipeline0.isAttached());
          assertNull(uRI1.getRawFragment());
          assertFalse(uRI1.isOpaque());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertFalse(uRI1.isAbsolute());
          assertTrue(localChannel0.isOpen());
          assertEquals(126, (int)localChannel0.getId());
          assertEquals((-694), sQLSyntaxErrorException0.getErrorCode());
          assertEquals("ABkzTGaAmbPM5gAZM0xmgA==", sQLSyntaxErrorException0.getSQLState());
          assertEquals("258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.getMessage());
          assertEquals("java.sql.SQLSyntaxErrorException: 258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.toString());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(defaultExceptionEvent0);
          assertEquals(1, channelHandlerArray0.length);
          
          webSocketClient_HandshakeChannelHandler0.exceptionCaught(channelHandlerContext0, defaultExceptionEvent0);
          assertNull(uRI0.getRawQuery());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getHost());
          assertEquals((-1), uRI0.getPort());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals("file", uRI0.getScheme());
          assertNull(uRI1.getRawFragment());
          assertFalse(uRI1.isOpaque());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getScheme());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawQuery());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertFalse(uRI1.isAbsolute());
          assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
          assertTrue(staticChannelPipeline0.isAttached());
          assertFalse(channelHandlerContext0.canHandleDownstream());
          assertEquals("0", channelHandlerContext0.getName());
          assertTrue(channelHandlerContext0.canHandleUpstream());
          assertTrue(localChannel0.isOpen());
          assertEquals(126, (int)localChannel0.getId());
          assertEquals((-694), sQLSyntaxErrorException0.getErrorCode());
          assertEquals("ABkzTGaAmbPM5gAZM0xmgA==", sQLSyntaxErrorException0.getSQLState());
          assertEquals("258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.getMessage());
          assertEquals("java.sql.SQLSyntaxErrorException: 258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.toString());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertEquals(3, byteArray0.length);
          assertEquals(1, channelHandlerArray0.length);
          assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
          
          String string0 = "ETh8iZEQiEVJWf+Y1k96C3maxCI=";
          // Undeclared exception!
          try { 
            webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(string0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Sec-WebSocket-Accept header from server didn't match expected value of run9WXat3Qk6p0bAlLq2oa0+ABU=
             //
             verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)48;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-69);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-20);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-120);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-24);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-76);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-33);
      byteArray0[6] = byte6;
      byte byte7 = (byte)81;
      byteArray0[7] = byte7;
      int int0 = 1;
      int int1 = 101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, int1);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-69), (byte) (-20), (byte) (-120), (byte) (-24), (byte) (-76), (byte) (-33), (byte)81}, byteArray0);
      
      int int2 = (-632);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient0);
      
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler();
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected Sec-WebSocket-Accept header from server
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNotNull(webSocketClient0);
      
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler();
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      webSocketClient_HandshakeChannelHandler0.outboundMaskingKey = byteArray0;
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      
      String string0 = "NX)0,g?0";
      // Undeclared exception!
      try { 
        webSocketClient_HandshakeChannelHandler0.verifySecWebSocketAccept(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient0);
      
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler();
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertEquals(1L, WebSocketClient.nextId);
      assertFalse(webSocketClient0.ssl);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[7];
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Class<ChannelHandler> class0 = ChannelHandler.class;
      ChannelHandler channelHandler0 = defaultChannelPipeline0.get(class0);
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channelHandler0);
      
      channelHandlerArray0[0] = channelHandler0;
      channelHandlerArray0[1] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
      channelHandlerArray0[2] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
      channelHandlerArray0[3] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
      channelHandlerArray0[4] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
      channelHandlerArray0[5] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
      channelHandlerArray0[6] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
      StaticChannelPipeline staticChannelPipeline0 = new StaticChannelPipeline(channelHandlerArray0);
      assertFalse(staticChannelPipeline0.isAttached());
      assertNotNull(staticChannelPipeline0);
      assertEquals(7, channelHandlerArray0.length);
      
      ChannelHandlerContext channelHandlerContext0 = staticChannelPipeline0.getContext(class0);
      assertFalse(staticChannelPipeline0.isAttached());
      assertNull(channelHandlerContext0);
      assertEquals(7, channelHandlerArray0.length);
      
      ExceptionEvent exceptionEvent0 = null;
      try { 
        webSocketClient_HandshakeChannelHandler0.exceptionCaught(channelHandlerContext0, exceptionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.aFileURI;
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertEquals("file", uRI0.getScheme());
          assertNotNull(uRI0);
          
          URI uRI1 = MockURI.relativize(uRI0, uRI0);
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertEquals("file", uRI0.getScheme());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawQuery());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawAuthority());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertEquals("", uRI1.toString());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertFalse(uRI1.equals((Object)uRI0));
          assertNotNull(uRI1);
          
          WebSocketHandler webSocketHandler0 = null;
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertEquals("file", uRI0.getScheme());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawQuery());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawAuthority());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertEquals("", uRI1.toString());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient0.ssl);
          assertNotNull(webSocketClient0);
          
          WebSocketClient webSocketClient1 = webSocketClient0.start();
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertEquals("file", uRI0.getScheme());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawQuery());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawAuthority());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertEquals("", uRI1.toString());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient0.ssl);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(webSocketClient1);
          
          byte[] byteArray0 = new byte[3];
          byte byte0 = (byte) (-6);
          byteArray0[0] = byte0;
          byte byte1 = (byte)0;
          byteArray0[1] = byte1;
          byte byte2 = (byte)0;
          byteArray0[2] = byte2;
          WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertEquals("file", uRI0.getScheme());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawQuery());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawAuthority());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertEquals("", uRI1.toString());
          assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient0.ssl);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(webSocketClient_HandshakeChannelHandler0);
          assertEquals(3, byteArray0.length);
          assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte)0}, byteArray0);
          
          ChannelHandler[] channelHandlerArray0 = new ChannelHandler[1];
          channelHandlerArray0[0] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
          StaticChannelPipeline staticChannelPipeline0 = new StaticChannelPipeline(channelHandlerArray0);
          assertFalse(staticChannelPipeline0.isAttached());
          assertNotNull(staticChannelPipeline0);
          assertEquals(1, channelHandlerArray0.length);
          
          Class<ChannelHandler> class0 = ChannelHandler.class;
          ChannelHandlerContext channelHandlerContext0 = staticChannelPipeline0.getContext(class0);
          assertEquals("0", channelHandlerContext0.getName());
          assertFalse(channelHandlerContext0.canHandleDownstream());
          assertTrue(channelHandlerContext0.canHandleUpstream());
          assertFalse(staticChannelPipeline0.isAttached());
          assertNotNull(channelHandlerContext0);
          assertEquals(1, channelHandlerArray0.length);
          
          DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
          assertNotNull(defaultLocalClientChannelFactory0);
          
          LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(staticChannelPipeline0);
          assertEquals(71, (int)localChannel0.getId());
          assertTrue(localChannel0.isOpen());
          assertTrue(staticChannelPipeline0.isAttached());
          assertNotNull(localChannel0);
          assertEquals(1, channelHandlerArray0.length);
          
          int int0 = (-694);
          SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(webSocketClient1.ACCEPT_GUID, webSocketClient1.base64Nonce, int0);
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertEquals("file", uRI0.getScheme());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawQuery());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawAuthority());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertEquals("", uRI1.toString());
          assertEquals("258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.getMessage());
          assertEquals((-694), sQLSyntaxErrorException0.getErrorCode());
          assertEquals("java.sql.SQLSyntaxErrorException: 258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.toString());
          assertEquals("ABkzTGaAmbPM5gAZM0xmgA==", sQLSyntaxErrorException0.getSQLState());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient0.ssl);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(sQLSyntaxErrorException0);
          
          DefaultExceptionEvent defaultExceptionEvent0 = new DefaultExceptionEvent(localChannel0, sQLSyntaxErrorException0);
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertEquals("file", uRI0.getScheme());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawQuery());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawAuthority());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertEquals("", uRI1.toString());
          assertEquals(71, (int)localChannel0.getId());
          assertTrue(localChannel0.isOpen());
          assertEquals("258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.getMessage());
          assertEquals((-694), sQLSyntaxErrorException0.getErrorCode());
          assertEquals("java.sql.SQLSyntaxErrorException: 258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.toString());
          assertEquals("ABkzTGaAmbPM5gAZM0xmgA==", sQLSyntaxErrorException0.getSQLState());
          assertTrue(staticChannelPipeline0.isAttached());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient0.ssl);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(defaultExceptionEvent0);
          assertEquals(1, channelHandlerArray0.length);
          
          webSocketClient_HandshakeChannelHandler0.exceptionCaught(channelHandlerContext0, defaultExceptionEvent0);
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawAuthority());
          assertFalse(uRI0.isOpaque());
          assertNull(uRI0.getRawUserInfo());
          assertTrue(uRI0.isAbsolute());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertEquals((-1), uRI0.getPort());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertNull(uRI0.getHost());
          assertEquals("file", uRI0.getScheme());
          assertFalse(uRI1.isAbsolute());
          assertNull(uRI1.getHost());
          assertNull(uRI1.getRawQuery());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getRawAuthority());
          assertFalse(uRI1.isOpaque());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertEquals("", uRI1.toString());
          assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
          assertTrue(staticChannelPipeline0.isAttached());
          assertEquals("0", channelHandlerContext0.getName());
          assertFalse(channelHandlerContext0.canHandleDownstream());
          assertTrue(channelHandlerContext0.canHandleUpstream());
          assertEquals(71, (int)localChannel0.getId());
          assertTrue(localChannel0.isOpen());
          assertEquals("258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.getMessage());
          assertEquals((-694), sQLSyntaxErrorException0.getErrorCode());
          assertEquals("java.sql.SQLSyntaxErrorException: 258EAFA5-E914-47DA-95CA-C5AB0DC85B11", sQLSyntaxErrorException0.toString());
          assertEquals("ABkzTGaAmbPM5gAZM0xmgA==", sQLSyntaxErrorException0.getSQLState());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient0.ssl);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertEquals(3, byteArray0.length);
          assertEquals(1, channelHandlerArray0.length);
          assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte)0}, byteArray0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNotNull(uRI0);
      
      WebSocketHandler webSocketHandler0 = mock(WebSocketHandler.class, new ViolatedAssumptionAnswer());
      WebSocketClient webSocketClient0 = new WebSocketClient();
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNotNull(webSocketClient0);
      
      long long0 = (-2382L);
      ReconnectingWebSocketHandler reconnectingWebSocketHandler0 = new ReconnectingWebSocketHandler(webSocketHandler0, webSocketClient0, long0);
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNotNull(reconnectingWebSocketHandler0);
      
      byte[] byteArray0 = new byte[8];
      int int0 = 920;
      Random.setNextRandom(int0);
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)38;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-88);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)88;
      byteArray0[5] = byte5;
      byte byte6 = (byte)45;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-79);
      byteArray0[7] = byte7;
      WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient0.new HandshakeChannelHandler(byteArray0);
      assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNotNull(webSocketClient_HandshakeChannelHandler0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-88), (byte)0, (byte)88, (byte)45, (byte) (-79)}, byteArray0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      ChannelHandlerContext channelHandlerContext0 = defaultChannelPipeline0.getContext(webSocketClient0.ACCEPT_GUID);
      assertFalse(defaultChannelPipeline0.isAttached());
      assertFalse(webSocketClient0.ssl);
      assertEquals(1L, WebSocketClient.nextId);
      assertNull(channelHandlerContext0);
      
      MessageEvent messageEvent0 = null;
      try { 
        webSocketClient_HandshakeChannelHandler0.messageReceived(channelHandlerContext0, messageEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.aFileURI;
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertTrue(uRI0.isAbsolute());
          assertEquals("file", uRI0.getScheme());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getHost());
          assertNotNull(uRI0);
          
          URI uRI1 = MockURI.relativize(uRI0, uRI0);
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertTrue(uRI0.isAbsolute());
          assertEquals("file", uRI0.getScheme());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertFalse(uRI1.isAbsolute());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertFalse(uRI1.equals((Object)uRI0));
          assertNotNull(uRI1);
          
          WebSocketHandler webSocketHandler0 = null;
          WebSocketClient webSocketClient0 = new WebSocketClient(uRI1, webSocketHandler0);
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertTrue(uRI0.isAbsolute());
          assertEquals("file", uRI0.getScheme());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertFalse(uRI1.isAbsolute());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(webSocketClient0);
          
          WebSocketClient webSocketClient1 = webSocketClient0.start();
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertTrue(uRI0.isAbsolute());
          assertEquals("file", uRI0.getScheme());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertFalse(uRI1.isAbsolute());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(webSocketClient1, webSocketClient0);
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(webSocketClient1);
          
          byte[] byteArray0 = new byte[3];
          byte byte0 = (byte) (-6);
          byteArray0[0] = byte0;
          byte byte1 = (byte)0;
          byteArray0[0] = byte1;
          byte byte2 = (byte)0;
          byteArray0[2] = byte2;
          WebSocketClient.HandshakeChannelHandler webSocketClient_HandshakeChannelHandler0 = webSocketClient1.new HandshakeChannelHandler(byteArray0);
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertTrue(uRI0.isAbsolute());
          assertEquals("file", uRI0.getScheme());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertFalse(uRI1.isAbsolute());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(webSocketClient_HandshakeChannelHandler0);
          assertEquals(3, byteArray0.length);
          assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
          
          ChannelHandler[] channelHandlerArray0 = new ChannelHandler[1];
          channelHandlerArray0[0] = (ChannelHandler) webSocketClient_HandshakeChannelHandler0;
          StaticChannelPipeline staticChannelPipeline0 = new StaticChannelPipeline(channelHandlerArray0);
          assertFalse(staticChannelPipeline0.isAttached());
          assertNotNull(staticChannelPipeline0);
          assertEquals(1, channelHandlerArray0.length);
          
          Class<ChannelHandler> class0 = ChannelHandler.class;
          ChannelHandlerContext channelHandlerContext0 = staticChannelPipeline0.getContext(class0);
          assertTrue(channelHandlerContext0.canHandleUpstream());
          assertFalse(channelHandlerContext0.canHandleDownstream());
          assertEquals("0", channelHandlerContext0.getName());
          assertFalse(staticChannelPipeline0.isAttached());
          assertNotNull(channelHandlerContext0);
          assertEquals(1, channelHandlerArray0.length);
          
          DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
          assertNotNull(defaultLocalClientChannelFactory0);
          
          SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
          assertNull(sQLClientInfoException0.getMessage());
          assertNull(sQLClientInfoException0.getSQLState());
          assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
          assertEquals(0, sQLClientInfoException0.getErrorCode());
          assertNotNull(sQLClientInfoException0);
          
          FailedChannelFuture failedChannelFuture0 = new FailedChannelFuture(webSocketClient1.channel, sQLClientInfoException0);
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertTrue(uRI0.isAbsolute());
          assertEquals("file", uRI0.getScheme());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertFalse(uRI1.isAbsolute());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertNull(sQLClientInfoException0.getMessage());
          assertNull(sQLClientInfoException0.getSQLState());
          assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
          assertEquals(0, sQLClientInfoException0.getErrorCode());
          assertFalse(failedChannelFuture0.isSuccess());
          assertFalse(failedChannelFuture0.cancel());
          assertFalse(failedChannelFuture0.isCancelled());
          assertFalse(failedChannelFuture0.setSuccess());
          assertTrue(failedChannelFuture0.isDone());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(failedChannelFuture0);
          
          ChannelFuture channelFuture0 = failedChannelFuture0.awaitUninterruptibly();
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertTrue(uRI0.isAbsolute());
          assertEquals("file", uRI0.getScheme());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertFalse(uRI1.isAbsolute());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertNull(sQLClientInfoException0.getMessage());
          assertNull(sQLClientInfoException0.getSQLState());
          assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
          assertEquals(0, sQLClientInfoException0.getErrorCode());
          assertFalse(failedChannelFuture0.isSuccess());
          assertFalse(failedChannelFuture0.cancel());
          assertFalse(failedChannelFuture0.isCancelled());
          assertFalse(failedChannelFuture0.setSuccess());
          assertTrue(failedChannelFuture0.isDone());
          assertFalse(channelFuture0.cancel());
          assertFalse(channelFuture0.setSuccess());
          assertTrue(channelFuture0.isDone());
          assertFalse(channelFuture0.isSuccess());
          assertFalse(channelFuture0.isCancelled());
          assertNotSame(uRI0, uRI1);
          assertNotSame(uRI1, uRI0);
          assertSame(webSocketClient0, webSocketClient1);
          assertSame(failedChannelFuture0, channelFuture0);
          assertSame(webSocketClient1, webSocketClient0);
          assertSame(channelFuture0, failedChannelFuture0);
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(channelFuture0);
          
          DownstreamMessageEvent downstreamMessageEvent0 = new DownstreamMessageEvent(webSocketClient1.channel, channelFuture0, webSocketClient_HandshakeChannelHandler0, webSocketClient1.remoteAddress);
          assertFalse(uRI0.isOpaque());
          assertEquals((-1), uRI0.getPort());
          assertNull(uRI0.getRawAuthority());
          assertTrue(uRI0.isAbsolute());
          assertEquals("file", uRI0.getScheme());
          assertEquals("file:///tmp/foo.bar", uRI0.toString());
          assertNull(uRI0.getRawQuery());
          assertEquals("/tmp/foo.bar", uRI0.getRawPath());
          assertNull(uRI0.getRawFragment());
          assertNull(uRI0.getRawUserInfo());
          assertNull(uRI0.getHost());
          assertNull(uRI1.getRawUserInfo());
          assertNull(uRI1.getRawFragment());
          assertNull(uRI1.getRawAuthority());
          assertNull(uRI1.getRawQuery());
          assertFalse(uRI1.isOpaque());
          assertFalse(uRI1.isAbsolute());
          assertEquals((-1), uRI1.getPort());
          assertNull(uRI1.getHost());
          assertEquals("", uRI1.toString());
          assertEquals("", uRI1.getRawPath());
          assertNull(uRI1.getScheme());
          assertNull(sQLClientInfoException0.getMessage());
          assertNull(sQLClientInfoException0.getSQLState());
          assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
          assertEquals(0, sQLClientInfoException0.getErrorCode());
          assertFalse(failedChannelFuture0.isSuccess());
          assertFalse(failedChannelFuture0.cancel());
          assertFalse(failedChannelFuture0.isCancelled());
          assertFalse(failedChannelFuture0.setSuccess());
          assertTrue(failedChannelFuture0.isDone());
          assertFalse(channelFuture0.cancel());
          assertFalse(channelFuture0.setSuccess());
          assertTrue(channelFuture0.isDone());
          assertFalse(channelFuture0.isSuccess());
          assertFalse(channelFuture0.isCancelled());
          assertEquals(1392409281320L, webSocketClient_HandshakeChannelHandler0.timestamp());
          assertFalse(uRI0.equals((Object)uRI1));
          assertFalse(uRI1.equals((Object)uRI0));
          assertFalse(webSocketClient0.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertFalse(webSocketClient1.ssl);
          assertEquals(1L, WebSocketClient.nextId);
          assertNotNull(downstreamMessageEvent0);
          assertEquals(3, byteArray0.length);
          assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
          
          try { 
            webSocketClient_HandshakeChannelHandler0.messageReceived(channelHandlerContext0, downstreamMessageEvent0);
            fail("Expecting exception: ClassCastException");
          
          } catch(ClassCastException e) {
             //
             // org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler cannot be cast to org.jboss.netty.handler.codec.http.HttpResponse
             //
             verifyException("org.webbitserver.netty.WebSocketClient$HandshakeChannelHandler", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }
}
