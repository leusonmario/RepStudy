/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 01:47:29 GMT 2021
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.BufferedTokenStream;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenSource;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.SourceGenTriggers;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.runtime.misc.OrderedHashSet;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.LexerGrammar;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.PredAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = "$";
      String string1 = StringRenderer.escapeHTML(string0);
      assertNotNull(string1);
      assertEquals("$", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertTrue(string0.equals((Object)string1));
      assertEquals("", locale0.getVariant());
      assertEquals("$", locale0.getLanguage());
      assertEquals("$", locale0.getCountry());
      assertEquals("$_$", locale0.toString());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) locale0, string1, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      int int0 = 673;
      STGroup sTGroup0 = python2Target0.getTemplates();
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertNotNull(sTGroup0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      CommonToken commonToken0 = (CommonToken)Token.INVALID_TOKEN;
      assertNotNull(commonToken0);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      
      GrammarAST grammarAST0 = new GrammarAST(int0, commonToken0, sTGroup0.DEFAULT_KEY);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals((-1), grammarAST0.childIndex);
      assertNotNull(grammarAST0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(673, grammarAST0.getType());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(673, grammarAST0.getType());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      
      boolean boolean2 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      boolean boolean3 = python2Target0.wantsBaseListener();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      String string0 = "float";
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer();
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertNotNull(aNTLRLexer0);
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      
      CommonToken commonToken0 = new CommonToken(aNTLRLexer0.DOLLAR, string0);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertNotNull(commonToken0);
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(19, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      
      PredAST predAST0 = new PredAST(commonToken0);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals((-1), predAST0.childIndex);
      assertNotNull(predAST0);
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(19, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(19, predAST0.getType());
      assertFalse(predAST0.isNil());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getLine());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals((-1), predAST0.childIndex);
      assertTrue(boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(19, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(19, predAST0.getType());
      assertFalse(predAST0.isNil());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getLine());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      OrderedHashSet<String> orderedHashSet0 = new OrderedHashSet<String>();
      assertNotNull(orderedHashSet0);
      assertTrue(orderedHashSet0.isEmpty());
      assertEquals(0, orderedHashSet0.size());
      
      python2Target0.badWords = (Set<String>) orderedHashSet0;
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertTrue(orderedHashSet0.isEmpty());
      assertEquals(0, orderedHashSet0.size());
      assertTrue(python2Target0.badWords.isEmpty());
      assertEquals(0, python2Target0.badWords.size());
      
      boolean boolean0 = orderedHashSet0.add(python2Target0.language);
      assertTrue(boolean0);
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(orderedHashSet0.isEmpty());
      assertEquals(1, orderedHashSet0.size());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      int int0 = 0;
      AltAST altAST0 = new AltAST(int0);
      assertEquals((-1), altAST0.childIndex);
      assertNotNull(altAST0);
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getType());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertEquals((-1), altAST0.childIndex);
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getType());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = "/Dsdx-";
      String string1 = null;
      Python2Target.python2Keywords = python2Target0.python2Keywords;
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      Locale locale0 = null;
      try {
        locale0 = new Locale(string0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      int int0 = 0;
      GrammarAST grammarAST0 = new GrammarAST(int0);
      assertEquals((-1), grammarAST0.childIndex);
      assertNotNull(grammarAST0);
      assertEquals(0, grammarAST0.getType());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertFalse(grammarAST0.isNil());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(0, grammarAST0.getType());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertFalse(grammarAST0.isNil());
      
      String string0 = null;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      
      STGroup sTGroup0 = null;
      python2Target0.templates = sTGroup0;
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      
      boolean boolean1 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      
      String string0 = python2Target0.getVersion();
      assertNotNull(string0);
      assertEquals("4.5.2.1", string0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertNotNull(sTGroup0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      int int0 = 36;
      STGroup sTGroup1 = python2Target0.getTemplates();
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup1);
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup1.getFileName());
      assertNotSame(sTGroup1, sTGroup0);
      
      String string0 = python2Target0.encodeIntAsCharEscape(int0);
      assertNotNull(string0);
      assertEquals("$", string0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      boolean boolean1 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      int int1 = (-1505);
      CommonToken commonToken0 = (CommonToken)Token.INVALID_TOKEN;
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      
      GrammarAST grammarAST0 = new GrammarAST(int0, commonToken0, sTGroup1.DEFAULT_KEY);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals((-1), grammarAST0.childIndex);
      assertNotNull(grammarAST0);
      assertFalse(int0 == int1);
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup1.getFileName());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(36, grammarAST0.getType());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      
      boolean boolean2 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(boolean2);
      assertFalse(int0 == int1);
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup1.getFileName());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(36, grammarAST0.getType());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertNotSame(sTGroup1, sTGroup0);
      
      boolean boolean3 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      STGroup sTGroup2 = python2Target0.loadTemplates();
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup2.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('<', sTGroup2.delimiterStartChar);
      assertEquals('>', sTGroup2.delimiterStopChar);
      assertNotNull(sTGroup2);
      assertFalse(sTGroup2.equals((Object)sTGroup0));
      assertFalse(sTGroup2.equals((Object)sTGroup1));
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup2.getFileName());
      assertNotSame(sTGroup2, sTGroup0);
      assertNotSame(sTGroup2, sTGroup1);
      
      boolean boolean4 = python2Target0.wantsBaseListener();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string1 = "";
      STGroup sTGroup3 = python2Target0.loadTemplates();
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup3.iterateAcrossValues);
      assertEquals('>', sTGroup3.delimiterStopChar);
      assertEquals('<', sTGroup3.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup3);
      assertFalse(sTGroup3.equals((Object)sTGroup1));
      assertFalse(sTGroup3.equals((Object)sTGroup0));
      assertFalse(sTGroup3.equals((Object)sTGroup2));
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup3.getFileName());
      assertNotSame(sTGroup3, sTGroup1);
      assertNotSame(sTGroup3, sTGroup0);
      assertNotSame(sTGroup3, sTGroup2);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "5p@`";
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString(object0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = "";
      String string1 = "-*v#07B.c;1n;";
      String string2 = StringRenderer.escapeHTML(string1);
      assertNotNull(string2);
      assertEquals("-*v#07B.c&#127;;1n;", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      String string3 = python2Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      
      String string4 = "";
      LexerGrammar lexerGrammar0 = null;
      try {
        lexerGrammar0 = new LexerGrammar(string4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertNotNull(sTGroup0);
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        python2Target0.getAltLabelContextStructName(string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      int int0 = 0;
      ActionAST actionAST0 = new ActionAST(int0);
      assertEquals((-1), actionAST0.childIndex);
      assertNotNull(actionAST0);
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getType());
      
      ActionAST actionAST1 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      
      CodeGenerator codeGenerator0 = null;
      String string0 = "Python2";
      boolean boolean0 = false;
      String string1 = python2Target0.getTargetStringLiteralFromANTLRStringLiteral(codeGenerator0, string0, boolean0);
      assertNotNull(string1);
      assertEquals("ython", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      String string2 = "float";
      StringReader stringReader0 = new StringReader(string2);
      assertNotNull(stringReader0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = (-1840700268);
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream(stringReader0, int0);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertNotNull(aNTLRReaderStream0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(5, aNTLRReaderStream0.size());
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(aNTLRReaderStream0, recognizerSharedState0);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, ANTLRLexer.LT);
      assertNotNull(aNTLRLexer0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(5, aNTLRReaderStream0.size());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(1, aNTLRLexer0.getLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      
      CommonToken commonToken0 = (CommonToken)aNTLRLexer0.nextToken();
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(1, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(57, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, ANTLRLexer.LT);
      assertNotNull(commonToken0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(5, aNTLRReaderStream0.index());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(5, aNTLRReaderStream0.size());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(5, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(1, commonToken0.getLine());
      assertEquals(57, commonToken0.getType());
      assertEquals(4, commonToken0.getStopIndex());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      PredAST predAST0 = new PredAST(commonToken0);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(1, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(57, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals((-1), predAST0.childIndex);
      assertNotNull(predAST0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(5, aNTLRReaderStream0.index());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(5, aNTLRReaderStream0.size());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(5, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(1, commonToken0.getLine());
      assertEquals(57, commonToken0.getType());
      assertEquals(4, commonToken0.getStopIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(57, predAST0.getType());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(1, predAST0.getLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertFalse(predAST0.isNil());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(1, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(57, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals((-1), predAST0.childIndex);
      assertTrue(boolean1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(5, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals(5, aNTLRReaderStream0.index());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(5, aNTLRReaderStream0.size());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(5, aNTLRLexer0.getCharPositionInLine());
      assertEquals(1, aNTLRLexer0.getLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(1, commonToken0.getLine());
      assertEquals(57, commonToken0.getType());
      assertEquals(4, commonToken0.getStopIndex());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(57, predAST0.getType());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(1, predAST0.getLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertFalse(predAST0.isNil());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      CodeGenerator codeGenerator0 = null;
      String string0 = "Python2";
      boolean boolean0 = false;
      String string1 = python2Target0.getTargetStringLiteralFromANTLRStringLiteral(codeGenerator0, string0, boolean0);
      assertNotNull(string1);
      assertEquals("ython", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      String string2 = "float";
      StringReader stringReader0 = new StringReader(string2);
      assertNotNull(stringReader0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = (-1840700269);
      ANTLRReaderStream aNTLRReaderStream0 = new ANTLRReaderStream(stringReader0, int0);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertNotNull(aNTLRReaderStream0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(5, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(1, aNTLRReaderStream0.getLine());
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(aNTLRReaderStream0, recognizerSharedState0);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(31, ANTLRLexer.LEXER);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertNotNull(aNTLRLexer0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, aNTLRReaderStream0.getCharPositionInLine());
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(5, aNTLRReaderStream0.size());
      assertEquals(0, aNTLRReaderStream0.index());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertFalse(aNTLRLexer0.failed());
      
      CommonToken commonToken0 = (CommonToken)aNTLRLexer0.nextToken();
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(1, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(57, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(31, ANTLRLexer.LEXER);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertNotNull(commonToken0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(5, aNTLRReaderStream0.size());
      assertEquals(5, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(5, aNTLRReaderStream0.index());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(5, aNTLRLexer0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(1, aNTLRLexer0.getLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(1, commonToken0.getLine());
      assertEquals(4, commonToken0.getStopIndex());
      assertEquals(57, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      int int1 = (-2638);
      commonToken0.setStartIndex(int1);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(1, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(57, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(31, ANTLRLexer.LEXER);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(5, aNTLRReaderStream0.size());
      assertEquals(5, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(5, aNTLRReaderStream0.index());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(5, aNTLRLexer0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(1, aNTLRLexer0.getLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(1, commonToken0.getLine());
      assertEquals(4, commonToken0.getStopIndex());
      assertEquals((-2638), commonToken0.getStartIndex());
      assertEquals(57, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      PredAST predAST0 = new PredAST(commonToken0);
      assertEquals(1024, ANTLRReaderStream.INITIAL_BUFFER_SIZE);
      assertEquals(1024, ANTLRReaderStream.READ_BUFFER_SIZE);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(1, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(57, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(31, ANTLRLexer.LEXER);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals((-1), predAST0.childIndex);
      assertNotNull(predAST0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      assertNull(aNTLRReaderStream0.getSourceName());
      assertEquals(5, aNTLRReaderStream0.size());
      assertEquals(5, aNTLRReaderStream0.getCharPositionInLine());
      assertEquals(5, aNTLRReaderStream0.index());
      assertEquals(1, aNTLRReaderStream0.getLine());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(5, aNTLRLexer0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(1, aNTLRLexer0.getLine());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(1, commonToken0.getLine());
      assertEquals(4, commonToken0.getStopIndex());
      assertEquals((-2638), commonToken0.getStartIndex());
      assertEquals(57, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertFalse(predAST0.isNil());
      assertEquals(1, predAST0.getLine());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(57, predAST0.getType());
      assertEquals((-1), predAST0.getTokenStopIndex());
      
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      Set<String> set0 = null;
      python2Target0.badWords = set0;
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      int int0 = 36;
      STGroup sTGroup0 = python2Target0.getTemplates();
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertNotNull(sTGroup0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      boolean boolean0 = python2Target0.templatesExist();
      assertTrue(boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      CommonToken commonToken0 = new CommonToken(sTGroup0.delimiterStartChar, python2Target0.language);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertNotNull(commonToken0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(60, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      
      boolean boolean1 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      // Undeclared exception!
      try { 
        python2Target0.getBadWords();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      String string0 = "float";
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer();
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(28, ANTLRLexer.ID);
      assertNotNull(aNTLRLexer0);
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      
      CommonToken commonToken0 = new CommonToken(aNTLRLexer0.DOLLAR, string0);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(28, ANTLRLexer.ID);
      assertNotNull(commonToken0);
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(19, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      
      String string1 = "CATCH";
      String string2 = "ARG_ACTION";
      Locale locale0 = new Locale(string1, string2);
      assertNotNull(locale0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ARG_ACTION", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("catch", locale0.getLanguage());
      assertEquals("catch_ARG_ACTION", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ARG_ACTION", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("catch", locale0.getLanguage());
      assertEquals("catch_ARG_ACTION", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      python2Target0.badWords = set0;
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("ARG_ACTION", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("catch", locale0.getLanguage());
      assertEquals("catch_ARG_ACTION", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(python2Target0.badWords.isEmpty());
      assertEquals(0, python2Target0.badWords.size());
      
      PredAST predAST0 = new PredAST(commonToken0);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals((-1), predAST0.childIndex);
      assertNotNull(predAST0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(19, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(19, predAST0.getType());
      assertEquals(0, predAST0.getChildCount());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertFalse(predAST0.isNil());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getCharPositionInLine());
      
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      python2Target0.badWords = set0;
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(python2Target0.badWords.isEmpty());
      assertEquals(0, python2Target0.badWords.size());
      
      // Undeclared exception!
      try { 
        python2Target0.getBadWords();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }
}
