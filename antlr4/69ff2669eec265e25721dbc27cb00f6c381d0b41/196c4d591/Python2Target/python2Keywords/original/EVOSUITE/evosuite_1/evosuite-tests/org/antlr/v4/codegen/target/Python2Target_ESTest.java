/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 00:55:33 GMT 2021
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      STGroup sTGroup0 = python2Target0.getTemplates();
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(sTGroup0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      RuleAST ruleAST0 = new RuleAST(sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals((-1), ruleAST0.childIndex);
      assertNotNull(ruleAST0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getLine());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals(60, ruleAST0.getType());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(ruleAST0);
      assertFalse(boolean1);
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals((-1), ruleAST0.childIndex);
      assertTrue(boolean1 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getLine());
      assertEquals((-1), ruleAST0.getTokenStartIndex());
      assertEquals(60, ruleAST0.getType());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertEquals((-1), ruleAST0.getTokenStopIndex());
      
      boolean boolean2 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      boolean boolean3 = python2Target0.wantsBaseListener();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      String string0 = "eJy";
      String string1 = python2Target0.getLanguage();
      assertEquals("Python2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotSame(string1, string0);
      
      CommonToken commonToken0 = (CommonToken)Token.SKIP_TOKEN;
      assertNotNull(commonToken0);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("", locale0.getISO3Country());
      assertEquals("ejy", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ejy", locale0.getLanguage());
      assertEquals("ejy", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string2 = python2Target_PythonStringRenderer0.toString((Object) string0, string1, locale0);
      assertEquals("Python2", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ejy", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ejy", locale0.getLanguage());
      assertEquals("ejy", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      BlockAST blockAST0 = new BlockAST(commonToken0);
      assertEquals((-1), blockAST0.childIndex);
      assertNotNull(blockAST0);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getType());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getLine());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertFalse(boolean0);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getType());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getLine());
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertFalse(boolean1);
      assertEquals((-1), blockAST0.childIndex);
      assertTrue(boolean1 == boolean0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getType());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getLine());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = "";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string1 = python2Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = (-339);
      Random.setNextRandom(int0);
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertNotNull(sTGroup0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      int int0 = (-3069);
      CommonTreeAdaptor commonTreeAdaptor0 = new CommonTreeAdaptor();
      assertNotNull(commonTreeAdaptor0);
      
      int int1 = 728;
      String string0 = null;
      CommonToken commonToken0 = (CommonToken)commonTreeAdaptor0.createToken(int1, string0);
      assertNotNull(commonToken0);
      assertFalse(int1 == int0);
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(728, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      
      ActionAST actionAST0 = new ActionAST(int0, commonToken0);
      assertEquals((-1), actionAST0.childIndex);
      assertNotNull(actionAST0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(728, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-3069), actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getChildCount());
      
      String string1 = python2Target0.getLoopCounter(actionAST0);
      assertEquals("cnt-1", string1);
      assertEquals((-1), actionAST0.childIndex);
      assertNotNull(string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(728, commonToken0.getType());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertFalse(actionAST0.isNil());
      assertEquals((-3069), actionAST0.getType());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getChildCount());
      
      String string2 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      String string0 = "!]IN8_%2d2i$o,:+";
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      boolean boolean0 = false;
      String string1 = python2Target0.getTargetStringLiteralFromANTLRStringLiteral(codeGenerator0, string0, boolean0);
      assertEquals("]IN8_%2d2i$o,:", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean1 = python2Target0.wantsBaseVisitor();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      python2Target0.addBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      
      Grammar grammar0 = null;
      int int0 = 335;
      // Undeclared exception!
      try { 
        python2Target0.getTokenTypeAsTargetLabel(grammar0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      python2Target0.addBadWords();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      int int0 = 2290;
      String string0 = ")'8]k\\u2~|o97fn";
      CommonToken commonToken0 = new CommonToken(int0, string0);
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(2290, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      
      AltAST altAST0 = new AltAST(int0, commonToken0);
      assertEquals((-1), altAST0.childIndex);
      assertNotNull(altAST0);
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(2290, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(2290, altAST0.getType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      
      AltAST altAST1 = new AltAST(altAST0);
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), altAST1.childIndex);
      assertNotNull(altAST1);
      assertFalse(altAST1.equals((Object)altAST0));
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(2290, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(2290, altAST0.getType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST1.getTokenStartIndex());
      assertEquals(0, altAST1.getLine());
      assertEquals((-1), altAST1.getChildIndex());
      assertEquals((-1), altAST1.getTokenStopIndex());
      assertEquals(0, altAST1.getChildCount());
      assertFalse(altAST1.isNil());
      assertEquals(2290, altAST1.getType());
      assertEquals(0, altAST1.getNumberOfOptions());
      assertEquals(0, altAST1.getCharPositionInLine());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST1);
      assertFalse(boolean0);
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), altAST1.childIndex);
      assertFalse(altAST0.equals((Object)altAST1));
      assertFalse(altAST1.equals((Object)altAST0));
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(2290, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(2290, altAST0.getType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-1), altAST1.getTokenStartIndex());
      assertEquals(0, altAST1.getLine());
      assertEquals((-1), altAST1.getChildIndex());
      assertEquals((-1), altAST1.getTokenStopIndex());
      assertEquals(0, altAST1.getChildCount());
      assertFalse(altAST1.isNil());
      assertEquals(2290, altAST1.getType());
      assertEquals(0, altAST1.getNumberOfOptions());
      assertEquals(0, altAST1.getCharPositionInLine());
      assertNotSame(altAST0, altAST1);
      assertNotSame(altAST1, altAST0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = "@wFffU!:tM;kiH";
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) python2Target0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.codegen.target.Python2Target cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      boolean boolean0 = python2Target0.templatesExist();
      assertTrue(boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      int int0 = 1000;
      String string0 = python2Target0.encodeIntAsCharEscape(int0);
      assertEquals("\\u03e8", string0);
      assertNotNull(string0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      
      Set<String> set1 = python2Target0.getBadWords();
      assertNotNull(set1);
      assertFalse(set1.contains(string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(85, set1.size());
      assertFalse(set1.isEmpty());
      assertSame(set1, set0);
      
      Set<String> set2 = python2Target0.getBadWords();
      assertNotNull(set2);
      assertFalse(set2.contains(string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(set2.isEmpty());
      assertEquals(85, set2.size());
      assertSame(set2, set0);
      assertSame(set2, set1);
      
      boolean boolean1 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      boolean boolean1 = python2Target0.templatesExist();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      int int0 = 1000;
      String string0 = python2Target0.encodeIntAsCharEscape(int0);
      assertEquals("\\u03e8", string0);
      assertNotNull(string0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      Set<String> set1 = python2Target0.getBadWords();
      assertNotNull(set1);
      assertFalse(set1.contains(string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(set1.isEmpty());
      assertEquals(85, set1.size());
      assertSame(set1, set0);
      
      Set<String> set2 = python2Target0.getBadWords();
      assertNotNull(set2);
      assertFalse(set2.contains(string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(set2.isEmpty());
      assertEquals(85, set2.size());
      assertSame(set2, set1);
      assertSame(set2, set0);
      
      boolean boolean2 = python2Target0.supportsOverloadedMethods();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      
      String string0 = "eval";
      String string1 = StringRenderer.escapeHTML(string0);
      assertEquals("eval", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 56;
      CommonToken commonToken0 = (CommonToken)Token.SKIP_TOKEN;
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      
      BlockAST blockAST0 = new BlockAST(int0, commonToken0, string1);
      assertEquals((-1), blockAST0.childIndex);
      assertNotNull(blockAST0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(56, blockAST0.getType());
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertTrue(boolean0);
      assertEquals((-1), blockAST0.childIndex);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertFalse(blockAST0.isNil());
      assertEquals(56, blockAST0.getType());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertNotNull(sTGroup0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string2 = python2Target_PythonStringRenderer0.toString((Object) string0, string1, locale0);
      assertEquals("eval", string2);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      String string0 = python2Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertNotNull(string0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      assertNotNull(aNTLRStringStream0);
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      
      int int0 = 127;
      int int1 = 1363;
      int int2 = (-2092);
      CommonToken commonToken0 = new CommonToken(aNTLRStringStream0, int0, int1, int2, int2);
      assertNotNull(commonToken0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1363, commonToken0.getChannel());
      assertEquals((-2092), commonToken0.getStopIndex());
      assertEquals(127, commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-2092), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      
      PredAST predAST0 = new PredAST(commonToken0);
      assertEquals((-1), predAST0.childIndex);
      assertNotNull(predAST0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1363, commonToken0.getChannel());
      assertEquals((-2092), commonToken0.getStopIndex());
      assertEquals(127, commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-2092), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(127, predAST0.getType());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertFalse(predAST0.isNil());
      
      PredAST predAST1 = new PredAST(predAST0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals((-1), predAST1.childIndex);
      assertNotNull(predAST1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(predAST1.equals((Object)predAST0));
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(1363, commonToken0.getChannel());
      assertEquals((-2092), commonToken0.getStopIndex());
      assertEquals(127, commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-2092), commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals(127, predAST0.getType());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST1.getNumberOfOptions());
      assertEquals((-1), predAST1.getTokenStartIndex());
      assertEquals((-1), predAST1.getTokenStopIndex());
      assertFalse(predAST1.isNil());
      assertEquals((-1), predAST1.getChildIndex());
      assertEquals(0, predAST1.getChildCount());
      assertEquals(127, predAST1.getType());
      assertEquals(0, predAST1.getLine());
      assertEquals(0, predAST1.getCharPositionInLine());
      
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
