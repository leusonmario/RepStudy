/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 02:46:13 GMT 2021
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BufferedTokenStream;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.tree.Tree;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.LexerFactory;
import org.antlr.v4.codegen.model.RuleFunction;
import org.antlr.v4.codegen.model.decl.Decl;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.tool.AttributeResolver;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.TerminalAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;
import org.stringtemplate.v4.compiler.CompiledST;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, int0);
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertTrue(boolean1 == boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean1);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      GrammarAST grammarAST0 = new GrammarAST();
      assertEquals((-1), grammarAST0.childIndex);
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertNotNull(grammarAST0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = python3Target_PythonStringRenderer0.toString((Object) codeGenerator0, grammarAST0.textOverride, locale0);
      assertEquals((-1), grammarAST0.childIndex);
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNull(string0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getLine());
      assertEquals(0, grammarAST0.getType());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertFalse(boolean1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      int int0 = (-491);
      CommonToken commonToken0 = new CommonToken(int0);
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-491), commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertNotNull(commonToken0);
      
      String string0 = "dir";
      AltAST altAST0 = new AltAST(int0, commonToken0, string0);
      assertEquals((-1), altAST0.childIndex);
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-491), commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-1), altAST0.getChildIndex());
      assertFalse(altAST0.isNil());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-491), altAST0.getType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertNotNull(altAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertEquals((-1), altAST0.childIndex);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-491), commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-1), altAST0.getChildIndex());
      assertFalse(altAST0.isNil());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals((-491), altAST0.getType());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        python3Target0.getImplicitTokenLabel(altAST0.textOverride);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      
      GrammarAST grammarAST0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)28;
      byteArray0[0] = byte0;
      byte byte1 = (byte)77;
      byteArray0[1] = byte1;
      byte byte2 = (byte)70;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-103);
      byteArray0[3] = byte3;
      byte byte4 = (byte)42;
      byteArray0[4] = byte4;
      byte byte5 = (byte)84;
      byteArray0[5] = byte5;
      byte byte6 = (byte)20;
      byteArray0[6] = byte6;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)28, (byte)77, (byte)70, (byte) (-103), (byte)42, (byte)84, (byte)20}, byteArray0);
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = null;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = python3Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNull(string1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer1 = new Python3Target.PythonStringRenderer();
      assertFalse(python3Target_PythonStringRenderer1.equals((Object)python3Target_PythonStringRenderer0));
      assertNotNull(python3Target_PythonStringRenderer1);
      
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean0);
      
      int int0 = 2329;
      ActionAST actionAST0 = null;
      try {
        actionAST0 = new ActionAST(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2329
         //
         verifyException("org.antlr.v4.tool.ast.GrammarAST", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, int0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      String string0 = python3Target0.getVersion();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(string0);
      assertEquals("4.5.2.1", string0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = "tuple";
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString(object0, string1, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      int int0 = 71;
      CommonToken commonToken0 = new CommonToken(int0);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(71, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertNotNull(commonToken0);
      
      CommonToken commonToken1 = new CommonToken(commonToken0);
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(71, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(71, commonToken1.getType());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertNotNull(commonToken1);
      
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream();
      assertEquals((-1), bufferedTokenStream0.index());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.range());
      assertNotNull(bufferedTokenStream0);
      
      GrammarRootAST grammarRootAST0 = new GrammarRootAST(commonToken1, bufferedTokenStream0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertEquals(0, grammarRootAST0.grammarType);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(71, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(71, commonToken1.getType());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), bufferedTokenStream0.index());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.range());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(71, grammarRootAST0.getType());
      assertFalse(grammarRootAST0.isNil());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertNotNull(grammarRootAST0);
      
      GrammarRootAST grammarRootAST1 = new GrammarRootAST(grammarRootAST0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertFalse(grammarRootAST1.equals((Object)grammarRootAST0));
      assertEquals(0, grammarRootAST0.grammarType);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertFalse(grammarRootAST1.hasErrors);
      assertEquals(0, grammarRootAST1.grammarType);
      assertEquals((-1), grammarRootAST1.childIndex);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(71, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(71, commonToken1.getType());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), bufferedTokenStream0.index());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.range());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(71, grammarRootAST0.getType());
      assertFalse(grammarRootAST0.isNil());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals((-1), grammarRootAST1.getTokenStopIndex());
      assertEquals(71, grammarRootAST1.getType());
      assertFalse(grammarRootAST1.isNil());
      assertEquals(0, grammarRootAST1.getNumberOfOptions());
      assertEquals((-1), grammarRootAST1.getTokenStartIndex());
      assertEquals(0, grammarRootAST1.getCharPositionInLine());
      assertEquals(0, grammarRootAST1.getLine());
      assertEquals(0, grammarRootAST1.getChildCount());
      assertEquals((-1), grammarRootAST1.getChildIndex());
      assertNotNull(grammarRootAST1);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarRootAST1);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertFalse(grammarRootAST0.equals((Object)grammarRootAST1));
      assertFalse(grammarRootAST1.equals((Object)grammarRootAST0));
      assertEquals(0, grammarRootAST0.grammarType);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertFalse(grammarRootAST1.hasErrors);
      assertEquals(0, grammarRootAST1.grammarType);
      assertEquals((-1), grammarRootAST1.childIndex);
      assertNotSame(commonToken0, commonToken1);
      assertNotSame(commonToken1, commonToken0);
      assertNotSame(grammarRootAST0, grammarRootAST1);
      assertNotSame(grammarRootAST1, grammarRootAST0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(71, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(71, commonToken1.getType());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), bufferedTokenStream0.index());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.range());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(71, grammarRootAST0.getType());
      assertFalse(grammarRootAST0.isNil());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals((-1), grammarRootAST1.getTokenStopIndex());
      assertEquals(71, grammarRootAST1.getType());
      assertFalse(grammarRootAST1.isNil());
      assertEquals(0, grammarRootAST1.getNumberOfOptions());
      assertEquals((-1), grammarRootAST1.getTokenStartIndex());
      assertEquals(0, grammarRootAST1.getCharPositionInLine());
      assertEquals(0, grammarRootAST1.getLine());
      assertEquals(0, grammarRootAST1.getChildCount());
      assertEquals((-1), grammarRootAST1.getChildIndex());
      assertFalse(boolean0);
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertTrue(boolean1 == boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean1);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = null;
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string1 = python3Target_PythonStringRenderer0.toString((Object) codeGenerator0, string0, locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNull(string1);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Tool tool0 = null;
      int int0 = 0;
      PredAST predAST0 = new PredAST(int0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals(0, predAST0.getLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertNotNull(predAST0);
      
      Grammar grammar0 = predAST0.g;
      assertNull(grammar0);
      
      predAST0.resolver = (AttributeResolver) grammar0;
      assertEquals(0, predAST0.getLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      
      CodeGenerator codeGenerator0 = new CodeGenerator(tool0, grammar0, grammar0.GRAMMAR_FROM_STRING_NAME);
      assertEquals((-1), predAST0.childIndex);
      assertEquals(72, codeGenerator0.lineWidth);
      assertEquals(0, predAST0.getLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertNotNull(codeGenerator0);
      
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals((-1), predAST0.childIndex);
      assertEquals(72, codeGenerator0.lineWidth);
      assertEquals(0, predAST0.getLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertEquals((-1), predAST0.childIndex);
      assertEquals(72, codeGenerator0.lineWidth);
      assertEquals(0, predAST0.getLine());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertFalse(predAST0.isNil());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Tool tool0 = null;
      Grammar grammar0 = null;
      String string0 = "PREC_RULE";
      CodeGenerator codeGenerator0 = new CodeGenerator(tool0, grammar0, string0);
      assertEquals(72, codeGenerator0.lineWidth);
      assertNotNull(codeGenerator0);
      
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(72, codeGenerator0.lineWidth);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertEquals(72, codeGenerator0.lineWidth);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
      
      boolean boolean1 = python3Target0.wantsBaseVisitor();
      assertTrue(boolean1 == boolean0);
      assertEquals(72, codeGenerator0.lineWidth);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        codeGenerator0.getBaseListenerFileName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.CodeGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Tool tool0 = null;
      Grammar grammar0 = null;
      String string0 = "$l9xXb|y";
      CodeGenerator codeGenerator0 = new CodeGenerator(tool0, grammar0, string0);
      assertEquals(72, codeGenerator0.lineWidth);
      assertNotNull(codeGenerator0);
      
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(72, codeGenerator0.lineWidth);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertEquals(72, codeGenerator0.lineWidth);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
      
      STGroup sTGroup0 = STGroup.defaultGroup;
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertNull(sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      
      boolean boolean1 = false;
      STGroup.trackCreationEvents = boolean1;
      CompiledST compiledST0 = null;
      // Undeclared exception!
      try { 
        sTGroup0.createStringTemplateInternally(compiledST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.stringtemplate.v4.STGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      String string0 = python3Target0.getVersion();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(string0);
      assertEquals("4.5.2.1", string0);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string1 = "6h";
      String string2 = StringRenderer.escapeHTML(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertEquals("6h", string2);
      
      String string3 = "SkW;}]U=";
      Locale locale0 = new Locale(string3, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("", locale0.getVariant());
      assertEquals("skw;}]u=", locale0.getLanguage());
      assertEquals("4.5.2.1", locale0.getCountry());
      assertEquals("skw;}]u=_4.5.2.1", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(locale1.equals((Object)locale0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("", locale0.getVariant());
      assertEquals("skw;}]u=", locale0.getLanguage());
      assertEquals("4.5.2.1", locale0.getCountry());
      assertEquals("skw;}]u=_4.5.2.1", locale0.toString());
      assertEquals("skw;}]u=", locale1.getLanguage());
      assertEquals("4.5.2.1", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("skw;}]u=_4.5.2.1", locale1.toString());
      assertNotNull(locale1);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string3));
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, int0);
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertTrue(boolean1 == boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(boolean1);
      
      Set<String> set1 = python3Target0.getBadWords();
      assertSame(set1, set0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(set1.isEmpty());
      assertEquals(84, set1.size());
      assertNotNull(set1);
      assertFalse(set1.contains(string3));
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      int int0 = (-483);
      CommonToken commonToken0 = (CommonToken)Token.INVALID_TOKEN;
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertNotNull(commonToken0);
      
      CommonToken commonToken1 = new CommonToken(commonToken0);
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getType());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertNotNull(commonToken1);
      
      commonToken1.setStopIndex(int0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertNotSame(commonToken0, commonToken1);
      assertNotSame(commonToken1, commonToken0);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getType());
      assertEquals((-483), commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals((-1), commonToken1.getTokenIndex());
      
      String string0 = "dir";
      AltAST altAST0 = new AltAST(int0, commonToken1, string0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertEquals((-1), altAST0.childIndex);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getType());
      assertEquals((-483), commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals((-483), altAST0.getType());
      assertNotNull(altAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertEquals((-1), altAST0.childIndex);
      assertNotSame(commonToken0, commonToken1);
      assertNotSame(commonToken1, commonToken0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getType());
      assertEquals((-483), commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals((-483), altAST0.getType());
      assertTrue(boolean0);
      
      String string1 = python3Target0.getVersion();
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(string1);
      assertEquals("4.5.2.1", string1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, int0);
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertTrue(boolean1 == boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean1);
      
      boolean boolean2 = python3Target0.supportsOverloadedMethods();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean2);
      
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream();
      assertEquals(1, aNTLRStringStream0.getLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.size());
      assertNotNull(aNTLRStringStream0);
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(aNTLRStringStream0);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(1, aNTLRStringStream0.getLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.size());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertNotNull(aNTLRLexer0);
      
      CommonToken commonToken0 = (CommonToken)aNTLRLexer0.emit();
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(1, aNTLRStringStream0.getLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.size());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getType());
      assertNotNull(commonToken0);
      
      BlockAST blockAST0 = new BlockAST(commonToken0);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals(1, aNTLRStringStream0.getLine());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.size());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals("org\\antlr\\v4\\parse\\ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getType());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertNotNull(blockAST0);
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
