/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 03:38:28 GMT 2021
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.BufferedTokenStream;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenRewriteStream;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.v4.Tool;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.OutputModelController;
import org.antlr.v4.codegen.ParserFactory;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.parse.ToolANTLRLexer;
import org.antlr.v4.runtime.misc.IntervalSet;
import org.antlr.v4.runtime.misc.OrderedHashSet;
import org.antlr.v4.tool.AttributeDict;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.STGroupFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(boolean0);
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertTrue(boolean1 == boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(boolean1);
      
      int int0 = 1190;
      CommonToken commonToken0 = new CommonToken(int0);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(1190, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertNotNull(commonToken0);
      
      TokenRewriteStream tokenRewriteStream0 = new TokenRewriteStream();
      assertEquals((-1), tokenRewriteStream0.index());
      assertEquals((-1), tokenRewriteStream0.range());
      assertEquals((-1), tokenRewriteStream0.getLastRewriteTokenIndex());
      assertEquals(0, tokenRewriteStream0.size());
      assertNotNull(tokenRewriteStream0);
      assertEquals(0, TokenRewriteStream.MIN_TOKEN_INDEX);
      assertEquals(100, TokenRewriteStream.PROGRAM_INIT_SIZE);
      
      Python3Target.python3Keywords = python3Target0.targetCharValueEscape;
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      
      GrammarRootAST grammarRootAST0 = new GrammarRootAST(int0, commonToken0, python3Target0.language, tokenRewriteStream0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(1190, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), tokenRewriteStream0.index());
      assertEquals((-1), tokenRewriteStream0.range());
      assertEquals((-1), tokenRewriteStream0.getLastRewriteTokenIndex());
      assertEquals(0, tokenRewriteStream0.size());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertFalse(grammarRootAST0.isNil());
      assertEquals(1190, grammarRootAST0.getType());
      assertNotNull(grammarRootAST0);
      assertEquals(0, TokenRewriteStream.MIN_TOKEN_INDEX);
      assertEquals(100, TokenRewriteStream.PROGRAM_INIT_SIZE);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals(0, grammarRootAST0.grammarType);
      assertEquals((-1), grammarRootAST0.childIndex);
      
      boolean boolean2 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarRootAST0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(1190, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), tokenRewriteStream0.index());
      assertEquals((-1), tokenRewriteStream0.range());
      assertEquals((-1), tokenRewriteStream0.getLastRewriteTokenIndex());
      assertEquals(0, tokenRewriteStream0.size());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertFalse(grammarRootAST0.isNil());
      assertEquals(1190, grammarRootAST0.getType());
      assertTrue(boolean2);
      assertEquals(0, TokenRewriteStream.MIN_TOKEN_INDEX);
      assertEquals(100, TokenRewriteStream.PROGRAM_INIT_SIZE);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals(0, grammarRootAST0.grammarType);
      assertEquals((-1), grammarRootAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "IH-wd!";
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        python3Target_PythonStringRenderer0.toString((Object) python3Target_PythonStringRenderer0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.codegen.target.Python3Target$PythonStringRenderer cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(boolean0);
      
      ClassicToken classicToken0 = new ClassicToken(sTGroup0.delimiterStartChar, sTGroup0.TEMPLATE_FILE_EXTENSION, sTGroup0.delimiterStartChar);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals(60, classicToken0.getType());
      assertEquals(60, classicToken0.getChannel());
      assertEquals(".st", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNotNull(classicToken0);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      
      OrderedHashSet<String> orderedHashSet0 = new OrderedHashSet<String>();
      assertTrue(orderedHashSet0.isEmpty());
      assertEquals(0, orderedHashSet0.size());
      assertNotNull(orderedHashSet0);
      
      python3Target0.badWords = (Set<String>) orderedHashSet0;
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertTrue(orderedHashSet0.isEmpty());
      assertEquals(0, orderedHashSet0.size());
      assertTrue(python3Target0.badWords.isEmpty());
      assertEquals(0, python3Target0.badWords.size());
      
      AltAST altAST0 = new AltAST(classicToken0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals(60, classicToken0.getType());
      assertEquals(60, classicToken0.getChannel());
      assertEquals(".st", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(60, altAST0.getType());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertNotNull(altAST0);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals((-1), altAST0.childIndex);
      
      boolean boolean1 = orderedHashSet0.add(((STGroupFile) sTGroup0).fileName);
      assertFalse(boolean1 == boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertFalse(orderedHashSet0.isEmpty());
      assertEquals(1, orderedHashSet0.size());
      assertTrue(boolean1);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      
      boolean boolean2 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals(60, classicToken0.getType());
      assertEquals(60, classicToken0.getChannel());
      assertEquals(".st", classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(60, altAST0.getType());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertFalse(boolean2);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals((-1), altAST0.childIndex);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(29, int0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "";
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string1 = python3Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        python3Target0.getListLabel(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      Tool tool0 = null;
      try {
        tool0 = new Tool(python3Target0.python3Keywords);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // ANTLR ErrorManager panic
         //
         verifyException("org.antlr.v4.tool.ErrorManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      // Undeclared exception!
      try { 
        python3Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      String string0 = ":O62k!";
      boolean boolean0 = true;
      String string1 = python3Target0.getTargetStringLiteralFromString(string0, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\":O62k!\"", string1);
      
      python3Target0.addBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(boolean0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, int0);
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertTrue(boolean1 == boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(boolean1);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      CommonTreeAdaptor commonTreeAdaptor0 = new CommonTreeAdaptor();
      assertNotNull(commonTreeAdaptor0);
      
      int int0 = (-877);
      String string0 = "<qknu1dzcc4vmi";
      CommonToken commonToken0 = (CommonToken)commonTreeAdaptor0.createToken(int0, string0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-877), commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertNotNull(commonToken0);
      
      BlockAST blockAST0 = new BlockAST(commonToken0);
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-877), commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertFalse(blockAST0.isNil());
      assertEquals((-877), blockAST0.getType());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertNotNull(blockAST0);
      assertEquals((-1), blockAST0.childIndex);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-877), commonToken0.getType());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertFalse(blockAST0.isNil());
      assertEquals((-877), blockAST0.getType());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertFalse(boolean0);
      assertEquals((-1), blockAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(boolean0);
      
      int int0 = (-3947);
      String string0 = "ARG_CONFLICTS_WITH_TOKEN";
      ClassicToken classicToken0 = new ClassicToken(int0, string0, int0);
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals("ARG_CONFLICTS_WITH_TOKEN", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-3947), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-3947), classicToken0.getChannel());
      assertNotNull(classicToken0);
      
      AltAST altAST0 = new AltAST(classicToken0);
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals("ARG_CONFLICTS_WITH_TOKEN", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-3947), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-3947), classicToken0.getChannel());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertFalse(altAST0.isNil());
      assertEquals((-3947), altAST0.getType());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertNotNull(altAST0);
      assertEquals((-1), altAST0.childIndex);
      
      boolean boolean1 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertTrue(boolean1 == boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals("ARG_CONFLICTS_WITH_TOKEN", classicToken0.getText());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-3947), classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals((-3947), classicToken0.getChannel());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertFalse(altAST0.isNil());
      assertEquals((-3947), altAST0.getType());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertFalse(boolean1);
      assertEquals((-1), altAST0.childIndex);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      
      int int0 = 2130;
      InputStream inputStream0 = null;
      ANTLRInputStream aNTLRInputStream0 = null;
      try {
        aNTLRInputStream0 = new ANTLRInputStream(inputStream0, sTGroup0.TEMPLATE_FILE_EXTENSION);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      String string0 = python3Target0.getVersion();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(string0);
      assertEquals("4.5.2.1", string0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      
      int int0 = 553;
      String string0 = python3Target0.encodeIntAsCharEscape(int0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(string0);
      assertEquals("\\u0229", string0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean0);
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertTrue(boolean1 == boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean1);
      
      boolean boolean2 = python3Target0.wantsBaseVisitor();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean2);
      
      boolean boolean3 = python3Target0.supportsOverloadedMethods();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean3);
      
      int int1 = 1166;
      CommonToken commonToken0 = (CommonToken)Token.INVALID_TOKEN;
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getType());
      assertNotNull(commonToken0);
      
      String string1 = "rule";
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream();
      assertEquals((-1), bufferedTokenStream0.index());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.range());
      assertNotNull(bufferedTokenStream0);
      
      GrammarRootAST grammarRootAST0 = new GrammarRootAST(int1, commonToken0, string1, bufferedTokenStream0);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), bufferedTokenStream0.index());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.range());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertFalse(grammarRootAST0.isNil());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals(1166, grammarRootAST0.getType());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertNotNull(grammarRootAST0);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals(0, grammarRootAST0.grammarType);
      assertEquals((-1), grammarRootAST0.childIndex);
      
      bufferedTokenStream0.reset();
      assertEquals(0, bufferedTokenStream0.index());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.range());
      
      GrammarRootAST grammarRootAST1 = new GrammarRootAST(grammarRootAST0);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(grammarRootAST1.equals((Object)grammarRootAST0));
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, bufferedTokenStream0.index());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.range());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertFalse(grammarRootAST0.isNil());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals(1166, grammarRootAST0.getType());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST1.getNumberOfOptions());
      assertFalse(grammarRootAST1.isNil());
      assertEquals((-1), grammarRootAST1.getTokenStopIndex());
      assertEquals(0, grammarRootAST1.getCharPositionInLine());
      assertEquals(0, grammarRootAST1.getChildCount());
      assertEquals((-1), grammarRootAST1.getTokenStartIndex());
      assertEquals(1166, grammarRootAST1.getType());
      assertEquals(0, grammarRootAST1.getLine());
      assertEquals((-1), grammarRootAST1.getChildIndex());
      assertNotNull(grammarRootAST1);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals(0, grammarRootAST0.grammarType);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertEquals((-1), grammarRootAST1.childIndex);
      assertEquals(0, grammarRootAST1.grammarType);
      assertFalse(grammarRootAST1.hasErrors);
      
      boolean boolean4 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarRootAST1);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(grammarRootAST0.equals((Object)grammarRootAST1));
      assertFalse(grammarRootAST1.equals((Object)grammarRootAST0));
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, bufferedTokenStream0.index());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.range());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals((-1), grammarRootAST0.getTokenStopIndex());
      assertFalse(grammarRootAST0.isNil());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals((-1), grammarRootAST0.getTokenStartIndex());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals(1166, grammarRootAST0.getType());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST1.getNumberOfOptions());
      assertFalse(grammarRootAST1.isNil());
      assertEquals((-1), grammarRootAST1.getTokenStopIndex());
      assertEquals(0, grammarRootAST1.getCharPositionInLine());
      assertEquals(0, grammarRootAST1.getChildCount());
      assertEquals((-1), grammarRootAST1.getTokenStartIndex());
      assertEquals(1166, grammarRootAST1.getType());
      assertEquals(0, grammarRootAST1.getLine());
      assertEquals((-1), grammarRootAST1.getChildIndex());
      assertNotSame(string1, string0);
      assertNotSame(grammarRootAST0, grammarRootAST1);
      assertNotSame(grammarRootAST1, grammarRootAST0);
      assertTrue(boolean4);
      assertFalse(grammarRootAST0.hasErrors);
      assertEquals(0, grammarRootAST0.grammarType);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertEquals((-1), grammarRootAST1.childIndex);
      assertEquals(0, grammarRootAST1.grammarType);
      assertFalse(grammarRootAST1.hasErrors);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string0 = "";
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = python3Target_PythonStringRenderer0.toString(object0, string0, locale0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer1 = new Python3Target.PythonStringRenderer();
      assertFalse(python3Target_PythonStringRenderer1.equals((Object)python3Target_PythonStringRenderer0));
      assertNotNull(python3Target_PythonStringRenderer1);
      
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
      
      ClassicToken classicToken0 = new ClassicToken(sTGroup0.delimiterStartChar, sTGroup0.TEMPLATE_FILE_EXTENSION, sTGroup0.delimiterStartChar);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(".st", classicToken0.getText());
      assertEquals(60, classicToken0.getType());
      assertEquals(60, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNotNull(classicToken0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      python3Target0.badWords = set0;
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(python3Target0.badWords.isEmpty());
      assertEquals(0, python3Target0.badWords.size());
      
      AltAST altAST0 = new AltAST(classicToken0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(".st", classicToken0.getText());
      assertEquals(60, classicToken0.getType());
      assertEquals(60, classicToken0.getChannel());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(60, altAST0.getType());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getChildCount());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertNotNull(altAST0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals((-1), altAST0.childIndex);
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      python3Target0.badWords = set0;
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(python3Target0.badWords.isEmpty());
      assertEquals(0, python3Target0.badWords.size());
      
      // Undeclared exception!
      try { 
        python3Target0.addBadWords();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertNotNull(python3Target0);
      
      Set<String> set0 = null;
      python3Target0.badWords = set0;
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      
      // Undeclared exception!
      try { 
        python3Target0.addBadWords();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Python3Target python3Target0 = new Python3Target();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = STGroup.defaultGroup;
      assertNull(sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      
      python3Target0.templates = sTGroup0;
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(sTGroup0.getFileName());
      assertNull(python3Target0.templates.getFileName());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(set0.isEmpty());
      assertEquals(84, set0.size());
      assertNotNull(set0);
      
      AttributeDict attributeDict0 = AttributeDict.predefinedTokenDict;
      assertNull(attributeDict0.getName());
      assertNotNull(attributeDict0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      ST sT0 = sTGroup0.getInstanceOf(attributeDict0.name);
      assertNull(sTGroup0.getFileName());
      assertNull(attributeDict0.getName());
      assertNull(sT0);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = false;
      boolean boolean3 = true;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean2, python3Target0.templates.iterateAcrossValues, boolean3);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(boolean4);
      
      AttributeDict attributeDict1 = null;
      String string0 = "I+Y6";
      ST sT1 = sTGroup0.getInstanceOf(string0);
      assertNull(sTGroup0.getFileName());
      assertNull(sT1);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      
      Set<String> set1 = attributeDict0.intersection(attributeDict1);
      assertFalse(set1.equals((Object)set0));
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNull(attributeDict0.getName());
      assertNotNull(set1);
      assertFalse(set1.contains(string0));
      
      AttributeDict.DictType attributeDict_DictType0 = AttributeDict.DictType.PREDEFINED_LEXER_RULE;
      attributeDict0.type = attributeDict_DictType0;
      assertNull(attributeDict0.getName());
      
      python3Target0.badWords = set1;
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(0, python3Target0.badWords.size());
      assertTrue(python3Target0.badWords.isEmpty());
      assertNull(attributeDict0.getName());
      
      sTGroup0.load();
      assertNull(sTGroup0.getFileName());
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      
      // Undeclared exception!
      try { 
        python3Target0.getBadWords();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(boolean0);
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertTrue(boolean1 == boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(boolean1);
      
      String string0 = "Y``\"PZ3zRF*%,wKS=";
      ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream(python3Target0.language, string0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(0, aNTLRFileStream0.index());
      assertNull(aNTLRFileStream0.getSourceName());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertNotNull(aNTLRFileStream0);
      
      int int0 = (-997);
      int int1 = (-1422);
      CommonToken commonToken0 = new CommonToken(aNTLRFileStream0, int0, int1, int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(0, aNTLRFileStream0.index());
      assertNull(aNTLRFileStream0.getSourceName());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertEquals((-1422), commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-997), commonToken0.getStartIndex());
      assertEquals((-997), commonToken0.getType());
      assertEquals((-997), commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertNotNull(commonToken0);
      
      ActionAST actionAST0 = new ActionAST(commonToken0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(0, aNTLRFileStream0.index());
      assertNull(aNTLRFileStream0.getSourceName());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertEquals((-1422), commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-997), commonToken0.getStartIndex());
      assertEquals((-997), commonToken0.getType());
      assertEquals((-997), commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals((-997), actionAST0.getType());
      assertEquals((-1), actionAST0.getChildIndex());
      assertNotNull(actionAST0);
      assertEquals((-1), actionAST0.childIndex);
      
      ActionAST actionAST1 = new ActionAST(actionAST0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(actionAST1.equals((Object)actionAST0));
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(0, aNTLRFileStream0.index());
      assertNull(aNTLRFileStream0.getSourceName());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertEquals((-1422), commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-997), commonToken0.getStartIndex());
      assertEquals((-997), commonToken0.getType());
      assertEquals((-997), commonToken0.getStopIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(0, actionAST0.getLine());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals((-997), actionAST0.getType());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals(0, actionAST1.getNumberOfOptions());
      assertEquals(0, actionAST1.getLine());
      assertEquals(0, actionAST1.getChildCount());
      assertEquals(0, actionAST1.getCharPositionInLine());
      assertEquals((-997), actionAST1.getType());
      assertEquals((-1), actionAST1.getChildIndex());
      assertEquals((-1), actionAST1.getTokenStartIndex());
      assertFalse(actionAST1.isNil());
      assertEquals((-1), actionAST1.getTokenStopIndex());
      assertNotNull(actionAST1);
      assertEquals((-1), actionAST0.childIndex);
      assertEquals((-1), actionAST1.childIndex);
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
