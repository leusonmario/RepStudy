/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 03:44:07 GMT 2021
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.Tree;
import org.antlr.runtime.tree.TreeWizard;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.target.Python3Target;
import org.antlr.v4.tool.AttributeDict;
import org.antlr.v4.tool.Rule;
import org.antlr.v4.tool.ast.ActionAST;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.TerminalAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.Interpreter;
import org.stringtemplate.v4.STGroup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python3Target_ESTest extends Python3Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      boolean boolean1 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean1);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = python3Target0.wantsBaseListener();
      assertFalse(boolean2);
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      int int0 = 2331;
      CommonToken commonToken0 = new CommonToken(int0, python3Target0.language);
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(2331, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertNotNull(commonToken0);
      
      String string0 = "setattr";
      AltAST altAST0 = new AltAST(int0, commonToken0, string0);
      assertEquals((-1), altAST0.childIndex);
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(2331, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertFalse(altAST0.isNil());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(2331, altAST0.getType());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertNotNull(altAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertEquals((-1), altAST0.childIndex);
      assertTrue(boolean0);
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(2331, commonToken0.getType());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertFalse(altAST0.isNil());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals(2331, altAST0.getType());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals(0, altAST0.getNumberOfOptions());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      String string0 = "!ad\\R";
      Locale locale0 = null;
      String string1 = python3Target_PythonStringRenderer0.toString((Object) string0, string0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("!ad\\R", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      TerminalAST terminalAST0 = new TerminalAST(int0);
      assertEquals((-1), terminalAST0.childIndex);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(29, terminalAST0.getType());
      assertNotNull(terminalAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
      assertEquals((-1), terminalAST0.childIndex);
      assertFalse(boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(29, terminalAST0.getType());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      Set<String> set0 = Interpreter.predefinedAnonSubtemplateAttributes;
      assertNotNull(set0);
      
      python3Target0.badWords = set0;
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      
      Set<String> set1 = python3Target0.getBadWords();
      assertSame(set1, set0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertNotNull(set1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      String string0 = python3Target0.getVersion();
      assertEquals("4.5.2.1", string0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(string0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      String string0 = "parserRule";
      // Undeclared exception!
      try { 
        python3Target0.getAltLabelContextStructName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Object object0 = null;
      String string0 = "u=UC";
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = python3Target_PythonStringRenderer0.toString(object0, string0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("u=UC", string1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean0);
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      Set<String> set0 = python3Target0.getBadWords();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      String string0 = "";
      boolean boolean0 = false;
      String string1 = python3Target0.getTargetStringLiteralFromANTLRStringLiteral(codeGenerator0, string0, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      
      Set<String> set0 = python3Target0.getBadWords();
      assertFalse(set0.contains(string1));
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals(84, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      String string2 = python3Target0.getVersion();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("4.5.2.1", string2);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      python3Target0.addBadWords();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      
      boolean boolean1 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean1);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      Python3Target.python3Keywords = python3Target0.python3Keywords;
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean0 = python3Target0.wantsBaseListener();
      assertFalse(boolean0);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      boolean boolean1 = python3Target0.wantsBaseListener();
      assertFalse(boolean1);
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      STGroup sTGroup0 = python3Target0.loadTemplates();
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.verbose);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      
      int int0 = 0;
      BlockAST blockAST0 = new BlockAST(int0);
      assertEquals((-1), blockAST0.childIndex);
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getType());
      assertEquals((-1), blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(0, blockAST0.getLine());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals((-1), blockAST0.getTokenStopIndex());
      assertFalse(blockAST0.isNil());
      assertNotNull(blockAST0);
      
      CommonTree commonTree0 = (CommonTree)Tree.INVALID_NODE;
      assertEquals((-1), commonTree0.childIndex);
      assertEquals(0, commonTree0.getLine());
      assertEquals(0, commonTree0.getType());
      assertEquals((-1), commonTree0.getTokenStartIndex());
      assertEquals((-1), commonTree0.getTokenStopIndex());
      assertFalse(commonTree0.isNil());
      assertEquals(0, commonTree0.getChildCount());
      assertEquals((-1), commonTree0.getChildIndex());
      assertEquals(0, commonTree0.getCharPositionInLine());
      assertNotNull(commonTree0);
      
      // Undeclared exception!
      try { 
        blockAST0.sanityCheckParentAndChildIndexes((Tree) commonTree0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parents don't match; expected <errornode> found null
         //
         verifyException("org.antlr.runtime.tree.BaseTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Python3Target.PythonStringRenderer python3Target_PythonStringRenderer0 = new Python3Target.PythonStringRenderer();
      assertNotNull(python3Target_PythonStringRenderer0);
      
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertNull(python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      // Undeclared exception!
      try { 
        python3Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      
      CommonToken commonToken0 = new CommonToken(int0, python3Target0.language);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(29, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertNotNull(commonToken0);
      
      CommonToken commonToken1 = new CommonToken(commonToken0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(29, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(29, commonToken1.getType());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertNotNull(commonToken1);
      
      ActionAST actionAST0 = new ActionAST(commonToken1);
      assertEquals((-1), actionAST0.childIndex);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(29, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(29, commonToken1.getType());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(29, actionAST0.getType());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertNotNull(actionAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(actionAST0);
      assertEquals((-1), actionAST0.childIndex);
      assertNotSame(commonToken0, commonToken1);
      assertNotSame(commonToken1, commonToken0);
      assertFalse(boolean0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(29, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals((-1), commonToken1.getCharPositionInLine());
      assertEquals(29, commonToken1.getType());
      assertEquals(0, commonToken1.getLine());
      assertEquals(0, commonToken1.getChannel());
      assertEquals((-1), commonToken1.getTokenIndex());
      assertFalse(actionAST0.isNil());
      assertEquals(0, actionAST0.getChildCount());
      assertEquals(0, actionAST0.getCharPositionInLine());
      assertEquals((-1), actionAST0.getChildIndex());
      assertEquals((-1), actionAST0.getTokenStartIndex());
      assertEquals(0, actionAST0.getLine());
      assertEquals(0, actionAST0.getNumberOfOptions());
      assertEquals(29, actionAST0.getType());
      assertEquals((-1), actionAST0.getTokenStopIndex());
      assertFalse(commonToken0.equals((Object)commonToken1));
      assertFalse(commonToken1.equals((Object)commonToken0));
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python3Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNotNull(python3Target0);
      
      int int0 = 3746;
      TreeWizard.TreePatternTreeAdaptor treeWizard_TreePatternTreeAdaptor0 = new TreeWizard.TreePatternTreeAdaptor();
      assertNotNull(treeWizard_TreePatternTreeAdaptor0);
      
      CommonToken commonToken0 = new CommonToken(int0);
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(3746, commonToken0.getType());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertNotNull(commonToken0);
      
      ClassicToken classicToken0 = new ClassicToken(int0);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(3746, classicToken0.getType());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertNotNull(classicToken0);
      
      CommonToken commonToken1 = (CommonToken)treeWizard_TreePatternTreeAdaptor0.createToken((Token) classicToken0);
      assertNotSame(commonToken1, commonToken0);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(3746, classicToken0.getType());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, commonToken1.getLine());
      assertEquals(3746, commonToken1.getType());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getCharPositionInLine());
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertNotNull(commonToken1);
      
      String string0 = "setattr";
      CommonToken commonToken2 = (CommonToken)treeWizard_TreePatternTreeAdaptor0.createToken((Token) commonToken1);
      assertNotSame(commonToken1, commonToken2);
      assertNotSame(commonToken1, commonToken0);
      assertNotSame(commonToken2, commonToken1);
      assertNotSame(commonToken2, commonToken0);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(3746, classicToken0.getType());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, commonToken1.getLine());
      assertEquals(3746, commonToken1.getType());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getCharPositionInLine());
      assertEquals(0, commonToken2.getLine());
      assertEquals(0, commonToken2.getTokenIndex());
      assertEquals(0, commonToken2.getStopIndex());
      assertEquals(0, commonToken2.getStartIndex());
      assertEquals(0, commonToken2.getCharPositionInLine());
      assertEquals(0, commonToken2.getChannel());
      assertEquals(3746, commonToken2.getType());
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertFalse(commonToken2.equals((Object)commonToken1));
      assertFalse(commonToken2.equals((Object)commonToken0));
      assertNotNull(commonToken2);
      
      AltAST altAST0 = new AltAST(int0, commonToken1, string0);
      assertEquals((-1), altAST0.childIndex);
      assertEquals(0, classicToken0.getChannel());
      assertEquals(3746, classicToken0.getType());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, commonToken1.getLine());
      assertEquals(3746, commonToken1.getType());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(3746, altAST0.getType());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertFalse(commonToken1.equals((Object)commonToken2));
      assertFalse(commonToken1.equals((Object)commonToken0));
      assertNotNull(altAST0);
      
      boolean boolean0 = python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
      assertEquals((-1), altAST0.childIndex);
      assertNotSame(commonToken1, commonToken2);
      assertNotSame(commonToken1, commonToken0);
      assertTrue(boolean0);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(3746, classicToken0.getType());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertNull(classicToken0.getText());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, commonToken1.getLine());
      assertEquals(3746, commonToken1.getType());
      assertEquals(0, commonToken1.getStopIndex());
      assertEquals(0, commonToken1.getTokenIndex());
      assertEquals(0, commonToken1.getChannel());
      assertEquals(0, commonToken1.getStartIndex());
      assertEquals(0, commonToken1.getCharPositionInLine());
      assertFalse(altAST0.isNil());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals(0, altAST0.getTokenStopIndex());
      assertEquals(0, altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getLine());
      assertEquals(3746, altAST0.getType());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertFalse(commonToken1.equals((Object)commonToken2));
      assertFalse(commonToken1.equals((Object)commonToken0));
      
      String string1 = python3Target0.getVersion();
      assertNotSame(string1, string0);
      assertEquals("4.5.2.1", string1);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int1);
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      
      TerminalAST terminalAST0 = new TerminalAST(int0);
      assertEquals((-1), terminalAST0.childIndex);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(29, terminalAST0.getType());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertFalse(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertNotNull(terminalAST0);
      
      String string0 = "missing dictionary default value";
      ANTLRStringStream aNTLRStringStream0 = new ANTLRStringStream(string0);
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(32, aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertNotNull(aNTLRStringStream0);
      
      int int1 = 968;
      int int2 = 1948;
      int int3 = (-20);
      int int4 = 0;
      CommonToken commonToken0 = new CommonToken(aNTLRStringStream0, int1, int2, int3, int4);
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(32, aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(968, commonToken0.getType());
      assertEquals(1948, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-20), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertNotNull(commonToken0);
      
      terminalAST0.token = (Token) commonToken0;
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseListener());
      assertNull(python3Target0.getLanguage());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertFalse(terminalAST0.isNil());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(968, terminalAST0.getType());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertEquals(1, aNTLRStringStream0.getLine());
      assertEquals(32, aNTLRStringStream0.size());
      assertNull(aNTLRStringStream0.getSourceName());
      assertEquals(0, aNTLRStringStream0.index());
      assertEquals(0, aNTLRStringStream0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(968, commonToken0.getType());
      assertEquals(1948, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-20), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(1948, terminalAST0.token.getChannel());
      assertEquals(968, terminalAST0.token.getType());
      assertEquals(0, terminalAST0.token.getLine());
      assertEquals((-1), terminalAST0.token.getTokenIndex());
      assertEquals((-1), terminalAST0.token.getCharPositionInLine());
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      Set<String> set0 = null;
      python3Target0.badWords = set0;
      assertNull(python3Target0.getLanguage());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      
      int int0 = 3127;
      TreeWizard.TreePatternTreeAdaptor treeWizard_TreePatternTreeAdaptor0 = new TreeWizard.TreePatternTreeAdaptor();
      assertNotNull(treeWizard_TreePatternTreeAdaptor0);
      
      // Undeclared exception!
      try { 
        python3Target0.getBadWords();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python3Target python3Target0 = new Python3Target(codeGenerator0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNotNull(python3Target0);
      
      AttributeDict attributeDict0 = Rule.predefinedRulePropertiesDict;
      assertNull(attributeDict0.getName());
      assertNotNull(attributeDict0);
      
      AttributeDict attributeDict1 = new AttributeDict(attributeDict0.type);
      assertNull(attributeDict0.getName());
      assertNull(attributeDict1.getName());
      assertFalse(attributeDict1.equals((Object)attributeDict0));
      assertNotNull(attributeDict1);
      
      Set<String> set0 = attributeDict0.intersection(attributeDict1);
      assertNotSame(attributeDict0, attributeDict1);
      assertNotSame(attributeDict1, attributeDict0);
      assertNull(attributeDict0.getName());
      assertNull(attributeDict1.getName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(attributeDict0.equals((Object)attributeDict1));
      assertFalse(attributeDict1.equals((Object)attributeDict0));
      assertNotNull(set0);
      
      python3Target0.badWords = set0;
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertNull(attributeDict0.getName());
      assertNull(attributeDict1.getName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(python3Target0.badWords.isEmpty());
      assertEquals(0, python3Target0.badWords.size());
      
      STGroup sTGroup0 = python3Target0.getTemplates();
      assertFalse(STGroup.trackCreationEvents);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", sTGroup0.getFileName());
      assertNotNull(sTGroup0);
      
      boolean boolean0 = python3Target0.supportsOverloadedMethods();
      assertFalse(boolean0);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      
      boolean boolean1 = python3Target0.wantsBaseVisitor();
      assertFalse(boolean1);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = python3Target0.wantsBaseListener();
      assertFalse(boolean2);
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.wantsBaseListener());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertEquals("Python3", python3Target0.getLanguage());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        python3Target0.getBadWords();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Python3Target python3Target0 = new Python3Target();
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertNotNull(python3Target0);
      
      int int0 = python3Target0.getSerializedATNSegmentLimit();
      assertEquals(29, int0);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      
      TerminalAST terminalAST0 = new TerminalAST(int0);
      assertEquals((-1), terminalAST0.childIndex);
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(29, terminalAST0.getType());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals((-1), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      assertNotNull(terminalAST0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      python3Target0.badWords = set0;
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, python3Target0.badWords.size());
      assertTrue(python3Target0.badWords.isEmpty());
      
      int int1 = (-910);
      terminalAST0.childIndex = int1;
      assertFalse(python3Target0.wantsBaseVisitor());
      assertEquals(64, python3Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python3Target0.getVersion());
      assertFalse(python3Target0.supportsOverloadedMethods());
      assertEquals(29, python3Target0.getSerializedATNSegmentLimit());
      assertNull(python3Target0.getLanguage());
      assertFalse(python3Target0.wantsBaseListener());
      assertEquals(0, terminalAST0.getLine());
      assertEquals(0, terminalAST0.getNumberOfOptions());
      assertEquals((-910), terminalAST0.getChildIndex());
      assertEquals((-1), terminalAST0.getTokenStopIndex());
      assertEquals(29, terminalAST0.getType());
      assertEquals(0, terminalAST0.getChildCount());
      assertEquals((-1), terminalAST0.getTokenStartIndex());
      assertFalse(terminalAST0.isNil());
      assertEquals(0, terminalAST0.getCharPositionInLine());
      
      // Undeclared exception!
      try { 
        python3Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(terminalAST0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }
}
