/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 01:53:19 GMT 2021
 */

package org.antlr.v4.codegen.target;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Locale;
import java.util.Set;
import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BufferedTokenStream;
import org.antlr.runtime.ClassicToken;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenSource;
import org.antlr.v4.codegen.CodeGenerator;
import org.antlr.v4.codegen.target.Python2Target;
import org.antlr.v4.parse.ANTLRLexer;
import org.antlr.v4.runtime.misc.OrderedHashSet;
import org.antlr.v4.tool.ast.AltAST;
import org.antlr.v4.tool.ast.BlockAST;
import org.antlr.v4.tool.ast.GrammarAST;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.antlr.v4.tool.ast.PredAST;
import org.antlr.v4.tool.ast.RuleAST;
import org.antlr.v4.tool.ast.TerminalAST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.stringtemplate.v4.STErrorListener;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.StringRenderer;
import org.stringtemplate.v4.misc.ErrorManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Python2Target_ESTest extends Python2Target_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      int int0 = 394;
      String string0 = "file";
      ClassicToken classicToken0 = new ClassicToken(int0, string0);
      assertNotNull(classicToken0);
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals("file", classicToken0.getText());
      assertEquals(394, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      
      BlockAST blockAST0 = new BlockAST(int0, classicToken0);
      assertNotNull(blockAST0);
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals("file", classicToken0.getText());
      assertEquals(394, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(394, blockAST0.getType());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertEquals((-1), blockAST0.childIndex);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(blockAST0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getLine());
      assertEquals("file", classicToken0.getText());
      assertEquals(394, classicToken0.getType());
      assertEquals(0, classicToken0.getTokenIndex());
      assertFalse(blockAST0.isNil());
      assertEquals(0, blockAST0.getChildCount());
      assertEquals(394, blockAST0.getType());
      assertEquals(0, blockAST0.getLine());
      assertEquals(0, blockAST0.getTokenStartIndex());
      assertEquals(0, blockAST0.getNumberOfOptions());
      assertEquals(0, blockAST0.getTokenStopIndex());
      assertEquals((-1), blockAST0.getChildIndex());
      assertEquals(0, blockAST0.getCharPositionInLine());
      assertTrue(boolean0);
      assertEquals((-1), blockAST0.childIndex);
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      
      String string0 = "filQ";
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) python2Target_PythonStringRenderer0, string0, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.codegen.target.Python2Target$PythonStringRenderer cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      OrderedHashSet<String> orderedHashSet0 = new OrderedHashSet<String>();
      assertNotNull(orderedHashSet0);
      assertTrue(orderedHashSet0.isEmpty());
      assertEquals(0, orderedHashSet0.size());
      
      python2Target0.badWords = (Set<String>) orderedHashSet0;
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertTrue(orderedHashSet0.isEmpty());
      assertEquals(0, orderedHashSet0.size());
      assertTrue(python2Target0.badWords.isEmpty());
      assertEquals(0, python2Target0.badWords.size());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean0);
      
      String string0 = "NESTED_ACTION";
      boolean boolean1 = orderedHashSet0.add(string0);
      assertFalse(orderedHashSet0.isEmpty());
      assertEquals(1, orderedHashSet0.size());
      assertTrue(boolean1);
      assertTrue(orderedHashSet0.contains(string0));
      assertFalse(boolean1 == boolean0);
      
      String string1 = python2Target0.getVersion();
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("4.5.2.1", string1);
      assertFalse(string1.equals((Object)string0));
      
      GrammarAST grammarAST0 = new GrammarAST();
      assertNotNull(grammarAST0);
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getType());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.childIndex);
      
      boolean boolean2 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertTrue(grammarAST0.isNil());
      assertEquals(0, grammarAST0.getType());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getLine());
      assertFalse(boolean2);
      assertEquals((-1), grammarAST0.childIndex);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        python2Target_PythonStringRenderer0.toString((Object) python2Target0, python2Target0.language, locale0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.antlr.v4.codegen.target.Python2Target cannot be cast to java.lang.String
         //
         verifyException("org.stringtemplate.v4.StringRenderer", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      int int0 = 235;
      CommonToken commonToken0 = (CommonToken)Token.INVALID_TOKEN;
      assertNotNull(commonToken0);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      
      String string0 = "a\\`Oo)S.I!.T|=#{";
      GrammarAST grammarAST0 = new GrammarAST(int0, commonToken0, string0);
      assertNotNull(grammarAST0);
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(235, grammarAST0.getType());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertFalse(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.childIndex);
      
      boolean boolean0 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(0, grammarAST0.getChildCount());
      assertEquals(0, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(235, grammarAST0.getType());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertFalse(grammarAST0.isNil());
      assertFalse(boolean0);
      assertEquals((-1), grammarAST0.childIndex);
      
      String string1 = python2Target0.getVersion();
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      
      String string2 = python2Target_PythonStringRenderer0.toString((Object) string1, string0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("a\\`Oo)S.I!.T|=#{", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      
      // Undeclared exception!
      try { 
        python2Target0.loadTemplates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(boolean0);
      
      boolean boolean1 = python2Target0.supportsOverloadedMethods();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      int int0 = 0;
      ClassicToken classicToken0 = new ClassicToken(int0, python2Target0.language, int0);
      assertNotNull(classicToken0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals("Python2", classicToken0.getText());
      assertEquals(0, classicToken0.getType());
      
      RuleAST ruleAST0 = new RuleAST(classicToken0);
      assertNotNull(ruleAST0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals("Python2", classicToken0.getText());
      assertEquals(0, classicToken0.getType());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getTokenStopIndex());
      assertEquals((-1), ruleAST0.childIndex);
      
      RuleAST ruleAST1 = new RuleAST(ruleAST0);
      assertNotNull(ruleAST1);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals("Python2", classicToken0.getText());
      assertEquals(0, classicToken0.getType());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getTokenStopIndex());
      assertFalse(ruleAST1.isNil());
      assertEquals(0, ruleAST1.getCharPositionInLine());
      assertEquals((-1), ruleAST1.getChildIndex());
      assertEquals(0, ruleAST1.getChildCount());
      assertEquals(0, ruleAST1.getTokenStartIndex());
      assertEquals(0, ruleAST1.getLine());
      assertEquals(0, ruleAST1.getNumberOfOptions());
      assertEquals(0, ruleAST1.getType());
      assertEquals(0, ruleAST1.getTokenStopIndex());
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals((-1), ruleAST1.childIndex);
      assertFalse(ruleAST1.equals((Object)ruleAST0));
      
      String string0 = python2Target0.getLoopCounter(ruleAST1);
      assertNotSame(ruleAST0, ruleAST1);
      assertNotSame(ruleAST1, ruleAST0);
      assertNotNull(string0);
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(0, classicToken0.getLine());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals("Python2", classicToken0.getText());
      assertEquals(0, classicToken0.getType());
      assertEquals((-1), ruleAST0.getChildIndex());
      assertFalse(ruleAST0.isNil());
      assertEquals(0, ruleAST0.getNumberOfOptions());
      assertEquals(0, ruleAST0.getType());
      assertEquals(0, ruleAST0.getChildCount());
      assertEquals(0, ruleAST0.getCharPositionInLine());
      assertEquals(0, ruleAST0.getTokenStartIndex());
      assertEquals(0, ruleAST0.getLine());
      assertEquals(0, ruleAST0.getTokenStopIndex());
      assertFalse(ruleAST1.isNil());
      assertEquals(0, ruleAST1.getCharPositionInLine());
      assertEquals((-1), ruleAST1.getChildIndex());
      assertEquals(0, ruleAST1.getChildCount());
      assertEquals(0, ruleAST1.getTokenStartIndex());
      assertEquals(0, ruleAST1.getLine());
      assertEquals(0, ruleAST1.getNumberOfOptions());
      assertEquals(0, ruleAST1.getType());
      assertEquals(0, ruleAST1.getTokenStopIndex());
      assertEquals("cnt0", string0);
      assertEquals((-1), ruleAST0.childIndex);
      assertEquals((-1), ruleAST1.childIndex);
      assertFalse(ruleAST0.equals((Object)ruleAST1));
      assertFalse(ruleAST1.equals((Object)ruleAST0));
      
      boolean boolean0 = python2Target0.wantsBaseVisitor();
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      String string0 = "N/$F7!^:*Ss|:tOBC";
      boolean boolean0 = true;
      String string1 = python2Target0.getTargetStringLiteralFromString(string0, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("\"N/$F7!^:*Ss|:tOBC\"", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = python2Target0.getVersion();
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("4.5.2.1", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      GrammarAST grammarAST0 = null;
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      STGroup sTGroup0 = python2Target0.loadTemplates();
      assertNotNull(sTGroup0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(sTGroup0.iterateAcrossValues);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(STGroup.trackCreationEvents);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      String string0 = python2Target0.getVersion();
      assertNotNull(string0);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", string0);
      
      python2Target0.addBadWords();
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      Set<String> set1 = python2Target0.getBadWords();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(set1.isEmpty());
      assertEquals(85, set1.size());
      assertFalse(set1.contains(string0));
      
      String string1 = "(RULE %name:TOKEN_REF (BLOCK (LEXER_ALT_ACTION (ALT %lit:STRING_LITERAL) .)))";
      // Undeclared exception!
      try { 
        python2Target0.getAltLabelContextStructName(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.Target", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(85, set0.size());
      assertFalse(set0.isEmpty());
      
      STGroup sTGroup0 = python2Target0.getTemplates();
      assertNotNull(sTGroup0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals('>', sTGroup0.delimiterStopChar);
      
      String string0 = sTGroup0.show();
      assertNotNull(string0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals("", string0);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals('>', sTGroup0.delimiterStopChar);
      
      STErrorListener sTErrorListener0 = ErrorManager.DEFAULT_ERROR_LISTENER;
      assertNotNull(sTErrorListener0);
      
      sTGroup0.encoding = string0;
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      
      sTGroup0.setListener(sTErrorListener0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals('>', sTGroup0.delimiterStopChar);
      
      String string1 = "set";
      String string2 = python2Target0.getTargetStringLiteralFromANTLRStringLiteral(codeGenerator0, string1, sTGroup0.verbose);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup0.getFileName());
      assertEquals("e", string2);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup0.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('<', sTGroup0.delimiterStartChar);
      assertEquals('>', sTGroup0.delimiterStopChar);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = python2Target0.getVersion();
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("4.5.2.1", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      python2Target0.addBadWords();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      Set<String> set1 = python2Target0.getBadWords();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(set1.isEmpty());
      assertEquals(85, set1.size());
      assertFalse(set1.contains(string2));
      assertTrue(set1.contains(string1));
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = string2;
      String string4 = "Parser can't discover a lexer to use";
      stringArray0[3] = string4;
      String string5 = "cannot declare a rule with reserved name <arg>";
      stringArray0[4] = string5;
      stringArray0[5] = sTGroup0.DICT_KEY;
      python2Target0.targetCharValueEscape = stringArray0;
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean0);
      
      boolean boolean1 = python2Target0.wantsBaseListener();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      STGroup sTGroup1 = python2Target0.loadTemplates();
      assertNotSame(sTGroup1, sTGroup0);
      assertNotNull(sTGroup1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals("org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", sTGroup1.getFileName());
      assertFalse(sTGroup1.iterateAcrossValues);
      assertFalse(STGroup.trackCreationEvents);
      assertEquals('>', sTGroup1.delimiterStopChar);
      assertEquals('<', sTGroup1.delimiterStartChar);
      assertFalse(STGroup.verbose);
      assertFalse(sTGroup1.equals((Object)sTGroup0));
      
      boolean boolean2 = python2Target0.supportsOverloadedMethods();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("Python2", python2Target0.getLanguage());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer();
      assertNotNull(aNTLRLexer0);
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(28, ANTLRLexer.ID);
      
      BufferedTokenStream bufferedTokenStream0 = new BufferedTokenStream(aNTLRLexer0);
      assertNotNull(bufferedTokenStream0);
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), bufferedTokenStream0.index());
      assertEquals(0, bufferedTokenStream0.size());
      assertEquals((-1), bufferedTokenStream0.range());
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(28, ANTLRLexer.ID);
      
      // Undeclared exception!
      try { 
        bufferedTokenStream0.LT(aNTLRLexer0.ARG_ACTION);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      Python2Target.PythonStringRenderer python2Target_PythonStringRenderer0 = new Python2Target.PythonStringRenderer();
      assertNotNull(python2Target_PythonStringRenderer0);
      
      String string0 = "Q=Lq9 JyWz\\AFrHH*";
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      
      String string1 = python2Target0.getVersion();
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = (-3503);
      String string2 = "file";
      ClassicToken classicToken0 = new ClassicToken(int0, string2);
      assertNotNull(classicToken0);
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-3503), classicToken0.getType());
      assertEquals("file", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      TokenSource tokenSource0 = null;
      CommonTokenStream commonTokenStream0 = new CommonTokenStream(tokenSource0);
      assertNotNull(commonTokenStream0);
      assertEquals((-1), commonTokenStream0.range());
      assertEquals((-1), commonTokenStream0.index());
      assertEquals(0, commonTokenStream0.size());
      
      GrammarRootAST grammarRootAST0 = new GrammarRootAST(int0, classicToken0, commonTokenStream0);
      assertNotNull(grammarRootAST0);
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-3503), classicToken0.getType());
      assertEquals("file", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals((-1), commonTokenStream0.range());
      assertEquals((-1), commonTokenStream0.index());
      assertEquals(0, commonTokenStream0.size());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertFalse(grammarRootAST0.isNil());
      assertEquals((-3503), grammarRootAST0.getType());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST0.getTokenStopIndex());
      assertEquals(0, grammarRootAST0.getTokenStartIndex());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertEquals(0, grammarRootAST0.grammarType);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertFalse(grammarRootAST0.hasErrors);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(grammarRootAST0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertNull(python2Target0.getLanguage());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals(0, classicToken0.getTokenIndex());
      assertEquals(0, classicToken0.getLine());
      assertEquals((-3503), classicToken0.getType());
      assertEquals("file", classicToken0.getText());
      assertEquals(0, classicToken0.getCharPositionInLine());
      assertEquals(0, classicToken0.getChannel());
      assertEquals((-1), commonTokenStream0.range());
      assertEquals((-1), commonTokenStream0.index());
      assertEquals(0, commonTokenStream0.size());
      assertEquals(0, grammarRootAST0.getNumberOfOptions());
      assertFalse(grammarRootAST0.isNil());
      assertEquals((-3503), grammarRootAST0.getType());
      assertEquals(0, grammarRootAST0.getChildCount());
      assertEquals(0, grammarRootAST0.getCharPositionInLine());
      assertEquals(0, grammarRootAST0.getTokenStopIndex());
      assertEquals(0, grammarRootAST0.getTokenStartIndex());
      assertEquals(0, grammarRootAST0.getLine());
      assertEquals((-1), grammarRootAST0.getChildIndex());
      assertTrue(boolean1);
      assertEquals(0, grammarRootAST0.grammarType);
      assertEquals((-1), grammarRootAST0.childIndex);
      assertFalse(grammarRootAST0.hasErrors);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      
      int int0 = 0;
      String string0 = "WS";
      CommonToken commonToken0 = new CommonToken(int0, string0);
      assertNotNull(commonToken0);
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      python2Target0.badWords = set0;
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(python2Target0.badWords.isEmpty());
      assertEquals(0, python2Target0.badWords.size());
      
      String string1 = commonToken0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals("[@-1,0:0='WS',<0>,0:-1]", string1);
      assertFalse(string1.equals((Object)string0));
      
      AltAST altAST0 = new AltAST(commonToken0);
      assertNotNull(altAST0);
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, altAST0.getNumberOfOptions());
      assertEquals(0, altAST0.getType());
      assertFalse(altAST0.isNil());
      assertEquals((-1), altAST0.getChildIndex());
      assertEquals((-1), altAST0.getTokenStopIndex());
      assertEquals((-1), altAST0.getTokenStartIndex());
      assertEquals(0, altAST0.getCharPositionInLine());
      assertEquals(0, altAST0.getLine());
      assertEquals(0, altAST0.getChildCount());
      assertEquals((-1), altAST0.childIndex);
      assertFalse(string0.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(altAST0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      int int0 = 0;
      CommonToken commonToken0 = new CommonToken(int0, python2Target0.language);
      assertNotNull(commonToken0);
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      python2Target0.badWords = set0;
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(python2Target0.badWords.isEmpty());
      assertEquals(0, python2Target0.badWords.size());
      
      String string0 = commonToken0.toString();
      assertNotNull(string0);
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals(0, commonToken0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(0, commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getType());
      assertEquals("[@-1,0:0='<no text>',<0>,0:-1]", string0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        python2Target0.addBadWords();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean0);
      
      python2Target0.addBadWords();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      boolean boolean1 = python2Target0.wantsBaseVisitor();
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Set<String> set0 = python2Target0.getBadWords();
      assertNotNull(set0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(set0.isEmpty());
      assertEquals(85, set0.size());
      
      ANTLRFileStream aNTLRFileStream0 = new ANTLRFileStream(python2Target0.language);
      assertNotNull(aNTLRFileStream0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(0, aNTLRFileStream0.index());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertNull(aNTLRFileStream0.getSourceName());
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertNotNull(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      
      int int0 = 0;
      recognizerSharedState0.tokenStartCharPositionInLine = int0;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertNotNull(recognizerSharedState1);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      ANTLRLexer aNTLRLexer0 = new ANTLRLexer(aNTLRFileStream0, recognizerSharedState1);
      assertNotNull(aNTLRLexer0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(0, aNTLRFileStream0.index());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertNull(aNTLRFileStream0.getSourceName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      int int1 = (-3383);
      recognizerSharedState1.lastErrorIndex = int1;
      CommonToken commonToken0 = (CommonToken)aNTLRLexer0.emit();
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertNotNull(commonToken0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(0, aNTLRFileStream0.index());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertNull(aNTLRFileStream0.getSourceName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-3383), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      PredAST predAST0 = new PredAST(commonToken0);
      assertNotNull(predAST0);
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, aNTLRFileStream0.getCharPositionInLine());
      assertEquals(0, aNTLRFileStream0.index());
      assertEquals(0, aNTLRFileStream0.size());
      assertEquals(1, aNTLRFileStream0.getLine());
      assertNull(aNTLRFileStream0.getSourceName());
      assertEquals(0, aNTLRLexer0.getBacktrackingLevel());
      assertEquals(0, aNTLRLexer0.getRuleMemoizationCacheSize());
      assertEquals("org/antlr/v4/parse/ANTLRLexer.g", aNTLRLexer0.getGrammarFileName());
      assertEquals(0, aNTLRLexer0.getCharPositionInLine());
      assertEquals(0, aNTLRLexer0.getNumberOfSyntaxErrors());
      assertFalse(aNTLRLexer0.failed());
      assertEquals(1, aNTLRLexer0.getLine());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals((-1), commonToken0.getStartIndex());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals(0, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals((-1), commonToken0.getStopIndex());
      assertEquals(0, commonToken0.getType());
      assertEquals((-1), predAST0.getTokenStopIndex());
      assertEquals((-1), predAST0.getChildIndex());
      assertEquals((-1), predAST0.getTokenStartIndex());
      assertEquals(0, predAST0.getNumberOfOptions());
      assertEquals(0, predAST0.getType());
      assertEquals(0, predAST0.getLine());
      assertEquals(0, predAST0.getCharPositionInLine());
      assertEquals(0, predAST0.getChildCount());
      assertFalse(predAST0.isNil());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-3383), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(2, ANTLRLexer.COMMENTS_CHANNEL);
      assertEquals(66, ANTLRLexer.TOKEN_REF);
      assertEquals(21, ANTLRLexer.ERRCHAR);
      assertEquals(22, ANTLRLexer.ESC_SEQ);
      assertEquals(10, ANTLRLexer.ASSIGN);
      assertEquals(36, ANTLRLexer.MODE);
      assertEquals(27, ANTLRLexer.HEX_DIGIT);
      assertEquals(24, ANTLRLexer.FRAGMENT);
      assertEquals(69, ANTLRLexer.UnicodeBOM);
      assertEquals(50, ANTLRLexer.PUBLIC);
      assertEquals(5, ANTLRLexer.ACTION_CHAR_LITERAL);
      assertEquals(16, ANTLRLexer.COMMA);
      assertEquals(23, ANTLRLexer.FINALLY);
      assertEquals(47, ANTLRLexer.POUND);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertFalse(aNTLRLexer0.isLexerRule);
      assertEquals(37, ANTLRLexer.NESTED_ACTION);
      assertEquals(13, ANTLRLexer.CHANNELS);
      assertEquals(60, ANTLRLexer.SRC);
      assertEquals(67, ANTLRLexer.TREE_GRAMMAR);
      assertEquals(55, ANTLRLexer.RETURNS);
      assertEquals(71, ANTLRLexer.WSCHARS);
      assertEquals(32, ANTLRLexer.LEXER_CHAR_SET);
      assertEquals(38, ANTLRLexer.NLCHARS);
      assertEquals(39, ANTLRLexer.NOT);
      assertEquals((-1), ANTLRLexer.EOF);
      assertEquals(9, ANTLRLexer.ARG_OR_CHARSET);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, ANTLRLexer.SEMPRED);
      assertEquals(4, ANTLRLexer.ACTION);
      assertEquals(52, ANTLRLexer.RANGE);
      assertEquals(49, ANTLRLexer.PROTECTED);
      assertEquals(41, ANTLRLexer.NameStartChar);
      assertEquals(45, ANTLRLexer.PLUS);
      assertEquals(40, ANTLRLexer.NameChar);
      assertEquals(19, ANTLRLexer.DOLLAR);
      assertEquals(62, ANTLRLexer.STRING_LITERAL);
      assertEquals(70, ANTLRLexer.WS);
      assertEquals(65, ANTLRLexer.TOKENS_SPEC);
      assertEquals(44, ANTLRLexer.PARSER);
      assertEquals(25, ANTLRLexer.GRAMMAR);
      assertEquals(11, ANTLRLexer.AT);
      assertEquals(51, ANTLRLexer.QUESTION);
      assertEquals(64, ANTLRLexer.THROWS);
      assertEquals(57, ANTLRLexer.RULE_REF);
      assertEquals(56, ANTLRLexer.RPAREN);
      assertEquals(12, ANTLRLexer.CATCH);
      assertEquals(6, ANTLRLexer.ACTION_ESC);
      assertEquals(31, ANTLRLexer.LEXER);
      assertEquals(54, ANTLRLexer.RBRACE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, ANTLRLexer.LT);
      assertEquals(26, ANTLRLexer.GT);
      assertEquals(29, ANTLRLexer.IMPORT);
      assertEquals(15, ANTLRLexer.COLONCOLON);
      assertEquals(68, ANTLRLexer.UNICODE_ESC);
      assertEquals(63, ANTLRLexer.SYNPRED);
      assertEquals(8, ANTLRLexer.ARG_ACTION);
      assertEquals(17, ANTLRLexer.COMMENT);
      assertEquals(14, ANTLRLexer.COLON);
      assertEquals(18, ANTLRLexer.DOC_COMMENT);
      assertEquals(20, ANTLRLexer.DOT);
      assertEquals(42, ANTLRLexer.OPTIONS);
      assertEquals(7, ANTLRLexer.ACTION_STRING_LITERAL);
      assertEquals(28, ANTLRLexer.ID);
      assertEquals(72, ANTLRLexer.WSNLCHARS);
      assertEquals(46, ANTLRLexer.PLUS_ASSIGN);
      assertEquals(58, ANTLRLexer.SEMI);
      assertEquals(33, ANTLRLexer.LOCALS);
      assertEquals(43, ANTLRLexer.OR);
      assertEquals(34, ANTLRLexer.LPAREN);
      assertEquals(53, ANTLRLexer.RARROW);
      assertEquals(30, ANTLRLexer.INT);
      assertEquals(61, ANTLRLexer.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, ANTLRLexer.PRIVATE);
      assertEquals((-1), predAST0.childIndex);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      // Undeclared exception!
      try { 
        python2Target0.visibleGrammarSymbolCausesIssueInGeneratedCode(predAST0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      int int0 = 54;
      GrammarAST grammarAST0 = new GrammarAST(int0);
      assertNotNull(grammarAST0);
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(54, grammarAST0.getType());
      assertEquals(0, grammarAST0.getChildCount());
      assertFalse(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals((-1), grammarAST0.childIndex);
      
      Set<String> set0 = null;
      python2Target0.badWords = set0;
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      
      String string0 = python2Target0.getLoopCounter(grammarAST0);
      assertNotNull(string0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertEquals(0, grammarAST0.getCharPositionInLine());
      assertEquals(54, grammarAST0.getType());
      assertEquals(0, grammarAST0.getChildCount());
      assertFalse(grammarAST0.isNil());
      assertEquals((-1), grammarAST0.getTokenStartIndex());
      assertEquals((-1), grammarAST0.getTokenStopIndex());
      assertEquals((-1), grammarAST0.getChildIndex());
      assertEquals(0, grammarAST0.getLine());
      assertEquals("cnt-1", string0);
      assertEquals((-1), grammarAST0.childIndex);
      
      boolean boolean0 = python2Target0.supportsOverloadedMethods();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertNull(python2Target0.getLanguage());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        python2Target0.getBadWords();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Python2Target python2Target0 = new Python2Target();
      assertNotNull(python2Target0);
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      Python2Target.python2Keywords = python2Target0.targetCharValueEscape;
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      python2Target0.badWords = set0;
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(python2Target0.badWords.isEmpty());
      assertEquals(0, python2Target0.badWords.size());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertTrue(locale1.equals((Object)locale0));
      
      boolean boolean0 = python2Target0.wantsBaseListener();
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertNull(python2Target0.getLanguage());
      assertFalse(python2Target0.wantsBaseListener());
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        python2Target0.getBadWords();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      CodeGenerator codeGenerator0 = null;
      Python2Target python2Target0 = new Python2Target(codeGenerator0);
      assertNotNull(python2Target0);
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      Set<String> set0 = null;
      python2Target0.badWords = set0;
      assertEquals("4.5.2.1", python2Target0.getVersion());
      assertFalse(python2Target0.wantsBaseListener());
      assertFalse(python2Target0.wantsBaseVisitor());
      assertFalse(python2Target0.supportsOverloadedMethods());
      assertEquals(64, python2Target0.getInlineTestSetWordSize());
      assertEquals("Python2", python2Target0.getLanguage());
      assertEquals(Integer.MAX_VALUE, python2Target0.getSerializedATNSegmentLimit());
      
      // Undeclared exception!
      try { 
        python2Target0.addBadWords();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.v4.codegen.target.Python2Target", e);
      }
  }
}
