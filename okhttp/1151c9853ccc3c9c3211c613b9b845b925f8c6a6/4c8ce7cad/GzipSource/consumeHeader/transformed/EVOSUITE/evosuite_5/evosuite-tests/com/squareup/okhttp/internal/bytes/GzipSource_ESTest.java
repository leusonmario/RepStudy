/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 14:33:20 GMT 2021
 */

package com.squareup.okhttp.internal.bytes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.internal.bytes.ByteString;
import com.squareup.okhttp.internal.bytes.Deadline;
import com.squareup.okhttp.internal.bytes.GzipSource;
import com.squareup.okhttp.internal.bytes.InflaterSource;
import com.squareup.okhttp.internal.bytes.OkBuffer;
import com.squareup.okhttp.internal.bytes.Segment;
import java.io.EOFException;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.CRC32;
import java.util.zip.Inflater;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GzipSource_ESTest extends GzipSource_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(gzipSource0.buffer, gzipSource0.FEXTRA, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.seek(gzipSource0.SECTION_TRAILER, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      GzipSource gzipSource1 = new GzipSource(gzipSource0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      GzipSource.SECTION_HEADER = gzipSource1.FHCRC;
      long long0 = gzipSource1.read(gzipSource0.buffer, gzipSource0.SECTION_HEADER, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((-1L), long0);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotSame(gzipSource0, gzipSource1);
      assertNotSame(gzipSource1, gzipSource0);
      
      // Undeclared exception!
      try { 
        gzipSource0.close(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      gzipSource0.section = (int) gzipSource0.FHCRC;
      // Undeclared exception!
      try { 
        gzipSource0.read(gzipSource0.buffer, gzipSource0.section, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      String string0 = "7ZoWU\"lZ!6gDY557]";
      ByteString byteString0 = ByteString.encodeUtf8(string0);
      assertEquals(17, byteString0.size());
      assertNotNull(byteString0);
      
      gzipSource0.buffer.write(byteString0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(17, byteString0.size());
      
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00375a != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeShort(gzipSource0.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(2L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      gzipSource0.updateCrc(okBuffer0, gzipSource0.FEXTRA, gzipSource0.FEXTRA);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(2L, okBuffer0.byteCount());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      long long0 = (-2131L);
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotNull(gzipSource0);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(gzipSource0.buffer, long0, deadline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2131
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      byte byte0 = (byte)0;
      OkBuffer okBuffer1 = okBuffer0.writeByte(byte0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      long long0 = gzipSource0.read(okBuffer0, byte0, deadline0);
      assertEquals(0L, long0);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      try { 
        gzipSource0.require(gzipSource0.FEXTRA, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      byte byte0 = (byte) (-8);
      OkBuffer okBuffer1 = okBuffer0.writeByte(byte0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = null;
      long long0 = gzipSource0.seek(byte0, deadline0);
      assertEquals(0L, long0);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      String string0 = "7ZoL\"lZ!6gDY557]";
      ByteString byteString0 = ByteString.encodeUtf8(string0);
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      gzipSource0.buffer.write(byteString0);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(16, byteString0.size());
      
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00375a != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      gzipSource0.section = (int) gzipSource0.SECTION_TRAILER;
      // Undeclared exception!
      try { 
        gzipSource0.read(gzipSource0.buffer, gzipSource0.SECTION_TRAILER, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeInt(gzipSource0.SECTION_HEADER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(4L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      String string0 = "7ZoL\"lZj6g]7YK=7]";
      ByteString byteString0 = ByteString.encodeUtf8(string0);
      assertEquals(17, byteString0.size());
      assertNotNull(byteString0);
      
      okBuffer0.write(byteString0);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(21L, okBuffer0.byteCount());
      assertEquals(17, byteString0.size());
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      long long0 = (-2283L);
      gzipSource0.updateCrc(okBuffer0, long0, long0);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0L, okBuffer0.byteCount());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 5;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer1);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(gzipSource1);
      
      long long0 = (-4458L);
      // Undeclared exception!
      try { 
        gzipSource1.updateCrc(okBuffer0, long0, gzipSource0.FEXTRA);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      String string0 = null;
      int int0 = 4562;
      int int1 = 0;
      try { 
        gzipSource0.checkEqual(string0, int0, int1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // null: actual 0x000000 != expected 0x0011d2
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      String string0 = null;
      int int0 = 816;
      gzipSource0.checkEqual(string0, int0, int0);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      
      byte byte0 = (byte) (-110);
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.seek(byte0, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 24;
      long long0 = (-636L);
      // Undeclared exception!
      try { 
        gzipSource0.updateCrc(okBuffer0, long0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      CRC32 cRC32_0 = new CRC32();
      assertEquals(0L, cRC32_0.getValue());
      assertNotNull(cRC32_0);
      
      gzipSource0.crc = cRC32_0;
      assertEquals(0L, cRC32_0.getValue());
      assertEquals(0L, gzipSource0.crc.getValue());
      
      int int0 = 16;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = gzipSource0.SECTION_DONE;
      byteArray0[1] = gzipSource0.FEXTRA;
      byte byte0 = (byte)12;
      byteArray0[2] = byte0;
      byteArray0[3] = gzipSource0.SECTION_DONE;
      byteArray0[4] = gzipSource0.SECTION_BODY;
      cRC32_0.update(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)2, (byte)12, (byte)3, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2126241655L, cRC32_0.getValue());
      
      Deadline deadline1 = deadline0.start(gzipSource0.section, timeUnit0);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertNotNull(deadline1);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.require(int0, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      int int0 = 0;
      OkBuffer okBuffer0 = gzipSource0.buffer.writeInt(int0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(4L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      long long0 = 2L;
      long long1 = 0L;
      gzipSource0.updateCrc(okBuffer0, long0, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(4L, okBuffer0.byteCount());
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      int int0 = 0;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      deadline0.throwIfReached();
      gzipSource0.require(int0, deadline0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      
      // Undeclared exception!
      try { 
        gzipSource0.close(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      byte byte0 = (byte)0;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.seek(byte0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertNotNull(gzipSource0);
      
      int int0 = (-2187);
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Deadline deadline1 = deadline0.start(gzipSource0.FHCRC, timeUnit0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertNotNull(deadline1);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      
      gzipSource0.require(int0, deadline1);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      
      gzipSource0.require(int0, deadline0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertFalse(deadline0.reached());
      assertSame(deadline0, deadline1);
      
      int int1 = 0;
      gzipSource0.require(int1, deadline1);
      assertFalse(int1 == int0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      byte byte0 = (byte) (-27);
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.seek(byte0, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 2355;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      String string0 = "";
      gzipSource0.checkEqual(string0, int0, int0);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Deadline deadline1 = deadline0.start(gzipSource0.SECTION_DONE, timeUnit0);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertNotNull(deadline1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      Deadline deadline2 = deadline0.start(gzipSource0.SECTION_DONE, timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertFalse(deadline0.reached());
      assertFalse(deadline2.reached());
      assertNotNull(deadline2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      assertSame(deadline2, deadline0);
      assertSame(deadline2, deadline1);
      
      int int1 = (-3157);
      OkBuffer okBuffer2 = okBuffer1.writeShort(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertEquals(3L, okBuffer2.byteCount());
      assertNotNull(okBuffer2);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      
      deadline2.throwIfReached();
      assertFalse(int0 == int1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertFalse(deadline0.reached());
      assertFalse(deadline2.reached());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      assertSame(deadline2, deadline0);
      assertSame(deadline2, deadline1);
      
      gzipSource0.close(deadline2);
      assertFalse(int0 == int1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertFalse(deadline0.reached());
      assertFalse(deadline2.reached());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      assertSame(deadline2, deadline0);
      assertSame(deadline2, deadline1);
      
      gzipSource0.close(deadline0);
      assertFalse(int0 == int1);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertFalse(deadline0.reached());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      
      gzipSource0.close(deadline1);
      assertFalse(int0 == int1);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline2);
      assertSame(deadline1, deadline0);
      
      int int2 = (-2291);
      try { 
        gzipSource0.checkEqual(string0, int2, int0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // : actual 0x000933 != expected 0xfffff70d
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeInt(gzipSource0.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(4L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      long long0 = (-1433L);
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1433
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      OkBuffer okBuffer2 = okBuffer1.writeInt(gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(5L, okBuffer0.byteCount());
      assertEquals(5L, okBuffer1.byteCount());
      assertEquals(5L, okBuffer2.byteCount());
      assertNotNull(okBuffer2);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer2);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(5L, okBuffer0.byteCount());
      assertEquals(5L, okBuffer1.byteCount());
      assertEquals(5L, okBuffer2.byteCount());
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      long long0 = gzipSource1.read(gzipSource0.buffer, int0, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(0L, long0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(5L, okBuffer0.byteCount());
      assertEquals(5L, okBuffer1.byteCount());
      assertEquals(5L, okBuffer2.byteCount());
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertNotSame(gzipSource1, gzipSource0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      OkBuffer okBuffer1 = okBuffer0.writeShort(gzipSource0.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer1);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(gzipSource1);
      
      int int0 = (-672);
      OkBuffer okBuffer2 = gzipSource0.buffer.writeByte(int0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(3L, okBuffer2.byteCount());
      assertNotNull(okBuffer2);
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      
      long long0 = 2434L;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      try { 
        gzipSource1.read(okBuffer2, long0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 3;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      int int1 = 97;
      OkBuffer okBuffer2 = okBuffer1.writeByte(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertEquals(3L, okBuffer2.byteCount());
      assertNotNull(okBuffer2);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertEquals(3L, okBuffer2.byteCount());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 2414;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      int int1 = okBuffer1.readIntLe();
      assertFalse(int1 == int0);
      assertEquals(1846083584, int1);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      long long0 = 424L;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.close(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 9;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      // Undeclared exception!
      try { 
        gzipSource0.updateCrc(okBuffer1, int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      int int0 = 0;
      OkBuffer okBuffer0 = gzipSource0.buffer.writeByte(int0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(1L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      long long0 = 1250L;
      // Undeclared exception!
      try { 
        gzipSource0.updateCrc(okBuffer0, int0, long0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      InflaterSource inflaterSource0 = gzipSource0.inflaterSource;
      assertNull(inflaterSource0);
      
      byte byte0 = (byte)107;
      GzipSource.SECTION_TRAILER = byte0;
      GzipSource gzipSource1 = null;
      try {
        gzipSource1 = new GzipSource(inflaterSource0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 626;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      byte[] byteArray0 = new byte[3];
      GzipSource.FCOMMENT = gzipSource0.FNAME;
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      
      byteArray0[0] = gzipSource0.SECTION_DONE;
      byteArray0[1] = gzipSource0.SECTION_TRAILER;
      byteArray0[2] = gzipSource0.FHCRC;
      int int1 = 2;
      okBuffer1.write(byteArray0, int1, gzipSource0.section);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((byte)3, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertArrayEquals(new byte[] {(byte)3, (byte)2, (byte)1}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      String string0 = "MyngP3uOU";
      GzipSource.SECTION_DONE = gzipSource0.FCOMMENT;
      int int0 = 33;
      InflaterSource inflaterSource0 = gzipSource0.inflaterSource;
      assertNull(inflaterSource0);
      
      gzipSource0.inflaterSource = inflaterSource0;
      int int1 = 4;
      try { 
        gzipSource0.checkEqual(string0, int0, int1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MyngP3uOU: actual 0x000004 != expected 0x000021
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = null;
      // Undeclared exception!
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      boolean boolean0 = false;
      Inflater inflater0 = new Inflater(boolean0);
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer0, inflater0, okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflaterSource0);
      
      InflaterSource inflaterSource1 = new InflaterSource(inflaterSource0, inflater0);
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflaterSource1);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource1);
      assertFalse(inflaterSource0.equals((Object)inflaterSource1));
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(gzipSource0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = gzipSource0.SECTION_DONE;
      byteArray0[1] = gzipSource0.FCOMMENT;
      byteArray0[2] = gzipSource0.FCOMMENT;
      byteArray0[3] = gzipSource0.FEXTRA;
      byteArray0[4] = gzipSource0.FNAME;
      byteArray0[5] = gzipSource0.FHCRC;
      byteArray0[6] = gzipSource0.FCOMMENT;
      byteArray0[7] = gzipSource0.FHCRC;
      byte byte0 = (byte)1;
      byteArray0[8] = byte0;
      int int0 = inflater0.inflate(byteArray0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)3, (byte)4, (byte)4, (byte)2, (byte)3, (byte)1, (byte)4, (byte)1, (byte)1}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      inflaterSource1.close(deadline0);
      assertFalse(inflaterSource0.equals((Object)inflaterSource1));
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertEquals(0L, okBuffer0.byteCount());
      assertFalse(inflater0.needsDictionary());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertNotSame(inflaterSource0, inflaterSource1);
      assertNotSame(inflaterSource1, inflaterSource0);
      
      byte byte1 = (byte) (-57);
      Deadline deadline1 = new Deadline();
      assertFalse(deadline1.equals((Object)deadline0));
      assertTrue(deadline1.reached());
      assertNotNull(deadline1);
      
      // Undeclared exception!
      try { 
        gzipSource0.seek(byte1, deadline1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeByte(gzipSource0.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(1L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      String string0 = "7ZoL\"lZ!6gDY557]";
      ByteString byteString0 = ByteString.encodeUtf8(string0);
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      okBuffer0.write(byteString0);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(17L, okBuffer0.byteCount());
      assertEquals(16, byteString0.size());
      
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x000237 != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      boolean boolean0 = false;
      Inflater inflater0 = new Inflater(boolean0);
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer0, inflater0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(gzipSource0);
      
      long long0 = 0L;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      int int0 = 118;
      try { 
        gzipSource0.require(int0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      int int0 = 15;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      deadline0.throwIfReached();
      try { 
        gzipSource0.require(int0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 3;
      Segment segment0 = okBuffer0.writableSegment(int0);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(segment0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      long long0 = 10L;
      // Undeclared exception!
      gzipSource0.updateCrc(okBuffer0, long0, long0);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      int int0 = 1777;
      OkBuffer okBuffer0 = gzipSource0.buffer.writeInt(int0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals(4L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      long long0 = 2044L;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long1 = (-2301L);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Deadline deadline1 = deadline0.start(long1, timeUnit0);
      assertFalse(long1 == long0);
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertNotNull(deadline1);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long0, deadline1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      GzipSource gzipSource1 = new GzipSource(gzipSource0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = (-2667L);
      int int0 = (-3335);
      gzipSource0.section = int0;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      gzipSource1.inflaterSource = gzipSource0.inflaterSource;
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertNotNull(deadline1);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      
      long long1 = (-1970L);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      byte byte0 = (byte)0;
      GzipSource.FCOMMENT = byte0;
      TimeUnit timeUnit2 = TimeUnit.HOURS;
      Deadline deadline2 = deadline1.start(gzipSource0.SECTION_TRAILER, timeUnit2);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(long0 == long1);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(timeUnit0.equals((Object)timeUnit2));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((-3335), gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertFalse(deadline2.reached());
      assertNotNull(deadline2);
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertSame(deadline1, deadline2);
      assertSame(deadline2, deadline1);
      assertSame(deadline2, deadline0);
      
      Deadline deadline3 = deadline1.start(long1, timeUnit1);
      assertFalse(long0 == long1);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(timeUnit0.equals((Object)timeUnit2));
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit2));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertTrue(deadline3.reached());
      assertNotNull(deadline3);
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline3);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertSame(deadline1, deadline3);
      assertSame(deadline1, deadline2);
      assertSame(deadline3, deadline0);
      assertSame(deadline3, deadline1);
      assertSame(deadline3, deadline2);
      
      Deadline deadline4 = deadline1.start(long0, timeUnit0);
      assertFalse(long0 == long1);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(timeUnit0.equals((Object)timeUnit2));
      assertTrue(deadline4.reached());
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertNotNull(deadline4);
      assertSame(deadline4, deadline3);
      assertSame(deadline4, deadline0);
      assertSame(deadline4, deadline1);
      assertSame(deadline4, deadline2);
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline4);
      assertSame(deadline0, deadline3);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline4);
      assertSame(deadline1, deadline0);
      assertSame(deadline1, deadline3);
      assertSame(deadline1, deadline2);
      
      Deadline deadline5 = deadline0.start(gzipSource0.FNAME, timeUnit1);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(timeUnit1.equals((Object)timeUnit2));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((-3335), gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertFalse(deadline5.reached());
      assertFalse(deadline0.reached());
      assertNotNull(deadline5);
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(deadline5, deadline3);
      assertSame(deadline5, deadline4);
      assertSame(deadline5, deadline0);
      assertSame(deadline5, deadline1);
      assertSame(deadline5, deadline2);
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline5);
      assertSame(deadline0, deadline4);
      assertSame(deadline0, deadline3);
      assertSame(deadline0, deadline1);
      
      try { 
        gzipSource1.read(gzipSource0.buffer, gzipSource0.SECTION_TRAILER, deadline1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 4;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      int int1 = 2741;
      OkBuffer okBuffer2 = okBuffer1.writeByte(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertEquals(3L, okBuffer2.byteCount());
      assertNotNull(okBuffer2);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      String string0 = "closed";
      okBuffer0.writeUtf8(string0);
      assertEquals(9L, okBuffer0.byteCount());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)12;
      byteArray0[2] = byte2;
      byte byte3 = (byte)10;
      byteArray0[3] = byte3;
      byte byte4 = (byte)86;
      byteArray0[4] = byte4;
      byte byte5 = (byte)126;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      okBuffer2.write(byteArray0, (int) byte1, (int) byte0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(byte0 == byte5);
      assertFalse(byte0 == byte4);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte3);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte4);
      assertFalse(byte1 == byte5);
      assertFalse(byte1 == byte3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)12, (byte)10, (byte)86, (byte)126, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(9L, okBuffer0.byteCount());
      assertEquals(9L, okBuffer1.byteCount());
      assertEquals(9L, okBuffer2.byteCount());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      
      OkBuffer okBuffer3 = okBuffer2.writeInt(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(13L, okBuffer0.byteCount());
      assertEquals(13L, okBuffer1.byteCount());
      assertEquals(13L, okBuffer2.byteCount());
      assertEquals(13L, okBuffer3.byteCount());
      assertNotNull(okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(13L, okBuffer0.byteCount());
      assertEquals(13L, okBuffer1.byteCount());
      assertEquals(13L, okBuffer2.byteCount());
      assertEquals(13L, okBuffer3.byteCount());
      assertNotNull(gzipSource0);
      
      long long0 = 0L;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      long long1 = gzipSource0.read(okBuffer0, long0, deadline0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(13L, okBuffer0.byteCount());
      assertEquals(13L, okBuffer1.byteCount());
      assertEquals(13L, okBuffer2.byteCount());
      assertEquals(13L, okBuffer3.byteCount());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CRC: actual 0x000000 != expected 0x63b50400
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = (-50);
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      byte byte0 = (byte) (-52);
      long long0 = (-2613L);
      okBuffer0.byteCount = long0;
      assertEquals((-2613L), okBuffer0.byteCount());
      
      InflaterSource inflaterSource0 = gzipSource0.inflaterSource;
      assertNotNull(inflaterSource0);
      
      gzipSource0.inflaterSource = inflaterSource0;
      assertEquals((-2613L), okBuffer0.byteCount());
      assertEquals((-2613L), okBuffer1.byteCount());
      
      long long1 = 3L;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      GzipSource gzipSource1 = new GzipSource(inflaterSource0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((-2613L), okBuffer0.byteCount());
      assertEquals((-2613L), okBuffer1.byteCount());
      assertNotNull(gzipSource1);
      
      long long2 = 326L;
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long2, deadline0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      OkBuffer okBuffer1 = okBuffer0.writeInt(gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer1);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Deadline deadline1 = Deadline.NONE;
      assertNotNull(deadline1);
      assertSame(deadline1, deadline0);
      
      gzipSource1.require(gzipSource0.SECTION_DONE, deadline1);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotSame(gzipSource1, gzipSource0);
      assertSame(deadline1, deadline0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      String string0 = "7ZoL\"lZ!6gDY557]";
      ByteString byteString0 = ByteString.encodeUtf8(string0);
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      gzipSource0.buffer.write(byteString0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(16, byteString0.size());
      
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00375a != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = (-1610612735);
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer1);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(gzipSource1);
      
      byte byte0 = (byte)51;
      Deadline deadline0 = null;
      try { 
        gzipSource1.seek(byte0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      long long0 = 32L;
      System.setCurrentTimeMillis(long0);
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long1 = (-774L);
      okBuffer0.byteCount = long1;
      assertEquals((-774L), okBuffer0.byteCount());
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertNotNull(gzipSource0);
      
      GzipSource gzipSource1 = new GzipSource(gzipSource0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      byte byte0 = (byte)1;
      GzipSource.SECTION_HEADER = byte0;
      String string0 = "(]Bj*XB2+o<T7D2y'!";
      int int0 = (-1645);
      gzipSource1.checkEqual(string0, int0, int0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotSame(gzipSource0, gzipSource1);
      assertNotSame(gzipSource1, gzipSource0);
      
      String string1 = "BEfGqv{(I}tXH5)<";
      int int1 = 0;
      long long0 = 785L;
      long long1 = gzipSource1.read(gzipSource0.buffer, long0, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotSame(gzipSource0, gzipSource1);
      assertNotSame(gzipSource1, gzipSource0);
      
      deadline0.throwIfReached();
      Deadline deadline1 = Deadline.NONE;
      assertNotNull(deadline1);
      assertSame(deadline1, deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.close(deadline1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      GzipSource gzipSource1 = new GzipSource(gzipSource0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      byte byte0 = (byte)1;
      GzipSource.SECTION_HEADER = byte0;
      String string0 = "(]Bj*XB2+o<T7D2y'!";
      int int0 = (-1645);
      gzipSource1.checkEqual(string0, int0, int0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotSame(gzipSource0, gzipSource1);
      assertNotSame(gzipSource1, gzipSource0);
      
      String string1 = "BEfGqv{(I}tXH5)<";
      gzipSource1.section = (int) gzipSource0.FCOMMENT;
      int int1 = 0;
      long long0 = 785L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long1 = gzipSource1.read(gzipSource0.buffer, long0, deadline0);
      assertFalse(long1 == long0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((-1L), long1);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(4, gzipSource1.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotSame(gzipSource0, gzipSource1);
      assertNotSame(gzipSource1, gzipSource0);
      
      deadline0.throwIfReached();
      Deadline deadline1 = Deadline.NONE;
      assertNotNull(deadline1);
      assertSame(deadline1, deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.close(deadline1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeInt(gzipSource0.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(4L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource1 = new GzipSource(gzipSource0.buffer);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertNotNull(gzipSource1);
      
      int int0 = (-672);
      OkBuffer okBuffer1 = gzipSource0.buffer.writeByte(int0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(5L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer1, okBuffer0);
      
      long long0 = 2462L;
      byte byte0 = (byte)24;
      byte byte1 = (byte)59;
      GzipSource.SECTION_HEADER = byte1;
      GzipSource.FEXTRA = byte0;
      String string0 = "";
      okBuffer0.writeUtf8(string0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertEquals((byte)24, GzipSource.FEXTRA);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)59, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(5L, okBuffer0.byteCount());
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer1);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long1 = gzipSource0.read(okBuffer0, gzipSource1.FEXTRA, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals((byte)24, GzipSource.FEXTRA);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)59, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)24, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)59, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals(5L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer1);
      assertNotSame(gzipSource1, gzipSource0);
      
      long long2 = gzipSource1.read(okBuffer1, long0, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertFalse(long0 == long1);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals((-1L), long2);
      assertEquals((byte)24, GzipSource.FEXTRA);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)59, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)24, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)59, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals(5L, okBuffer1.byteCount());
      assertTrue(deadline0.reached());
      assertNotSame(gzipSource0, gzipSource1);
      assertNotSame(gzipSource1, gzipSource0);
      assertSame(okBuffer1, okBuffer0);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeByte(gzipSource0.FEXTRA);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(1L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      String string0 = "7ZoL\"lZ!6gDY557]";
      ByteString byteString0 = ByteString.encodeUtf8(string0);
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      okBuffer0.write(byteString0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(17L, okBuffer0.byteCount());
      assertEquals(16, byteString0.size());
      
      int int0 = okBuffer0.readInt();
      assertEquals(37182063, int0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(13L, okBuffer0.byteCount());
      
      okBuffer0.write(byteString0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(29L, okBuffer0.byteCount());
      assertEquals(16, byteString0.size());
      
      byte byte0 = (byte)0;
      long long0 = 2033L;
      long long1 = 1L;
      gzipSource0.updateCrc(okBuffer0, long0, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(29L, okBuffer0.byteCount());
      
      GzipSource.SECTION_BODY = byte0;
      long long2 = (-708L);
      long long3 = 3899L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      long long4 = 0L;
      InflaterSource inflaterSource0 = null;
      try {
        inflaterSource0 = new InflaterSource(okBuffer0, gzipSource0.inflater);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // inflater == null
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      CRC32 cRC32_0 = gzipSource0.crc;
      assertEquals(0L, cRC32_0.getValue());
      assertNotNull(cRC32_0);
      
      gzipSource0.crc = cRC32_0;
      assertEquals(0L, cRC32_0.getValue());
      assertEquals(0L, gzipSource0.crc.getValue());
      
      OkBuffer okBuffer1 = okBuffer0.writeInt(gzipSource0.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer1);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(gzipSource1);
      
      long long0 = (-2154L);
      cRC32_0.update(gzipSource1.section);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(3523407757L, cRC32_0.getValue());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotSame(gzipSource1, gzipSource0);
      
      byte byte0 = (byte)0;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long1 = gzipSource0.seek(byte0, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertTrue(deadline0.reached());
      assertNotSame(gzipSource0, gzipSource1);
      
      int int0 = 0;
      gzipSource1.require(int0, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertTrue(deadline0.reached());
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotSame(gzipSource1, gzipSource0);
      
      System.setCurrentTimeMillis(gzipSource0.SECTION_DONE);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertNotSame(gzipSource0, gzipSource1);
      
      int int1 = 0;
      String string0 = okBuffer0.readUtf8(gzipSource1.FNAME);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals("\u0000\u0000\u0000", string0);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(string0);
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotSame(gzipSource1, gzipSource0);
      
      // Undeclared exception!
      try { 
        okBuffer1.getByte(gzipSource0.SECTION_TRAILER);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource0);
      
      GzipSource gzipSource1 = new GzipSource(gzipSource0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      byte byte0 = (byte)1;
      GzipSource.SECTION_HEADER = byte0;
      String string0 = "(]Bj*XB2+o<T7D2y'!";
      int int0 = (-1645);
      byte byte1 = (byte) (-42);
      GzipSource.SECTION_BODY = byte1;
      String string1 = "BEfGqv{(I}tXH5)<";
      int int1 = 0;
      long long0 = 785L;
      long long1 = gzipSource1.read(gzipSource0.buffer, long0, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte) (-42), GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte) (-42), GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotSame(gzipSource0, gzipSource1);
      assertNotSame(gzipSource1, gzipSource0);
      
      deadline0.throwIfReached();
      Deadline deadline1 = Deadline.NONE;
      assertNotNull(deadline1);
      assertSame(deadline1, deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.close(deadline1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 631;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-48);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-15);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-115);
      byteArray0[3] = byte3;
      int int1 = (-2068);
      int int2 = (-1328);
      okBuffer0.write(byteArray0, int1, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-48), (byte) (-15), (byte) (-115)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1326L), okBuffer0.byteCount());
      assertSame(okBuffer0, okBuffer1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int3 = 4658;
      OkBuffer okBuffer2 = okBuffer1.writeByte(int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertEquals((-1325L), okBuffer0.byteCount());
      assertEquals((-1325L), okBuffer2.byteCount());
      assertEquals((-1325L), okBuffer1.byteCount());
      assertNotNull(okBuffer2);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((-1325L), okBuffer0.byteCount());
      assertEquals((-1325L), okBuffer2.byteCount());
      assertEquals((-1325L), okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      int int4 = 13;
      Deadline deadline0 = null;
      // Undeclared exception!
      try { 
        gzipSource0.require(int4, deadline0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 631;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-48);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-15);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-115);
      byteArray0[3] = byte3;
      int int1 = (-2068);
      int int2 = (-1328);
      okBuffer0.write(byteArray0, int1, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-48), (byte) (-15), (byte) (-115)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1326L), okBuffer0.byteCount());
      assertSame(okBuffer0, okBuffer1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int3 = 4658;
      OkBuffer okBuffer2 = okBuffer1.writeByte(int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertEquals((-1325L), okBuffer0.byteCount());
      assertEquals((-1325L), okBuffer2.byteCount());
      assertEquals((-1325L), okBuffer1.byteCount());
      assertNotNull(okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((-1325L), okBuffer0.byteCount());
      assertEquals((-1325L), okBuffer2.byteCount());
      assertEquals((-1325L), okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      int int4 = (-2056);
      Deadline deadline0 = null;
      gzipSource0.require(int4, deadline0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((-1325L), okBuffer0.byteCount());
      assertEquals((-1325L), okBuffer2.byteCount());
      assertEquals((-1325L), okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      
      byte byte4 = (byte)13;
      // Undeclared exception!
      try { 
        gzipSource0.seek(byte4, deadline0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 4;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      int int1 = 2741;
      OkBuffer okBuffer2 = okBuffer1.writeByte(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertEquals(3L, okBuffer2.byteCount());
      assertNotNull(okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      
      byte byte0 = (byte)0;
      byte byte1 = (byte)0;
      String string0 = "closed";
      okBuffer0.writeUtf8(string0);
      assertEquals(9L, okBuffer0.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      
      byte byte2 = (byte)28;
      byte byte3 = (byte)10;
      byte byte4 = (byte)86;
      byte byte5 = (byte)126;
      byte byte6 = (byte)0;
      int int2 = (-1675);
      OkBuffer okBuffer3 = okBuffer2.writeByte(int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(10L, okBuffer0.byteCount());
      assertEquals(10L, okBuffer1.byteCount());
      assertEquals(10L, okBuffer2.byteCount());
      assertEquals(10L, okBuffer3.byteCount());
      assertNotNull(okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      
      OkBuffer okBuffer4 = okBuffer2.writeInt(int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(14L, okBuffer4.byteCount());
      assertEquals(14L, okBuffer0.byteCount());
      assertEquals(14L, okBuffer1.byteCount());
      assertEquals(14L, okBuffer2.byteCount());
      assertNotNull(okBuffer4);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer4);
      assertSame(okBuffer2, okBuffer3);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(14L, okBuffer4.byteCount());
      assertEquals(14L, okBuffer0.byteCount());
      assertEquals(14L, okBuffer1.byteCount());
      assertEquals(14L, okBuffer2.byteCount());
      assertNotNull(gzipSource0);
      
      long long0 = 3819L;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x000004 != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      byte byte0 = (byte)1;
      gzipSource0.section = (int) byte0;
      String string0 = "(]Bj*XB2+o<T7D2y'!";
      int int0 = (-1645);
      gzipSource0.checkEqual(string0, int0, int0);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(1, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      
      String string1 = "BEfGqv{(I}tXH5)<";
      int int1 = 0;
      long long0 = 785L;
      // Undeclared exception!
      try { 
        gzipSource0.read(gzipSource0.buffer, long0, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 626;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      byte[] byteArray0 = new byte[3];
      GzipSource.FCOMMENT = gzipSource0.FNAME;
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      
      byteArray0[0] = gzipSource0.SECTION_DONE;
      byteArray0[1] = gzipSource0.SECTION_TRAILER;
      gzipSource0.FNAME = gzipSource0.FHCRC;
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      
      int int1 = 2;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = gzipSource0.seek(byteArray0[1], deadline0);
      assertFalse(int0 == int1);
      assertEquals(2L, long0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertArrayEquals(new byte[] {(byte)3, (byte)2, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertTrue(deadline0.reached());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      okBuffer1.write(byteArray0, int1, gzipSource0.section);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertArrayEquals(new byte[] {(byte)3, (byte)2, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      Deadline deadline1 = new Deadline();
      assertFalse(deadline1.equals((Object)deadline0));
      assertTrue(deadline1.reached());
      assertNotNull(deadline1);
      
      try { 
        gzipSource0.consumeTrailer(deadline1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeByte(gzipSource0.FEXTRA);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(1L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte byte0 = (byte) (-122);
      GzipSource.SECTION_BODY = byte0;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      String string1 = "7ZoL\"lZ!6gDY557]";
      ByteString byteString0 = ByteString.encodeUtf8(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      assertNotSame(string1, string0);
      
      gzipSource0.require(GzipSource.SECTION_BODY, deadline0);
      assertTrue(GzipSource.SECTION_BODY == byte0);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte) (-122), GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertTrue(deadline0.reached());
      
      okBuffer0.write(byteString0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte) (-122), GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(17L, okBuffer0.byteCount());
      assertEquals(16, byteString0.size());
      assertNotSame(string1, string0);
      
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x000237 != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = (-190);
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      boolean boolean0 = false;
      Inflater inflater0 = new Inflater(boolean0);
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer2 = gzipSource0.buffer;
      assertFalse(okBuffer2.equals((Object)okBuffer1));
      assertFalse(okBuffer2.equals((Object)okBuffer0));
      assertEquals(0L, okBuffer2.byteCount());
      assertNotNull(okBuffer2);
      assertNotSame(okBuffer2, okBuffer1);
      assertNotSame(okBuffer2, okBuffer0);
      
      OkBuffer okBuffer3 = okBuffer2.writeShort(gzipSource0.SECTION_DONE);
      assertFalse(okBuffer2.equals((Object)okBuffer1));
      assertFalse(okBuffer2.equals((Object)okBuffer0));
      assertFalse(okBuffer3.equals((Object)okBuffer1));
      assertFalse(okBuffer3.equals((Object)okBuffer0));
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals(2L, okBuffer2.byteCount());
      assertEquals(2L, okBuffer3.byteCount());
      assertNotNull(okBuffer3);
      assertNotSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer3);
      assertNotSame(okBuffer2, okBuffer0);
      assertNotSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertNotSame(okBuffer3, okBuffer0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0, okBuffer3);
      assertFalse(okBuffer0.equals((Object)okBuffer2));
      assertFalse(okBuffer0.equals((Object)okBuffer3));
      assertFalse(okBuffer1.equals((Object)okBuffer3));
      assertFalse(okBuffer1.equals((Object)okBuffer2));
      assertFalse(okBuffer2.equals((Object)okBuffer1));
      assertFalse(okBuffer2.equals((Object)okBuffer0));
      assertFalse(okBuffer3.equals((Object)okBuffer1));
      assertFalse(okBuffer3.equals((Object)okBuffer0));
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(2L, okBuffer2.byteCount());
      assertEquals(2L, okBuffer3.byteCount());
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource1 = new GzipSource(inflaterSource0);
      assertFalse(okBuffer0.equals((Object)okBuffer2));
      assertFalse(okBuffer0.equals((Object)okBuffer3));
      assertFalse(okBuffer1.equals((Object)okBuffer3));
      assertFalse(okBuffer1.equals((Object)okBuffer2));
      assertFalse(okBuffer2.equals((Object)okBuffer1));
      assertFalse(okBuffer2.equals((Object)okBuffer0));
      assertFalse(okBuffer3.equals((Object)okBuffer1));
      assertFalse(okBuffer3.equals((Object)okBuffer0));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(2L, okBuffer2.byteCount());
      assertEquals(2L, okBuffer3.byteCount());
      assertNotNull(gzipSource1);
      
      int int1 = 3;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = 15L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertNotNull(deadline1);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      
      try { 
        gzipSource1.require(int1, deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      boolean boolean0 = false;
      Inflater inflater0 = new Inflater(boolean0);
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer0, inflater0);
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflaterSource0);
      
      int int0 = (-1461);
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(2L, okBuffer0.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(gzipSource0);
      
      byte byte0 = (byte)55;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.seek(byte0, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 4;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      OkBuffer okBuffer2 = okBuffer1.writeByte(int0);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertEquals(3L, okBuffer2.byteCount());
      assertNotNull(okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      
      byte byte0 = (byte)0;
      byte byte1 = (byte)0;
      String string0 = "closed";
      okBuffer0.writeUtf8(string0);
      assertEquals(9L, okBuffer0.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      byte byte2 = (byte)28;
      byte byte3 = (byte)10;
      byte byte4 = (byte)86;
      byte byte5 = (byte)126;
      byte byte6 = (byte)0;
      int int1 = (-1675);
      OkBuffer okBuffer3 = okBuffer2.writeByte(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(10L, okBuffer3.byteCount());
      assertEquals(10L, okBuffer0.byteCount());
      assertEquals(10L, okBuffer1.byteCount());
      assertEquals(10L, okBuffer2.byteCount());
      assertNotNull(okBuffer3);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer1);
      
      OkBuffer okBuffer4 = okBuffer2.writeInt(int0);
      assertFalse(int0 == int1);
      assertEquals(14L, okBuffer0.byteCount());
      assertEquals(14L, okBuffer4.byteCount());
      assertEquals(14L, okBuffer1.byteCount());
      assertEquals(14L, okBuffer2.byteCount());
      assertNotNull(okBuffer4);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer4);
      assertSame(okBuffer2, okBuffer1);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertFalse(int0 == int1);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(14L, okBuffer0.byteCount());
      assertEquals(14L, okBuffer4.byteCount());
      assertEquals(14L, okBuffer1.byteCount());
      assertEquals(14L, okBuffer2.byteCount());
      assertNotNull(gzipSource0);
      
      long long0 = 0L;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long1 = gzipSource0.read(okBuffer0, long0, deadline0);
      assertFalse(int0 == int1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(14L, okBuffer0.byteCount());
      assertEquals(14L, okBuffer4.byteCount());
      assertEquals(14L, okBuffer1.byteCount());
      assertEquals(14L, okBuffer2.byteCount());
      assertTrue(deadline0.reached());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer4);
      assertSame(okBuffer2, okBuffer1);
      
      byte[] byteArray0 = new byte[0];
      int int2 = (-1921);
      okBuffer4.write(byteArray0, (int) byte2, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte5);
      assertFalse(byte2 == byte6);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1907L), okBuffer0.byteCount());
      assertEquals((-1907L), okBuffer4.byteCount());
      assertEquals((-1907L), okBuffer1.byteCount());
      assertEquals((-1907L), okBuffer2.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer4);
      assertSame(okBuffer2, okBuffer1);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      byte byte0 = (byte)1;
      gzipSource0.section = (int) gzipSource0.SECTION_TRAILER;
      long long0 = 785L;
      // Undeclared exception!
      try { 
        gzipSource0.read(gzipSource0.buffer, long0, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeInt(gzipSource0.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(4L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      String string0 = "7ZoL\"lZ!6gDY557]";
      ByteString byteString0 = ByteString.encodeUtf8(string0);
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      okBuffer0.write(byteString0);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(20L, okBuffer0.byteCount());
      assertEquals(16, byteString0.size());
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 3902;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-75);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-48);
      byteArray0[1] = byte1;
      okBuffer0.write(byteArray0, (int) byte0, (int) byteArray0[1]);
      assertFalse(byte0 == byte1);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-48)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-48L), okBuffer0.byteCount());
      
      int int1 = (-4961);
      OkBuffer okBuffer1 = okBuffer0.writeShort(int1);
      assertFalse(int1 == int0);
      assertEquals((-46L), okBuffer0.byteCount());
      assertEquals((-46L), okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      OkBuffer okBuffer2 = okBuffer0.writeInt(int0);
      assertFalse(int0 == int1);
      assertEquals((-42L), okBuffer0.byteCount());
      assertEquals((-42L), okBuffer2.byteCount());
      assertNotNull(okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-48)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer2, inflater0, okBuffer2);
      assertFalse(int0 == int1);
      assertEquals((-42L), okBuffer0.byteCount());
      assertEquals((-42L), okBuffer2.byteCount());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertFalse(int0 == int1);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((-42L), okBuffer0.byteCount());
      assertEquals((-42L), okBuffer2.byteCount());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(gzipSource0);
      
      int int2 = (-4951);
      Segment segment0 = okBuffer0.writableSegment(gzipSource0.SECTION_TRAILER);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((-42L), okBuffer0.byteCount());
      assertEquals((-42L), okBuffer2.byteCount());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(segment0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      gzipSource0.require(int2, deadline0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((-42L), okBuffer0.byteCount());
      assertTrue(deadline0.reached());
      assertEquals((-42L), okBuffer2.byteCount());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      
      System.setCurrentTimeMillis(byteArray0[1]);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-48)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      gzipSource0.seek(byteArray0[1], deadline0);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      byte byte0 = (byte)1;
      gzipSource0.section = (int) byte0;
      long long0 = 785L;
      deadline0.throwIfReached();
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeByte(gzipSource0.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(1L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      String string0 = "7ZoU\"lZ!6gDY557]";
      int int0 = (-1883);
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(5L, okBuffer0.byteCount());
      assertEquals(5L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      ByteString byteString0 = ByteString.encodeUtf8(string0);
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      okBuffer0.write(byteString0);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(21L, okBuffer0.byteCount());
      assertEquals(16, byteString0.size());
      assertSame(okBuffer0, okBuffer1);
      
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x0002ff != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      long long0 = (-1674L);
      System.setCurrentTimeMillis(long0);
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 1789569706;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertFalse(deadline0.reached());
      assertNotNull(deadline0);
      
      inflaterSource0.close(deadline0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertFalse(deadline0.reached());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      int int1 = 3574;
      Deadline deadline1 = Deadline.NONE;
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      deadline1.throwIfReached();
      assertFalse(deadline1.equals((Object)deadline0));
      
      deadline1.throwIfReached();
      assertFalse(deadline1.equals((Object)deadline0));
      
      // Undeclared exception!
      try { 
        gzipSource0.require(int1, deadline1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      long long0 = (-1805L);
      okBuffer0.byteCount = long0;
      assertEquals((-1805L), okBuffer0.byteCount());
      
      int int0 = (-1);
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals((-1801L), okBuffer0.byteCount());
      assertEquals((-1801L), okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      boolean boolean0 = false;
      Inflater inflater0 = new Inflater(boolean0);
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0, okBuffer1);
      assertEquals((-1801L), okBuffer0.byteCount());
      assertEquals((-1801L), okBuffer1.byteCount());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((-1801L), okBuffer0.byteCount());
      assertEquals((-1801L), okBuffer1.byteCount());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      // Undeclared exception!
      gzipSource0.consumeTrailer(deadline0);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      long long0 = 25544L;
      System.setCurrentTimeMillis(long0);
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 487;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      boolean boolean0 = false;
      Inflater inflater0 = new Inflater(boolean0);
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0, okBuffer0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflaterSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      inflaterSource0.close(deadline0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertTrue(inflater0.needsInput());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertTrue(inflater0.needsInput());
      assertNotNull(gzipSource0);
      
      long long1 = 714L;
      inflaterSource0.close(deadline0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertTrue(inflater0.needsInput());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      Deadline deadline1 = null;
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long1, deadline1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 2146594052;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      InflaterSource inflaterSource0 = gzipSource0.inflaterSource;
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource1 = new GzipSource(inflaterSource0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(gzipSource1);
      
      long long0 = (-1459L);
      long long1 = 466L;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertFalse(long0 == long1);
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertNotNull(deadline1);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      
      inflaterSource0.close(deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertTrue(deadline0.reached());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(deadline0, deadline1);
      
      // Undeclared exception!
      try { 
        gzipSource1.consumeHeader(deadline1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }
}
