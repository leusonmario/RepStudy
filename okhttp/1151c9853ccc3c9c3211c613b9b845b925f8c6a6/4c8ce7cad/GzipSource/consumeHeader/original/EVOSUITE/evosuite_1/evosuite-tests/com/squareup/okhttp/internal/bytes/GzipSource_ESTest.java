/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 13:38:03 GMT 2021
 */

package com.squareup.okhttp.internal.bytes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.internal.bytes.ByteString;
import com.squareup.okhttp.internal.bytes.Deadline;
import com.squareup.okhttp.internal.bytes.GzipSource;
import com.squareup.okhttp.internal.bytes.InflaterSource;
import com.squareup.okhttp.internal.bytes.OkBuffer;
import com.squareup.okhttp.internal.bytes.Source;
import java.io.EOFException;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GzipSource_ESTest extends GzipSource_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertNotNull(gzipSource0);
      assertEquals(0L, okBuffer0.byteCount());
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      long long0 = 0L;
      long long1 = gzipSource0.read(okBuffer0, long0, deadline0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0L, okBuffer0.byteCount());
      
      gzipSource0.close(deadline0);
      assertEquals(0L, okBuffer0.byteCount());
      
      long long2 = (-62L);
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long2, deadline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -62
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertNotNull(gzipSource0);
      assertEquals(0L, okBuffer0.byteCount());
      
      long long0 = 23L;
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      String string0 = "!&Wap|R";
      okBuffer0.writeUtf8(string0);
      assertEquals(7L, okBuffer0.byteCount());
      
      int int0 = 39;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(11L, okBuffer0.byteCount());
      assertEquals(11L, okBuffer1.byteCount());
      
      Deadline deadline0 = new Deadline();
      assertNotNull(deadline0);
      assertTrue(deadline0.reached());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertNotNull(gzipSource0);
      assertEquals(11L, okBuffer0.byteCount());
      assertEquals(11L, okBuffer1.byteCount());
      
      try { 
        gzipSource0.read(okBuffer0, int0, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x002126 != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = 16711740;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      
      OkBuffer okBuffer2 = okBuffer1.writeInt(int0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertNotNull(okBuffer2);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertNotNull(gzipSource0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      
      OkBuffer okBuffer3 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertNotNull(okBuffer3);
      assertEquals(10L, okBuffer0.byteCount());
      assertEquals(10L, okBuffer3.byteCount());
      
      Deadline deadline0 = null;
      try { 
        gzipSource0.read(okBuffer2, int0, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00003c != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = 2145416735;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      
      OkBuffer okBuffer2 = okBuffer1.writeInt(int0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertNotNull(okBuffer2);
      assertEquals(5L, okBuffer0.byteCount());
      assertEquals(5L, okBuffer1.byteCount());
      assertEquals(5L, okBuffer2.byteCount());
      
      OkBuffer okBuffer3 = okBuffer1.writeInt(int0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertNotNull(okBuffer3);
      assertEquals(9L, okBuffer0.byteCount());
      assertEquals(9L, okBuffer1.byteCount());
      assertEquals(9L, okBuffer3.byteCount());
      
      Deadline deadline0 = new Deadline();
      assertNotNull(deadline0);
      assertTrue(deadline0.reached());
      
      OkBuffer okBuffer4 = okBuffer1.writeByte(int0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer1);
      assertNotNull(okBuffer4);
      assertEquals(10L, okBuffer0.byteCount());
      assertEquals(10L, okBuffer1.byteCount());
      assertEquals(10L, okBuffer4.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer3);
      assertNotNull(gzipSource0);
      assertEquals(10L, okBuffer0.byteCount());
      assertEquals(10L, okBuffer1.byteCount());
      assertEquals(10L, okBuffer3.byteCount());
      
      try { 
        gzipSource0.read(okBuffer1, int0, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x001f7f != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertNotNull(gzipSource0);
      assertEquals(0L, okBuffer0.byteCount());
      
      long long0 = 261L;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = 8075;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertNotNull(gzipSource0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer1, int0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Source source0 = null;
      GzipSource gzipSource0 = null;
      try {
        gzipSource0 = new GzipSource(source0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertNotNull(gzipSource0);
      assertEquals(0L, okBuffer0.byteCount());
      
      long long0 = 0L;
      Deadline deadline0 = new Deadline();
      assertNotNull(deadline0);
      assertTrue(deadline0.reached());
      
      long long1 = gzipSource0.read(okBuffer0, long0, deadline0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
      
      Deadline deadline1 = Deadline.NONE;
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      gzipSource0.close(deadline1);
      assertFalse(deadline1.equals((Object)deadline0));
      assertEquals(0L, okBuffer0.byteCount());
      
      gzipSource0.close(deadline0);
      assertFalse(deadline0.equals((Object)deadline1));
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
      
      gzipSource0.close(deadline0);
      assertFalse(deadline0.equals((Object)deadline1));
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertNotNull(gzipSource0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      
      long long0 = 0L;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      long long1 = 2048L;
      long long2 = (-4050L);
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer1, long2, deadline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -4050
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0, okBuffer0);
      assertNotNull(inflaterSource0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertNotNull(gzipSource0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      
      long long0 = 255L;
      Deadline deadline0 = new Deadline();
      assertNotNull(deadline0);
      assertTrue(deadline0.reached());
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Deadline deadline1 = deadline0.start(int0, timeUnit0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      
      try { 
        gzipSource0.read(okBuffer0, long0, deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: unknown compression method
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = (-38);
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      
      List<Integer> list0 = okBuffer0.segmentSizes();
      assertSame(okBuffer0, okBuffer1);
      assertNotNull(list0);
      assertEquals(1L, okBuffer0.byteCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(int0));
      
      int int1 = 0;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      
      int int2 = 2075;
      OkBuffer okBuffer3 = okBuffer1.writeInt(int2);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(okBuffer3);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer3.byteCount());
      
      int int3 = 483;
      OkBuffer okBuffer4 = okBuffer3.writeShort(int3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer3, okBuffer4);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(okBuffer4);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertEquals(8L, okBuffer3.byteCount());
      assertEquals(8L, okBuffer4.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(gzipSource0);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertEquals(8L, okBuffer3.byteCount());
      assertEquals(8L, okBuffer4.byteCount());
      
      int int4 = 7012;
      OkBuffer okBuffer5 = okBuffer3.writeInt(int4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer5);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer3, okBuffer4);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer5);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer5, okBuffer0);
      assertSame(okBuffer5, okBuffer4);
      assertSame(okBuffer5, okBuffer2);
      assertSame(okBuffer5, okBuffer3);
      assertSame(okBuffer5, okBuffer1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertNotNull(okBuffer5);
      assertEquals(12L, okBuffer0.byteCount());
      assertEquals(12L, okBuffer1.byteCount());
      assertEquals(12L, okBuffer3.byteCount());
      assertEquals(12L, okBuffer5.byteCount());
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer5, int3, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0xffffda00 != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = 65535;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      
      long long0 = 0L;
      okBuffer0.byteCount = long0;
      assertEquals(0L, okBuffer0.byteCount());
      
      OkBuffer okBuffer2 = okBuffer1.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertNotNull(okBuffer2);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(4L, okBuffer2.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertNotNull(gzipSource0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(4L, okBuffer2.byteCount());
      
      Deadline deadline0 = new Deadline();
      assertNotNull(deadline0);
      assertTrue(deadline0.reached());
      
      OkBuffer okBuffer3 = okBuffer2.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertNotNull(okBuffer3);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertEquals(8L, okBuffer2.byteCount());
      assertEquals(8L, okBuffer3.byteCount());
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer3, int0, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.OkBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = 2;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0, okBuffer0);
      assertNotNull(inflaterSource0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertNotNull(gzipSource0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      
      Deadline deadline0 = new Deadline();
      assertNotNull(deadline0);
      assertTrue(deadline0.reached());
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertTrue(deadline0.reached());
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertTrue(deadline0.reached());
      
      OkBuffer okBuffer2 = new OkBuffer();
      assertFalse(okBuffer2.equals((Object)okBuffer1));
      assertFalse(okBuffer2.equals((Object)okBuffer0));
      assertNotNull(okBuffer2);
      assertEquals(0L, okBuffer2.byteCount());
      
      OkBuffer okBuffer3 = okBuffer2.writeByte(int0);
      assertNotSame(okBuffer2, okBuffer1);
      assertNotSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertNotSame(okBuffer3, okBuffer0);
      assertNotSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertFalse(okBuffer2.equals((Object)okBuffer1));
      assertFalse(okBuffer2.equals((Object)okBuffer0));
      assertFalse(okBuffer3.equals((Object)okBuffer0));
      assertFalse(okBuffer3.equals((Object)okBuffer1));
      assertNotNull(okBuffer3);
      assertEquals(1L, okBuffer2.byteCount());
      assertEquals(1L, okBuffer3.byteCount());
      
      long long0 = 1L;
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer3, long0, deadline0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = 2;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      
      int int1 = 2;
      OkBuffer okBuffer2 = okBuffer1.writeByte(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertNotNull(okBuffer2);
      assertEquals(5L, okBuffer0.byteCount());
      assertEquals(5L, okBuffer1.byteCount());
      assertEquals(5L, okBuffer2.byteCount());
      
      OkBuffer okBuffer3 = okBuffer2.writeShort(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertNotNull(okBuffer3);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer1.byteCount());
      assertEquals(7L, okBuffer2.byteCount());
      assertEquals(7L, okBuffer3.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer3);
      assertNotNull(gzipSource0);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer1.byteCount());
      assertEquals(7L, okBuffer2.byteCount());
      assertEquals(7L, okBuffer3.byteCount());
      
      Deadline deadline0 = new Deadline();
      assertNotNull(deadline0);
      assertTrue(deadline0.reached());
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-53);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-117);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-40);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-48);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-102);
      byteArray0[6] = byte6;
      byte byte7 = (byte)4;
      byteArray0[7] = byte7;
      int int2 = (-3521);
      okBuffer3.write(byteArray0, (int) byteArray0[0], int2);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, byteArray0.length);
      assertEquals((-3514L), okBuffer0.byteCount());
      assertEquals((-3514L), okBuffer1.byteCount());
      assertEquals((-3514L), okBuffer2.byteCount());
      assertEquals((-3514L), okBuffer3.byteCount());
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-117), (byte)0, (byte) (-40), (byte)0, (byte) (-48), (byte) (-102), (byte)4}, byteArray0);
      
      Deadline deadline1 = deadline0.start(int0, timeUnit0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertFalse(int0 == int2);
      assertNotNull(deadline1);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer3, int1, deadline1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = (-38);
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      
      List<Integer> list0 = okBuffer0.segmentSizes();
      assertSame(okBuffer0, okBuffer1);
      assertNotNull(list0);
      assertEquals(1L, okBuffer0.byteCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(int0));
      
      int int1 = 0;
      OkBuffer okBuffer2 = okBuffer1.writeInt(int0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertFalse(int0 == int1);
      assertNotNull(okBuffer2);
      assertEquals(5L, okBuffer0.byteCount());
      assertEquals(5L, okBuffer1.byteCount());
      assertEquals(5L, okBuffer2.byteCount());
      
      int int2 = 2075;
      int int3 = 465;
      OkBuffer okBuffer3 = okBuffer1.writeShort(int3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotNull(okBuffer3);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer1.byteCount());
      assertEquals(7L, okBuffer3.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotNull(gzipSource0);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer1.byteCount());
      assertEquals(7L, okBuffer3.byteCount());
      
      int int4 = 7012;
      OkBuffer okBuffer4 = okBuffer2.writeInt(int4);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer4);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertNotNull(okBuffer4);
      assertEquals(11L, okBuffer0.byteCount());
      assertEquals(11L, okBuffer1.byteCount());
      assertEquals(11L, okBuffer2.byteCount());
      assertEquals(11L, okBuffer4.byteCount());
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer4, int3, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0xffffdaff != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = (-43);
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      
      List<Integer> list0 = okBuffer0.segmentSizes();
      assertSame(okBuffer0, okBuffer1);
      assertNotNull(list0);
      assertEquals(1L, okBuffer0.byteCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(int0));
      
      int int1 = 0;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      
      int int2 = 2075;
      OkBuffer okBuffer3 = okBuffer1.writeShort(int0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(okBuffer3);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(4L, okBuffer3.byteCount());
      
      int int3 = 483;
      OkBuffer okBuffer4 = okBuffer3.writeShort(int3);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer4);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(okBuffer4);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer3.byteCount());
      assertEquals(6L, okBuffer4.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(gzipSource0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer3.byteCount());
      assertEquals(6L, okBuffer4.byteCount());
      
      int int4 = 7012;
      OkBuffer okBuffer5 = okBuffer3.writeInt(int4);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer5);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer5);
      assertSame(okBuffer3, okBuffer4);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer5, okBuffer4);
      assertSame(okBuffer5, okBuffer2);
      assertSame(okBuffer5, okBuffer3);
      assertSame(okBuffer5, okBuffer1);
      assertSame(okBuffer5, okBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertNotNull(okBuffer5);
      assertEquals(10L, okBuffer0.byteCount());
      assertEquals(10L, okBuffer1.byteCount());
      assertEquals(10L, okBuffer3.byteCount());
      assertEquals(10L, okBuffer5.byteCount());
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer5, int3, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0xffffd500 != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      long long0 = 1840L;
      System.setCurrentTimeMillis(long0);
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = 16711680;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer1.writeInt(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      
      short short0 = okBuffer1.readShort();
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertFalse(int0 == int1);
      assertEquals((short)0, short0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(gzipSource0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(4L, okBuffer2.byteCount());
      
      OkBuffer okBuffer3 = okBuffer0.writeInt(int1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer3);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer3.byteCount());
      
      List<Integer> list0 = okBuffer2.segmentSizes();
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(list0);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertEquals(8L, okBuffer2.byteCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(int1));
      
      long long1 = 65536L;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)33;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-77);
      byteArray0[1] = byte1;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteString0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)33, (byte) (-77)}, byteArray0);
      
      okBuffer0.write(byteString0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteString0.size());
      assertEquals(10L, okBuffer0.byteCount());
      assertArrayEquals(new byte[] {(byte)33, (byte) (-77)}, byteArray0);
      
      Deadline deadline0 = null;
      try { 
        gzipSource0.read(okBuffer3, long1, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x000000 != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = 2145416772;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      
      List<Integer> list0 = okBuffer0.segmentSizes();
      assertSame(okBuffer0, okBuffer1);
      assertNotNull(list0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(int0));
      
      int int1 = 0;
      OkBuffer okBuffer2 = okBuffer1.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertFalse(int0 == int1);
      assertNotNull(okBuffer2);
      assertEquals(5L, okBuffer0.byteCount());
      assertEquals(5L, okBuffer1.byteCount());
      assertEquals(5L, okBuffer2.byteCount());
      
      int int2 = 2075;
      int int3 = 76;
      OkBuffer okBuffer3 = okBuffer1.writeInt(int1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer3);
      assertEquals(9L, okBuffer0.byteCount());
      assertEquals(9L, okBuffer1.byteCount());
      assertEquals(9L, okBuffer3.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertNotNull(gzipSource0);
      assertEquals(9L, okBuffer0.byteCount());
      assertEquals(9L, okBuffer1.byteCount());
      assertEquals(9L, okBuffer3.byteCount());
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(9L, okBuffer0.byteCount());
      assertEquals(9L, okBuffer1.byteCount());
      assertEquals(9L, okBuffer3.byteCount());
      
      int int4 = 7012;
      OkBuffer okBuffer4 = okBuffer2.writeInt(int4);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer4);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertNotNull(okBuffer4);
      assertEquals(13L, okBuffer0.byteCount());
      assertEquals(13L, okBuffer1.byteCount());
      assertEquals(13L, okBuffer2.byteCount());
      assertEquals(13L, okBuffer4.byteCount());
      
      long long0 = 8L;
      try { 
        gzipSource0.read(okBuffer3, long0, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00447f != expected 0x001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      OkBuffer okBuffer0 = new OkBuffer();
      assertNotNull(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      
      int int0 = 3199;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0, okBuffer1);
      assertNotNull(inflaterSource0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertNotNull(gzipSource0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      
      long long0 = 0L;
      Deadline deadline0 = new Deadline();
      assertNotNull(deadline0);
      assertTrue(deadline0.reached());
      
      long long1 = gzipSource0.read(okBuffer0, long0, deadline0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertTrue(deadline0.reached());
      
      long long2 = 1556L;
      okBuffer1.byteCount = long2;
      assertEquals(1556L, okBuffer0.byteCount());
      assertEquals(1556L, okBuffer1.byteCount());
      
      long long3 = 58L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Deadline deadline1 = deadline0.start(long3, timeUnit0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertNotNull(deadline1);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      
      long long4 = 8L;
      // Undeclared exception!
      try { 
        gzipSource0.close(deadline1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.OkBuffer", e);
      }
  }
}
