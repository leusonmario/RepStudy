/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 13:43:23 GMT 2021
 */

package com.squareup.okhttp.internal.bytes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.internal.bytes.ByteString;
import com.squareup.okhttp.internal.bytes.Deadline;
import com.squareup.okhttp.internal.bytes.GzipSource;
import com.squareup.okhttp.internal.bytes.InflaterSource;
import com.squareup.okhttp.internal.bytes.OkBuffer;
import com.squareup.okhttp.internal.bytes.Source;
import java.io.EOFException;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GzipSource_ESTest extends GzipSource_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      long long0 = 28L;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      long long0 = (-2788L);
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2788
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 0;
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = gzipSource0.read(okBuffer0, int0, deadline0);
      assertEquals(0L, long0);
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)87;
      byteArray0[1] = byte0;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(2, byteString0.size());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)87}, byteArray0);
      
      okBuffer1.write(byteString0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(2, byteString0.size());
      assertEquals(2, byteArray0.length);
      assertFalse(int0 == int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)87}, byteArray0);
      
      OkBuffer okBuffer3 = okBuffer1.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertEquals(8L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertNotNull(okBuffer3);
      
      OkBuffer okBuffer4 = okBuffer0.writeByte(byte0);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertEquals(9L, okBuffer0.byteCount());
      assertEquals(9L, okBuffer4.byteCount());
      assertNotNull(okBuffer4);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertEquals(9L, okBuffer0.byteCount());
      assertEquals(9L, okBuffer4.byteCount());
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer5 = okBuffer0.writeByte(byteArray0[1]);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer5, okBuffer4);
      assertSame(okBuffer5, okBuffer2);
      assertSame(okBuffer5, okBuffer0);
      assertSame(okBuffer5, okBuffer3);
      assertSame(okBuffer5, okBuffer1);
      assertEquals(10L, okBuffer0.byteCount());
      assertEquals(10L, okBuffer5.byteCount());
      assertEquals(2, byteArray0.length);
      assertNotNull(okBuffer5);
      assertArrayEquals(new byte[] {(byte)0, (byte)87}, byteArray0);
      
      OkBuffer okBuffer6 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer6);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer6, okBuffer0);
      assertSame(okBuffer6, okBuffer2);
      assertSame(okBuffer6, okBuffer3);
      assertSame(okBuffer6, okBuffer5);
      assertSame(okBuffer6, okBuffer4);
      assertSame(okBuffer6, okBuffer1);
      assertEquals(14L, okBuffer0.byteCount());
      assertEquals(14L, okBuffer6.byteCount());
      assertFalse(int0 == int1);
      assertNotNull(okBuffer6);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer6);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer5);
      assertSame(okBuffer4, okBuffer6);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertEquals(14L, okBuffer0.byteCount());
      assertEquals(14L, okBuffer4.byteCount());
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer1, int1, deadline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 2: 1
         //
         verifyException("com.squareup.okhttp.internal.bytes.OkBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)112;
      byteArray0[1] = byte0;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertNotNull(byteString0);
      
      okBuffer1.write(byteString0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertEquals(20L, okBuffer0.byteCount());
      assertEquals(20L, okBuffer1.byteCount());
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals(20L, okBuffer0.byteCount());
      assertEquals(20L, okBuffer1.byteCount());
      assertFalse(int0 == int1);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer1, int1, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: invalid stored block lengths
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)76;
      byteArray0[1] = byte0;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertNotNull(byteString0);
      
      okBuffer1.write(byteString0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertEquals(20L, okBuffer0.byteCount());
      assertEquals(20L, okBuffer1.byteCount());
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertEquals(20L, okBuffer0.byteCount());
      assertEquals(20L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer1, byteArray0[1], deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: invalid stored block lengths
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)46;
      byteArray0[1] = byte0;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertNotNull(byteString0);
      
      okBuffer1.write(byteString0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(20L, okBuffer0.byteCount());
      assertEquals(20L, okBuffer1.byteCount());
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals(20L, okBuffer0.byteCount());
      assertEquals(20L, okBuffer1.byteCount());
      assertFalse(int0 == int1);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer0, byte0, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // FHCRC: actual 0xffffcde0 != expected 0x00000000
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      long long0 = (-2373L);
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2373
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      long long0 = 505L;
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = (-1473);
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      OkBuffer okBuffer2 = okBuffer1.writeShort(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertNotNull(okBuffer2);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Source source0 = null;
      GzipSource gzipSource0 = null;
      try {
        gzipSource0 = new GzipSource(source0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = (-442);
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      OkBuffer okBuffer2 = okBuffer1.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertEquals(3L, okBuffer2.byteCount());
      assertNotNull(okBuffer2);
      
      int int1 = (-1115);
      OkBuffer okBuffer3 = okBuffer2.writeInt(int1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer1.byteCount());
      assertEquals(7L, okBuffer2.byteCount());
      assertEquals(7L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer3);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer3);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer1.byteCount());
      assertEquals(7L, okBuffer2.byteCount());
      assertEquals(7L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer1.byteCount());
      assertEquals(7L, okBuffer2.byteCount());
      assertEquals(7L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long0 = (-2703L);
      Deadline deadline1 = new Deadline();
      assertTrue(deadline1.reached());
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      long long1 = 1L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      byte byte0 = okBuffer3.readByte();
      assertEquals((byte) (-2), byte0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertEquals(6L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Deadline deadline2 = deadline1.start(long1, timeUnit0);
      assertSame(deadline1, deadline2);
      assertSame(deadline2, deadline1);
      assertFalse(deadline1.reached());
      assertFalse(deadline2.reached());
      assertFalse(deadline1.equals((Object)deadline0));
      assertFalse(long1 == long0);
      assertFalse(deadline2.equals((Object)deadline0));
      assertNotNull(deadline2);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer1, long0, deadline2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2703
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      long long0 = gzipSource0.read(okBuffer1, int0, deadline0);
      assertEquals(0L, long0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer1 = new OkBuffer();
      assertEquals(0L, okBuffer1.byteCount());
      assertFalse(okBuffer1.equals((Object)okBuffer0));
      assertNotNull(okBuffer1);
      
      long long0 = 0L;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long1 = gzipSource0.read(okBuffer1, long0, deadline0);
      assertEquals(0L, long1);
      assertNotSame(okBuffer0, okBuffer1);
      assertNotSame(okBuffer1, okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertTrue(deadline0.reached());
      assertFalse(okBuffer0.equals((Object)okBuffer1));
      assertFalse(okBuffer1.equals((Object)okBuffer0));
      assertTrue(long1 == long0);
      
      long long2 = (-2779L);
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer1, long2, deadline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2779
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertNotNull(inflater0);
      
      int int0 = 4201;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer0, inflater0, okBuffer1);
      assertEquals(1L, okBuffer0.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals(1L, okBuffer0.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = null;
      try { 
        gzipSource0.read(okBuffer0, int0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      int int0 = 98;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer1, int0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = (-2358);
      long long0 = 0L;
      okBuffer0.skip(long0);
      assertEquals(0L, okBuffer0.byteCount());
      
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      boolean boolean0 = false;
      Inflater inflater0 = new Inflater(boolean0);
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      int int1 = (-2397);
      OkBuffer okBuffer2 = okBuffer0.writeInt(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      OkBuffer okBuffer3 = okBuffer2.writeByte(int0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer2.byteCount());
      assertEquals(7L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer3);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0, okBuffer3);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(7L, okBuffer2.byteCount());
      assertEquals(7L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(7L, okBuffer2.byteCount());
      assertEquals(7L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(gzipSource0);
      
      long long1 = 1L;
      Deadline deadline0 = null;
      try { 
        gzipSource0.read(okBuffer0, long1, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: unknown compression method
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 6066;
      okBuffer0.byteCount = (long) int0;
      assertEquals(6066L, okBuffer0.byteCount());
      
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(6070L, okBuffer0.byteCount());
      assertEquals(6070L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 2;
      OkBuffer okBuffer2 = okBuffer1.writeShort(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertEquals(6072L, okBuffer0.byteCount());
      assertEquals(6072L, okBuffer1.byteCount());
      assertEquals(6072L, okBuffer2.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      OkBuffer okBuffer3 = okBuffer2.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertEquals(6073L, okBuffer0.byteCount());
      assertEquals(6073L, okBuffer1.byteCount());
      assertEquals(6073L, okBuffer2.byteCount());
      assertEquals(6073L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer3);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer3);
      assertEquals(6073L, okBuffer0.byteCount());
      assertEquals(6073L, okBuffer1.byteCount());
      assertEquals(6073L, okBuffer2.byteCount());
      assertEquals(6073L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(gzipSource0);
      
      long long0 = 1948L;
      int int2 = 0;
      ByteString byteString0 = okBuffer3.readByteString(int2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertEquals(6073L, okBuffer0.byteCount());
      assertEquals(6073L, okBuffer1.byteCount());
      assertEquals(6073L, okBuffer2.byteCount());
      assertEquals(6073L, okBuffer3.byteCount());
      assertEquals(0, byteString0.size());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(byteString0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      int int3 = 49;
      OkBuffer okBuffer4 = okBuffer1.writeShort(int3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer1);
      assertEquals(6075L, okBuffer0.byteCount());
      assertEquals(6075L, okBuffer1.byteCount());
      assertEquals(6075L, okBuffer4.byteCount());
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertNotNull(okBuffer4);
      
      long long1 = 2048L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Deadline deadline1 = deadline0.start(long1, timeUnit0);
      assertSame(deadline1, deadline0);
      assertSame(deadline0, deadline1);
      assertFalse(deadline1.reached());
      assertFalse(deadline0.reached());
      assertFalse(long1 == long0);
      assertNotNull(deadline1);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer3, long0, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.OkBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 46;
      OkBuffer okBuffer2 = okBuffer1.writeInt(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer3 = okBuffer1.writeInt(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertEquals(10L, okBuffer0.byteCount());
      assertEquals(10L, okBuffer1.byteCount());
      assertEquals(10L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer3);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = 3316L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertNotNull(deadline1);
      
      try { 
        gzipSource0.read(okBuffer3, int1, deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00000000 != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 4364;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 99;
      OkBuffer okBuffer2 = okBuffer1.writeShort(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(gzipSource0);
      
      long long0 = 650L;
      byte[] byteArray0 = null;
      int int2 = (-1150);
      int int3 = okBuffer2.readInt();
      assertEquals(4364, int3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      okBuffer0.write(byteArray0, int0, int2);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertEquals((-1148L), okBuffer0.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int0 == int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 46;
      OkBuffer okBuffer2 = okBuffer1.writeInt(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      OkBuffer okBuffer3 = okBuffer2.writeByte(int1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer1.byteCount());
      assertEquals(7L, okBuffer2.byteCount());
      assertEquals(7L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer3);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer1.byteCount());
      assertEquals(7L, okBuffer2.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer4 = okBuffer1.writeInt(int1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer1);
      assertEquals(11L, okBuffer0.byteCount());
      assertEquals(11L, okBuffer1.byteCount());
      assertEquals(11L, okBuffer4.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer4);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = 3316L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertNotNull(deadline1);
      
      try { 
        gzipSource0.read(okBuffer4, int1, deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00000000 != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 2114;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      Inflater inflater0 = new Inflater();
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertTrue(inflater0.needsInput());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(deadline0.reached());
      
      long long0 = (-2155L);
      System.setCurrentTimeMillis(long0);
      int int1 = 799;
      OkBuffer okBuffer2 = okBuffer1.writeInt(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(4L, okBuffer2.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      long long1 = 832L;
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer2, long1, deadline0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 2146455651;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 0;
      OkBuffer okBuffer2 = okBuffer0.writeShort(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      int int2 = 46;
      OkBuffer okBuffer3 = okBuffer2.writeInt(int2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertEquals(10L, okBuffer0.byteCount());
      assertEquals(10L, okBuffer2.byteCount());
      assertEquals(10L, okBuffer3.byteCount());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(okBuffer3);
      
      OkBuffer okBuffer4 = okBuffer3.writeByte(int2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer4);
      assertSame(okBuffer3, okBuffer4);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer1);
      assertEquals(11L, okBuffer0.byteCount());
      assertEquals(11L, okBuffer2.byteCount());
      assertEquals(11L, okBuffer3.byteCount());
      assertEquals(11L, okBuffer4.byteCount());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(okBuffer4);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer3);
      assertEquals(11L, okBuffer0.byteCount());
      assertEquals(11L, okBuffer2.byteCount());
      assertEquals(11L, okBuffer3.byteCount());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer5 = okBuffer2.writeInt(int2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer5);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer4);
      assertSame(okBuffer5, okBuffer1);
      assertSame(okBuffer5, okBuffer4);
      assertSame(okBuffer5, okBuffer2);
      assertSame(okBuffer5, okBuffer0);
      assertSame(okBuffer5, okBuffer3);
      assertEquals(15L, okBuffer0.byteCount());
      assertEquals(15L, okBuffer2.byteCount());
      assertEquals(15L, okBuffer5.byteCount());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(okBuffer5);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = 3316L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertNotNull(deadline1);
      
      try { 
        gzipSource0.read(okBuffer5, int2, deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00007ff0 != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 2146455651;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 0;
      OkBuffer okBuffer2 = okBuffer1.writeInt(int0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertEquals(8L, okBuffer2.byteCount());
      assertFalse(int0 == int1);
      assertNotNull(okBuffer2);
      
      OkBuffer okBuffer3 = okBuffer2.writeInt(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertEquals(12L, okBuffer0.byteCount());
      assertEquals(12L, okBuffer1.byteCount());
      assertEquals(12L, okBuffer2.byteCount());
      assertEquals(12L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(okBuffer3);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(12L, okBuffer0.byteCount());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      byte byte0 = okBuffer1.readByte();
      assertEquals((byte)127, byte0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertEquals(11L, okBuffer0.byteCount());
      assertEquals(11L, okBuffer1.byteCount());
      assertFalse(int0 == int1);
      
      long long0 = 3316L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertNotNull(deadline1);
      
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      Deadline deadline2 = deadline0.start(int1, timeUnit1);
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      assertSame(deadline2, deadline0);
      assertSame(deadline2, deadline1);
      assertTrue(deadline0.reached());
      assertTrue(deadline2.reached());
      assertFalse(int1 == int0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertNotNull(deadline2);
      
      long long1 = gzipSource0.read(okBuffer1, int1, deadline1);
      assertEquals(0L, long1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertSame(deadline1, deadline2);
      assertEquals(11L, okBuffer0.byteCount());
      assertEquals(11L, okBuffer1.byteCount());
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(long1 == long0);
      
      long long2 = 684L;
      try { 
        gzipSource0.read(okBuffer2, long2, deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0xfffff050 != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 2735;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 0;
      OkBuffer okBuffer2 = okBuffer0.writeShort(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      int int2 = 46;
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer3 = okBuffer2.writeInt(int2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer3);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertEquals(10L, okBuffer0.byteCount());
      assertEquals(10L, okBuffer2.byteCount());
      assertEquals(10L, okBuffer3.byteCount());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(okBuffer3);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = 3316L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      try { 
        gzipSource0.read(okBuffer3, int2, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00000000 != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 594;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-50);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-85);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-17);
      byteArray0[2] = byte2;
      okBuffer1.write(byteArray0, (int) byteArray0[1], (int) byteArray0[2]);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((-15L), okBuffer0.byteCount());
      assertEquals((-15L), okBuffer1.byteCount());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-85), (byte) (-17)}, byteArray0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertNotNull(inflater0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0, okBuffer0);
      assertEquals((-15L), okBuffer0.byteCount());
      assertEquals((-15L), okBuffer1.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals((-15L), okBuffer0.byteCount());
      assertEquals((-15L), okBuffer1.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      // Undeclared exception!
      gzipSource0.read(okBuffer1, int0, deadline0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      int int2 = 1994091976;
      OkBuffer okBuffer3 = okBuffer1.writeInt(int2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer3.byteCount());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(okBuffer3);
      
      OkBuffer okBuffer4 = okBuffer0.writeByte(int2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer4.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(okBuffer4);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer4.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer5 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer5, okBuffer0);
      assertSame(okBuffer5, okBuffer4);
      assertSame(okBuffer5, okBuffer2);
      assertSame(okBuffer5, okBuffer1);
      assertSame(okBuffer5, okBuffer3);
      assertEquals(11L, okBuffer0.byteCount());
      assertEquals(11L, okBuffer5.byteCount());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(okBuffer5);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer1, int2, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.OkBuffers", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      OkBuffer okBuffer3 = okBuffer1.writeInt(int0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertNotNull(okBuffer3);
      
      OkBuffer okBuffer4 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer2);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer4.byteCount());
      assertFalse(int0 == int1);
      assertNotNull(okBuffer4);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertEquals(7L, okBuffer0.byteCount());
      assertEquals(7L, okBuffer4.byteCount());
      assertFalse(int0 == int1);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer5 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer5, okBuffer0);
      assertSame(okBuffer5, okBuffer2);
      assertSame(okBuffer5, okBuffer3);
      assertSame(okBuffer5, okBuffer4);
      assertSame(okBuffer5, okBuffer1);
      assertEquals(11L, okBuffer0.byteCount());
      assertEquals(11L, okBuffer5.byteCount());
      assertFalse(int0 == int1);
      assertNotNull(okBuffer5);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer1, int0, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: invalid block type
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-95);
      byteArray0[0] = byte0;
      byte byte1 = (byte)87;
      byteArray0[1] = byte1;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(2, byteString0.size());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)87}, byteArray0);
      
      okBuffer1.write(byteString0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(2, byteString0.size());
      assertEquals(2, byteArray0.length);
      assertFalse(int0 == int1);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)87}, byteArray0);
      
      int int2 = 1994091976;
      OkBuffer okBuffer3 = okBuffer1.writeInt(int2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertEquals(8L, okBuffer3.byteCount());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(okBuffer3);
      
      OkBuffer okBuffer4 = okBuffer0.writeByte(int2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer0);
      assertEquals(9L, okBuffer0.byteCount());
      assertEquals(9L, okBuffer4.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(okBuffer4);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertEquals(9L, okBuffer0.byteCount());
      assertEquals(9L, okBuffer4.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer5 = okBuffer0.writeInt(int0);
      assertSame(okBuffer5, okBuffer1);
      assertSame(okBuffer5, okBuffer4);
      assertSame(okBuffer5, okBuffer2);
      assertSame(okBuffer5, okBuffer0);
      assertSame(okBuffer5, okBuffer3);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertEquals(13L, okBuffer5.byteCount());
      assertEquals(13L, okBuffer0.byteCount());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(okBuffer5);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer4, okBuffer5);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer0);
      assertEquals(13L, okBuffer0.byteCount());
      assertEquals(13L, okBuffer4.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Deadline deadline1 = Deadline.NONE;
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      try { 
        gzipSource0.read(okBuffer1, int2, deadline1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.OkBuffers", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      int int2 = 1994091976;
      OkBuffer okBuffer3 = okBuffer1.writeInt(int2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(okBuffer3);
      
      OkBuffer okBuffer4 = okBuffer1.writeShort(int2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer0);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertEquals(8L, okBuffer4.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(okBuffer4);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertEquals(8L, okBuffer4.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer5 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer5, okBuffer3);
      assertSame(okBuffer5, okBuffer2);
      assertSame(okBuffer5, okBuffer0);
      assertSame(okBuffer5, okBuffer1);
      assertSame(okBuffer5, okBuffer4);
      assertEquals(12L, okBuffer0.byteCount());
      assertEquals(12L, okBuffer5.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(okBuffer5);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer1, okBuffer4);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer5);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer4, okBuffer5);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer0);
      assertEquals(12L, okBuffer0.byteCount());
      assertEquals(12L, okBuffer1.byteCount());
      assertEquals(12L, okBuffer4.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Deadline deadline1 = Deadline.NONE;
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      try { 
        gzipSource0.read(okBuffer1, int2, deadline1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.OkBuffers", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte) (-95);
      byteArray0[0] = byte0;
      byte byte1 = (byte)87;
      byteArray0[1] = byte1;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertNotNull(byteString0);
      
      okBuffer1.write(byteString0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertEquals(20L, okBuffer0.byteCount());
      assertEquals(20L, okBuffer1.byteCount());
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      
      int int2 = 1994091976;
      OkBuffer okBuffer3 = okBuffer1.writeInt(int2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertEquals(24L, okBuffer0.byteCount());
      assertEquals(24L, okBuffer1.byteCount());
      assertEquals(24L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(okBuffer3);
      
      OkBuffer okBuffer4 = okBuffer0.writeByte(int2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer3);
      assertEquals(25L, okBuffer0.byteCount());
      assertEquals(25L, okBuffer4.byteCount());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(okBuffer4);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertEquals(25L, okBuffer0.byteCount());
      assertEquals(25L, okBuffer4.byteCount());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer5 = okBuffer0.writeInt(int0);
      assertSame(okBuffer5, okBuffer0);
      assertSame(okBuffer5, okBuffer3);
      assertSame(okBuffer5, okBuffer4);
      assertSame(okBuffer5, okBuffer1);
      assertSame(okBuffer5, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer3);
      assertEquals(29L, okBuffer5.byteCount());
      assertEquals(29L, okBuffer0.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(okBuffer5);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer5);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer3);
      assertEquals(29L, okBuffer0.byteCount());
      assertEquals(29L, okBuffer4.byteCount());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Deadline deadline1 = Deadline.NONE;
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      try { 
        gzipSource0.read(okBuffer1, int2, deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // FHCRC: actual 0x0000063a != expected 0x00000000
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-95);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-68);
      byteArray0[1] = byte1;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(2, byteString0.size());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-68)}, byteArray0);
      
      okBuffer1.write(byteString0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(2, byteString0.size());
      assertEquals(2, byteArray0.length);
      assertFalse(int0 == int1);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-68)}, byteArray0);
      
      int int2 = 1994091997;
      OkBuffer okBuffer3 = okBuffer1.writeInt(int2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertEquals(8L, okBuffer3.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(okBuffer3);
      
      OkBuffer okBuffer4 = okBuffer0.writeByte(int2);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer2);
      assertEquals(9L, okBuffer0.byteCount());
      assertEquals(9L, okBuffer4.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(okBuffer4);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertEquals(9L, okBuffer0.byteCount());
      assertEquals(9L, okBuffer4.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer5 = okBuffer0.writeInt(int0);
      assertSame(okBuffer5, okBuffer0);
      assertSame(okBuffer5, okBuffer4);
      assertSame(okBuffer5, okBuffer2);
      assertSame(okBuffer5, okBuffer1);
      assertSame(okBuffer5, okBuffer3);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertEquals(13L, okBuffer5.byteCount());
      assertEquals(13L, okBuffer0.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(okBuffer5);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer1);
      assertSame(okBuffer4, okBuffer5);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer2);
      assertEquals(13L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
      assertEquals(13L, okBuffer4.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Deadline deadline1 = Deadline.NONE;
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      try { 
        gzipSource0.read(okBuffer1, int2, deadline1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.OkBuffers", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte) (-95);
      byteArray0[0] = byte0;
      byte byte1 = (byte)76;
      byteArray0[1] = byte1;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertNotNull(byteString0);
      
      okBuffer1.write(byteString0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(20L, okBuffer0.byteCount());
      assertEquals(20L, okBuffer1.byteCount());
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      
      int int2 = 1994091976;
      OkBuffer okBuffer3 = okBuffer1.writeInt(int2);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertEquals(24L, okBuffer0.byteCount());
      assertEquals(24L, okBuffer1.byteCount());
      assertEquals(24L, okBuffer3.byteCount());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(okBuffer3);
      
      OkBuffer okBuffer4 = okBuffer0.writeByte(int2);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer1);
      assertEquals(25L, okBuffer0.byteCount());
      assertEquals(25L, okBuffer4.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(okBuffer4);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer4);
      assertEquals(25L, okBuffer0.byteCount());
      assertEquals(25L, okBuffer4.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer5 = okBuffer0.writeInt(int0);
      assertSame(okBuffer5, okBuffer1);
      assertSame(okBuffer5, okBuffer2);
      assertSame(okBuffer5, okBuffer4);
      assertSame(okBuffer5, okBuffer3);
      assertSame(okBuffer5, okBuffer0);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertEquals(29L, okBuffer5.byteCount());
      assertEquals(29L, okBuffer0.byteCount());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(okBuffer5);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer5);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer4, okBuffer5);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer1);
      assertEquals(29L, okBuffer0.byteCount());
      assertEquals(29L, okBuffer4.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Deadline deadline1 = Deadline.NONE;
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer1, int2, deadline1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 31;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      int int1 = 8075;
      OkBuffer okBuffer2 = okBuffer0.writeByte(int1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer2.byteCount());
      assertFalse(int1 == int0);
      assertNotNull(okBuffer2);
      
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)112;
      byteArray0[1] = byte0;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertNotNull(byteString0);
      
      okBuffer1.write(byteString0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(20L, okBuffer0.byteCount());
      assertEquals(20L, okBuffer1.byteCount());
      assertEquals(18, byteString0.size());
      assertEquals(18, byteArray0.length);
      assertFalse(int0 == int1);
      
      int int2 = 1994091976;
      OkBuffer okBuffer3 = okBuffer0.writeByte(int2);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertEquals(21L, okBuffer0.byteCount());
      assertEquals(21L, okBuffer3.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(okBuffer3);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer3);
      assertEquals(21L, okBuffer0.byteCount());
      assertEquals(21L, okBuffer3.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer4 = okBuffer0.writeInt(int0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer4, okBuffer0);
      assertSame(okBuffer4, okBuffer3);
      assertSame(okBuffer4, okBuffer2);
      assertSame(okBuffer4, okBuffer1);
      assertEquals(25L, okBuffer0.byteCount());
      assertEquals(25L, okBuffer4.byteCount());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(okBuffer4);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer4);
      assertSame(okBuffer3, okBuffer4);
      assertSame(okBuffer3, okBuffer0);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertEquals(25L, okBuffer0.byteCount());
      assertEquals(25L, okBuffer3.byteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Deadline deadline1 = Deadline.NONE;
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer1, int2, deadline1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }
}
