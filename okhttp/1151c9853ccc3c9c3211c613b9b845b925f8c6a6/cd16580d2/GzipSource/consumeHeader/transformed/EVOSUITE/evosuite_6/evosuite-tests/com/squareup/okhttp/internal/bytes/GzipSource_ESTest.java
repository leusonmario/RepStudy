/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 14:38:56 GMT 2021
 */

package com.squareup.okhttp.internal.bytes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.internal.bytes.ByteString;
import com.squareup.okhttp.internal.bytes.Deadline;
import com.squareup.okhttp.internal.bytes.GzipSource;
import com.squareup.okhttp.internal.bytes.InflaterSource;
import com.squareup.okhttp.internal.bytes.OkBuffer;
import com.squareup.okhttp.internal.bytes.Segment;
import com.squareup.okhttp.internal.bytes.Source;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GzipSource_ESTest extends GzipSource_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeShort(gzipSource0.SECTION_HEADER);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(okBuffer0);
      
      // Undeclared exception!
      try { 
        gzipSource0.updateCrc(okBuffer0, gzipSource0.FCOMMENT, gzipSource0.FNAME);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      GzipSource gzipSource1 = new GzipSource(gzipSource0.buffer);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      try { 
        gzipSource1.read(gzipSource0.buffer, gzipSource0.FHCRC, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      String string0 = "T9bW[yw'Z1&JM";
      okBuffer0.writeUtf8(string0);
      assertEquals(13L, okBuffer0.byteCount());
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(13L, okBuffer0.byteCount());
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00005439 != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      String string0 = "%s: actual 0x%08x !S expected 0x%08x";
      okBuffer0.writeUtf8(string0);
      assertEquals(36L, okBuffer0.byteCount());
      
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00002573 != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      GzipSource gzipSource1 = new GzipSource();
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource1);
      
      gzipSource1.section = (int) gzipSource1.SECTION_BODY;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      GzipSource.SECTION_HEADER = gzipSource0.SECTION_DONE;
      long long0 = gzipSource0.read(gzipSource1.buffer, gzipSource1.section, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertNotSame(gzipSource0, gzipSource1);
      assertNotSame(gzipSource1, gzipSource0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(1, gzipSource1.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_HEADER);
      assertEquals((-1L), long0);
      
      // Undeclared exception!
      try { 
        gzipSource1.read(gzipSource0.buffer, gzipSource0.SECTION_BODY, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = gzipSource0.read(gzipSource0.buffer, gzipSource0.section, deadline0);
      assertTrue(deadline0.reached());
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0L, long0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      GzipSource.SECTION_HEADER = gzipSource0.FCOMMENT;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      byte byte0 = (byte)0;
      GzipSource.SECTION_TRAILER = byte0;
      // Undeclared exception!
      try { 
        gzipSource0.read(gzipSource0.buffer, gzipSource0.FEXTRA, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      String string0 = "D1I2";
      okBuffer1.writeUtf8(string0);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      
      gzipSource0.close(deadline0);
      assertEquals(8L, okBuffer0.byteCount());
      assertEquals(8L, okBuffer1.byteCount());
      assertTrue(deadline0.reached());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Inflater has been closed
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      long long0 = (-15L);
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(gzipSource0.buffer, long0, deadline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -15
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      GzipSource gzipSource1 = new GzipSource(gzipSource0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertNotNull(gzipSource1);
      
      String string0 = "com.squareup.okhttp.internal.bytes.GzipSource";
      try { 
        gzipSource1.checkEqual(string0, gzipSource0.FHCRC, gzipSource0.FNAME);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.squareup.okhttp.internal.bytes.GzipSource: actual 0x00000003 != expected 0x00000001
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeByte(gzipSource0.FCOMMENT);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(okBuffer0);
      
      long long0 = 0L;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      long long1 = gzipSource0.read(okBuffer0, long0, deadline0);
      assertTrue(long1 == long0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals(0L, long1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 4;
      OkBuffer okBuffer1 = new OkBuffer();
      assertFalse(okBuffer1.equals((Object)okBuffer0));
      assertEquals(0L, okBuffer1.byteCount());
      assertNotNull(okBuffer1);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer1, int0, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      String string0 = "4yKU'Nv$BV7oP6V8A";
      int int0 = (-1345);
      gzipSource0.checkEqual(string0, int0, int0);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      long long0 = 3046L;
      long long1 = 0L;
      gzipSource0.updateCrc(okBuffer0, long0, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotNull(gzipSource0);
      
      int int0 = 61;
      OkBuffer okBuffer0 = gzipSource0.buffer.writeByte(int0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotNull(okBuffer0);
      
      long long0 = 1594L;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      String string0 = "C,b2lFWN>S6fa*N";
      int int0 = (-2213);
      gzipSource0.checkEqual(string0, int0, int0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = (-1L);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeTrailer(deadline1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      long long0 = (-1769L);
      gzipSource0.updateCrc(okBuffer0, long0, long0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Source source0 = null;
      GzipSource gzipSource0 = null;
      try {
        gzipSource0 = new GzipSource(source0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      int int0 = 0;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      gzipSource0.require(int0, deadline0);
      assertTrue(deadline0.reached());
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource0.close(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotNull(gzipSource0);
      
      String string0 = "Np&3%XUZN +~&D[,_P";
      int int0 = 13;
      int int1 = 0;
      try { 
        gzipSource0.checkEqual(string0, int0, int1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Np&3%XUZN +~&D[,_P: actual 0x00000000 != expected 0x0000000d
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      GzipSource.SECTION_DONE = gzipSource0.SECTION_BODY;
      int int0 = 0;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = 97L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      // Undeclared exception!
      try { 
        gzipSource0.close(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      int int0 = 65535;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.require(int0, deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      
      OkBuffer okBuffer2 = okBuffer1.writeInt(int0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertNotNull(okBuffer2);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      String string0 = "ID1ID2";
      okBuffer2.writeUtf8(string0);
      assertEquals(12L, okBuffer0.byteCount());
      assertEquals(12L, okBuffer1.byteCount());
      assertEquals(12L, okBuffer2.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      
      gzipSource0.require(int0, deadline0);
      assertEquals(12L, okBuffer0.byteCount());
      assertEquals(12L, okBuffer1.byteCount());
      assertEquals(12L, okBuffer2.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      
      gzipSource0.close(deadline0);
      assertEquals(12L, okBuffer0.byteCount());
      assertEquals(12L, okBuffer1.byteCount());
      assertEquals(12L, okBuffer2.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      
      long long0 = 0L;
      gzipSource0.updateCrc(okBuffer1, long0, int0);
      assertEquals(12L, okBuffer0.byteCount());
      assertEquals(12L, okBuffer1.byteCount());
      assertEquals(12L, okBuffer2.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Inflater has been closed
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      int int0 = 713;
      Deadline deadline0 = null;
      // Undeclared exception!
      try { 
        gzipSource0.require(int0, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 915;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(okBuffer1);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer1);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      long long1 = gzipSource1.read(gzipSource0.buffer, gzipSource0.section, deadline1);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertTrue(long1 == long0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotSame(gzipSource1, gzipSource0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0L, long1);
      
      Deadline deadline2 = Deadline.NONE;
      assertFalse(deadline2.equals((Object)deadline1));
      assertFalse(deadline2.equals((Object)deadline0));
      assertNotNull(deadline2);
      
      try { 
        gzipSource1.consumeTrailer(deadline2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      OkBuffer okBuffer1 = okBuffer0.writeByte(gzipSource0.FHCRC);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(okBuffer1);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer1);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource1);
      
      long long0 = (-321L);
      // Undeclared exception!
      try { 
        gzipSource1.updateCrc(okBuffer0, long0, gzipSource0.FEXTRA);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer1);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      long long0 = 1L;
      gzipSource0.updateCrc(okBuffer0, long0, long0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      gzipSource0.close(deadline0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(okBuffer1);
      
      OkBuffer okBuffer2 = okBuffer1.writeInt(gzipSource0.SECTION_TRAILER);
      assertEquals(5L, okBuffer0.byteCount());
      assertEquals(5L, okBuffer1.byteCount());
      assertEquals(5L, okBuffer2.byteCount());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(okBuffer2);
      
      List<Integer> list0 = okBuffer0.segmentSizes();
      assertEquals(5L, okBuffer0.byteCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(list0);
      assertFalse(list0.contains(int0));
      
      GzipSource gzipSource1 = new GzipSource(okBuffer2);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(5L, okBuffer0.byteCount());
      assertEquals(5L, okBuffer1.byteCount());
      assertEquals(5L, okBuffer2.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource1);
      
      int int1 = 1392;
      OkBuffer okBuffer3 = okBuffer0.writeByte(int1);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(int1 == int0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer3.byteCount());
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer3, okBuffer2);
      assertSame(okBuffer3, okBuffer1);
      assertSame(okBuffer3, okBuffer0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(okBuffer3);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Deadline deadline1 = deadline0.start(gzipSource1.SECTION_BODY, timeUnit0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(int0 == int1);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer3);
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer3);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertSame(okBuffer2, okBuffer3);
      assertNotSame(gzipSource1, gzipSource0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(deadline1);
      
      try { 
        gzipSource1.read(okBuffer3, int1, deadline1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeShort(gzipSource0.SECTION_HEADER);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(okBuffer0);
      
      okBuffer0.skip(gzipSource0.section);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      
      long long0 = 10L;
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(okBuffer1);
      
      // Undeclared exception!
      try { 
        gzipSource0.updateCrc(okBuffer0, long0, long0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      int int0 = (-1970);
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      int int1 = 1358;
      gzipSource0.section = int1;
      assertEquals(0L, okBuffer0.byteCount());
      
      gzipSource0.require(int0, deadline0);
      assertFalse(int0 == int1);
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals(1358, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      
      Deadline deadline1 = Deadline.NONE;
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      long long0 = 2028L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Deadline deadline2 = deadline0.start(long0, timeUnit0);
      assertFalse(deadline0.equals((Object)deadline1));
      assertFalse(deadline2.equals((Object)deadline1));
      assertFalse(deadline0.reached());
      assertFalse(deadline2.reached());
      assertSame(deadline0, deadline2);
      assertSame(deadline2, deadline0);
      assertNotNull(deadline2);
      
      String string0 = "%s: actual 0x%08x != expected 0x%08x";
      okBuffer0.writeUtf8(string0);
      assertEquals(36L, okBuffer0.byteCount());
      
      try { 
        gzipSource0.consumeHeader(deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00002573 != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = 0L;
      long long1 = 0L;
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      long long2 = 8L;
      // Undeclared exception!
      try { 
        gzipSource0.updateCrc(okBuffer0, long1, long2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      try { 
        gzipSource1.consumeHeader(deadline0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      int int0 = 5;
      OkBuffer okBuffer0 = gzipSource0.buffer.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(okBuffer0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      int int1 = 0;
      gzipSource0.require(int1, deadline0);
      assertFalse(int1 == int0);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      
      byte byte0 = (byte) (-87);
      GzipSource.SECTION_HEADER = byte0;
      long long0 = gzipSource0.read(okBuffer0, int0, deadline0);
      assertFalse(int0 == int1);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte) (-87), GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((-1L), long0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        deadline0.start(byte0, timeUnit0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.Deadline$1", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      long long0 = (-2556L);
      GzipSource.FNAME = gzipSource0.SECTION_HEADER;
      assertEquals(0L, okBuffer0.byteCount());
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      deadline0.throwIfReached();
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long0, deadline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2556
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer.writeByte(gzipSource0.FNAME);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(okBuffer0);
      
      long long0 = 75L;
      long long1 = 970L;
      // Undeclared exception!
      try { 
        gzipSource0.updateCrc(okBuffer0, long0, long1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 0;
      boolean boolean0 = false;
      Inflater inflater0 = new Inflater(boolean0);
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer0, inflater0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      Segment segment0 = okBuffer0.writableSegment(gzipSource0.FCOMMENT);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(segment0);
      
      long long0 = 3051L;
      // Undeclared exception!
      gzipSource0.updateCrc(okBuffer0, long0, long0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotNull(gzipSource0);
      
      int int0 = (-1970);
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      int int1 = 1358;
      gzipSource0.section = int1;
      assertEquals(0L, okBuffer0.byteCount());
      
      gzipSource0.require(int0, deadline0);
      assertFalse(int0 == int1);
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(1358, gzipSource0.section);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      
      Deadline deadline1 = Deadline.NONE;
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      long long0 = 2028L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Deadline deadline2 = deadline0.start(long0, timeUnit0);
      assertFalse(deadline0.equals((Object)deadline1));
      assertFalse(deadline2.equals((Object)deadline1));
      assertFalse(deadline0.reached());
      assertFalse(deadline2.reached());
      assertSame(deadline0, deadline2);
      assertSame(deadline2, deadline0);
      assertNotNull(deadline2);
      
      String string0 = "%s: actual 0x%08x != expected 0x%08x";
      okBuffer0.writeUtf8(string0);
      assertEquals(36L, okBuffer0.byteCount());
      
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CRC: actual 0x00000000 != expected 0x203a7325
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource0);
      
      int int0 = (-1970);
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      int int1 = 1358;
      GzipSource.SECTION_BODY = gzipSource0.FEXTRA;
      assertEquals(0L, okBuffer0.byteCount());
      
      gzipSource0.section = int1;
      assertEquals(0L, okBuffer0.byteCount());
      
      gzipSource0.require(int0, deadline0);
      assertFalse(int0 == int1);
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.SECTION_BODY);
      assertEquals(1358, gzipSource0.section);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      
      Deadline deadline1 = Deadline.NONE;
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      long long0 = 2028L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Deadline deadline2 = deadline0.start(long0, timeUnit0);
      assertFalse(deadline0.equals((Object)deadline1));
      assertFalse(deadline2.equals((Object)deadline1));
      assertFalse(deadline0.reached());
      assertFalse(deadline2.reached());
      assertSame(deadline0, deadline2);
      assertSame(deadline2, deadline0);
      assertNotNull(deadline2);
      
      String string0 = "%s: actual 0x%08x != expected 0x%08x";
      okBuffer0.writeUtf8(string0);
      assertEquals(36L, okBuffer0.byteCount());
      
      try { 
        gzipSource0.consumeHeader(deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00002573 != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      OkBuffer okBuffer1 = okBuffer0.writeInt(gzipSource0.section);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertNotNull(okBuffer1);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer1);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      gzipSource1.require(gzipSource0.SECTION_BODY, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertTrue(deadline0.reached());
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotSame(gzipSource1, gzipSource0);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      byte byte0 = (byte)52;
      GzipSource.FNAME = byte0;
      GzipSource gzipSource1 = new GzipSource(gzipSource0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)52, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)52, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource1);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = (-4322L);
      byte byte1 = (byte)2;
      GzipSource.SECTION_HEADER = byte1;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      long long1 = gzipSource0.read(gzipSource1.buffer, gzipSource1.section, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertFalse(long1 == long0);
      assertTrue(deadline0.reached());
      assertNotSame(gzipSource0, gzipSource1);
      assertNotSame(gzipSource1, gzipSource0);
      assertEquals((byte)52, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)52, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_HEADER);
      assertEquals(0L, long1);
      
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertFalse(long0 == long1);
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      long long2 = gzipSource1.read(gzipSource0.buffer, gzipSource0.SECTION_BODY, deadline1);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertFalse(long0 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertNotSame(gzipSource0, gzipSource1);
      assertNotSame(gzipSource1, gzipSource0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertEquals((byte)52, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)52, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_HEADER);
      assertEquals((-1L), long2);
      
      // Undeclared exception!
      try { 
        gzipSource1.close(deadline1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertNotNull(gzipSource0);
      
      int int0 = (-1970);
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      int int1 = 1358;
      GzipSource.FHCRC = gzipSource0.SECTION_DONE;
      assertEquals(0L, okBuffer0.byteCount());
      
      gzipSource0.section = int1;
      assertEquals(0L, okBuffer0.byteCount());
      
      long long0 = 40L;
      okBuffer0.byteCount = long0;
      assertEquals(40L, okBuffer0.byteCount());
      
      gzipSource0.require(int0, deadline0);
      assertFalse(int0 == int1);
      assertEquals(40L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(1358, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      
      Deadline deadline1 = Deadline.NONE;
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      long long1 = 2028L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Deadline deadline2 = deadline0.start(long1, timeUnit0);
      assertFalse(deadline0.equals((Object)deadline1));
      assertFalse(long1 == long0);
      assertFalse(deadline2.equals((Object)deadline1));
      assertFalse(deadline0.reached());
      assertFalse(deadline2.reached());
      assertSame(deadline0, deadline2);
      assertSame(deadline2, deadline0);
      assertNotNull(deadline2);
      
      long long2 = gzipSource0.read(okBuffer0, GzipSource.FHCRC, deadline2);
      assertFalse(deadline0.equals((Object)deadline1));
      assertFalse(long1 == long0);
      assertFalse(deadline2.equals((Object)deadline1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(40L, okBuffer0.byteCount());
      assertFalse(deadline0.reached());
      assertFalse(deadline2.reached());
      assertSame(deadline0, deadline2);
      assertSame(deadline2, deadline0);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(1358, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((-1L), long2);
      
      String string0 = "%s: actual 0x%08x != expected 0x%08x";
      okBuffer0.writeUtf8(string0);
      assertEquals(76L, okBuffer0.byteCount());
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeHeader(deadline1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.OkBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      int int0 = (-1970);
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      int int1 = 1358;
      gzipSource0.section = int1;
      assertEquals(0L, okBuffer0.byteCount());
      
      gzipSource0.require(int0, deadline0);
      assertFalse(int0 == int1);
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(1358, gzipSource0.section);
      
      Deadline deadline1 = Deadline.NONE;
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      long long0 = 2028L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      OkBuffer okBuffer1 = okBuffer0.writeByte(gzipSource0.FCOMMENT);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(1358, gzipSource0.section);
      assertNotNull(okBuffer1);
      
      Deadline deadline2 = deadline0.start(long0, timeUnit0);
      assertFalse(deadline0.equals((Object)deadline1));
      assertFalse(deadline2.equals((Object)deadline1));
      assertFalse(deadline0.reached());
      assertFalse(deadline2.reached());
      assertSame(deadline0, deadline2);
      assertSame(deadline2, deadline0);
      assertNotNull(deadline2);
      
      String string0 = "%s: actual 0x%08x != expected 0x%08x";
      okBuffer0.writeUtf8(string0);
      assertEquals(37L, okBuffer0.byteCount());
      assertSame(okBuffer0, okBuffer1);
      
      try { 
        gzipSource0.consumeHeader(deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00000425 != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertNotNull(gzipSource0);
      
      int int0 = (-1970);
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      int int1 = 1358;
      gzipSource0.section = int1;
      assertEquals(0L, okBuffer0.byteCount());
      
      gzipSource0.require(int0, deadline0);
      assertFalse(int0 == int1);
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(deadline0.reached());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(1358, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      
      Deadline deadline1 = Deadline.NONE;
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      long long0 = 2028L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Deadline deadline2 = deadline0.start(long0, timeUnit0);
      assertFalse(deadline0.equals((Object)deadline1));
      assertFalse(deadline2.equals((Object)deadline1));
      assertFalse(deadline0.reached());
      assertFalse(deadline2.reached());
      assertSame(deadline0, deadline2);
      assertSame(deadline2, deadline0);
      assertNotNull(deadline2);
      
      String string0 = "%s: actual 0x%08x != expected 0x%08x";
      okBuffer0.writeUtf8(string0);
      assertEquals(36L, okBuffer0.byteCount());
      
      int int2 = okBuffer0.readShortLe();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(34L, okBuffer0.byteCount());
      assertEquals(29477, int2);
      
      try { 
        gzipSource0.consumeHeader(deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00003a20 != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      GzipSource.SECTION_HEADER = gzipSource0.FCOMMENT;
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      long long0 = 1672L;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      byte byte0 = (byte)1;
      GzipSource.SECTION_TRAILER = byte0;
      deadline0.throwIfReached();
      long long1 = gzipSource0.read(okBuffer0, long0, deadline0);
      assertFalse(long1 == long0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((-1L), long1);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      boolean boolean0 = true;
      Inflater inflater0 = new Inflater(boolean0);
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer0, inflater0, okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflaterSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = 6L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      long long1 = 1048576L;
      Deadline deadline2 = deadline1.start(long1, timeUnit0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertFalse(deadline2.reached());
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertSame(deadline1, deadline2);
      assertSame(deadline2, deadline0);
      assertSame(deadline2, deadline1);
      assertNotNull(deadline2);
      
      inflaterSource0.close(deadline1);
      assertFalse(long0 == long1);
      assertEquals(0L, okBuffer0.byteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertSame(deadline1, deadline2);
      
      deadline1.throwIfReached();
      assertFalse(long0 == long1);
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertSame(deadline1, deadline2);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals(0L, okBuffer0.byteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      gzipSource0.inflaterSource = inflaterSource0;
      assertEquals(0L, okBuffer0.byteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      
      deadline0.throwIfReached();
      assertFalse(deadline0.reached());
      assertSame(deadline0, deadline2);
      assertSame(deadline0, deadline1);
      
      Deadline deadline3 = new Deadline();
      assertFalse(deadline3.equals((Object)deadline1));
      assertFalse(deadline3.equals((Object)deadline2));
      assertFalse(deadline3.equals((Object)deadline0));
      assertTrue(deadline3.reached());
      assertNotNull(deadline3);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeHeader(deadline3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      boolean boolean0 = true;
      Inflater inflater0 = new Inflater(boolean0);
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer0, inflater0);
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflaterSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      inflaterSource0.close(deadline0);
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertTrue(deadline0.reached());
      
      InflaterSource inflaterSource1 = new InflaterSource(inflaterSource0, inflater0, okBuffer0);
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertNotNull(inflaterSource1);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource1);
      assertFalse(inflaterSource0.equals((Object)inflaterSource1));
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      long long0 = 1L;
      long long1 = okBuffer0.read(gzipSource0.buffer, gzipSource0.section, deadline0);
      assertFalse(inflaterSource0.equals((Object)inflaterSource1));
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertFalse(long1 == long0);
      assertEquals(0L, okBuffer0.byteCount());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertTrue(deadline0.reached());
      assertNotSame(inflaterSource0, inflaterSource1);
      assertNotSame(inflaterSource1, inflaterSource0);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((-1L), long1);
      
      Deadline deadline1 = Deadline.NONE;
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      // Undeclared exception!
      try { 
        gzipSource0.read(okBuffer0, long0, deadline1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      OkBuffer okBuffer1 = okBuffer0.writeShort(gzipSource0.SECTION_TRAILER);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(okBuffer1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer1);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertNotNull(gzipSource1);
      
      long long0 = (-2598L);
      okBuffer1.byteCount = long0;
      assertEquals((-2598L), okBuffer0.byteCount());
      assertEquals((-2598L), okBuffer1.byteCount());
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      // Undeclared exception!
      try { 
        gzipSource1.require(gzipSource0.FEXTRA, deadline0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertNotNull(gzipSource0);
      
      byte byte0 = (byte)52;
      GzipSource.FNAME = byte0;
      GzipSource gzipSource1 = new GzipSource(gzipSource0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)52, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)52, GzipSource.FNAME);
      assertNotNull(gzipSource1);
      
      gzipSource1.section = (int) gzipSource0.SECTION_BODY;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      long long0 = (-4322L);
      byte byte1 = (byte)2;
      GzipSource.SECTION_HEADER = byte1;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      long long1 = gzipSource0.read(gzipSource1.buffer, gzipSource1.section, deadline0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertFalse(long1 == long0);
      assertTrue(deadline0.reached());
      assertNotSame(gzipSource0, gzipSource1);
      assertNotSame(gzipSource1, gzipSource0);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)52, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(1, gzipSource1.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)52, GzipSource.FNAME);
      assertEquals((-1L), long1);
      
      Deadline deadline1 = deadline0.start(long0, timeUnit0);
      assertFalse(long0 == long1);
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      try { 
        gzipSource1.read(gzipSource0.buffer, gzipSource0.SECTION_BODY, deadline1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      byte byte0 = (byte)52;
      GzipSource.FNAME = byte0;
      GzipSource gzipSource1 = new GzipSource();
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)52, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource1);
      
      gzipSource1.section = (int) gzipSource0.SECTION_BODY;
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      long long0 = (-4322L);
      byte byte1 = (byte)2;
      gzipSource0.section = (int) byte1;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        gzipSource0.read(gzipSource1.buffer, gzipSource1.section, deadline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 48;
      OkBuffer okBuffer1 = okBuffer0.writeByte(int0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource0);
      
      int int1 = 55;
      OkBuffer okBuffer2 = okBuffer0.writeShort(int1);
      assertFalse(int1 == int0);
      assertEquals(3L, okBuffer0.byteCount());
      assertEquals(3L, okBuffer2.byteCount());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertNotNull(okBuffer2);
      
      long long0 = 1534L;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      try { 
        gzipSource0.read(okBuffer2, long0, deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = gzipSource0.SECTION_HEADER;
      byteArray0[1] = gzipSource0.SECTION_TRAILER;
      int int0 = (-898);
      int int1 = (-270);
      okBuffer0.write(byteArray0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-270L), okBuffer0.byteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int2 = (-1970);
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      int int3 = 1358;
      Deadline deadline1 = Deadline.NONE;
      assertFalse(deadline1.equals((Object)deadline0));
      assertNotNull(deadline1);
      
      long long0 = 2028L;
      OkBuffer okBuffer1 = okBuffer0.writeInt(gzipSource0.SECTION_HEADER);
      assertEquals((-266L), okBuffer0.byteCount());
      assertEquals((-266L), okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(okBuffer1);
      
      String string0 = "%s: actual 0x%08x != expected 0x%08x";
      okBuffer0.writeUtf8(string0);
      assertEquals((-230L), okBuffer0.byteCount());
      assertSame(okBuffer0, okBuffer1);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeHeader(deadline1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = (-1);
      long long0 = 1278L;
      System.setCurrentTimeMillis(long0);
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      OkBuffer okBuffer1 = okBuffer0.writeInt(int0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer1, inflater0, okBuffer1);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflaterSource0);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertNotNull(gzipSource0);
      
      int int1 = 931;
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Deadline deadline1 = deadline0.start(int0, timeUnit0);
      assertFalse(int0 == int1);
      assertTrue(deadline0.reached());
      assertTrue(deadline1.reached());
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertNotNull(deadline1);
      
      try { 
        gzipSource0.require(int1, deadline1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(gzipSource0);
      
      OkBuffer okBuffer0 = gzipSource0.buffer;
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      OkBuffer okBuffer1 = okBuffer0.writeByte(gzipSource0.section);
      assertEquals(1L, okBuffer0.byteCount());
      assertEquals(1L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertNotNull(okBuffer1);
      
      okBuffer1.clear();
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      
      GzipSource gzipSource1 = new GzipSource(okBuffer1);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, okBuffer1.byteCount());
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource1.section);
      assertNotNull(gzipSource1);
      
      byte byte0 = (byte) (-117);
      GzipSource.FHCRC = byte0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = gzipSource0.FNAME;
      byteArray0[1] = byte0;
      byteArray0[2] = gzipSource0.SECTION_HEADER;
      byteArray0[3] = gzipSource1.SECTION_TRAILER;
      int int0 = (-1544);
      okBuffer1.write(byteArray0, gzipSource0.section, int0);
      assertFalse(gzipSource0.equals((Object)gzipSource1));
      assertEquals((-1544L), okBuffer0.byteCount());
      assertEquals((-1544L), okBuffer1.byteCount());
      assertNotSame(gzipSource0, gzipSource1);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte) (-117), GzipSource.FHCRC);
      assertEquals(0, gzipSource0.section);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-117), (byte)0, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      long long0 = 2748L;
      Deadline deadline0 = null;
      // Undeclared exception!
      try { 
        gzipSource1.read(okBuffer1, long0, deadline0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      int int0 = 0;
      OkBuffer okBuffer1 = okBuffer0.writeShort(int0);
      assertEquals(2L, okBuffer0.byteCount());
      assertEquals(2L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertNotNull(okBuffer1);
      
      OkBuffer okBuffer2 = okBuffer1.writeInt(int0);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      assertNotNull(okBuffer2);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer2);
      assertEquals(6L, okBuffer0.byteCount());
      assertEquals(6L, okBuffer1.byteCount());
      assertEquals(6L, okBuffer2.byteCount());
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertNotNull(gzipSource0);
      
      long long0 = (-936L);
      okBuffer2.byteCount = long0;
      assertEquals((-936L), okBuffer0.byteCount());
      assertEquals((-936L), okBuffer1.byteCount());
      assertEquals((-936L), okBuffer2.byteCount());
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      String string0 = "ID1ID2";
      okBuffer2.writeUtf8(string0);
      assertEquals((-930L), okBuffer0.byteCount());
      assertEquals((-930L), okBuffer1.byteCount());
      assertEquals((-930L), okBuffer2.byteCount());
      assertSame(okBuffer0, okBuffer2);
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertSame(okBuffer1, okBuffer2);
      assertSame(okBuffer2, okBuffer1);
      assertSame(okBuffer2, okBuffer0);
      
      // Undeclared exception!
      try { 
        gzipSource0.consumeTrailer(deadline0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      boolean boolean0 = true;
      Inflater inflater0 = new Inflater(boolean0);
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(okBuffer0, inflater0, okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertNotNull(inflaterSource0);
      
      InflaterSource inflaterSource1 = new InflaterSource(inflaterSource0, inflater0);
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertNotNull(inflaterSource1);
      
      GzipSource gzipSource0 = new GzipSource(inflaterSource1);
      assertFalse(inflaterSource0.equals((Object)inflaterSource1));
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = new Deadline();
      assertTrue(deadline0.reached());
      assertNotNull(deadline0);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Deadline deadline1 = deadline0.start(gzipSource0.FEXTRA, timeUnit0);
      assertFalse(inflaterSource0.equals((Object)inflaterSource1));
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertNotSame(inflaterSource0, inflaterSource1);
      assertNotSame(inflaterSource1, inflaterSource0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(deadline1);
      
      inflaterSource1.close(deadline1);
      assertFalse(inflaterSource0.equals((Object)inflaterSource1));
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertEquals(0L, okBuffer0.byteCount());
      assertFalse(inflater0.needsDictionary());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(deadline0.reached());
      assertFalse(deadline1.reached());
      assertNotSame(inflaterSource0, inflaterSource1);
      assertNotSame(inflaterSource1, inflaterSource0);
      assertSame(deadline0, deadline1);
      assertSame(deadline1, deadline0);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      
      int int0 = 137;
      Deadline deadline2 = new Deadline();
      assertFalse(deadline2.equals((Object)deadline0));
      assertFalse(deadline2.equals((Object)deadline1));
      assertTrue(deadline2.reached());
      assertNotNull(deadline2);
      
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      Deadline deadline3 = deadline2.start(gzipSource0.section, timeUnit1);
      assertFalse(inflaterSource0.equals((Object)inflaterSource1));
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertFalse(deadline2.equals((Object)deadline0));
      assertFalse(deadline2.equals((Object)deadline1));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(deadline3.equals((Object)deadline1));
      assertFalse(deadline3.equals((Object)deadline0));
      assertEquals(0L, okBuffer0.byteCount());
      assertFalse(inflater0.needsDictionary());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(deadline2.reached());
      assertTrue(deadline3.reached());
      assertNotSame(inflaterSource0, inflaterSource1);
      assertNotSame(inflaterSource1, inflaterSource0);
      assertNotSame(deadline2, deadline0);
      assertNotSame(deadline2, deadline1);
      assertSame(deadline2, deadline3);
      assertNotSame(deadline3, deadline1);
      assertNotSame(deadline3, deadline0);
      assertSame(deadline3, deadline2);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(deadline3);
      
      TimeUnit timeUnit2 = TimeUnit.MILLISECONDS;
      Deadline deadline4 = deadline2.start(gzipSource0.FEXTRA, timeUnit2);
      assertFalse(inflaterSource0.equals((Object)inflaterSource1));
      assertFalse(inflaterSource1.equals((Object)inflaterSource0));
      assertFalse(deadline2.equals((Object)deadline0));
      assertFalse(deadline2.equals((Object)deadline1));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(deadline4.equals((Object)deadline1));
      assertFalse(deadline4.equals((Object)deadline0));
      assertEquals(0L, okBuffer0.byteCount());
      assertFalse(inflater0.needsDictionary());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(deadline2.reached());
      assertFalse(deadline4.reached());
      assertNotSame(inflaterSource0, inflaterSource1);
      assertNotSame(inflaterSource1, inflaterSource0);
      assertSame(deadline2, deadline4);
      assertNotSame(deadline2, deadline0);
      assertNotSame(deadline2, deadline1);
      assertSame(deadline2, deadline3);
      assertSame(deadline4, deadline2);
      assertNotSame(deadline4, deadline1);
      assertNotSame(deadline4, deadline0);
      assertSame(deadline4, deadline3);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(deadline4);
      
      // Undeclared exception!
      try { 
        gzipSource0.require(int0, deadline4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("com.squareup.okhttp.internal.bytes.InflaterSource", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      GzipSource gzipSource0 = new GzipSource();
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertNotNull(gzipSource0);
      
      GzipSource gzipSource1 = new GzipSource(gzipSource0);
      assertFalse(gzipSource1.equals((Object)gzipSource0));
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals(0, gzipSource1.section);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertNotNull(gzipSource1);
      
      GzipSource.FCOMMENT = gzipSource0.SECTION_HEADER;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      gzipSource0.inflaterSource = gzipSource1.inflaterSource;
      Deadline deadline0 = null;
      byte byte0 = (byte)125;
      GzipSource.SECTION_BODY = gzipSource1.FCOMMENT;
      GzipSource.SECTION_HEADER = byte0;
      // Undeclared exception!
      try { 
        gzipSource1.require(gzipSource0.FEXTRA, deadline0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      OkBuffer okBuffer0 = new OkBuffer();
      assertEquals(0L, okBuffer0.byteCount());
      assertNotNull(okBuffer0);
      
      GzipSource gzipSource0 = new GzipSource(okBuffer0);
      assertEquals(0L, okBuffer0.byteCount());
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)0, GzipSource.SECTION_HEADER);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(gzipSource0);
      
      Deadline deadline0 = Deadline.NONE;
      assertNotNull(deadline0);
      
      byte byte0 = (byte) (-24);
      GzipSource.SECTION_HEADER = byte0;
      OkBuffer okBuffer1 = okBuffer0.writeInt(gzipSource0.SECTION_HEADER);
      assertEquals(4L, okBuffer0.byteCount());
      assertEquals(4L, okBuffer1.byteCount());
      assertSame(okBuffer0, okBuffer1);
      assertSame(okBuffer1, okBuffer0);
      assertEquals((byte) (-24), GzipSource.SECTION_HEADER);
      assertEquals((byte)1, GzipSource.SECTION_BODY);
      assertEquals((byte)3, GzipSource.SECTION_DONE);
      assertEquals((byte)3, GzipSource.FNAME);
      assertEquals((byte)1, GzipSource.FHCRC);
      assertEquals((byte)4, GzipSource.FCOMMENT);
      assertEquals((byte)2, GzipSource.FEXTRA);
      assertEquals((byte)2, GzipSource.SECTION_TRAILER);
      assertEquals(0, gzipSource0.section);
      assertNotNull(okBuffer1);
      
      String string0 = "%s: actual 0x%08x != expected 0x%08x";
      okBuffer0.writeUtf8(string0);
      assertEquals(40L, okBuffer0.byteCount());
      assertSame(okBuffer0, okBuffer1);
      
      try { 
        gzipSource0.consumeHeader(deadline0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0xffffffff != expected 0x00001f8b
         //
         verifyException("com.squareup.okhttp.internal.bytes.GzipSource", e);
      }
  }
}
