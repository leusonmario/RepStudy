/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 08 18:34:57 GMT 2021
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.Address;
import com.squareup.okhttp.Connection;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.SerializedObjectSupporter;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.tls.OkHostnameVerifier;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient347();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.usingProxy());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(httpURLConnection0.getInstanceFollowRedirects());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertFalse(httpURLConnection0.getFollowRedirects());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.copyWithDefaults();
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.copyWithDefaults();
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      okHttpClient2.setfailedRoutes(okHttpClient0.failedRoutes);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient266();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(okHttpClient0.proxySelector);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = null;
      okHttpClient0.hostnameVerifier = okHttpClient2.hostnameVerifier;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ResponseCache responseCache1 = okHttpClient0.getResponseCache();
      assertNull(responseCache1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient0.setProxy(okHttpClient0.proxy);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      String string0 = "https";
      int int0 = 323;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int0, string0, uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals(323, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https:323", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      
      HttpURLConnection httpURLConnection0 = okHttpClient3.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(323, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https:323", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(httpURLConnection0.usingProxy());
      assertFalse(httpURLConnection0.getFollowRedirects());
      
      OkAuthenticator okAuthenticator0 = okHttpClient3.getAuthenticator();
      assertNull(okAuthenticator0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient318();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      String string0 = "java.vm.vendor";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      long long0 = 686L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertNotNull(httpResponseCache0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals("java.vm.vendor", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("java.vm.vendor", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("java.vm.vendor", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("java.vm.vendor", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNotNull(okResponseCache0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      long long1 = 13L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertNotNull(okHttpClient4);
      assertFalse(long0 == long1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("java.vm.vendor", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("java.vm.vendor", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      System.setCurrentTimeMillis(long0);
      assertFalse(long0 == long1);
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertNotNull(set0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient359();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertNotNull(set0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient3();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertNotNull(set0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      OkHttpClient okHttpClient3 = okHttpClient0.setProxySelector(okHttpClient2.proxySelector);
      assertNotNull(okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient194();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient1();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient283();
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertNotNull(set0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertNull(proxy0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(okHttpClient1.responseCache);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      Proxy proxy1 = okHttpClient2.getProxy();
      assertNull(proxy1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient2.setResponseCache(okHttpClient0.responseCache);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      assertNull(okAuthenticator0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient1.setfailedRoutes(okHttpClient2.failedRoutes);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient52();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxy(okHttpClient1.proxy);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = okHttpClient1.getHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient267();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      
      OkResponseCache okResponseCache0 = null;
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCache0, okHttpClient0.failedRoutes);
      assertNotNull(httpsURLConnectionImpl0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertNull(proxySelector0);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector1 = okHttpClient0.getProxySelector();
      assertNull(proxySelector1);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient218();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      assertNull(cookieHandler0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient140();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient207();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient322();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertNull(connectionPool0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient292();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient168();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient0.setProxySelector(okHttpClient1.proxySelector);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      okHttpClient1.hostnameVerifier = okHttpClient3.hostnameVerifier;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = null;
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNull(okResponseCache0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient0.authenticator = okAuthenticator0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertNull(connectionPool0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient3.authenticator = okHttpClient2.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertNull(cookieHandler0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient1.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy4();
      assertNotNull(proxy0);
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:44479", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      
      OkHttpClient okHttpClient4 = okHttpClient1.setProxy(proxy0);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:44479", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      boolean boolean0 = okHttpClient3.getFollowProtocolRedirects();
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(boolean0);
      
      OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient4.okResponseCache();
      assertNull(okResponseCache1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:44479", proxy0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient343();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(okHttpClient1.sslSocketFactory);
      assertNotNull(okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient4 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient5.getConnectionPool();
      assertNotNull(connectionPool0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      
      URI uRI0 = MockURI.aFTPURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp://foo.bar", uRI0.toString());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRL0.getFile());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp://foo.bar", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://foo.bar", uRL0.toExternalForm());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient269();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient97();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient229();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient210();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient417();
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient197();
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(okHttpClient1.cookieHandler);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      okHttpClient3.sslSocketFactory = okHttpClient0.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = serializedObjectSupporter0.deserializeObjectOkHttpClient214();
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = serializedObjectSupporter0.deserializeObjectOkHttpClient332();
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient5.getfailedRoutes();
      assertNotNull(set0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      OkHttpClient okHttpClient7 = okHttpClient5.setAuthenticator(okHttpClient0.authenticator);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient7.setProxy(okHttpClient0.proxy);
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      okHttpClient8.serializedObjectSupporter = okHttpClient5.serializedObjectSupporter;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient8.open(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient405();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter1);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter1.deserializeObjectOkHttpClient257();
      assertNotNull(okHttpClient1);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter1.deserializeObjectOkHttpClient142();
      assertNotNull(okHttpClient2);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient2.getResponseCache();
      assertNull(responseCache0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient14();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      int int0 = (-2385);
      long long0 = (-1383L);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient132();
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient2.getfailedRoutes();
      assertNotNull(set0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      okHttpClient2.setfailedRoutes(okHttpClient0.failedRoutes);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(okHttpClient1.sslSocketFactory);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient2.copyWithDefaults();
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = serializedObjectSupporter0.deserializeObjectOkHttpClient366();
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient4.sslSocketFactory = okHttpClient2.sslSocketFactory;
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient4.copyWithDefaults();
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient2.setAuthenticator(okHttpClient4.authenticator);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient8 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
      assertNotNull(okHttpClient9);
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      ProxySelector.setDefault(okHttpClient0.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      assertNull(proxySelector1);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      int int0 = 844;
      long long0 = 2561L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      int int1 = connectionPool0.getHttpConnectionCount();
      assertFalse(int1 == int0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, int1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient2);
      assertFalse(int0 == int1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ProxySelector proxySelector2 = okHttpClient0.getProxySelector();
      assertNull(proxySelector2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertNull(proxy0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier1 = okHttpClient1.getHostnameVerifier();
      assertNull(hostnameVerifier1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      Proxy proxy1 = okHttpClient0.getProxy();
      assertNull(proxy1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      HttpURLConnection httpURLConnection0 = okHttpClient1.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertFalse(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getInstanceFollowRedirects());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.usingProxy());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      HttpURLConnection httpURLConnection1 = okHttpClient1.open(uRL0);
      assertNotNull(httpURLConnection1);
      assertFalse(httpURLConnection1.equals((Object)httpURLConnection0));
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(httpURLConnection1, httpURLConnection0);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(httpURLConnection1.getDefaultUseCaches());
      assertFalse(httpURLConnection1.getFollowRedirects());
      assertTrue(httpURLConnection1.getDoInput());
      assertTrue(httpURLConnection1.getUseCaches());
      assertFalse(httpURLConnection1.usingProxy());
      assertFalse(httpURLConnection1.getAllowUserInteraction());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection1.toString());
      assertFalse(httpURLConnection1.getDefaultAllowUserInteraction());
      assertEquals(0, httpURLConnection1.getConnectTimeout());
      assertEquals("GET", httpURLConnection1.getRequestMethod());
      assertFalse(httpURLConnection1.getDoOutput());
      assertFalse(httpURLConnection1.getInstanceFollowRedirects());
      assertEquals(0, httpURLConnection1.getReadTimeout());
      assertEquals(0L, httpURLConnection1.getIfModifiedSince());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertNull(cookieHandler0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHostnameVerifier okHostnameVerifier0 = new OkHostnameVerifier();
      assertNotNull(okHostnameVerifier0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(okHostnameVerifier0);
      assertNotNull(okHttpClient3);
      assertFalse(int0 == int1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      HttpURLConnection httpURLConnection2 = okHttpClient3.open(uRL0);
      assertNotNull(httpURLConnection2);
      assertFalse(int0 == int1);
      assertFalse(httpURLConnection2.equals((Object)httpURLConnection0));
      assertFalse(httpURLConnection2.equals((Object)httpURLConnection1));
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(httpURLConnection2, httpURLConnection0);
      assertNotSame(httpURLConnection2, httpURLConnection1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, httpURLConnection2.getReadTimeout());
      assertFalse(httpURLConnection2.getInstanceFollowRedirects());
      assertTrue(httpURLConnection2.getDoInput());
      assertEquals(0L, httpURLConnection2.getIfModifiedSince());
      assertFalse(httpURLConnection2.getFollowRedirects());
      assertEquals(0, httpURLConnection2.getConnectTimeout());
      assertEquals("GET", httpURLConnection2.getRequestMethod());
      assertFalse(httpURLConnection2.getDoOutput());
      assertTrue(httpURLConnection2.getDefaultUseCaches());
      assertTrue(httpURLConnection2.getUseCaches());
      assertFalse(httpURLConnection2.getDefaultAllowUserInteraction());
      assertFalse(httpURLConnection2.getAllowUserInteraction());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection2.toString());
      assertFalse(httpURLConnection2.usingProxy());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setProxySelector(okHttpClient1.proxySelector);
      assertNotNull(okHttpClient4);
      assertFalse(int0 == int1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      ProxySelector.setDefault(okHttpClient0.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      assertNull(proxySelector1);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      int int0 = 844;
      long long0 = 2561L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      int int1 = connectionPool0.getHttpConnectionCount();
      assertFalse(int1 == int0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, int1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient2);
      assertFalse(int0 == int1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ProxySelector proxySelector2 = okHttpClient0.getProxySelector();
      assertNull(proxySelector2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertNull(proxy0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier1 = okHttpClient1.getHostnameVerifier();
      assertNull(hostnameVerifier1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      Proxy proxy1 = okHttpClient0.getProxy();
      assertNull(proxy1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpURLConnection httpURLConnection0 = okHttpClient1.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertFalse(httpURLConnection0.getInstanceFollowRedirects());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertFalse(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.usingProxy());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      HttpURLConnection httpURLConnection1 = okHttpClient1.open(uRL0);
      assertNotNull(httpURLConnection1);
      assertFalse(httpURLConnection1.equals((Object)httpURLConnection0));
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(httpURLConnection1, httpURLConnection0);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("GET", httpURLConnection1.getRequestMethod());
      assertEquals(0, httpURLConnection1.getConnectTimeout());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection1.toString());
      assertFalse(httpURLConnection1.getDoOutput());
      assertTrue(httpURLConnection1.getDefaultUseCaches());
      assertFalse(httpURLConnection1.getAllowUserInteraction());
      assertFalse(httpURLConnection1.usingProxy());
      assertEquals(0L, httpURLConnection1.getIfModifiedSince());
      assertTrue(httpURLConnection1.getUseCaches());
      assertFalse(httpURLConnection1.getDefaultAllowUserInteraction());
      assertFalse(httpURLConnection1.getInstanceFollowRedirects());
      assertFalse(httpURLConnection1.getFollowRedirects());
      assertEquals(0, httpURLConnection1.getReadTimeout());
      assertTrue(httpURLConnection1.getDoInput());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
      assertNotNull(okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertNull(cookieHandler0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHostnameVerifier okHostnameVerifier0 = new OkHostnameVerifier();
      assertNotNull(okHostnameVerifier0);
      
      OkHttpClient okHttpClient4 = okHttpClient2.setHostnameVerifier(okHostnameVerifier0);
      assertNotNull(okHttpClient4);
      assertFalse(int0 == int1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      HttpURLConnection httpURLConnection2 = okHttpClient4.open(uRL0);
      assertNotNull(httpURLConnection2);
      assertFalse(int0 == int1);
      assertFalse(httpURLConnection2.equals((Object)httpURLConnection1));
      assertFalse(httpURLConnection2.equals((Object)httpURLConnection0));
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(httpURLConnection2, httpURLConnection1);
      assertNotSame(httpURLConnection2, httpURLConnection0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(httpURLConnection2.getDoInput());
      assertFalse(httpURLConnection2.getInstanceFollowRedirects());
      assertTrue(httpURLConnection2.getUseCaches());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection2.toString());
      assertFalse(httpURLConnection2.getDefaultAllowUserInteraction());
      assertFalse(httpURLConnection2.usingProxy());
      assertFalse(httpURLConnection2.getAllowUserInteraction());
      assertTrue(httpURLConnection2.getDefaultUseCaches());
      assertEquals(0L, httpURLConnection2.getIfModifiedSince());
      assertFalse(httpURLConnection2.getFollowRedirects());
      assertEquals(0, httpURLConnection2.getConnectTimeout());
      assertEquals("GET", httpURLConnection2.getRequestMethod());
      assertFalse(httpURLConnection2.getDoOutput());
      assertEquals(0, httpURLConnection2.getReadTimeout());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient4.setProxySelector(okHttpClient1.proxySelector);
      assertNotNull(okHttpClient5);
      assertFalse(int0 == int1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient60();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient377();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(okHttpClient0.responseCache);
      assertNotNull(okResponseCacheAdapter0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCacheAdapter0, okHttpClient0.failedRoutes);
      assertNotNull(httpsURLConnectionImpl0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      
      OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertNull(connectionPool0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool1 = okHttpClient2.getConnectionPool();
      assertNull(connectionPool1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      boolean boolean1 = false;
      okHttpClient0.setfailedRoutes(okHttpClient3.failedRoutes);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      HttpURLConnection.setFollowRedirects(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Proxy proxy0 = okHttpClient3.getProxy();
      assertNull(proxy0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean2 = false;
      OkHttpClient okHttpClient5 = okHttpClient2.setFollowProtocolRedirects(boolean2);
      assertNotNull(okHttpClient5);
      assertFalse(boolean2 == boolean0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient289();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      
      String string0 = "";
      String string1 = "I3-";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      long long0 = 40L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertNotNull(httpResponseCache0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("I3-", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals("/I3-", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      
      OkResponseCache okResponseCache0 = httpResponseCache0.okResponseCache;
      assertNotNull(okResponseCache0);
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCache0, okHttpClient0.failedRoutes);
      assertNotNull(httpsURLConnectionImpl0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("I3-", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals("/I3-", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      assertNull(cookieHandler0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      // Undeclared exception!
      try { 
        httpsURLConnectionImpl0.getContentLength();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient355();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient136();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient19();
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient245();
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = null;
      OkHttpClient okHttpClient4 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient2.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient5.setCookieHandler(okHttpClient1.cookieHandler);
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient5);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient4.setConnectionPool(okHttpClient1.connectionPool);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient0.setProxySelector(okHttpClient4.proxySelector);
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient2.setProxySelector(okHttpClient0.proxySelector);
      assertNotNull(okHttpClient9);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient5.okResponseCache();
      assertNull(okResponseCache0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient9);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier1 = okHttpClient1.getHostnameVerifier();
      assertNull(hostnameVerifier1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient1.okResponseCache();
      assertNull(okResponseCache1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      okHttpClient5.setfailedRoutes(okHttpClient4.failedRoutes);
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient9);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient0.setProxySelector(okHttpClient5.proxySelector);
      assertNotNull(okHttpClient10);
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient9);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient9.authenticator = okHttpClient1.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient2.copyWithDefaults();
      assertNotNull(okHttpClient11);
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient12 = okHttpClient5.copyWithDefaults();
      assertNotNull(okHttpClient12);
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient9);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient9.sslSocketFactory = okHttpClient7.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient13 = okHttpClient11.setSSLSocketFactory(okHttpClient9.sslSocketFactory);
      assertNotNull(okHttpClient13);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient12));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient8));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient0));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient9.equals((Object)okHttpClient12));
      assertFalse(okHttpClient9.equals((Object)okHttpClient10));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient11));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient13);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient0);
      assertSame(okHttpClient13, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient9, okHttpClient12);
      assertNotSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient11);
      assertNotSame(okHttpClient9, okHttpClient13);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient2.getResponseCache();
      assertNull(responseCache0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient10.getCookieHandler();
      assertNull(cookieHandler0);
      assertFalse(okHttpClient10.equals((Object)okHttpClient11));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient13));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient12));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient13));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertNotSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient13);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient9);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier2 = okHttpClient2.getHostnameVerifier();
      assertNull(hostnameVerifier2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      boolean boolean0 = okHttpClient9.getFollowProtocolRedirects();
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient12));
      assertFalse(okHttpClient9.equals((Object)okHttpClient10));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient11));
      assertFalse(okHttpClient9.equals((Object)okHttpClient13));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient9, okHttpClient12);
      assertNotSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient11);
      assertNotSame(okHttpClient9, okHttpClient13);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(boolean0);
      
      OkHttpClient okHttpClient14 = okHttpClient3.setResponseCache(okHttpClient2.responseCache);
      assertNotNull(okHttpClient14);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient14.equals((Object)okHttpClient11));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient7));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient1));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient2));
      assertFalse(okHttpClient14.equals((Object)okHttpClient6));
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient14);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient11);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient14, okHttpClient7);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertNotSame(okHttpClient14, okHttpClient1);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertNotSame(okHttpClient14, okHttpClient2);
      assertSame(okHttpClient14, okHttpClient3);
      assertNotSame(okHttpClient14, okHttpClient6);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient14.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient14.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier3 = okHttpClient13.getHostnameVerifier();
      assertNotNull(hostnameVerifier3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient14));
      assertFalse(okHttpClient11.equals((Object)okHttpClient12));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertFalse(okHttpClient13.equals((Object)okHttpClient14));
      assertFalse(okHttpClient13.equals((Object)okHttpClient8));
      assertFalse(okHttpClient13.equals((Object)okHttpClient0));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient9.equals((Object)okHttpClient12));
      assertFalse(okHttpClient9.equals((Object)okHttpClient10));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient11));
      assertFalse(okHttpClient9.equals((Object)okHttpClient13));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient14));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient14);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient13);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient14);
      assertNotSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient0);
      assertSame(okHttpClient13, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient9, okHttpClient12);
      assertNotSame(okHttpClient9, okHttpClient10);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient14);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient11);
      assertNotSame(okHttpClient9, okHttpClient13);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient15 = okHttpClient0.setProxy(okHttpClient6.proxy);
      assertNotNull(okHttpClient15);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient14));
      assertFalse(okHttpClient5.equals((Object)okHttpClient13));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient13));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient14));
      assertFalse(okHttpClient15.equals((Object)okHttpClient5));
      assertFalse(okHttpClient15.equals((Object)okHttpClient4));
      assertFalse(okHttpClient15.equals((Object)okHttpClient12));
      assertFalse(okHttpClient15.equals((Object)okHttpClient7));
      assertFalse(okHttpClient15.equals((Object)okHttpClient9));
      assertFalse(okHttpClient15.equals((Object)okHttpClient2));
      assertFalse(okHttpClient15.equals((Object)okHttpClient14));
      assertFalse(okHttpClient15.equals((Object)okHttpClient1));
      assertFalse(okHttpClient15.equals((Object)okHttpClient6));
      assertFalse(okHttpClient15.equals((Object)okHttpClient11));
      assertFalse(okHttpClient15.equals((Object)okHttpClient3));
      assertFalse(okHttpClient15.equals((Object)okHttpClient13));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient15);
      assertNotSame(okHttpClient1, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient15);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient15);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient14);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient14);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient15);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient13);
      assertNotSame(okHttpClient15, okHttpClient5);
      assertNotSame(okHttpClient15, okHttpClient7);
      assertNotSame(okHttpClient15, okHttpClient9);
      assertNotSame(okHttpClient15, okHttpClient2);
      assertSame(okHttpClient15, okHttpClient8);
      assertNotSame(okHttpClient15, okHttpClient3);
      assertNotSame(okHttpClient15, okHttpClient13);
      assertNotSame(okHttpClient15, okHttpClient4);
      assertNotSame(okHttpClient15, okHttpClient12);
      assertSame(okHttpClient15, okHttpClient10);
      assertSame(okHttpClient15, okHttpClient0);
      assertNotSame(okHttpClient15, okHttpClient14);
      assertNotSame(okHttpClient15, okHttpClient1);
      assertNotSame(okHttpClient15, okHttpClient6);
      assertNotSame(okHttpClient15, okHttpClient11);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient15.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient15.getFollowProtocolRedirects());
      
      boolean boolean1 = true;
      OkHttpClient okHttpClient16 = okHttpClient11.setFollowProtocolRedirects(boolean1);
      assertNotNull(okHttpClient16);
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient15));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient14));
      assertFalse(okHttpClient11.equals((Object)okHttpClient12));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient15));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient16.equals((Object)okHttpClient3));
      assertFalse(okHttpClient16.equals((Object)okHttpClient5));
      assertFalse(okHttpClient16.equals((Object)okHttpClient7));
      assertFalse(okHttpClient16.equals((Object)okHttpClient4));
      assertFalse(okHttpClient16.equals((Object)okHttpClient15));
      assertFalse(okHttpClient16.equals((Object)okHttpClient12));
      assertFalse(okHttpClient16.equals((Object)okHttpClient6));
      assertFalse(okHttpClient16.equals((Object)okHttpClient2));
      assertFalse(okHttpClient16.equals((Object)okHttpClient8));
      assertFalse(okHttpClient16.equals((Object)okHttpClient14));
      assertFalse(okHttpClient16.equals((Object)okHttpClient9));
      assertFalse(okHttpClient16.equals((Object)okHttpClient10));
      assertFalse(okHttpClient16.equals((Object)okHttpClient0));
      assertFalse(okHttpClient16.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient15);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient14);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient13);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient16);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient15);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient16);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient16, okHttpClient3);
      assertNotSame(okHttpClient16, okHttpClient5);
      assertNotSame(okHttpClient16, okHttpClient7);
      assertNotSame(okHttpClient16, okHttpClient4);
      assertNotSame(okHttpClient16, okHttpClient15);
      assertSame(okHttpClient16, okHttpClient13);
      assertNotSame(okHttpClient16, okHttpClient12);
      assertNotSame(okHttpClient16, okHttpClient6);
      assertNotSame(okHttpClient16, okHttpClient2);
      assertNotSame(okHttpClient16, okHttpClient8);
      assertSame(okHttpClient16, okHttpClient11);
      assertNotSame(okHttpClient16, okHttpClient14);
      assertNotSame(okHttpClient16, okHttpClient9);
      assertNotSame(okHttpClient16, okHttpClient10);
      assertNotSame(okHttpClient16, okHttpClient0);
      assertNotSame(okHttpClient16, okHttpClient1);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient16.followProtocolRedirects);
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient16.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient294();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient415();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient360();
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNull(okResponseCache0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient2.setConnectionPool(okHttpClient3.connectionPool);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertNotNull(set0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      OkHttpClient okHttpClient5 = okHttpClient0.setAuthenticator(okHttpClient0.authenticator);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient5.setfailedRoutes(set0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient0.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient6.setProxySelector(okHttpClient1.proxySelector);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      String string0 = "pUr[5JC8~g0}";
      int int0 = (-84);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL(string0, string0, int0, string0, uRLStreamHandler0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-84
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient282();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertFalse(httpURLConnection0.getFollowRedirects());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getDoInput());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertFalse(httpURLConnection0.usingProxy());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getInstanceFollowRedirects());
      
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      assertNull(okAuthenticator0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      int int0 = (-1);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient1.copyWithDefaults();
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient0.setFollowProtocolRedirects(okHttpClient3.followProtocolRedirects);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient2.copyWithDefaults();
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      okHttpClient6.setfailedRoutes(okHttpClient0.failedRoutes);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertNull(cookieHandler0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient7 = okHttpClient3.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient7.copyWithDefaults();
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator1 = okHttpClient2.getAuthenticator();
      assertNull(okAuthenticator1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient8.getProxySelector();
      assertNull(proxySelector0);
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = null;
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(responseCache0);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = okHttpClient2.getAuthenticator();
      assertNull(okAuthenticator0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ResponseCache responseCache1 = okHttpClient0.getResponseCache();
      assertNull(responseCache1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient0.authenticator = okHttpClient2.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      okHttpClient2.hostnameVerifier = hostnameVerifier0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient2.getfailedRoutes();
      assertNotNull(set0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setProxy(okHttpClient0.proxy);
      assertNotNull(okHttpClient3);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertNull(cookieHandler0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient3.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient2.setResponseCache(okHttpClient3.responseCache);
      assertNotNull(okHttpClient4);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient1.setCookieHandler(okHttpClient0.cookieHandler);
      assertNotNull(okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient3.setProxy(okHttpClient0.proxy);
      assertNotNull(okHttpClient6);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      assertNull(proxySelector1);
      
      OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier0);
      assertNotNull(okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      String string0 = "https";
      int int0 = 307;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int0, string0, uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("https:307", uRL0.getAuthority());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals(307, uRL0.getPort());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      
      HttpURLConnection httpURLConnection0 = okHttpClient4.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("https:307", uRL0.getAuthority());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals(307, uRL0.getPort());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient6.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient8.setAuthenticator(okHttpClient0.authenticator);
      assertNotNull(okHttpClient9);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient8.setProxySelector(okHttpClient6.proxySelector);
      assertNotNull(okHttpClient10);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator1 = okHttpClient5.getAuthenticator();
      assertNull(okAuthenticator1);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      boolean boolean0 = okHttpClient2.getFollowProtocolRedirects();
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(boolean0);
      
      ProxySelector proxySelector2 = okHttpClient0.getProxySelector();
      assertNull(proxySelector2);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient389();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      assertNull(cookieHandler0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      CookieHandler.setDefault(cookieHandler0);
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okHttpClient0.authenticator);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNull(okResponseCache0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient52();
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient1.getProxySelector();
      assertNull(proxySelector0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient1.setAuthenticator(okHttpClient2.authenticator);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient3.setProxySelector(okHttpClient0.proxySelector);
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertNull(proxy0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient183();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy3();
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      Proxy proxy1 = serializedObjectSupporter0.deserializeObjectProxy5();
      assertNotNull(proxy1);
      assertFalse(proxy1.equals((Object)proxy0));
      assertNotSame(proxy1, proxy0);
      assertEquals(Proxy.Type.HTTP, proxy1.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:35231", proxy1.toString());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertFalse(httpURLConnection0.usingProxy());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertFalse(httpURLConnection0.getInstanceFollowRedirects());
      assertFalse(httpURLConnection0.getFollowRedirects());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertTrue(httpURLConnection0.getDoInput());
      
      HttpURLConnection httpURLConnection1 = okHttpClient2.open(uRL0);
      assertNotNull(httpURLConnection1);
      assertFalse(httpURLConnection1.equals((Object)httpURLConnection0));
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(httpURLConnection1, httpURLConnection0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(0, httpURLConnection1.getReadTimeout());
      assertTrue(httpURLConnection1.getDoInput());
      assertFalse(httpURLConnection1.getFollowRedirects());
      assertFalse(httpURLConnection1.getDoOutput());
      assertEquals(0, httpURLConnection1.getConnectTimeout());
      assertEquals("GET", httpURLConnection1.getRequestMethod());
      assertTrue(httpURLConnection1.getDefaultUseCaches());
      assertEquals(0L, httpURLConnection1.getIfModifiedSince());
      assertTrue(httpURLConnection1.getUseCaches());
      assertFalse(httpURLConnection1.getDefaultAllowUserInteraction());
      assertFalse(httpURLConnection1.getInstanceFollowRedirects());
      assertFalse(httpURLConnection1.getAllowUserInteraction());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection1.toString());
      assertFalse(httpURLConnection1.usingProxy());
      
      OkHttpClient okHttpClient3 = okHttpClient0.setFollowProtocolRedirects(okHttpClient2.followProtocolRedirects);
      assertNotNull(okHttpClient3);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean1 = true;
      OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(boolean1);
      assertNotNull(okHttpClient4);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient406();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertNotNull(set0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertNull(connectionPool0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient93();
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean0 = true;
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertNull(okResponseCache0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      okHttpClient1.authenticator = okHttpClient0.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setResponseCache(okHttpClient0.responseCache);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient3.copyWithDefaults();
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient0.hostnameVerifier = okHttpClient3.hostnameVerifier;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient0.setProxy(okHttpClient5.proxy);
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient6.setFollowProtocolRedirects(okHttpClient1.followProtocolRedirects);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient4.okResponseCache();
      assertNull(okResponseCache1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient8.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertNotNull(okHttpClient9);
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      assertNull(responseCache0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient8.setAuthenticator(okHttpClient9.authenticator);
      assertNotNull(okHttpClient10);
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient0.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertNotNull(okHttpClient11);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient8.getProxy();
      assertNull(proxy0);
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = okHttpClient4.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient3.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient12 = okHttpClient4.setProxySelector(okHttpClient11.proxySelector);
      assertNotNull(okHttpClient12);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient12);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = null;
      okHttpClient11.sslSocketFactory = okHttpClient2.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient13 = okHttpClient11.setAuthenticator(okAuthenticator0);
      assertNotNull(okHttpClient13);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient8));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient13);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient0);
      assertSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertSame(okHttpClient13, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient6);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      
      ResponseCache responseCache1 = okHttpClient3.getResponseCache();
      assertNull(responseCache1);
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool1 = okHttpClient12.getConnectionPool();
      assertNull(connectionPool1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient13));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient13));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient13);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient13);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient12);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient13);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient14 = okHttpClient11.setResponseCache(okHttpClient8.responseCache);
      assertNotNull(okHttpClient14);
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient13));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient12));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient3));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient1));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient14);
      assertNotSame(okHttpClient8, okHttpClient13);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient14);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient13);
      assertSame(okHttpClient11, okHttpClient14);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertSame(okHttpClient14, okHttpClient6);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertSame(okHttpClient14, okHttpClient7);
      assertSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient1);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient3);
      assertSame(okHttpClient14, okHttpClient11);
      assertSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient14.followProtocolRedirects);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient14.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      String string0 = "f'{G.64i\".ION`si";
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(okAuthenticator0).toString();
      okHttpClient0.authenticator = okAuthenticator0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL1 = MockURL.URL(uRL0, string0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toString());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL1);
      assertNotNull(httpURLConnection0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toString());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertFalse(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getDoInput());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertNull(httpURLConnection0.getContentEncoding());
      assertNull(httpURLConnection0.getContentType());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getInstanceFollowRedirects());
      assertFalse(httpURLConnection0.usingProxy());
      
      OkAuthenticator okAuthenticator1 = okHttpClient0.getAuthenticator();
      assertNotNull(okAuthenticator1);
      assertSame(okAuthenticator1, okAuthenticator0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertNull(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertNull(responseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      okHttpClient0.setfailedRoutes(linkedHashSet0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertNotNull(set0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient0.setfailedRoutes(set0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      String string1 = null;
      int int0 = 960;
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress(string1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient397();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      CookieManager cookieManager1 = new CookieManager();
      assertNotNull(cookieManager1);
      assertFalse(cookieManager1.equals((Object)cookieManager0));
      
      OkHttpClient okHttpClient3 = okHttpClient2.setCookieHandler(cookieManager1);
      assertNotNull(okHttpClient3);
      assertFalse(cookieManager1.equals((Object)cookieManager0));
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(cookieManager1, cookieManager0);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setResponseCache(okHttpClient2.responseCache);
      assertNotNull(okHttpClient4);
      assertFalse(cookieManager1.equals((Object)cookieManager0));
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(cookieManager1, cookieManager0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient3.okResponseCache();
      assertNull(okResponseCache0);
      assertFalse(cookieManager1.equals((Object)cookieManager0));
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(cookieManager1, cookieManager0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(boolean1 == boolean0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(boolean1);
      
      OkHttpClient okHttpClient5 = okHttpClient0.setProxy(okHttpClient2.proxy);
      assertNotNull(okHttpClient5);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient2.okResponseCache();
      assertNull(okResponseCache1);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      String string0 = "1R7@QvA)42f[`]^5";
      String string1 = null;
      File file0 = MockFile.createTempFile(string0, string1);
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("1R7@QvA)42f[`]^50.tmp", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/1R7@QvA)42f[`]^50.tmp", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      
      long long0 = 10L;
      HttpResponseCache httpResponseCache0 = null;
      try {
        httpResponseCache0 = new HttpResponseCache(file0, long0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      assertNull(okAuthenticator0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient400();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      int int0 = 0;
      long long0 = 1115L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      List<Connection> list0 = connectionPool0.getConnections();
      assertNotNull(list0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Address address0 = null;
      Connection connection0 = connectionPool0.get(address0);
      assertNull(connection0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      String string0 = "wtj`{2lqUa;7Ko:j~";
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient98();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertFalse(boolean0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setConnectionPool(connectionPool0);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient307();
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertNull(cookieHandler0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient0.setResponseCache(okHttpClient2.responseCache);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient2.okResponseCache();
      assertNull(okResponseCache0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient0.setSSLSocketFactory(okHttpClient3.sslSocketFactory);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient5.copyWithDefaults();
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient6.setConnectionPool(okHttpClient3.connectionPool);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean1 = false;
      OkHttpClient okHttpClient8 = okHttpClient7.setFollowProtocolRedirects(boolean1);
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient5.setCookieHandler(okHttpClient4.cookieHandler);
      assertNotNull(okHttpClient9);
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      okHttpClient9.serializedObjectSupporter = okHttpClient6.serializedObjectSupporter;
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool1 = okHttpClient5.getConnectionPool();
      assertNotNull(connectionPool1);
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(connectionPool1, connectionPool0);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool1.getConnectionCount());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = okHttpClient1.getAuthenticator();
      assertNull(okAuthenticator0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(okHttpClient9.responseCache);
      assertNotNull(okHttpClient10);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(connectionPool0, connectionPool1);
      assertSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient7.setProxySelector(okHttpClient6.proxySelector);
      assertNotNull(okHttpClient11);
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient12 = okHttpClient7.setResponseCache(okHttpClient4.responseCache);
      assertNotNull(okHttpClient12);
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient12);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(connectionPool0, connectionPool1);
      assertSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient42();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okHttpClient0.authenticator);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient257();
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient0.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      okHttpClient0.hostnameVerifier = hostnameVerifier0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieHandler.setDefault(okHttpClient4.cookieHandler);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient5 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier1 = okHttpClient1.getHostnameVerifier();
      assertNotNull(hostnameVerifier1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(hostnameVerifier1, hostnameVerifier0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient5.setProxySelector(okHttpClient0.proxySelector);
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient3.setProxy(okHttpClient6.proxy);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      okHttpClient0.sslSocketFactory = okHttpClient1.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier2 = okHttpClient5.getHostnameVerifier();
      assertNotNull(hostnameVerifier2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(hostnameVerifier2, hostnameVerifier1);
      assertSame(hostnameVerifier2, hostnameVerifier0);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient1.setFollowProtocolRedirects(okHttpClient2.followProtocolRedirects);
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertNotNull(cookieHandler0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(cookieHandler0, cookieManager0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient6.getProxySelector();
      assertNull(proxySelector0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      String string0 = "f'{G.64i\".ION`si";
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(okAuthenticator0).toString();
      okHttpClient0.authenticator = okAuthenticator0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL1 = MockURL.URL(uRL0, string0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL1);
      assertNotNull(httpURLConnection0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertFalse(httpURLConnection0.usingProxy());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", httpURLConnection0.toString());
      assertNull(httpURLConnection0.getContentType());
      assertFalse(httpURLConnection0.getInstanceFollowRedirects());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertNull(httpURLConnection0.getContentEncoding());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertFalse(httpURLConnection0.getFollowRedirects());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      
      OkAuthenticator okAuthenticator1 = okHttpClient0.getAuthenticator();
      assertNotNull(okAuthenticator1);
      assertSame(okAuthenticator1, okAuthenticator0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertNull(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertNull(responseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      okHttpClient0.setfailedRoutes(linkedHashSet0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertNotNull(set0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient0.setfailedRoutes(set0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      String string1 = null;
      int int0 = 960;
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress(string1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient60();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient377();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(okHttpClient0.responseCache);
      assertNotNull(okResponseCacheAdapter0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCacheAdapter0, okHttpClient0.failedRoutes);
      assertNotNull(httpsURLConnectionImpl0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      
      OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertNull(connectionPool0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool1 = okHttpClient2.getConnectionPool();
      assertNull(connectionPool1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      boolean boolean1 = false;
      okHttpClient0.setfailedRoutes(okHttpClient3.failedRoutes);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      HttpURLConnection.setFollowRedirects(boolean1);
      Proxy proxy0 = okHttpClient3.getProxy();
      assertNull(proxy0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean2 = false;
      OkHttpClient okHttpClient5 = okHttpClient2.setFollowProtocolRedirects(boolean2);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient403();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(boolean0);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      boolean boolean1 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean1);
      assertNotNull(okHttpClient2);
      assertFalse(boolean1 == boolean0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient1.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient3);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient0.setResponseCache(okHttpClient1.responseCache);
      assertNotNull(okHttpClient4);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      assertNotNull(okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient1.setResponseCache(okHttpClient4.responseCache);
      assertNotNull(okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient2);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient8);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      
      okHttpClient8.setfailedRoutes(okHttpClient1.failedRoutes);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient1.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertNotNull(okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient7);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient10 = okHttpClient5.setResponseCache(responseCache0);
      assertNotNull(okHttpClient10);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      String string0 = "f'{G.64i\".ION`si";
      String string1 = "cause-exception";
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string0).when(okAuthenticator0).toString();
      okHttpClient0.authenticator = okAuthenticator0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL1 = MockURL.URL(uRL0, string0);
      assertNotNull(uRL1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(string0, string1);
      assertNotSame(uRL1, uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL1);
      assertNotNull(httpURLConnection0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(string0, string1);
      assertNotSame(uRL1, uRL0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertTrue(httpURLConnection0.getDoInput());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertNull(httpURLConnection0.getContentEncoding());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/f'{G.64i\".ION`si", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getInstanceFollowRedirects());
      assertFalse(httpURLConnection0.usingProxy());
      assertNull(httpURLConnection0.getContentType());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertFalse(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      
      OkAuthenticator okAuthenticator1 = okHttpClient0.getAuthenticator();
      assertNotNull(okAuthenticator1);
      assertSame(okAuthenticator1, okAuthenticator0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertNull(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertNull(responseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Route route0 = null;
      boolean boolean0 = linkedHashSet0.add(route0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      okHttpClient0.setfailedRoutes(linkedHashSet0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertNotNull(set0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient0.setfailedRoutes(set0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      String string2 = null;
      int int0 = 960;
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress(string2, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient284();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient244();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-62);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)9;
      byteArray0[2] = byte2;
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)0, (byte)9}, byteArray0);
      assertFalse(boolean1);
      assertEquals(3, byteArray0.length);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient0.getSslSocketFactory();
      assertNotNull(sSLSocketFactory1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertSame(sSLSocketFactory1, sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient0.setProxySelector(proxySelector0);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      okHttpClient2.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean2 = true;
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(boolean2);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient2.setAuthenticator(okHttpClient4.authenticator);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient5.setConnectionPool(okHttpClient6.connectionPool);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient3);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient6.setProxySelector(okHttpClient3.proxySelector);
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient5.setCookieHandler(okHttpClient0.cookieHandler);
      assertNotNull(okHttpClient9);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      okHttpClient0.serializedObjectSupporter = okHttpClient3.serializedObjectSupporter;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient9.setResponseCache(responseCache0);
      assertNotNull(okHttpClient10);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient0);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      
      System.setCurrentTimeMillis(byte2);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      
      String string0 = "2.5.4.10";
      String string1 = "|";
      try { 
        MockURL.URL(string0, string0, string1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 2.5.4.10
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient406();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertNotNull(set0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertNull(connectionPool0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient93();
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean1 = false;
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertNull(okResponseCache0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      okHttpClient1.authenticator = okHttpClient0.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setResponseCache(okHttpClient0.responseCache);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient3.copyWithDefaults();
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient0.hostnameVerifier = okHttpClient3.hostnameVerifier;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient0.setProxy(okHttpClient5.proxy);
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient6.setFollowProtocolRedirects(okHttpClient1.followProtocolRedirects);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient1.setFollowProtocolRedirects(boolean1);
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(boolean1 == boolean0);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient4.okResponseCache();
      assertNull(okResponseCache1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient8.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertNotNull(okHttpClient9);
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(boolean1 == boolean0);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      assertNull(responseCache0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient8.setAuthenticator(okHttpClient9.authenticator);
      assertNotNull(okHttpClient10);
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(boolean1 == boolean0);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient0.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertNotNull(okHttpClient11);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient8.getProxy();
      assertNull(proxy0);
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(boolean1 == boolean0);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = okHttpClient4.getHostnameVerifier();
      assertNull(hostnameVerifier0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient3.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache2 = okHttpClient11.okResponseCache();
      assertNull(okResponseCache2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient12 = okHttpClient4.setProxySelector(okHttpClient11.proxySelector);
      assertNotNull(okHttpClient12);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient12);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache3 = okHttpClient3.okResponseCache();
      assertNull(okResponseCache3);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = null;
      okHttpClient11.sslSocketFactory = okHttpClient2.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient13 = okHttpClient11.setAuthenticator(okAuthenticator0);
      assertNotNull(okHttpClient13);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient12));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient8));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient13);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient6);
      assertSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertSame(okHttpClient13, okHttpClient0);
      assertSame(okHttpClient13, okHttpClient7);
      assertSame(okHttpClient13, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      
      ResponseCache responseCache1 = okHttpClient3.getResponseCache();
      assertNull(responseCache1);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool1 = okHttpClient12.getConnectionPool();
      assertNull(connectionPool1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient12));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient13));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient13));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient13);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient13);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient13);
      assertSame(okHttpClient4, okHttpClient12);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient14 = okHttpClient11.setResponseCache(okHttpClient8.responseCache);
      assertNotNull(okHttpClient14);
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient13));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient12));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertFalse(okHttpClient14.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient3));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient13));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient12));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(boolean1 == boolean0);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient14);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient13);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient3);
      assertSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertSame(okHttpClient14, okHttpClient6);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertSame(okHttpClient14, okHttpClient11);
      assertSame(okHttpClient14, okHttpClient7);
      assertSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient14);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient13);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertSame(okHttpClient11, okHttpClient14);
      assertSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient14.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient14.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      
      ProxySelector proxySelector1 = okHttpClient6.getProxySelector();
      assertNull(proxySelector1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient14));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient14));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient13));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient14);
      assertSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient14);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient13);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient14);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient321();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      okHttpClient1.authenticator = okHttpClient0.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(okHttpClient1.proxySelector);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      boolean boolean1 = true;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean1);
      assertNotNull(okHttpClient3);
      assertFalse(boolean1 == boolean0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient1.getConnectionPool();
      assertNull(connectionPool0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient0.setAuthenticator(okHttpClient1.authenticator);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      Proxy proxy1 = okHttpClient0.getProxy();
      assertNotNull(proxy1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(proxy1, proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertEquals("DIRECT", proxy1.toString());
      
      OkHttpClient okHttpClient6 = okHttpClient1.setProxy(okHttpClient4.proxy);
      assertNotNull(okHttpClient6);
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient6.setSSLSocketFactory(okHttpClient3.sslSocketFactory);
      assertNotNull(okHttpClient7);
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient7.setProxy(okHttpClient1.proxy);
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient8.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient9);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient6.getResponseCache();
      assertNull(responseCache0);
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient2.getfailedRoutes();
      assertNotNull(set0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient6.setResponseCache(okHttpClient1.responseCache);
      assertNotNull(okHttpClient10);
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okHttpClient0.authenticator);
      assertNotNull(okHttpClient11);
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool1 = okHttpClient6.getConnectionPool();
      assertNull(connectionPool1);
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
      assertNotNull(okHttpClient12);
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient12);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient12);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool2 = okHttpClient3.getConnectionPool();
      assertNull(connectionPool2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient68();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertFalse(httpURLConnection0.getFollowRedirects());
      assertNull(httpURLConnection0.getContentType());
      assertFalse(httpURLConnection0.getInstanceFollowRedirects());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertNull(httpURLConnection0.getContentEncoding());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertTrue(httpURLConnection0.getDoInput());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.usingProxy());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(okHttpClient0.connectionPool);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      assertNotNull(okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient1.copyWithDefaults();
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.copyWithDefaults();
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      okHttpClient3.setfailedRoutes(okHttpClient0.failedRoutes);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient2.copyWithDefaults();
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = okHttpClient2.getAuthenticator();
      assertNull(okAuthenticator0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient5.getProxySelector();
      assertNull(proxySelector0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string0 = "ft";
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient164();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      long long0 = 1905L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertNotNull(httpResponseCache0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_2/ft/ft", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_2/ft", mockFile0.getParent());
      assertEquals("ft", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_2/ft/ft", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_2/ft", mockFile0.getParent());
      assertEquals("ft", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient88();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      
      String string0 = "java.vm.vendor";
      OkHostnameVerifier okHostnameVerifier0 = new OkHostnameVerifier();
      assertNotNull(okHostnameVerifier0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(okHostnameVerifier0);
      assertNotNull(okHttpClient2);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      long long0 = 695L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertNotNull(httpResponseCache0);
      assertEquals("java.vm.vendor", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("java.vm.vendor", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient3);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("java.vm.vendor", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("java.vm.vendor", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      Proxy proxy0 = null;
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNotNull(okResponseCache0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient1.setProxy(proxy0);
      assertNotNull(okHttpClient4);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient4.setCookieHandler(okHttpClient1.cookieHandler);
      assertNotNull(okHttpClient5);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      long long1 = 0L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ProxySelector proxySelector1 = okHttpClient0.getProxySelector();
      assertNull(proxySelector1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient2.setProxy(proxy0);
      assertNotNull(okHttpClient7);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okHttpClient1.authenticator);
      assertNotNull(okHttpClient8);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient7);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient9);
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      
      long long2 = 0L;
      System.setCurrentTimeMillis(long2);
      assertFalse(long2 == long0);
      
      Set<Route> set0 = okHttpClient5.getfailedRoutes();
      assertNotNull(set0);
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertTrue(boolean0 == boolean1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient88();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      String string0 = "java.vm.vendor";
      OkHostnameVerifier okHostnameVerifier0 = new OkHostnameVerifier();
      assertNotNull(okHostnameVerifier0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(okHostnameVerifier0);
      assertNotNull(okHttpClient2);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      long long0 = 695L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertNotNull(httpResponseCache0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("java.vm.vendor", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("java.vm.vendor", mockFile0.getName());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(httpResponseCache0);
      assertNotNull(okHttpClient3);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("java.vm.vendor", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("java.vm.vendor", mockFile0.getName());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      Proxy proxy0 = null;
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertNotNull(okResponseCache0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient1.setProxy(proxy0);
      assertNotNull(okHttpClient4);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient4.setCookieHandler(okHttpClient1.cookieHandler);
      assertNotNull(okHttpClient5);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      long long1 = 0L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ProxySelector proxySelector1 = okHttpClient0.getProxySelector();
      assertNull(proxySelector1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertNotNull(okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient2.setProxy(proxy0);
      assertNotNull(okHttpClient7);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okHttpClient1.authenticator);
      assertNotNull(okHttpClient8);
      assertTrue(boolean0 == boolean1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient3);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient0.copyWithDefaults();
      assertNotNull(okHttpClient9);
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      
      long long2 = 0L;
      System.setCurrentTimeMillis(long2);
      assertFalse(long2 == long0);
      
      Set<Route> set0 = okHttpClient5.getfailedRoutes();
      assertNotNull(set0);
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertTrue(boolean0 == boolean1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      HttpResponseCache httpResponseCache1 = (HttpResponseCache)okHttpClient5.getResponseCache();
      assertNotNull(httpResponseCache1);
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertTrue(boolean0 == boolean1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(httpResponseCache1, httpResponseCache0);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache1.getHitCount());
      assertEquals(0, httpResponseCache1.getNetworkCount());
      assertEquals(0, httpResponseCache1.getWriteSuccessCount());
      assertEquals(0, httpResponseCache1.getWriteAbortCount());
      assertEquals(0, httpResponseCache1.getRequestCount());
  }
}
