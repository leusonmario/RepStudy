/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 31 04:57:59 GMT 2021
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.Address;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.SerializedObjectSupporter;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.tls.OkHostnameVerifier;
import java.io.File;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient162();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setCookieHandler(okHttpClient1.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient1.setProxy(okHttpClient0.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient1.setSSLSocketFactory(okHttpClient3.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient0.setAuthenticator(okHttpClient2.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient247();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient23();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.copyWithDefaults();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      
      HttpURLConnection httpURLConnection0 = okHttpClient2.open(uRL0);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://foo.bar", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getDoInput());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertFalse(httpURLConnection0.usingProxy());
      
      OkHttpClient okHttpClient3 = okHttpClient1.setHostnameVerifier(okHttpClient2.hostnameVerifier);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean0 = true;
      Set<Route> set0 = okHttpClient2.getfailedRoutes();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(set0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      CookieHandler cookieHandler0 = okHttpClient3.getCookieHandler();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNull(cookieHandler0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient183();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient0.setfailedRoutes(okHttpClient0.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      String string0 = "OkHttpCint N8.x,l";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("OkHttpCint N8.x,l", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("OkHttpCint N8.x,l", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      String string0 = "https";
      int int0 = (-1);
      URL uRL0 = MockURL.URL(string0, string0, int0, string0);
      assertNotNull(uRL0);
      assertEquals("https://httpshttps", uRL0.toString());
      assertEquals("https://httpshttps", uRL0.toExternalForm());
      assertEquals("https", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("https://httpshttps", uRL0.toString());
      assertEquals("https://httpshttps", uRL0.toExternalForm());
      assertEquals("https", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(httpURLConnection0.usingProxy());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(okHttpClient0.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient29();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      String string0 = "d2tps";
      int int0 = 1624;
      String string1 = "$3fk";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int0, string1, uRLStreamHandler0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(uRL0);
      assertNull(uRL0.toExternalForm());
      assertEquals(1624, uRL0.getPort());
      assertEquals("$3fk", uRL0.getFile());
      assertEquals("d2tps", uRL0.getProtocol());
      assertEquals("d2tps:1624", uRL0.getAuthority());
      assertEquals("$3fk", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("d2tps", uRL0.getHost());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: d2tps
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient69();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      String string0 = ",eRt+K]h";
      String string1 = "fZ*z(yM:th4%)!>";
      MockFile mockFile0 = new MockFile(string0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockFile0);
      
      long long0 = 1961L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(httpResponseCache0);
      assertEquals(",eRt+K]h", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",eRt+K]h", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(string0, string1);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(",eRt+K]h", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",eRt+K]h", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(okHttpClient1.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(string0, string1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(",eRt+K]h", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",eRt+K]h", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      okHttpClient0.sslSocketFactory = okHttpClient1.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(",eRt+K]h", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",eRt+K]h", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient0.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(string0, string1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(",eRt+K]h", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",eRt+K]h", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(okHttpClient2.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNotNull(okResponseCacheAdapter0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(",eRt+K]h", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",eRt+K]h", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      System.setCurrentTimeMillis(long0);
      OkResponseCache okResponseCache0 = okHttpClient2.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(string0, string1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNotNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(",eRt+K]h", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",eRt+K]h", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient207();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient195();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      int int0 = (-3931);
      long long0 = 3296L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient85();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      com.squareup.okhttp.HttpResponseCache httpResponseCache0 = (com.squareup.okhttp.HttpResponseCache)ResponseCache.getDefault();
      assertNotNull(httpResponseCache0);
      assertEquals(26, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(26, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(set0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      okHttpClient0.setfailedRoutes(set0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(26, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(26, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkResponseCacheAdapter okResponseCacheAdapter0 = (OkResponseCacheAdapter)okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotNull(okResponseCacheAdapter0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient50();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(set0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNull(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      String string0 = "";
      String string1 = "Proxy-Authenticate";
      try { 
        MockURL.URL(string0, string0, string1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okHttpClient0.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient1.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotNull(set0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient202();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okHttpClient0.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient158();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(okAuthenticator0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient155();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient83();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient119();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = okHttpClient2.getAuthenticator();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNull(okAuthenticator0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      okHttpClient1.setfailedRoutes(okHttpClient2.failedRoutes);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient252();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient169();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient90();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient201();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient18();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      okHttpClient1.hostnameVerifier = okHttpClient0.hostnameVerifier;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient1.getConnectionPool();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(connectionPool0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient1.getProxySelector();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(proxySelector0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(responseCache0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient234();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient143();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean2 = okHttpClient0.getFollowProtocolRedirects();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient111();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient144();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okHttpClient0.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(okHttpClient0.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = serializedObjectSupporter0.deserializeObjectOkHttpClient134();
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient2.setfailedRoutes(okHttpClient0.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient3.setResponseCache(okHttpClient1.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient3.setConnectionPool(okHttpClient1.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient6.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      okHttpClient0.setfailedRoutes(okHttpClient2.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient2.setAuthenticator(okHttpClient3.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient223();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(set0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCache0, set0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(httpsURLConnectionImpl0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      
      okHttpClient0.hostnameVerifier = hostnameVerifier0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setConnectionPool(okHttpClient1.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ProxySelector.setDefault(okHttpClient1.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      ProxySelector.setDefault(proxySelector0);
      Proxy proxy0 = okHttpClient0.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier1 = okHttpClient1.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertNull(hostnameVerifier1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient42();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setCookieHandler(okHttpClient1.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = serializedObjectSupporter0.deserializeObjectOkHttpClient246();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = serializedObjectSupporter0.deserializeObjectOkHttpClient97();
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = serializedObjectSupporter0.deserializeObjectOkHttpClient241();
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      Proxy proxy1 = okHttpClient6.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNull(proxy1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient6.setAuthenticator(okHttpClient0.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient7.setFollowProtocolRedirects(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient8.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient119();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy9();
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient237();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient0.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient3.setProxy(okHttpClient0.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40903", proxy0.toString());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient1.serializedObjectSupporter = okHttpClient0.serializedObjectSupporter;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      String string0 = "F\"34>]m]%Vf";
      try { 
        MockURL.URL(string0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: F\"34>]m]%Vf
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient242();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(okResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCache0, linkedHashSet0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(httpsURLConnectionImpl0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = httpsURLConnectionImpl0.getSSLSocketFactory();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy4();
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient236();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      Route route0 = null;
      boolean boolean0 = linkedHashSet0.add(route0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = false;
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient192();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      httpsURLConnectionImpl0.setDoInput(boolean1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(boolean1 == boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      OkResponseCache okResponseCache2 = okHttpClient4.okResponseCache();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(okResponseCache2);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      ProxySelector proxySelector0 = okHttpClient4.getProxySelector();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(proxySelector0);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      int int0 = httpsURLConnectionImpl0.getReadTimeout();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertEquals(0, int0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient0.setConnectionPool(okHttpClient4.connectionPool);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      // Undeclared exception!
      try { 
        okHttpClient5.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient170();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient223();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient55();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient2.okResponseCache();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNull(okResponseCache0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      boolean boolean0 = okHttpClient2.getFollowProtocolRedirects();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertTrue(boolean0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      boolean boolean1 = okHttpClient2.getFollowProtocolRedirects();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient2.getResponseCache();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertNull(responseCache0);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient3.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(okHttpClient2.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient3.setfailedRoutes(okHttpClient2.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient4.setHostnameVerifier(okHttpClient3.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient4.setCookieHandler(okHttpClient0.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient7.setConnectionPool(okHttpClient6.connectionPool);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient8);
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient0.setResponseCache(okHttpClient1.responseCache);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient7.setSSLSocketFactory(okHttpClient1.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient8.setAuthenticator(okHttpClient6.authenticator);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient8);
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertNotNull(okHttpClient11);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient2.getSslSocketFactory();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertNull(sSLSocketFactory1);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory2 = okHttpClient8.getSslSocketFactory();
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient8);
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertNull(sSLSocketFactory2);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient132();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setCookieHandler(okHttpClient1.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      okHttpClient2.sslSocketFactory = okHttpClient1.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient3.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      okHttpClient1.authenticator = okHttpClient2.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient0.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient2.getSslSocketFactory();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = okHttpClient1.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNull(hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient1.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNotNull(set0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<Route> set1 = okHttpClient1.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(set1, set0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNotNull(set1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      
      // Undeclared exception!
      try { 
        okHttpClient2.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient39();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient228();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(okHttpClient0.proxy);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      okHttpClient2.serializedObjectSupporter = okHttpClient0.serializedObjectSupporter;
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient42();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = serializedObjectSupporter0.deserializeObjectOkHttpClient105();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient5 = okHttpClient4.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHostnameVerifier okHostnameVerifier0 = new OkHostnameVerifier();
      assertNotNull(okHostnameVerifier0);
      
      OkHttpClient okHttpClient6 = okHttpClient5.setHostnameVerifier(okHostnameVerifier0);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient7 = okHttpClient6.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient4.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient8);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient4.getResponseCache();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient7);
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNull(responseCache0);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient5.getfailedRoutes();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(set0);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      OkHttpClient okHttpClient9 = okHttpClient7.copyWithDefaults();
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      boolean boolean1 = okHttpClient5.getFollowProtocolRedirects();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertTrue(boolean1 == boolean0);
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertTrue(boolean1);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient7.setAuthenticator(okHttpClient3.authenticator);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertTrue(boolean0 == boolean1);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      String string0 = "h\"V";
      String string1 = null;
      int int0 = (-864);
      try { 
        MockURL.URL(string0, string1, int0, string0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: h\"v
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient217();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(okHttpClient0.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpURLConnection httpURLConnection0 = okHttpClient2.open(uRL0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(httpURLConnection0.getDoInput());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertTrue(httpURLConnection0.getUseCaches());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      
      OkHttpClient okHttpClient3 = okHttpClient0.setSSLSocketFactory(okHttpClient1.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = serializedObjectSupporter0.deserializeObjectOkHttpClient35();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient3.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient5.serializedObjectSupporter = okHttpClient1.serializedObjectSupporter;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient2.setProxy(okHttpClient1.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertNull(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient1.setConnectionPool(okHttpClient2.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      okHttpClient0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient1.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      ResponseCache responseCache1 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertNull(responseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Proxy proxy1 = okHttpClient0.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertNull(proxy1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient8 = okHttpClient5.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient1.setAuthenticator(okHttpClient6.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      Proxy proxy2 = okHttpClient5.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNull(proxy2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient1.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      
      Proxy proxy3 = okHttpClient2.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertNull(proxy3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient4.setHostnameVerifier(okHttpClient9.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient11);
      assertSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient9.equals((Object)okHttpClient10));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient11);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient12 = okHttpClient0.setConnectionPool(okHttpClient7.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient11));
      assertFalse(okHttpClient7.equals((Object)okHttpClient11));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertNotNull(okHttpClient12);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient23();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient251();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHostnameVerifier okHostnameVerifier0 = new OkHostnameVerifier();
      assertNotNull(okHostnameVerifier0);
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter0.deserializeObjectOkHttpClient90();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      String string0 = "<r,n3p]jDF%uci*/S";
      String string1 = "f}i7-;yn%q>I754";
      String string2 = null;
      boolean boolean0 = okHostnameVerifier0.verifyHostName(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(string1, string0);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient0.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      boolean boolean1 = okHostnameVerifier0.verifyHostName(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      OkHttpClient okHttpClient5 = okHttpClient0.setHostnameVerifier(okHostnameVerifier0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      URL uRL0 = null;
      OkHttpClient okHttpClient6 = okHttpClient4.setCookieHandler(okHttpClient0.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient6.setProxy(okHttpClient1.proxy);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient4);
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient6.setProxy(okHttpClient2.proxy);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient4);
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      // Undeclared exception!
      try { 
        okHttpClient5.open(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient162();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okHttpClient0.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient1.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient2.setProxySelector(okHttpClient1.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNull(hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient2.setProxy(okHttpClient0.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient3.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient1.setResponseCache(okHttpClient6.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient2.setSSLSocketFactory(okHttpClient4.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient8.setConnectionPool(okHttpClient0.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient3.getConnectionPool();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertNull(connectionPool0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient1.copyWithDefaults();
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient1.setFollowProtocolRedirects(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertNotNull(okHttpClient11);
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertNotNull(okResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool1 = okHttpClient6.getConnectionPool();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient10));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertNotNull(connectionPool1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool1.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient23();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      
      HttpURLConnection httpURLConnection0 = okHttpClient2.open(uRL0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertTrue(httpURLConnection0.getDoInput());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://foo.bar", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertFalse(httpURLConnection0.usingProxy());
      
      OkHttpClient okHttpClient3 = okHttpClient1.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient0.setSSLSocketFactory(okHttpClient3.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient1.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      
      okHttpClient6.hostnameVerifier = okHttpClient5.hostnameVerifier;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertNull(okResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient6.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      
      ProxySelector proxySelector1 = okHttpClient6.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertNull(proxySelector1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient2.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertNotNull(set0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      boolean boolean2 = false;
      OkHttpClient okHttpClient8 = okHttpClient1.setFollowProtocolRedirects(boolean2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(boolean2 == boolean1);
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      OkHttpClient okHttpClient9 = okHttpClient3.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient9.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      Set<Route> set1 = okHttpClient6.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(set1, set0);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient7));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertNotNull(set1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache2 = okHttpClient7.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNull(okResponseCache2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient7.getCookieHandler();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient9));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient5.getSslSocketFactory();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(sSLSocketFactory0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient22();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter1.deserializeObjectOkHttpClient128();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = serializedObjectSupporter1.deserializeObjectOkHttpClient220();
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient1.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = serializedObjectSupporter0.deserializeObjectOkHttpClient158();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(cookieHandler0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient3.setResponseCache(okHttpClient1.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient5.setAuthenticator(okHttpClient2.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient5);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient6.setCookieHandler(okHttpClient5.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient6);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNull(okResponseCache0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient2.setProxy(okHttpClient5.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      okHttpClient4.authenticator = okHttpClient6.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient2.setProxy(okHttpClient8.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient2);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient3.setAuthenticator(okHttpClient2.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient2.copyWithDefaults();
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient11);
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient12 = okHttpClient11.setResponseCache(okHttpClient4.responseCache);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient12);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertNotNull(okHttpClient12);
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient5.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient10);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNull(okResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = okHttpClient12.getAuthenticator();
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient12);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertNotSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient9);
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient12));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient11));
      assertFalse(okHttpClient4.equals((Object)okHttpClient7));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient8));
      assertFalse(okHttpClient4.equals((Object)okHttpClient9));
      assertNotNull(okAuthenticator0);
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertTrue(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient22();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      okHttpClient0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient36();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      okHttpClient1.setfailedRoutes(okHttpClient0.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      okHttpClient1.authenticator = okHttpClient0.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient0.setCookieHandler(cookieManager0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = serializedObjectSupporter0.deserializeObjectOkHttpClient179();
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      okHttpClient3.serializedObjectSupporter = okHttpClient0.serializedObjectSupporter;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager1 = new CookieManager(cookieStore0, cookiePolicy0);
      assertFalse(cookieManager1.equals((Object)cookieManager0));
      assertNotNull(cookieManager1);
      
      OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieManager1);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(cookieManager1, cookieManager0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(cookieManager1.equals((Object)cookieManager0));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient5.setAuthenticator(okHttpClient3.authenticator);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(cookieManager0, cookieManager1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(cookieManager1, cookieManager0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(cookieManager0.equals((Object)cookieManager1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(cookieManager1.equals((Object)cookieManager0));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient5.okResponseCache();
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(cookieManager1, cookieManager0);
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(cookieManager1.equals((Object)cookieManager0));
      assertNull(okResponseCache0);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      okHttpClient6.hostnameVerifier = okHttpClient0.hostnameVerifier;
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient7.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertNotNull(okResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator0 = okHttpClient3.getAuthenticator();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(cookieManager0, cookieManager1);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(cookieManager0.equals((Object)cookieManager1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertNull(okAuthenticator0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkAuthenticator okAuthenticator1 = okHttpClient7.getAuthenticator();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient2));
      assertNotNull(okAuthenticator1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      
      // Undeclared exception!
      try { 
        okHttpClient6.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient173();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      
      String string0 = "8YX21wy6Ut' H_bszGO";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string0, uRLStreamHandler0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = null;
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL1, okHttpClient0, okResponseCache0, okHttpClient0.failedRoutes);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(httpsURLConnectionImpl0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      
      httpsURLConnectionImpl0.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNull(hostnameVerifier0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      okHttpClient2.sslSocketFactory = okHttpClient0.sslSocketFactory;
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient2.getConnectionPool();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNull(connectionPool0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(okHttpClient0.connectionPool);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNull(proxy0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient2.setfailedRoutes(okHttpClient3.failedRoutes);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      okHttpClient3.setfailedRoutes(okHttpClient0.failedRoutes);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool1 = okHttpClient2.getConnectionPool();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNull(connectionPool1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient3.setProxySelector(okHttpClient0.proxySelector);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      Proxy proxy1 = okHttpClient2.getProxy();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNull(proxy1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      boolean boolean1 = true;
      OkHttpClient okHttpClient6 = okHttpClient3.setFollowProtocolRedirects(boolean1);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(boolean1 == boolean0);
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient6.setProxy(okHttpClient3.proxy);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(boolean1 == boolean0);
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient0.setSSLSocketFactory(okHttpClient5.sslSocketFactory);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient5.okResponseCache();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNull(okResponseCache1);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      boolean boolean2 = true;
      okHttpClient0.setfailedRoutes(okHttpClient5.failedRoutes);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient3.setFollowProtocolRedirects(boolean2);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(boolean2 == boolean0);
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache2 = okHttpClient9.okResponseCache();
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(boolean2 == boolean0);
      assertNull(okResponseCache2);
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool2 = okHttpClient5.getConnectionPool();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNull(connectionPool2);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient4.setAuthenticator(okHttpClient8.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient4.copyWithDefaults();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(okHttpClient11);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier1 = okHttpClient8.getHostnameVerifier();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertNotSame(uRL0, uRL1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient7);
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertNull(hostnameVerifier1);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNull(uRL1.toString());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      Proxy proxy2 = okHttpClient0.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertNull(proxy2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(okHttpClient1.responseCache);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNull(okResponseCache0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient2.setResponseCache(okHttpClient1.responseCache);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient2.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      
      okHttpClient2.authenticator = okHttpClient1.authenticator;
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      int int0 = 177;
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      // Undeclared exception!
      try { 
        okHttpClient2.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient196();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient56();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setCookieHandler(okHttpClient1.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient119();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient1.setCookieHandler(okHttpClient0.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient2));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient3.getSslSocketFactory();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNull(sSLSocketFactory0);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient0.setHostnameVerifier(okHttpClient3.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient2.setFollowProtocolRedirects(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      okHttpClient1.setfailedRoutes(okHttpClient5.failedRoutes);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient7 = okHttpClient0.setHostnameVerifier(okHttpClient5.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient4));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient3.copyWithDefaults();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient3.setAuthenticator(okHttpClient2.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient3);
      assertNotSame(okHttpClient9, okHttpClient4);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient0);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient7));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient2));
      assertFalse(okHttpClient9.equals((Object)okHttpClient4));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient8));
      assertFalse(okHttpClient9.equals((Object)okHttpClient0));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient3.getCookieHandler();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertNull(cookieHandler0);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      boolean boolean0 = true;
      okHttpClient8.serializedObjectSupporter = okHttpClient1.serializedObjectSupporter;
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = okHttpClient5.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient10.copyWithDefaults();
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient11);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient12 = okHttpClient11.setProxy(okHttpClient8.proxy);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient11));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient12);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient13 = okHttpClient12.setAuthenticator(okHttpClient6.authenticator);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient12.followProtocolRedirects);
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient12);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient13);
      assertSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient13);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient13);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient13);
      assertNotSame(okHttpClient12, okHttpClient0);
      assertNotSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertNotSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient8);
      assertNotSame(okHttpClient12, okHttpClient7);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertSame(okHttpClient13, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient0);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient12);
      assertNotSame(okHttpClient2, okHttpClient11);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient9);
      assertNotSame(okHttpClient6, okHttpClient13);
      assertNotSame(okHttpClient6, okHttpClient12);
      assertNotSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient10);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient7);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient8);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient13);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient9));
      assertFalse(okHttpClient2.equals((Object)okHttpClient12));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient4));
      assertFalse(okHttpClient2.equals((Object)okHttpClient11));
      assertFalse(okHttpClient2.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient9));
      assertFalse(okHttpClient6.equals((Object)okHttpClient12));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient11));
      assertFalse(okHttpClient6.equals((Object)okHttpClient8));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient12));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient12));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient11));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient4));
      assertFalse(okHttpClient12.equals((Object)okHttpClient8));
      assertFalse(okHttpClient12.equals((Object)okHttpClient0));
      assertFalse(okHttpClient12.equals((Object)okHttpClient7));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient9));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient8));
      assertFalse(okHttpClient13.equals((Object)okHttpClient0));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient13);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier0 = okHttpClient8.getHostnameVerifier();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient12);
      assertNotSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient13);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertNotSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient11);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient12));
      assertFalse(okHttpClient8.equals((Object)okHttpClient7));
      assertFalse(okHttpClient8.equals((Object)okHttpClient2));
      assertFalse(okHttpClient8.equals((Object)okHttpClient13));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient8.equals((Object)okHttpClient9));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient4));
      assertFalse(okHttpClient8.equals((Object)okHttpClient11));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertNotNull(hostnameVerifier0);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient3.getProxySelector();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient9);
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertNull(proxySelector0);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient3.getProxy();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient9);
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertNull(proxy0);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient14 = okHttpClient11.copyWithDefaults();
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient11.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient14.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient12);
      assertSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient13);
      assertSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient14);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient12);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertNotSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient12);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient13);
      assertNotSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient14);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient14);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient11);
      assertNotSame(okHttpClient14, okHttpClient3);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient7);
      assertNotSame(okHttpClient14, okHttpClient6);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertNotSame(okHttpClient14, okHttpClient1);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient14);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient10.equals((Object)okHttpClient12));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient11));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient12));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient9));
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient11));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient7));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient9));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient2));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient4));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient8));
      assertFalse(okHttpClient11.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient14.equals((Object)okHttpClient2));
      assertFalse(okHttpClient14.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient11));
      assertFalse(okHttpClient14.equals((Object)okHttpClient3));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertFalse(okHttpClient14.equals((Object)okHttpClient7));
      assertFalse(okHttpClient14.equals((Object)okHttpClient6));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient1));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient13));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient14);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient14.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotNull(okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertNull(okResponseCache0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(okHttpClient1.responseCache);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotNull(okHttpClient3);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient2.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotNull(okHttpClient4);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      okHttpClient2.authenticator = okHttpClient1.authenticator;
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      okHttpClient1.setfailedRoutes(okHttpClient2.failedRoutes);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient1.getProxySelector();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertNull(proxySelector0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient2.okResponseCache();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertNull(okResponseCache1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient0.setProxy(okHttpClient1.proxy);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertNotNull(okHttpClient5);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      
      boolean boolean1 = okHttpClient3.getFollowProtocolRedirects();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient1.getConnectionPool();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertTrue(boolean0 == boolean1);
      assertNull(connectionPool0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
          assertNotNull(serializedObjectSupporter0);
          
          OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient22();
          assertTrue(okHttpClient0.followProtocolRedirects);
          assertNotNull(okHttpClient0);
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          
          CookieManager cookieManager0 = new CookieManager();
          assertNotNull(cookieManager0);
          
          okHttpClient0.serializedObjectSupporter = serializedObjectSupporter0;
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          
          OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient36();
          assertTrue(okHttpClient1.followProtocolRedirects);
          assertNotSame(okHttpClient1, okHttpClient0);
          assertFalse(okHttpClient1.equals((Object)okHttpClient0));
          assertNotNull(okHttpClient1);
          assertTrue(okHttpClient1.getFollowProtocolRedirects());
          
          boolean boolean0 = false;
          OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
          assertFalse(okHttpClient1.followProtocolRedirects);
          assertFalse(okHttpClient2.followProtocolRedirects);
          assertSame(okHttpClient1, okHttpClient2);
          assertNotSame(okHttpClient1, okHttpClient0);
          assertNotSame(okHttpClient2, okHttpClient0);
          assertSame(okHttpClient2, okHttpClient1);
          assertFalse(okHttpClient1.equals((Object)okHttpClient0));
          assertFalse(okHttpClient2.equals((Object)okHttpClient0));
          assertNotNull(okHttpClient2);
          assertFalse(okHttpClient1.getFollowProtocolRedirects());
          assertFalse(okHttpClient2.getFollowProtocolRedirects());
          
          okHttpClient1.setfailedRoutes(okHttpClient0.failedRoutes);
          assertTrue(okHttpClient0.followProtocolRedirects);
          assertFalse(okHttpClient1.followProtocolRedirects);
          assertNotSame(okHttpClient0, okHttpClient1);
          assertNotSame(okHttpClient0, okHttpClient2);
          assertSame(okHttpClient1, okHttpClient2);
          assertNotSame(okHttpClient1, okHttpClient0);
          assertFalse(okHttpClient0.equals((Object)okHttpClient1));
          assertFalse(okHttpClient0.equals((Object)okHttpClient2));
          assertFalse(okHttpClient1.equals((Object)okHttpClient0));
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          assertFalse(okHttpClient1.getFollowProtocolRedirects());
          
          OkHttpClient okHttpClient3 = okHttpClient0.setCookieHandler(cookieManager0);
          assertTrue(okHttpClient0.followProtocolRedirects);
          assertTrue(okHttpClient3.followProtocolRedirects);
          assertNotSame(okHttpClient0, okHttpClient1);
          assertNotSame(okHttpClient0, okHttpClient2);
          assertSame(okHttpClient0, okHttpClient3);
          assertSame(okHttpClient3, okHttpClient0);
          assertNotSame(okHttpClient3, okHttpClient2);
          assertNotSame(okHttpClient3, okHttpClient1);
          assertFalse(okHttpClient0.equals((Object)okHttpClient1));
          assertFalse(okHttpClient0.equals((Object)okHttpClient2));
          assertFalse(okHttpClient3.equals((Object)okHttpClient2));
          assertFalse(okHttpClient3.equals((Object)okHttpClient1));
          assertNotNull(okHttpClient3);
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          assertTrue(okHttpClient3.getFollowProtocolRedirects());
          
          ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
          assertTrue(okHttpClient0.followProtocolRedirects);
          assertNotSame(okHttpClient0, okHttpClient1);
          assertNotSame(okHttpClient0, okHttpClient2);
          assertSame(okHttpClient0, okHttpClient3);
          assertFalse(okHttpClient0.equals((Object)okHttpClient1));
          assertFalse(okHttpClient0.equals((Object)okHttpClient2));
          assertNull(proxySelector0);
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          
          OkHttpClient okHttpClient4 = serializedObjectSupporter0.deserializeObjectOkHttpClient179();
          assertTrue(okHttpClient4.followProtocolRedirects);
          assertNotSame(okHttpClient4, okHttpClient0);
          assertNotSame(okHttpClient4, okHttpClient3);
          assertNotSame(okHttpClient4, okHttpClient2);
          assertNotSame(okHttpClient4, okHttpClient1);
          assertFalse(okHttpClient4.equals((Object)okHttpClient0));
          assertFalse(okHttpClient4.equals((Object)okHttpClient3));
          assertFalse(okHttpClient4.equals((Object)okHttpClient2));
          assertFalse(okHttpClient4.equals((Object)okHttpClient1));
          assertNotNull(okHttpClient4);
          assertTrue(okHttpClient4.getFollowProtocolRedirects());
          
          okHttpClient3.serializedObjectSupporter = okHttpClient0.serializedObjectSupporter;
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          assertTrue(okHttpClient3.getFollowProtocolRedirects());
          
          CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
          CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
          CookieManager cookieManager1 = new CookieManager(cookieStore0, cookiePolicy0);
          assertFalse(cookieManager1.equals((Object)cookieManager0));
          assertNotNull(cookieManager1);
          
          OkHttpClient okHttpClient5 = okHttpClient1.setCookieHandler(cookieManager0);
          assertFalse(okHttpClient1.followProtocolRedirects);
          assertFalse(okHttpClient5.followProtocolRedirects);
          assertNotSame(cookieManager0, cookieManager1);
          assertSame(okHttpClient1, okHttpClient5);
          assertNotSame(okHttpClient1, okHttpClient3);
          assertSame(okHttpClient1, okHttpClient2);
          assertNotSame(okHttpClient1, okHttpClient0);
          assertNotSame(okHttpClient1, okHttpClient4);
          assertSame(okHttpClient5, okHttpClient2);
          assertNotSame(okHttpClient5, okHttpClient4);
          assertNotSame(okHttpClient5, okHttpClient0);
          assertNotSame(okHttpClient5, okHttpClient3);
          assertSame(okHttpClient5, okHttpClient1);
          assertFalse(cookieManager0.equals((Object)cookieManager1));
          assertFalse(okHttpClient1.equals((Object)okHttpClient3));
          assertFalse(okHttpClient1.equals((Object)okHttpClient0));
          assertFalse(okHttpClient1.equals((Object)okHttpClient4));
          assertFalse(okHttpClient5.equals((Object)okHttpClient4));
          assertFalse(okHttpClient5.equals((Object)okHttpClient0));
          assertFalse(okHttpClient5.equals((Object)okHttpClient3));
          assertNotNull(okHttpClient5);
          assertFalse(okHttpClient1.getFollowProtocolRedirects());
          assertFalse(okHttpClient5.getFollowProtocolRedirects());
          
          OkHttpClient okHttpClient6 = okHttpClient5.setAuthenticator(okHttpClient3.authenticator);
          assertFalse(okHttpClient6.followProtocolRedirects);
          assertTrue(okHttpClient0.followProtocolRedirects);
          assertFalse(okHttpClient1.followProtocolRedirects);
          assertTrue(okHttpClient3.followProtocolRedirects);
          assertFalse(okHttpClient5.followProtocolRedirects);
          assertSame(okHttpClient6, okHttpClient2);
          assertSame(okHttpClient6, okHttpClient1);
          assertNotSame(okHttpClient6, okHttpClient3);
          assertNotSame(okHttpClient6, okHttpClient4);
          assertSame(okHttpClient6, okHttpClient5);
          assertNotSame(okHttpClient6, okHttpClient0);
          assertNotSame(okHttpClient0, okHttpClient1);
          assertNotSame(okHttpClient0, okHttpClient5);
          assertNotSame(okHttpClient0, okHttpClient2);
          assertSame(okHttpClient0, okHttpClient3);
          assertNotSame(okHttpClient0, okHttpClient4);
          assertNotSame(okHttpClient0, okHttpClient6);
          assertNotSame(cookieManager0, cookieManager1);
          assertSame(okHttpClient1, okHttpClient5);
          assertNotSame(okHttpClient1, okHttpClient3);
          assertSame(okHttpClient1, okHttpClient6);
          assertSame(okHttpClient1, okHttpClient2);
          assertNotSame(okHttpClient1, okHttpClient0);
          assertNotSame(okHttpClient1, okHttpClient4);
          assertNotSame(okHttpClient3, okHttpClient6);
          assertNotSame(okHttpClient3, okHttpClient5);
          assertNotSame(okHttpClient3, okHttpClient4);
          assertSame(okHttpClient3, okHttpClient0);
          assertNotSame(okHttpClient3, okHttpClient2);
          assertNotSame(okHttpClient3, okHttpClient1);
          assertSame(okHttpClient5, okHttpClient2);
          assertNotSame(okHttpClient5, okHttpClient4);
          assertNotSame(okHttpClient5, okHttpClient0);
          assertSame(okHttpClient5, okHttpClient6);
          assertNotSame(okHttpClient5, okHttpClient3);
          assertSame(okHttpClient5, okHttpClient1);
          assertFalse(okHttpClient6.equals((Object)okHttpClient3));
          assertFalse(okHttpClient6.equals((Object)okHttpClient4));
          assertFalse(okHttpClient6.equals((Object)okHttpClient0));
          assertFalse(okHttpClient0.equals((Object)okHttpClient1));
          assertFalse(okHttpClient0.equals((Object)okHttpClient5));
          assertFalse(okHttpClient0.equals((Object)okHttpClient2));
          assertFalse(okHttpClient0.equals((Object)okHttpClient4));
          assertFalse(cookieManager0.equals((Object)cookieManager1));
          assertFalse(okHttpClient1.equals((Object)okHttpClient3));
          assertFalse(okHttpClient1.equals((Object)okHttpClient0));
          assertFalse(okHttpClient1.equals((Object)okHttpClient4));
          assertFalse(okHttpClient3.equals((Object)okHttpClient5));
          assertFalse(okHttpClient3.equals((Object)okHttpClient4));
          assertFalse(okHttpClient3.equals((Object)okHttpClient2));
          assertFalse(okHttpClient3.equals((Object)okHttpClient1));
          assertFalse(okHttpClient5.equals((Object)okHttpClient4));
          assertFalse(okHttpClient5.equals((Object)okHttpClient0));
          assertFalse(okHttpClient5.equals((Object)okHttpClient3));
          assertNotNull(okHttpClient6);
          assertFalse(okHttpClient6.getFollowProtocolRedirects());
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          assertFalse(okHttpClient1.getFollowProtocolRedirects());
          assertTrue(okHttpClient3.getFollowProtocolRedirects());
          assertFalse(okHttpClient5.getFollowProtocolRedirects());
          
          OkResponseCache okResponseCache0 = okHttpClient5.okResponseCache();
          assertFalse(okHttpClient1.followProtocolRedirects);
          assertFalse(okHttpClient5.followProtocolRedirects);
          assertNotSame(cookieManager0, cookieManager1);
          assertSame(okHttpClient1, okHttpClient5);
          assertNotSame(okHttpClient1, okHttpClient3);
          assertSame(okHttpClient1, okHttpClient6);
          assertSame(okHttpClient1, okHttpClient2);
          assertNotSame(okHttpClient1, okHttpClient0);
          assertNotSame(okHttpClient1, okHttpClient4);
          assertSame(okHttpClient5, okHttpClient2);
          assertNotSame(okHttpClient5, okHttpClient4);
          assertNotSame(okHttpClient5, okHttpClient0);
          assertSame(okHttpClient5, okHttpClient6);
          assertNotSame(okHttpClient5, okHttpClient3);
          assertSame(okHttpClient5, okHttpClient1);
          assertFalse(cookieManager0.equals((Object)cookieManager1));
          assertFalse(okHttpClient1.equals((Object)okHttpClient3));
          assertFalse(okHttpClient1.equals((Object)okHttpClient0));
          assertFalse(okHttpClient1.equals((Object)okHttpClient4));
          assertFalse(okHttpClient5.equals((Object)okHttpClient4));
          assertFalse(okHttpClient5.equals((Object)okHttpClient0));
          assertFalse(okHttpClient5.equals((Object)okHttpClient3));
          assertNull(okResponseCache0);
          assertFalse(okHttpClient1.getFollowProtocolRedirects());
          assertFalse(okHttpClient5.getFollowProtocolRedirects());
          
          OkHttpClient okHttpClient7 = okHttpClient0.copyWithDefaults();
          assertTrue(okHttpClient0.followProtocolRedirects);
          assertTrue(okHttpClient7.followProtocolRedirects);
          assertNotSame(okHttpClient0, okHttpClient1);
          assertNotSame(okHttpClient0, okHttpClient5);
          assertNotSame(okHttpClient0, okHttpClient2);
          assertSame(okHttpClient0, okHttpClient3);
          assertNotSame(okHttpClient0, okHttpClient7);
          assertNotSame(okHttpClient0, okHttpClient4);
          assertNotSame(okHttpClient0, okHttpClient6);
          assertNotSame(okHttpClient7, okHttpClient4);
          assertNotSame(okHttpClient7, okHttpClient5);
          assertNotSame(okHttpClient7, okHttpClient6);
          assertNotSame(okHttpClient7, okHttpClient1);
          assertNotSame(okHttpClient7, okHttpClient2);
          assertNotSame(okHttpClient7, okHttpClient3);
          assertNotSame(okHttpClient7, okHttpClient0);
          assertFalse(okHttpClient0.equals((Object)okHttpClient1));
          assertFalse(okHttpClient0.equals((Object)okHttpClient5));
          assertFalse(okHttpClient0.equals((Object)okHttpClient2));
          assertFalse(okHttpClient0.equals((Object)okHttpClient4));
          assertFalse(okHttpClient0.equals((Object)okHttpClient6));
          assertFalse(okHttpClient7.equals((Object)okHttpClient4));
          assertFalse(okHttpClient7.equals((Object)okHttpClient5));
          assertFalse(okHttpClient7.equals((Object)okHttpClient6));
          assertFalse(okHttpClient7.equals((Object)okHttpClient1));
          assertFalse(okHttpClient7.equals((Object)okHttpClient2));
          assertFalse(okHttpClient7.equals((Object)okHttpClient3));
          assertFalse(okHttpClient7.equals((Object)okHttpClient0));
          assertNotNull(okHttpClient7);
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          assertTrue(okHttpClient7.getFollowProtocolRedirects());
          
          okHttpClient6.hostnameVerifier = okHttpClient0.hostnameVerifier;
          assertFalse(okHttpClient6.getFollowProtocolRedirects());
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          assertFalse(okHttpClient1.getFollowProtocolRedirects());
          assertTrue(okHttpClient3.getFollowProtocolRedirects());
          assertFalse(okHttpClient5.getFollowProtocolRedirects());
          
          OkResponseCache okResponseCache1 = okHttpClient7.okResponseCache();
          assertTrue(okHttpClient0.followProtocolRedirects);
          assertTrue(okHttpClient7.followProtocolRedirects);
          assertNotSame(okHttpClient0, okHttpClient1);
          assertNotSame(okHttpClient0, okHttpClient5);
          assertNotSame(okHttpClient0, okHttpClient2);
          assertSame(okHttpClient0, okHttpClient3);
          assertNotSame(okHttpClient0, okHttpClient7);
          assertNotSame(okHttpClient0, okHttpClient4);
          assertNotSame(okHttpClient0, okHttpClient6);
          assertNotSame(okHttpClient7, okHttpClient4);
          assertNotSame(okHttpClient7, okHttpClient5);
          assertNotSame(okHttpClient7, okHttpClient6);
          assertNotSame(okHttpClient7, okHttpClient1);
          assertNotSame(okHttpClient7, okHttpClient2);
          assertNotSame(okHttpClient7, okHttpClient3);
          assertNotSame(okHttpClient7, okHttpClient0);
          assertFalse(okHttpClient0.equals((Object)okHttpClient1));
          assertFalse(okHttpClient0.equals((Object)okHttpClient5));
          assertFalse(okHttpClient0.equals((Object)okHttpClient2));
          assertFalse(okHttpClient0.equals((Object)okHttpClient7));
          assertFalse(okHttpClient0.equals((Object)okHttpClient4));
          assertFalse(okHttpClient0.equals((Object)okHttpClient6));
          assertFalse(okHttpClient7.equals((Object)okHttpClient4));
          assertFalse(okHttpClient7.equals((Object)okHttpClient5));
          assertFalse(okHttpClient7.equals((Object)okHttpClient6));
          assertFalse(okHttpClient7.equals((Object)okHttpClient1));
          assertFalse(okHttpClient7.equals((Object)okHttpClient2));
          assertFalse(okHttpClient7.equals((Object)okHttpClient3));
          assertFalse(okHttpClient7.equals((Object)okHttpClient0));
          assertNotNull(okResponseCache1);
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          assertTrue(okHttpClient7.getFollowProtocolRedirects());
          
          OkAuthenticator okAuthenticator0 = okHttpClient3.getAuthenticator();
          assertTrue(okHttpClient0.followProtocolRedirects);
          assertTrue(okHttpClient3.followProtocolRedirects);
          assertNotSame(okHttpClient0, okHttpClient1);
          assertNotSame(okHttpClient0, okHttpClient5);
          assertNotSame(okHttpClient0, okHttpClient2);
          assertSame(okHttpClient0, okHttpClient3);
          assertNotSame(okHttpClient0, okHttpClient7);
          assertNotSame(okHttpClient0, okHttpClient4);
          assertNotSame(okHttpClient0, okHttpClient6);
          assertNotSame(cookieManager0, cookieManager1);
          assertNotSame(okHttpClient3, okHttpClient6);
          assertNotSame(okHttpClient3, okHttpClient7);
          assertNotSame(okHttpClient3, okHttpClient5);
          assertNotSame(okHttpClient3, okHttpClient4);
          assertSame(okHttpClient3, okHttpClient0);
          assertNotSame(okHttpClient3, okHttpClient2);
          assertNotSame(okHttpClient3, okHttpClient1);
          assertFalse(okHttpClient0.equals((Object)okHttpClient1));
          assertFalse(okHttpClient0.equals((Object)okHttpClient5));
          assertFalse(okHttpClient0.equals((Object)okHttpClient2));
          assertFalse(okHttpClient0.equals((Object)okHttpClient7));
          assertFalse(okHttpClient0.equals((Object)okHttpClient4));
          assertFalse(okHttpClient0.equals((Object)okHttpClient6));
          assertFalse(cookieManager0.equals((Object)cookieManager1));
          assertFalse(okHttpClient3.equals((Object)okHttpClient6));
          assertFalse(okHttpClient3.equals((Object)okHttpClient7));
          assertFalse(okHttpClient3.equals((Object)okHttpClient5));
          assertFalse(okHttpClient3.equals((Object)okHttpClient4));
          assertFalse(okHttpClient3.equals((Object)okHttpClient2));
          assertFalse(okHttpClient3.equals((Object)okHttpClient1));
          assertNull(okAuthenticator0);
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          assertTrue(okHttpClient3.getFollowProtocolRedirects());
          
          OkAuthenticator okAuthenticator1 = okHttpClient7.getAuthenticator();
          assertTrue(okHttpClient0.followProtocolRedirects);
          assertTrue(okHttpClient7.followProtocolRedirects);
          assertNotSame(okHttpClient0, okHttpClient1);
          assertNotSame(okHttpClient0, okHttpClient5);
          assertNotSame(okHttpClient0, okHttpClient2);
          assertSame(okHttpClient0, okHttpClient3);
          assertNotSame(okHttpClient0, okHttpClient7);
          assertNotSame(okHttpClient0, okHttpClient4);
          assertNotSame(okHttpClient0, okHttpClient6);
          assertNotSame(okHttpClient7, okHttpClient4);
          assertNotSame(okHttpClient7, okHttpClient5);
          assertNotSame(okHttpClient7, okHttpClient6);
          assertNotSame(okHttpClient7, okHttpClient1);
          assertNotSame(okHttpClient7, okHttpClient2);
          assertNotSame(okHttpClient7, okHttpClient3);
          assertNotSame(okHttpClient7, okHttpClient0);
          assertFalse(okHttpClient0.equals((Object)okHttpClient1));
          assertFalse(okHttpClient0.equals((Object)okHttpClient5));
          assertFalse(okHttpClient0.equals((Object)okHttpClient2));
          assertFalse(okHttpClient0.equals((Object)okHttpClient7));
          assertFalse(okHttpClient0.equals((Object)okHttpClient4));
          assertFalse(okHttpClient0.equals((Object)okHttpClient6));
          assertFalse(okHttpClient7.equals((Object)okHttpClient4));
          assertFalse(okHttpClient7.equals((Object)okHttpClient5));
          assertFalse(okHttpClient7.equals((Object)okHttpClient6));
          assertFalse(okHttpClient7.equals((Object)okHttpClient1));
          assertFalse(okHttpClient7.equals((Object)okHttpClient2));
          assertFalse(okHttpClient7.equals((Object)okHttpClient3));
          assertFalse(okHttpClient7.equals((Object)okHttpClient0));
          assertNotNull(okAuthenticator1);
          assertTrue(okHttpClient0.getFollowProtocolRedirects());
          assertTrue(okHttpClient7.getFollowProtocolRedirects());
          
          URL uRL0 = MockURL.getFtpExample();
          assertNotNull(uRL0);
          assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
          assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
          assertNull(uRL0.getRef());
          assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
          assertNull(uRL0.getUserInfo());
          assertEquals((-1), uRL0.getPort());
          assertEquals((-1), uRL0.getDefaultPort());
          assertNull(uRL0.getQuery());
          assertEquals("ftp", uRL0.getProtocol());
          assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
          
          // Undeclared exception!
          try { 
            okHttpClient6.open(uRL0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Unexpected protocol: ftp
             //
             verifyException("com.squareup.okhttp.OkHttpClient", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient23();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      
      HttpURLConnection httpURLConnection0 = okHttpClient2.open(uRL0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getUseCaches());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://foo.bar", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getDoInput());
      assertFalse(httpURLConnection0.usingProxy());
      
      OkHttpClient okHttpClient3 = okHttpClient1.setCookieHandler(okHttpClient2.cookieHandler);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient3.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient1.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient5.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient4.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient2.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      boolean boolean2 = false;
      OkHttpClient okHttpClient7 = okHttpClient1.setFollowProtocolRedirects(boolean2);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertFalse(boolean2 == boolean1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      OkHttpClient okHttpClient8 = okHttpClient3.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient0));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      
      Set<Route> set1 = okHttpClient5.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(set1, set0);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient6));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertNotNull(set1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache1 = okHttpClient6.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertNotNull(okResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      
      CookieHandler cookieHandler0 = okHttpClient6.getCookieHandler();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient1.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient6.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient4);
      assertNotSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient8));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient2));
      assertFalse(okHttpClient0.equals((Object)okHttpClient4));
      assertFalse(okHttpClient0.equals((Object)okHttpClient7));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(boolean0 == boolean1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient5));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertNull(cookieHandler0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      boolean boolean0 = false;
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      
      boolean boolean1 = false;
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient16();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      String string0 = "pJRombZE12z:8";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      long long0 = 100L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertNotNull(httpResponseCache0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("pJRombZE12z:8", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("pJRombZE12z:8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("pJRombZE12z:8", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("pJRombZE12z:8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      Proxy proxy0 = okHttpClient1.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNull(proxy0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("pJRombZE12z:8", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("pJRombZE12z:8", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      String string0 = "https";
      int int0 = 0;
      String string1 = "p:]Wo'R4t# hyn";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int0, string1, uRLStreamHandler0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("p:]Wo'R4t", uRL0.getPath());
      assertEquals("p:]Wo'R4t", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals("https:0", uRL0.getAuthority());
      assertEquals(" hyn", uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(uRL0.getQuery());
      assertEquals("p:]Wo'R4t", uRL0.getPath());
      assertEquals("p:]Wo'R4t", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertEquals("https:0", uRL0.getAuthority());
      assertEquals(" hyn", uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(httpURLConnection0.usingProxy());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Address address0 = null;
      try {
        address0 = new Address(string0, int0, okHttpClient0.sslSocketFactory, okHttpClient0.hostnameVerifier, okHttpClient0.authenticator, okHttpClient0.proxy);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uriPort <= 0: 0
         //
         verifyException("com.squareup.okhttp.Address", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)61;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)120;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-57);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-105);
      byteArray0[6] = byte6;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)61, (byte) (-1), (byte)120, (byte) (-57), (byte) (-1), (byte) (-105)}, byteArray0);
      assertFalse(boolean0);
      
      long long0 = (-1L);
      System.setCurrentTimeMillis(long0);
      long long1 = 4641L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient44();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      okHttpClient0.setfailedRoutes(linkedHashSet0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      okHttpClient0.sslSocketFactory = sSLSocketFactory0;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      Set<Route> set0 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotNull(set0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(okHttpClient1.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      System.setCurrentTimeMillis(byteArray0[2]);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)61, (byte) (-1), (byte)120, (byte) (-57), (byte) (-1), (byte) (-105)}, byteArray0);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient233();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ".tmp";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNull(proxySelector0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      int int0 = 5796;
      long long0 = 0L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy6();
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40221", proxy0.toString());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40221", proxy0.toString());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool1 = okHttpClient2.getConnectionPool();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(connectionPool1, connectionPool0);
      assertNotNull(connectionPool1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40221", proxy0.toString());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, connectionPool1.getConnectionCount());
      
      Proxy proxy1 = okHttpClient1.getProxy();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(connectionPool0, connectionPool1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(proxy1, proxy0);
      assertNotNull(proxy1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy1.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:40221", proxy1.toString());
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      String string0 = "https";
      int int0 = (-1);
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Proxy proxy0 = serializedObjectSupporter0.deserializeObjectProxy10();
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:42023", proxy0.toString());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ inesserver1.windows.cin.ufpe.br/172.20.26.2:42023", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.URL(string0, string0, int0, string0);
      assertNotNull(uRL0);
      assertEquals("https", uRL0.getAuthority());
      assertEquals("https", uRL0.getHost());
      assertEquals("https://httpshttps", uRL0.toExternalForm());
      assertEquals("https", uRL0.getFile());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("https://httpshttps", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotNull(httpURLConnection0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("https", uRL0.getAuthority());
      assertEquals("https", uRL0.getHost());
      assertEquals("https://httpshttps", uRL0.toExternalForm());
      assertEquals("https", uRL0.getFile());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("https://httpshttps", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertTrue(httpURLConnection0.usingProxy());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setConnectionPool(okHttpClient0.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(okHttpClient0.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient2.setConnectionPool(okHttpClient3.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient96();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      String string0 = "{5z3";
      String string1 = "fZ*z(yM:th4%)!>";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      long long0 = 1961L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(httpResponseCache0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("fZ*z(yM:th4%)!>", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3/fZ*z(yM:th4%)!>", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("fZ*z(yM:th4%)!>", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3/fZ*z(yM:th4%)!>", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      EvoSuiteFile evoSuiteFile0 = null;
      OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(okHttpClient2.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      okHttpClient0.sslSocketFactory = okHttpClient1.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("fZ*z(yM:th4%)!>", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3/fZ*z(yM:th4%)!>", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      OkHttpClient okHttpClient4 = okHttpClient0.setConnectionPool(okHttpClient2.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("fZ*z(yM:th4%)!>", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3/fZ*z(yM:th4%)!>", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      System.setCurrentTimeMillis(long0);
      OkResponseCache okResponseCache0 = okHttpClient3.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertNotNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient93();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      String string0 = "tp";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      long long0 = 1743L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertNotNull(httpResponseCache0);
      assertTrue(mockFile0.canExecute());
      assertEquals("tp", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("tp", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(mockFile0.canExecute());
      assertEquals("tp", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("tp", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient1.copyWithDefaults();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertNotSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient2.equals((Object)okHttpClient0));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(mockFile0.canExecute());
      assertEquals("tp", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("tp", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient99();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient1 = serializedObjectSupporter0.deserializeObjectOkHttpClient12();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient3 = serializedObjectSupporter0.deserializeObjectOkHttpClient62();
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      Set<Route> set0 = null;
      okHttpClient2.setfailedRoutes(set0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient4 = okHttpClient2.setProxy(okHttpClient0.proxy);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = serializedObjectSupporter0.deserializeObjectOkHttpClient132();
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient6 = okHttpClient5.setConnectionPool(okHttpClient0.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient6.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient3);
      assertNotSame(okHttpClient6, okHttpClient4);
      assertNotSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient5);
      assertNotSame(okHttpClient6, okHttpClient0);
      assertNotSame(okHttpClient6, okHttpClient2);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient3));
      assertFalse(okHttpClient6.equals((Object)okHttpClient4));
      assertFalse(okHttpClient6.equals((Object)okHttpClient1));
      assertFalse(okHttpClient6.equals((Object)okHttpClient0));
      assertFalse(okHttpClient6.equals((Object)okHttpClient2));
      assertNotNull(okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      
      okHttpClient1.sslSocketFactory = okHttpClient2.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      Set<Route> set1 = okHttpClient0.getfailedRoutes();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNull(set1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      okHttpClient0.setfailedRoutes(set1);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(okHttpClient4.sslSocketFactory);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient7);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient8 = okHttpClient7.setResponseCache(okHttpClient3.responseCache);
      assertTrue(okHttpClient7.followProtocolRedirects);
      assertTrue(okHttpClient8.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient7, okHttpClient0);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient0);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient8);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient9 = okHttpClient4.setProxySelector(okHttpClient5.proxySelector);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient9.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertNotSame(okHttpClient9, okHttpClient1);
      assertNotSame(okHttpClient9, okHttpClient5);
      assertNotSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient7);
      assertNotSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient9.equals((Object)okHttpClient1));
      assertFalse(okHttpClient9.equals((Object)okHttpClient5));
      assertFalse(okHttpClient9.equals((Object)okHttpClient6));
      assertFalse(okHttpClient9.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient9);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient10 = serializedObjectSupporter0.deserializeObjectOkHttpClient86();
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertNotNull(okHttpClient10);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      
      okHttpClient10.authenticator = okHttpClient4.authenticator;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient11 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient4);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient7);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertNotNull(okHttpClient11);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertNull(responseCache0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = okHttpClient2.getConnectionPool();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertNull(connectionPool0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient12 = okHttpClient0.setCookieHandler(okHttpClient4.cookieHandler);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient8);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertNotNull(okHttpClient12);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      ProxySelector proxySelector0 = okHttpClient1.getProxySelector();
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertNotSame(okHttpClient1, okHttpClient3);
      assertNotSame(okHttpClient1, okHttpClient12);
      assertNotSame(okHttpClient1, okHttpClient6);
      assertNotSame(okHttpClient1, okHttpClient9);
      assertNotSame(okHttpClient1, okHttpClient8);
      assertNotSame(okHttpClient1, okHttpClient7);
      assertNotSame(okHttpClient1, okHttpClient0);
      assertNotSame(okHttpClient1, okHttpClient4);
      assertNotSame(okHttpClient1, okHttpClient11);
      assertNotSame(okHttpClient1, okHttpClient5);
      assertNotSame(okHttpClient1, okHttpClient10);
      assertNotSame(okHttpClient1, okHttpClient2);
      assertFalse(okHttpClient1.equals((Object)okHttpClient3));
      assertFalse(okHttpClient1.equals((Object)okHttpClient12));
      assertFalse(okHttpClient1.equals((Object)okHttpClient6));
      assertFalse(okHttpClient1.equals((Object)okHttpClient9));
      assertFalse(okHttpClient1.equals((Object)okHttpClient8));
      assertFalse(okHttpClient1.equals((Object)okHttpClient7));
      assertFalse(okHttpClient1.equals((Object)okHttpClient0));
      assertFalse(okHttpClient1.equals((Object)okHttpClient4));
      assertFalse(okHttpClient1.equals((Object)okHttpClient11));
      assertFalse(okHttpClient1.equals((Object)okHttpClient5));
      assertFalse(okHttpClient1.equals((Object)okHttpClient10));
      assertFalse(okHttpClient1.equals((Object)okHttpClient2));
      assertNull(proxySelector0);
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient13 = serializedObjectSupporter0.deserializeObjectOkHttpClient237();
      assertTrue(okHttpClient13.followProtocolRedirects);
      assertNotSame(okHttpClient13, okHttpClient12);
      assertNotSame(okHttpClient13, okHttpClient0);
      assertNotSame(okHttpClient13, okHttpClient10);
      assertNotSame(okHttpClient13, okHttpClient6);
      assertNotSame(okHttpClient13, okHttpClient7);
      assertNotSame(okHttpClient13, okHttpClient8);
      assertNotSame(okHttpClient13, okHttpClient11);
      assertNotSame(okHttpClient13, okHttpClient3);
      assertNotSame(okHttpClient13, okHttpClient9);
      assertNotSame(okHttpClient13, okHttpClient1);
      assertNotSame(okHttpClient13, okHttpClient4);
      assertNotSame(okHttpClient13, okHttpClient2);
      assertNotSame(okHttpClient13, okHttpClient5);
      assertFalse(okHttpClient13.equals((Object)okHttpClient12));
      assertFalse(okHttpClient13.equals((Object)okHttpClient0));
      assertFalse(okHttpClient13.equals((Object)okHttpClient10));
      assertFalse(okHttpClient13.equals((Object)okHttpClient6));
      assertFalse(okHttpClient13.equals((Object)okHttpClient7));
      assertFalse(okHttpClient13.equals((Object)okHttpClient8));
      assertFalse(okHttpClient13.equals((Object)okHttpClient11));
      assertFalse(okHttpClient13.equals((Object)okHttpClient3));
      assertFalse(okHttpClient13.equals((Object)okHttpClient9));
      assertFalse(okHttpClient13.equals((Object)okHttpClient1));
      assertFalse(okHttpClient13.equals((Object)okHttpClient4));
      assertFalse(okHttpClient13.equals((Object)okHttpClient2));
      assertFalse(okHttpClient13.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient13);
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient14 = okHttpClient10.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient14.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient14);
      assertNotSame(okHttpClient10, okHttpClient13);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient1);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient6);
      assertNotSame(okHttpClient14, okHttpClient7);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertNotSame(okHttpClient14, okHttpClient11);
      assertSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient12));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient13));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient11));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient14.equals((Object)okHttpClient1));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertFalse(okHttpClient14.equals((Object)okHttpClient2));
      assertFalse(okHttpClient14.equals((Object)okHttpClient6));
      assertFalse(okHttpClient14.equals((Object)okHttpClient7));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient11));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient14.equals((Object)okHttpClient3));
      assertNotNull(okHttpClient14);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient14.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient15 = okHttpClient12.setSSLSocketFactory(sSLSocketFactory0);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertFalse(okHttpClient15.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient15);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient15);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient13);
      assertNotSame(okHttpClient12, okHttpClient14);
      assertNotSame(okHttpClient4, okHttpClient14);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient15);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient13);
      assertNotSame(okHttpClient15, okHttpClient3);
      assertSame(okHttpClient15, okHttpClient7);
      assertNotSame(okHttpClient15, okHttpClient1);
      assertSame(okHttpClient15, okHttpClient11);
      assertSame(okHttpClient15, okHttpClient9);
      assertSame(okHttpClient15, okHttpClient8);
      assertNotSame(okHttpClient15, okHttpClient14);
      assertSame(okHttpClient15, okHttpClient4);
      assertNotSame(okHttpClient15, okHttpClient5);
      assertSame(okHttpClient15, okHttpClient2);
      assertNotSame(okHttpClient15, okHttpClient10);
      assertNotSame(okHttpClient15, okHttpClient13);
      assertSame(okHttpClient15, okHttpClient0);
      assertSame(okHttpClient15, okHttpClient12);
      assertNotSame(okHttpClient15, okHttpClient6);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient13));
      assertFalse(okHttpClient12.equals((Object)okHttpClient14));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient14));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient13));
      assertFalse(okHttpClient15.equals((Object)okHttpClient3));
      assertFalse(okHttpClient15.equals((Object)okHttpClient10));
      assertFalse(okHttpClient15.equals((Object)okHttpClient13));
      assertFalse(okHttpClient15.equals((Object)okHttpClient1));
      assertFalse(okHttpClient15.equals((Object)okHttpClient6));
      assertFalse(okHttpClient15.equals((Object)okHttpClient14));
      assertFalse(okHttpClient15.equals((Object)okHttpClient5));
      assertNotNull(okHttpClient15);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient15.getFollowProtocolRedirects());
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      String string0 = "`";
      boolean boolean1 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      OkResponseCache okResponseCache1 = okHttpClient10.okResponseCache();
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient14);
      assertNotSame(okHttpClient10, okHttpClient13);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient15);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertFalse(okHttpClient10.equals((Object)okHttpClient12));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient13));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient11));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient15));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertNull(okResponseCache1);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      
      okHttpClient5.setfailedRoutes(okHttpClient14.failedRoutes);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient14.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient14);
      assertNotSame(okHttpClient10, okHttpClient13);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient15);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient0);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient15);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient14);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient15);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertNotSame(okHttpClient14, okHttpClient1);
      assertNotSame(okHttpClient14, okHttpClient4);
      assertNotSame(okHttpClient14, okHttpClient5);
      assertNotSame(okHttpClient14, okHttpClient2);
      assertNotSame(okHttpClient14, okHttpClient6);
      assertNotSame(okHttpClient14, okHttpClient7);
      assertNotSame(okHttpClient14, okHttpClient15);
      assertNotSame(okHttpClient14, okHttpClient8);
      assertNotSame(okHttpClient14, okHttpClient11);
      assertSame(okHttpClient14, okHttpClient10);
      assertNotSame(okHttpClient14, okHttpClient9);
      assertNotSame(okHttpClient14, okHttpClient12);
      assertNotSame(okHttpClient14, okHttpClient0);
      assertNotSame(okHttpClient14, okHttpClient13);
      assertNotSame(okHttpClient14, okHttpClient3);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient10.equals((Object)okHttpClient12));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient13));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient11));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient15));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient14));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient13));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient15));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient1));
      assertFalse(okHttpClient14.equals((Object)okHttpClient4));
      assertFalse(okHttpClient14.equals((Object)okHttpClient5));
      assertFalse(okHttpClient14.equals((Object)okHttpClient2));
      assertFalse(okHttpClient14.equals((Object)okHttpClient6));
      assertFalse(okHttpClient14.equals((Object)okHttpClient7));
      assertFalse(okHttpClient14.equals((Object)okHttpClient15));
      assertFalse(okHttpClient14.equals((Object)okHttpClient8));
      assertFalse(okHttpClient14.equals((Object)okHttpClient11));
      assertFalse(okHttpClient14.equals((Object)okHttpClient9));
      assertFalse(okHttpClient14.equals((Object)okHttpClient12));
      assertFalse(okHttpClient14.equals((Object)okHttpClient0));
      assertFalse(okHttpClient14.equals((Object)okHttpClient13));
      assertFalse(okHttpClient14.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient14.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient16 = okHttpClient7.setSSLSocketFactory(okHttpClient11.sslSocketFactory);
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient16.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient11.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient16);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient15);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient14);
      assertSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient13);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient16);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient16, okHttpClient4);
      assertSame(okHttpClient16, okHttpClient9);
      assertNotSame(okHttpClient16, okHttpClient6);
      assertNotSame(okHttpClient16, okHttpClient14);
      assertNotSame(okHttpClient16, okHttpClient3);
      assertSame(okHttpClient16, okHttpClient0);
      assertSame(okHttpClient16, okHttpClient2);
      assertSame(okHttpClient16, okHttpClient8);
      assertNotSame(okHttpClient16, okHttpClient1);
      assertSame(okHttpClient16, okHttpClient11);
      assertSame(okHttpClient16, okHttpClient12);
      assertNotSame(okHttpClient16, okHttpClient10);
      assertNotSame(okHttpClient16, okHttpClient13);
      assertSame(okHttpClient16, okHttpClient7);
      assertSame(okHttpClient16, okHttpClient15);
      assertNotSame(okHttpClient16, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient16);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient15);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient9);
      assertNotSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient15);
      assertNotSame(okHttpClient11, okHttpClient5);
      assertNotSame(okHttpClient11, okHttpClient14);
      assertSame(okHttpClient11, okHttpClient2);
      assertNotSame(okHttpClient11, okHttpClient13);
      assertSame(okHttpClient11, okHttpClient12);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient16);
      assertNotSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient8);
      assertNotSame(okHttpClient11, okHttpClient6);
      assertNotSame(okHttpClient11, okHttpClient1);
      assertNotSame(okHttpClient4, okHttpClient14);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient16);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient15);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient13);
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient14));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient16.equals((Object)okHttpClient6));
      assertFalse(okHttpClient16.equals((Object)okHttpClient1));
      assertFalse(okHttpClient16.equals((Object)okHttpClient14));
      assertFalse(okHttpClient16.equals((Object)okHttpClient10));
      assertFalse(okHttpClient16.equals((Object)okHttpClient13));
      assertFalse(okHttpClient16.equals((Object)okHttpClient3));
      assertFalse(okHttpClient16.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient3));
      assertFalse(okHttpClient11.equals((Object)okHttpClient10));
      assertFalse(okHttpClient11.equals((Object)okHttpClient5));
      assertFalse(okHttpClient11.equals((Object)okHttpClient14));
      assertFalse(okHttpClient11.equals((Object)okHttpClient6));
      assertFalse(okHttpClient11.equals((Object)okHttpClient1));
      assertFalse(okHttpClient11.equals((Object)okHttpClient13));
      assertFalse(okHttpClient4.equals((Object)okHttpClient14));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient13));
      assertTrue(boolean0 == boolean1);
      assertNotNull(okHttpClient16);
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient16.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      
      OkResponseCache okResponseCache2 = okHttpClient10.okResponseCache();
      assertTrue(okHttpClient10.followProtocolRedirects);
      assertNotSame(okHttpClient10, okHttpClient12);
      assertNotSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient14);
      assertNotSame(okHttpClient10, okHttpClient13);
      assertNotSame(okHttpClient10, okHttpClient5);
      assertNotSame(okHttpClient10, okHttpClient2);
      assertNotSame(okHttpClient10, okHttpClient11);
      assertNotSame(okHttpClient10, okHttpClient7);
      assertNotSame(okHttpClient10, okHttpClient8);
      assertNotSame(okHttpClient10, okHttpClient15);
      assertNotSame(okHttpClient10, okHttpClient4);
      assertNotSame(okHttpClient10, okHttpClient6);
      assertNotSame(okHttpClient10, okHttpClient1);
      assertNotSame(okHttpClient10, okHttpClient9);
      assertNotSame(okHttpClient10, okHttpClient3);
      assertNotSame(okHttpClient10, okHttpClient16);
      assertFalse(okHttpClient10.equals((Object)okHttpClient12));
      assertFalse(okHttpClient10.equals((Object)okHttpClient0));
      assertFalse(okHttpClient10.equals((Object)okHttpClient13));
      assertFalse(okHttpClient10.equals((Object)okHttpClient5));
      assertFalse(okHttpClient10.equals((Object)okHttpClient2));
      assertFalse(okHttpClient10.equals((Object)okHttpClient11));
      assertFalse(okHttpClient10.equals((Object)okHttpClient7));
      assertFalse(okHttpClient10.equals((Object)okHttpClient8));
      assertFalse(okHttpClient10.equals((Object)okHttpClient15));
      assertFalse(okHttpClient10.equals((Object)okHttpClient4));
      assertFalse(okHttpClient10.equals((Object)okHttpClient6));
      assertFalse(okHttpClient10.equals((Object)okHttpClient1));
      assertFalse(okHttpClient10.equals((Object)okHttpClient9));
      assertFalse(okHttpClient10.equals((Object)okHttpClient3));
      assertFalse(okHttpClient10.equals((Object)okHttpClient16));
      assertNull(okResponseCache2);
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient17 = okHttpClient5.setProxy(okHttpClient12.proxy);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient17.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertFalse(okHttpClient12.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient17);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient16);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient9);
      assertNotSame(okHttpClient17, okHttpClient12);
      assertNotSame(okHttpClient17, okHttpClient10);
      assertNotSame(okHttpClient17, okHttpClient13);
      assertSame(okHttpClient17, okHttpClient5);
      assertNotSame(okHttpClient17, okHttpClient0);
      assertNotSame(okHttpClient17, okHttpClient16);
      assertNotSame(okHttpClient17, okHttpClient14);
      assertSame(okHttpClient17, okHttpClient6);
      assertNotSame(okHttpClient17, okHttpClient2);
      assertNotSame(okHttpClient17, okHttpClient1);
      assertNotSame(okHttpClient17, okHttpClient9);
      assertNotSame(okHttpClient17, okHttpClient15);
      assertNotSame(okHttpClient17, okHttpClient3);
      assertNotSame(okHttpClient17, okHttpClient4);
      assertNotSame(okHttpClient17, okHttpClient11);
      assertNotSame(okHttpClient17, okHttpClient8);
      assertNotSame(okHttpClient17, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient16);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient15);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient17);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient15);
      assertSame(okHttpClient12, okHttpClient16);
      assertSame(okHttpClient12, okHttpClient11);
      assertNotSame(okHttpClient12, okHttpClient1);
      assertNotSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient4);
      assertNotSame(okHttpClient12, okHttpClient17);
      assertNotSame(okHttpClient12, okHttpClient10);
      assertNotSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient9);
      assertNotSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient2);
      assertNotSame(okHttpClient12, okHttpClient13);
      assertNotSame(okHttpClient12, okHttpClient14);
      assertNotSame(okHttpClient4, okHttpClient14);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient17);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient16);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient15);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient13);
      assertNotSame(okHttpClient5, okHttpClient3);
      assertNotSame(okHttpClient5, okHttpClient14);
      assertSame(okHttpClient5, okHttpClient17);
      assertNotSame(okHttpClient5, okHttpClient9);
      assertNotSame(okHttpClient5, okHttpClient0);
      assertNotSame(okHttpClient5, okHttpClient13);
      assertSame(okHttpClient5, okHttpClient6);
      assertNotSame(okHttpClient5, okHttpClient8);
      assertNotSame(okHttpClient5, okHttpClient16);
      assertNotSame(okHttpClient5, okHttpClient12);
      assertNotSame(okHttpClient5, okHttpClient10);
      assertNotSame(okHttpClient5, okHttpClient2);
      assertNotSame(okHttpClient5, okHttpClient11);
      assertNotSame(okHttpClient5, okHttpClient7);
      assertNotSame(okHttpClient5, okHttpClient1);
      assertNotSame(okHttpClient5, okHttpClient15);
      assertNotSame(okHttpClient5, okHttpClient4);
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient17.equals((Object)okHttpClient12));
      assertFalse(okHttpClient17.equals((Object)okHttpClient10));
      assertFalse(okHttpClient17.equals((Object)okHttpClient13));
      assertFalse(okHttpClient17.equals((Object)okHttpClient0));
      assertFalse(okHttpClient17.equals((Object)okHttpClient16));
      assertFalse(okHttpClient17.equals((Object)okHttpClient14));
      assertFalse(okHttpClient17.equals((Object)okHttpClient2));
      assertFalse(okHttpClient17.equals((Object)okHttpClient1));
      assertFalse(okHttpClient17.equals((Object)okHttpClient9));
      assertFalse(okHttpClient17.equals((Object)okHttpClient15));
      assertFalse(okHttpClient17.equals((Object)okHttpClient3));
      assertFalse(okHttpClient17.equals((Object)okHttpClient4));
      assertFalse(okHttpClient17.equals((Object)okHttpClient11));
      assertFalse(okHttpClient17.equals((Object)okHttpClient8));
      assertFalse(okHttpClient17.equals((Object)okHttpClient7));
      assertFalse(okHttpClient2.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient6));
      assertFalse(okHttpClient12.equals((Object)okHttpClient10));
      assertFalse(okHttpClient12.equals((Object)okHttpClient5));
      assertFalse(okHttpClient12.equals((Object)okHttpClient3));
      assertFalse(okHttpClient12.equals((Object)okHttpClient13));
      assertFalse(okHttpClient12.equals((Object)okHttpClient14));
      assertFalse(okHttpClient12.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient14));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient13));
      assertFalse(okHttpClient5.equals((Object)okHttpClient3));
      assertFalse(okHttpClient5.equals((Object)okHttpClient14));
      assertFalse(okHttpClient5.equals((Object)okHttpClient9));
      assertFalse(okHttpClient5.equals((Object)okHttpClient0));
      assertFalse(okHttpClient5.equals((Object)okHttpClient13));
      assertFalse(okHttpClient5.equals((Object)okHttpClient8));
      assertFalse(okHttpClient5.equals((Object)okHttpClient16));
      assertFalse(okHttpClient5.equals((Object)okHttpClient12));
      assertFalse(okHttpClient5.equals((Object)okHttpClient10));
      assertFalse(okHttpClient5.equals((Object)okHttpClient2));
      assertFalse(okHttpClient5.equals((Object)okHttpClient11));
      assertFalse(okHttpClient5.equals((Object)okHttpClient7));
      assertFalse(okHttpClient5.equals((Object)okHttpClient1));
      assertFalse(okHttpClient5.equals((Object)okHttpClient15));
      assertFalse(okHttpClient5.equals((Object)okHttpClient4));
      assertNotNull(okHttpClient17);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient17.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      
      ResponseCache responseCache1 = okHttpClient0.getResponseCache();
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertNotSame(okHttpClient0, okHttpClient17);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient16);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient9);
      assertFalse(okHttpClient0.equals((Object)okHttpClient17));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertNull(responseCache1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      
      ResponseCache responseCache2 = okHttpClient8.getResponseCache();
      assertFalse(okHttpClient7.followProtocolRedirects);
      assertFalse(okHttpClient8.followProtocolRedirects);
      assertFalse(okHttpClient0.followProtocolRedirects);
      assertFalse(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertFalse(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient8);
      assertNotSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient11);
      assertNotSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient16);
      assertNotSame(okHttpClient7, okHttpClient17);
      assertNotSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient15);
      assertSame(okHttpClient7, okHttpClient4);
      assertNotSame(okHttpClient7, okHttpClient14);
      assertSame(okHttpClient7, okHttpClient9);
      assertNotSame(okHttpClient7, okHttpClient5);
      assertNotSame(okHttpClient7, okHttpClient10);
      assertNotSame(okHttpClient7, okHttpClient13);
      assertSame(okHttpClient7, okHttpClient2);
      assertNotSame(okHttpClient8, okHttpClient6);
      assertNotSame(okHttpClient8, okHttpClient14);
      assertNotSame(okHttpClient8, okHttpClient13);
      assertSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient15);
      assertSame(okHttpClient8, okHttpClient4);
      assertNotSame(okHttpClient8, okHttpClient5);
      assertNotSame(okHttpClient8, okHttpClient17);
      assertNotSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient7);
      assertNotSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient16);
      assertSame(okHttpClient8, okHttpClient9);
      assertNotSame(okHttpClient8, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient17);
      assertSame(okHttpClient0, okHttpClient7);
      assertNotSame(okHttpClient0, okHttpClient1);
      assertNotSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient11);
      assertNotSame(okHttpClient0, okHttpClient5);
      assertNotSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient15);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient16);
      assertNotSame(okHttpClient0, okHttpClient13);
      assertNotSame(okHttpClient0, okHttpClient3);
      assertNotSame(okHttpClient0, okHttpClient14);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient16);
      assertNotSame(okHttpClient2, okHttpClient13);
      assertNotSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient9);
      assertNotSame(okHttpClient2, okHttpClient14);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient7);
      assertNotSame(okHttpClient2, okHttpClient1);
      assertNotSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient15);
      assertSame(okHttpClient2, okHttpClient4);
      assertNotSame(okHttpClient2, okHttpClient5);
      assertNotSame(okHttpClient2, okHttpClient17);
      assertNotSame(okHttpClient2, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient16);
      assertNotSame(okHttpClient3, okHttpClient2);
      assertNotSame(okHttpClient3, okHttpClient12);
      assertNotSame(okHttpClient3, okHttpClient10);
      assertNotSame(okHttpClient3, okHttpClient15);
      assertNotSame(okHttpClient3, okHttpClient11);
      assertNotSame(okHttpClient3, okHttpClient6);
      assertNotSame(okHttpClient3, okHttpClient1);
      assertNotSame(okHttpClient3, okHttpClient8);
      assertNotSame(okHttpClient3, okHttpClient7);
      assertNotSame(okHttpClient3, okHttpClient4);
      assertNotSame(okHttpClient3, okHttpClient17);
      assertNotSame(okHttpClient3, okHttpClient14);
      assertNotSame(okHttpClient3, okHttpClient5);
      assertNotSame(okHttpClient3, okHttpClient9);
      assertNotSame(okHttpClient3, okHttpClient13);
      assertNotSame(okHttpClient3, okHttpClient0);
      assertNotSame(okHttpClient4, okHttpClient14);
      assertNotSame(okHttpClient4, okHttpClient5);
      assertNotSame(okHttpClient4, okHttpClient17);
      assertSame(okHttpClient4, okHttpClient9);
      assertNotSame(okHttpClient4, okHttpClient6);
      assertNotSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient16);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient7);
      assertNotSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient15);
      assertNotSame(okHttpClient4, okHttpClient10);
      assertNotSame(okHttpClient4, okHttpClient13);
      assertFalse(okHttpClient7.equals((Object)okHttpClient17));
      assertFalse(okHttpClient7.equals((Object)okHttpClient3));
      assertFalse(okHttpClient7.equals((Object)okHttpClient14));
      assertFalse(okHttpClient7.equals((Object)okHttpClient1));
      assertFalse(okHttpClient7.equals((Object)okHttpClient6));
      assertFalse(okHttpClient7.equals((Object)okHttpClient5));
      assertFalse(okHttpClient7.equals((Object)okHttpClient10));
      assertFalse(okHttpClient7.equals((Object)okHttpClient13));
      assertFalse(okHttpClient8.equals((Object)okHttpClient1));
      assertFalse(okHttpClient8.equals((Object)okHttpClient6));
      assertFalse(okHttpClient8.equals((Object)okHttpClient14));
      assertFalse(okHttpClient8.equals((Object)okHttpClient13));
      assertFalse(okHttpClient8.equals((Object)okHttpClient3));
      assertFalse(okHttpClient8.equals((Object)okHttpClient5));
      assertFalse(okHttpClient8.equals((Object)okHttpClient17));
      assertFalse(okHttpClient8.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient17));
      assertFalse(okHttpClient0.equals((Object)okHttpClient1));
      assertFalse(okHttpClient0.equals((Object)okHttpClient6));
      assertFalse(okHttpClient0.equals((Object)okHttpClient5));
      assertFalse(okHttpClient0.equals((Object)okHttpClient10));
      assertFalse(okHttpClient0.equals((Object)okHttpClient13));
      assertFalse(okHttpClient0.equals((Object)okHttpClient3));
      assertFalse(okHttpClient0.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient14));
      assertFalse(okHttpClient2.equals((Object)okHttpClient13));
      assertFalse(okHttpClient2.equals((Object)okHttpClient1));
      assertFalse(okHttpClient2.equals((Object)okHttpClient6));
      assertFalse(okHttpClient2.equals((Object)okHttpClient3));
      assertFalse(okHttpClient2.equals((Object)okHttpClient5));
      assertFalse(okHttpClient2.equals((Object)okHttpClient17));
      assertFalse(okHttpClient2.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient16));
      assertFalse(okHttpClient3.equals((Object)okHttpClient2));
      assertFalse(okHttpClient3.equals((Object)okHttpClient12));
      assertFalse(okHttpClient3.equals((Object)okHttpClient10));
      assertFalse(okHttpClient3.equals((Object)okHttpClient15));
      assertFalse(okHttpClient3.equals((Object)okHttpClient11));
      assertFalse(okHttpClient3.equals((Object)okHttpClient6));
      assertFalse(okHttpClient3.equals((Object)okHttpClient1));
      assertFalse(okHttpClient3.equals((Object)okHttpClient8));
      assertFalse(okHttpClient3.equals((Object)okHttpClient7));
      assertFalse(okHttpClient3.equals((Object)okHttpClient4));
      assertFalse(okHttpClient3.equals((Object)okHttpClient17));
      assertFalse(okHttpClient3.equals((Object)okHttpClient14));
      assertFalse(okHttpClient3.equals((Object)okHttpClient5));
      assertFalse(okHttpClient3.equals((Object)okHttpClient9));
      assertFalse(okHttpClient3.equals((Object)okHttpClient13));
      assertFalse(okHttpClient3.equals((Object)okHttpClient0));
      assertFalse(okHttpClient4.equals((Object)okHttpClient14));
      assertFalse(okHttpClient4.equals((Object)okHttpClient5));
      assertFalse(okHttpClient4.equals((Object)okHttpClient17));
      assertFalse(okHttpClient4.equals((Object)okHttpClient1));
      assertFalse(okHttpClient4.equals((Object)okHttpClient6));
      assertFalse(okHttpClient4.equals((Object)okHttpClient3));
      assertFalse(okHttpClient4.equals((Object)okHttpClient10));
      assertFalse(okHttpClient4.equals((Object)okHttpClient13));
      assertNull(responseCache2);
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      OkHttpClient okHttpClient0 = serializedObjectSupporter0.deserializeObjectOkHttpClient96();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertNotNull(connectionPool0);
      assertEquals(0, connectionPool0.getConnectionCount());
      
      String string0 = "{5z3";
      String string1 = "fZ*z(yM:th4%)!>";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      long long0 = 1961L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(httpResponseCache0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3/fZ*z(yM:th4%)!>", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("fZ*z(yM:th4%)!>", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3", mockFile0.getParent());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3/fZ*z(yM:th4%)!>", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("fZ*z(yM:th4%)!>", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3", mockFile0.getParent());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient2 = okHttpClient0.setConnectionPool(connectionPool0);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertNotNull(okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      EvoSuiteFile evoSuiteFile0 = null;
      OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(okHttpClient2.responseCache);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertNotNull(okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      okHttpClient0.sslSocketFactory = okHttpClient1.sslSocketFactory;
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3/fZ*z(yM:th4%)!>", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("fZ*z(yM:th4%)!>", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3", mockFile0.getParent());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      OkHttpClient okHttpClient4 = okHttpClient0.setConnectionPool(okHttpClient2.connectionPool);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient4.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertNotNull(okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      
      OkHttpClient okHttpClient5 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
      assertTrue(okHttpClient5.followProtocolRedirects);
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient1.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(okHttpClient5);
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3/fZ*z(yM:th4%)!>", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("fZ*z(yM:th4%)!>", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_10/{5z3", mockFile0.getParent());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      
      System.setCurrentTimeMillis(long0);
      OkResponseCache okResponseCache0 = okHttpClient3.okResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotNull(okResponseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      
      HttpResponseCache httpResponseCache1 = (HttpResponseCache)okHttpClient3.getResponseCache();
      assertTrue(okHttpClient0.followProtocolRedirects);
      assertTrue(okHttpClient2.followProtocolRedirects);
      assertTrue(okHttpClient3.followProtocolRedirects);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(httpResponseCache1, httpResponseCache0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertNotNull(httpResponseCache1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertEquals(0, httpResponseCache1.getRequestCount());
      assertEquals(0, httpResponseCache1.getHitCount());
      assertEquals(0, httpResponseCache1.getNetworkCount());
      assertEquals(0, httpResponseCache1.getWriteAbortCount());
      assertEquals(0, httpResponseCache1.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
  }
}
