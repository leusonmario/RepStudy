/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 30 21:32:38 GMT 2021
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.Address;
import com.squareup.okhttp.Connection;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.io.File;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(proxySelector0);
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(proxy0);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      assertNull(proxySelector1);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      ProxySelector.setDefault(proxySelector0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      String string0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(string0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      HostnameVerifier hostnameVerifier0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      boolean boolean0 = true;
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      assertNotNull(cookieHandler0);
      
      CookieHandler cookieHandler1 = CookieHandler.getDefault();
      assertSame(cookieHandler1, cookieHandler0);
      assertNotNull(cookieHandler1);
      
      CookieHandler.setDefault(cookieHandler0);
      assertSame(cookieHandler0, cookieHandler1);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(cookieHandler0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(cookieHandler0, cookieHandler1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(boolean1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(boolean1 == boolean0);
      
      OkHttpClient okHttpClient5 = okHttpClient0.setFollowProtocolRedirects(boolean1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient5);
      assertTrue(boolean1 == boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      String string0 = "";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string0, uRLStreamHandler0);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL0, uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpURLConnection httpURLConnection0 = okHttpClient5.open(uRL0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertNotSame(uRL0, uRL1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertTrue(httpURLConnection0.getDoInput());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertFalse(httpURLConnection0.usingProxy());
      assertTrue(httpURLConnection0.getUseCaches());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(httpURLConnection0);
      assertTrue(boolean1 == boolean0);
      assertFalse(uRL0.equals((Object)uRL1));
      
      HttpURLConnection httpURLConnection1 = okHttpClient0.open(uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertNotSame(httpURLConnection1, httpURLConnection0);
      assertNotSame(uRL0, uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(httpURLConnection1.getDefaultUseCaches());
      assertEquals(0, httpURLConnection1.getConnectTimeout());
      assertEquals("GET", httpURLConnection1.getRequestMethod());
      assertFalse(httpURLConnection1.getDoOutput());
      assertTrue(httpURLConnection1.getFollowRedirects());
      assertTrue(httpURLConnection1.getDoInput());
      assertFalse(httpURLConnection1.usingProxy());
      assertTrue(httpURLConnection1.getInstanceFollowRedirects());
      assertFalse(httpURLConnection1.getAllowUserInteraction());
      assertEquals(0, httpURLConnection1.getReadTimeout());
      assertEquals(0L, httpURLConnection1.getIfModifiedSince());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:null", httpURLConnection1.toString());
      assertTrue(httpURLConnection1.getUseCaches());
      assertFalse(httpURLConnection1.getDefaultAllowUserInteraction());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(httpURLConnection1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpURLConnection1.equals((Object)httpURLConnection0));
      assertFalse(uRL0.equals((Object)uRL1));
      
      ProxySelector proxySelector1 = okHttpClient5.getProxySelector();
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNull(proxySelector1);
      assertTrue(boolean1 == boolean0);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient6 = okHttpClient1.setAuthenticator(okAuthenticator0);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertNotNull(okHttpClient6);
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      int int0 = 1;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(string0, int0);
      assertNotNull(mockInetSocketAddress0);
      
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      assertEquals("/127.0.0.1:1", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("127.0.0.1", mockInetSocketAddress0.getHostString());
      assertEquals(1, mockInetSocketAddress0.getPort());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertEquals("SOCKS @ /127.0.0.1:1", proxy0.toString());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient7 = okHttpClient6.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertEquals("/127.0.0.1:1", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("127.0.0.1", mockInetSocketAddress0.getHostString());
      assertEquals(1, mockInetSocketAddress0.getPort());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertEquals("SOCKS @ /127.0.0.1:1", proxy0.toString());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertNotNull(okHttpClient7);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "file";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      assertNotNull(cookieHandler0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setCookieHandler(cookieHandler0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      RawHeaders rawHeaders0 = new RawHeaders();
      assertNull(rawHeaders0.getResponseMessage());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(0, rawHeaders0.length());
      assertNotNull(rawHeaders0);
      
      List<String> list0 = rawHeaders0.toNameValueBlock();
      assertNull(rawHeaders0.getResponseMessage());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(0, rawHeaders0.length());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      
      RawHeaders rawHeaders1 = RawHeaders.fromNameValueBlock(list0);
      assertNotSame(rawHeaders0, rawHeaders1);
      assertNotSame(rawHeaders1, rawHeaders0);
      assertNull(rawHeaders0.getResponseMessage());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(0, rawHeaders0.length());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1, rawHeaders1.getHttpMinorVersion());
      assertEquals((-1), rawHeaders1.getResponseCode());
      assertNull(rawHeaders1.getResponseMessage());
      assertEquals(0, rawHeaders1.length());
      assertNull(rawHeaders1.getStatusLine());
      assertNotNull(rawHeaders1);
      assertFalse(list0.contains(string0));
      assertFalse(rawHeaders1.equals((Object)rawHeaders0));
      
      List<String> list1 = rawHeaders1.toNameValueBlock();
      assertNotSame(rawHeaders0, rawHeaders1);
      assertNotSame(list0, list1);
      assertNotSame(rawHeaders1, rawHeaders0);
      assertNotSame(list1, list0);
      assertNull(rawHeaders0.getResponseMessage());
      assertEquals((-1), rawHeaders0.getResponseCode());
      assertEquals(1, rawHeaders0.getHttpMinorVersion());
      assertNull(rawHeaders0.getStatusLine());
      assertEquals(0, rawHeaders0.length());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1, rawHeaders1.getHttpMinorVersion());
      assertEquals((-1), rawHeaders1.getResponseCode());
      assertNull(rawHeaders1.getResponseMessage());
      assertEquals(0, rawHeaders1.length());
      assertNull(rawHeaders1.getStatusLine());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list0.contains(string0));
      assertFalse(list1.contains(string0));
      assertFalse(rawHeaders0.equals((Object)rawHeaders1));
      assertFalse(rawHeaders1.equals((Object)rawHeaders0));
      assertTrue(list1.equals((Object)list0));
      
      // Undeclared exception!
      try { 
        okHttpClient2.setTransports(list1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      Proxy proxy0 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      String string0 = null;
      ProxySelector proxySelector0 = null;
      OkHttpClient okHttpClient5 = okHttpClient2.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient5);
      
      String string1 = "2.;?UkTxxY";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient6 = okHttpClient1.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient3.setCookieHandler(cookieManager0);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient7);
      
      URI uRI0 = mockFile0.toURI();
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/2.;%3FUkTxx%7FY", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/2.;%3FUkTxx%7FY", uRI0.getRawPath());
      assertEquals("2.;?UkTxxY", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("2.;?UkTxxY", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNotNull(uRI0);
      
      long long0 = 3430L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals("2.;?UkTxxY", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("2.;?UkTxxY", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(httpResponseCache0);
      
      OkHttpClient okHttpClient8 = okHttpClient4.setResponseCache(httpResponseCache0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertEquals("2.;?UkTxxY", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("2.;?UkTxxY", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient8.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertEquals("2.;?UkTxxY", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("2.;?UkTxxY", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(okHttpClient9);
      
      HostnameVerifier hostnameVerifier1 = okHttpClient1.getHostnameVerifier();
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(hostnameVerifier1, hostnameVerifier0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(hostnameVerifier1);
      
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      String string2 = "`jaf>X)<#[)=";
      int int0 = (-5185);
      OkHttpClient okHttpClient10 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient4);
      assertNotSame(string1, string2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertEquals("2.;?UkTxxY", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("2.;?UkTxxY", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(okHttpClient10);
      assertFalse(string1.equals((Object)string2));
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient11 = okHttpClient10.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(string1, string2);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient6);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertEquals("2.;?UkTxxY", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("2.;?UkTxxY", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertNotNull(okHttpClient11);
      assertFalse(string1.equals((Object)string2));
      
      boolean boolean1 = okHttpClient2.getFollowProtocolRedirects();
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertFalse(boolean1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(boolean1 == boolean0);
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient9.getSslSocketFactory();
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(sSLSocketFactory0, sSLSocketFactory1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(string1, string2);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient11);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(sSLSocketFactory1, sSLSocketFactory0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertEquals("2.;?UkTxxY", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("2.;?UkTxxY", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(sSLSocketFactory1);
      assertTrue(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string2));
      
      OkHttpClient okHttpClient12 = okHttpClient10.setHostnameVerifier(hostnameVerifier1);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(sSLSocketFactory0, sSLSocketFactory1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient2);
      assertNotSame(string1, string2);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(hostnameVerifier1, hostnameVerifier0);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient12);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient3);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertEquals("2.;?UkTxxY", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("2.;?UkTxxY", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient10.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertNotNull(okHttpClient12);
      assertTrue(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string2));
      
      OkAuthenticator okAuthenticator0 = okHttpClient3.getAuthenticator();
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(sSLSocketFactory0, sSLSocketFactory1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient5);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertNull(okAuthenticator0);
      assertTrue(boolean0 == boolean1);
      
      List<String> list0 = okHttpClient7.getTransports();
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(sSLSocketFactory0, sSLSocketFactory1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient10);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient12);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient2, okHttpClient11);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient5);
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertNull(list0);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ResponseCache responseCache0 = null;
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(responseCache0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      ProxySelector proxySelector0 = null;
      ResponseCache responseCache1 = ResponseCache.getDefault();
      assertNull(responseCache1);
      
      OkHttpClient okHttpClient5 = okHttpClient3.setResponseCache(responseCache1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient5);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(okAuthenticator0).toString();
      OkHttpClient okHttpClient6 = okHttpClient5.setAuthenticator(okAuthenticator0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertNotNull(okHttpClient6);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpURLConnection httpURLConnection0 = okHttpClient6.open(uRL0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(httpURLConnection0.getFollowRedirects());
      assertFalse(httpURLConnection0.getAllowUserInteraction());
      assertEquals(0, httpURLConnection0.getReadTimeout());
      assertEquals((-1), httpURLConnection0.getContentLength());
      assertTrue(httpURLConnection0.getDoInput());
      assertEquals(0, httpURLConnection0.getConnectTimeout());
      assertEquals("GET", httpURLConnection0.getRequestMethod());
      assertFalse(httpURLConnection0.getDoOutput());
      assertEquals("com.squareup.okhttp.internal.http.HttpURLConnectionImpl:http://www.someFakeButWellFormedURL.org/fooExample", httpURLConnection0.toString());
      assertTrue(httpURLConnection0.getDefaultUseCaches());
      assertTrue(httpURLConnection0.getUseCaches());
      assertNull(httpURLConnection0.getContentEncoding());
      assertFalse(httpURLConnection0.usingProxy());
      assertEquals(0L, httpURLConnection0.getIfModifiedSince());
      assertTrue(httpURLConnection0.getInstanceFollowRedirects());
      assertNull(httpURLConnection0.getContentType());
      assertFalse(httpURLConnection0.getDefaultAllowUserInteraction());
      assertNotNull(httpURLConnection0);
      
      OkHttpClient okHttpClient7 = okHttpClient4.setProxySelector(proxySelector0);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient7);
      
      int int0 = (-3563);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient8 = okHttpClient3.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient8);
      
      OkHttpClient okHttpClient9 = okHttpClient7.setConnectionPool(connectionPool0);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient9);
      
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      assertNull(proxySelector1);
      
      OkHttpClient okHttpClient10 = okHttpClient5.setProxySelector(proxySelector1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient10);
      
      boolean boolean0 = false;
      List<Connection> list0 = connectionPool0.getConnections();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      OkHttpClient okHttpClient11 = okHttpClient7.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient5);
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertNotNull(okHttpClient11);
      
      OkHttpClient okHttpClient12 = okHttpClient11.setProxy(proxy0);
      assertSame(okHttpClient7, okHttpClient9);
      assertSame(okHttpClient7, okHttpClient11);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient8);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient10);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient12);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient2);
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient11.getFollowProtocolRedirects());
      assertFalse(okHttpClient12.getFollowProtocolRedirects());
      assertNotNull(okHttpClient12);
      
      ConnectionPool connectionPool1 = okHttpClient1.getConnectionPool();
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(connectionPool1, connectionPool0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool1.getConnectionCount());
      assertNotNull(connectionPool1);
      
      ConnectionPool connectionPool2 = okHttpClient3.getConnectionPool();
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(connectionPool2, connectionPool1);
      assertSame(connectionPool2, connectionPool0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, connectionPool2.getConnectionCount());
      assertNotNull(connectionPool2);
      
      ResponseCache responseCache2 = okHttpClient8.getResponseCache();
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(connectionPool0, connectionPool2);
      assertSame(connectionPool0, connectionPool1);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient11);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient10);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient12);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient10);
      assertSame(okHttpClient8, okHttpClient12);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient11);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient12);
      assertSame(okHttpClient3, okHttpClient10);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient8);
      assertSame(okHttpClient3, okHttpClient11);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient9);
      assertSame(okHttpClient3, okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertNull(responseCache2);
      
      String string0 = ".";
      int int1 = 372;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(string0, string0, int1, string0, uRLStreamHandler0);
      assertNotSame(uRL1, uRL0);
      assertEquals(".", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertEquals(".", uRL1.getFile());
      assertNull(uRL1.toString());
      assertEquals(".", uRL1.getProtocol());
      assertEquals(372, uRL1.getPort());
      assertEquals(".:372", uRL1.getAuthority());
      assertEquals(".", uRL1.getPath());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        okHttpClient8.open(uRL1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: .
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      String string0 = "ymlXhm!l6Gl|p4k3p5";
      int int0 = 1;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(string0, int0);
      assertNotNull(mockInetSocketAddress0);
      
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type DIRECT is not compatible with address /200.42.42.0:1
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okAuthenticator0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      assertNotNull(cookieHandler0);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(cookieHandler0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      String string0 = "spy/3";
      int int0 = 1;
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(responseCache0);
      assertNotNull(okResponseCacheAdapter0);
      
      Collection<Route> collection0 = null;
      LinkedHashSet<Route> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<Route>(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashSet", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient5);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        okHttpClient5.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okAuthenticator0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      String string0 = "";
      int int0 = 580;
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkAuthenticator okAuthenticator1 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      int int1 = (-2445);
      // Undeclared exception!
      try { 
        MockInetSocketAddress.createUnresolved(string0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2445
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(responseCache0);
      
      ResponseCache responseCache1 = ResponseCache.getDefault();
      assertNull(responseCache1);
      
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNull(cookieHandler0);
      
      ProxySelector proxySelector0 = null;
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        okHttpClient1.setTransports(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      String string0 = "Accept-Encoding";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      long long0 = 1L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("Accept-Encoding", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Accept-Encoding", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertNotNull(httpResponseCache0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("Accept-Encoding", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Accept-Encoding", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ProxySelector proxySelector0 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("Accept-Encoding", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Accept-Encoding", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      int int0 = 1;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int0, string0, uRLStreamHandler0);
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Accept-Encoding:1", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("accept-encoding", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("Accept-Encoding", uRL0.getFile());
      assertEquals("Accept-Encoding", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Accept-Encoding", uRL0.getHost());
      assertNotNull(uRL0);
      
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(httpResponseCache0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("Accept-Encoding", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Accept-Encoding", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertNotNull(okResponseCacheAdapter0);
      
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient2, okResponseCacheAdapter0, linkedHashSet0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("Accept-Encoding", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Accept-Encoding", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Accept-Encoding:1", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("accept-encoding", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("Accept-Encoding", uRL0.getFile());
      assertEquals("Accept-Encoding", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Accept-Encoding", uRL0.getHost());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertNotNull(httpsURLConnectionImpl0);
      
      SSLSocketFactory sSLSocketFactory0 = httpsURLConnectionImpl0.getSSLSocketFactory();
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("Accept-Encoding", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Accept-Encoding", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Accept-Encoding:1", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("accept-encoding", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("Accept-Encoding", uRL0.getFile());
      assertEquals("Accept-Encoding", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Accept-Encoding", uRL0.getHost());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("Accept-Encoding", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Accept-Encoding", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Accept-Encoding:1", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("accept-encoding", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("Accept-Encoding", uRL0.getFile());
      assertEquals("Accept-Encoding", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Accept-Encoding", uRL0.getHost());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("Accept-Encoding", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Accept-Encoding", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("Accept-Encoding:1", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("accept-encoding", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("Accept-Encoding", uRL0.getFile());
      assertEquals("Accept-Encoding", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("Accept-Encoding", uRL0.getHost());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(httpsURLConnectionImpl0.usingProxy());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(set0.contains(string0));
      assertFalse(list0.contains(string0));
      
      // Undeclared exception!
      try { 
        okHttpClient4.setTransports(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient4.getSslSocketFactory();
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNull(sSLSocketFactory0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      ProxySelector proxySelector0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      connectionPool0.evictAll();
      assertEquals(0, connectionPool0.getConnectionCount());
      
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient4 = okHttpClient2.setAuthenticator(okAuthenticator0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      String string0 = "{[:7;@)[I8ZDcU23?F";
      try { 
        MockURL.URL(string0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: {[:7;@)[I8ZDcU23?F
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(responseCache0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      int int0 = 3539;
      long long0 = 910L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(responseCache0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient4 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient5 = okHttpClient3.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient5);
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient6 = okHttpClient5.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertNotNull(okHttpClient6);
      
      List<String> list0 = okHttpClient6.getTransports();
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertNull(list0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      int int0 = (-1182);
      long long0 = 9223372036854775807L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient4 = okHttpClient0.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient5);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient6 = okHttpClient0.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertNotNull(okHttpClient6);
      
      CookieHandler cookieHandler0 = null;
      OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient6.setProxy(proxy0);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertNotNull(okHttpClient8);
      
      HostnameVerifier hostnameVerifier1 = okHttpClient8.getHostnameVerifier();
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(hostnameVerifier1, hostnameVerifier0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertNotNull(hostnameVerifier1);
      
      ProxySelector proxySelector0 = okHttpClient4.getProxySelector();
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNull(proxySelector0);
      
      Proxy proxy1 = okHttpClient8.getProxy();
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(proxy1, proxy0);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertTrue(okHttpClient8.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals("DIRECT", proxy1.toString());
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertNotNull(proxy1);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient9 = okHttpClient5.setResponseCache(responseCache0);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient9);
      
      HostnameVerifier hostnameVerifier2 = okHttpClient4.getHostnameVerifier();
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(hostnameVerifier2, hostnameVerifier1);
      assertSame(hostnameVerifier2, hostnameVerifier0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(hostnameVerifier2);
      
      OkHttpClient okHttpClient10 = okHttpClient9.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient8);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient10);
      
      OkHttpClient okHttpClient11 = okHttpClient6.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient0);
      assertSame(okHttpClient11, okHttpClient6);
      assertSame(okHttpClient11, okHttpClient5);
      assertSame(okHttpClient11, okHttpClient2);
      assertSame(okHttpClient11, okHttpClient1);
      assertSame(okHttpClient11, okHttpClient3);
      assertSame(okHttpClient11, okHttpClient4);
      assertSame(okHttpClient11, okHttpClient10);
      assertSame(okHttpClient11, okHttpClient8);
      assertSame(okHttpClient11, okHttpClient7);
      assertSame(okHttpClient11, okHttpClient9);
      assertSame(proxy0, proxy1);
      assertSame(okHttpClient6, okHttpClient9);
      assertSame(okHttpClient6, okHttpClient10);
      assertSame(okHttpClient6, okHttpClient11);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient8);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient11.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertNotNull(okHttpClient11);
      
      OkHttpClient okHttpClient12 = okHttpClient10.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient11);
      assertSame(okHttpClient9, okHttpClient10);
      assertSame(okHttpClient9, okHttpClient7);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient12);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient5);
      assertSame(okHttpClient10, okHttpClient7);
      assertSame(okHttpClient10, okHttpClient8);
      assertSame(okHttpClient10, okHttpClient2);
      assertSame(okHttpClient10, okHttpClient4);
      assertSame(okHttpClient10, okHttpClient1);
      assertSame(okHttpClient10, okHttpClient3);
      assertSame(okHttpClient10, okHttpClient6);
      assertSame(okHttpClient10, okHttpClient12);
      assertSame(okHttpClient10, okHttpClient0);
      assertSame(okHttpClient10, okHttpClient11);
      assertSame(okHttpClient10, okHttpClient9);
      assertSame(okHttpClient12, okHttpClient5);
      assertSame(okHttpClient12, okHttpClient7);
      assertSame(okHttpClient12, okHttpClient8);
      assertSame(okHttpClient12, okHttpClient2);
      assertSame(okHttpClient12, okHttpClient4);
      assertSame(okHttpClient12, okHttpClient1);
      assertSame(okHttpClient12, okHttpClient3);
      assertSame(okHttpClient12, okHttpClient10);
      assertSame(okHttpClient12, okHttpClient6);
      assertSame(okHttpClient12, okHttpClient0);
      assertSame(okHttpClient12, okHttpClient11);
      assertSame(okHttpClient12, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient12);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient9.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertTrue(okHttpClient10.getFollowProtocolRedirects());
      assertTrue(okHttpClient12.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient12);
      
      int int1 = (-2828);
      long long1 = 1L;
      ConnectionPool connectionPool1 = new ConnectionPool(int1, long1);
      assertEquals(0, connectionPool1.getConnectionCount());
      assertNotNull(connectionPool1);
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertFalse(connectionPool1.equals((Object)connectionPool0));
      
      OkHttpClient okHttpClient13 = okHttpClient5.setConnectionPool(connectionPool1);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient11);
      assertSame(okHttpClient0, okHttpClient12);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient13);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient12);
      assertSame(okHttpClient4, okHttpClient13);
      assertSame(okHttpClient4, okHttpClient10);
      assertSame(okHttpClient4, okHttpClient11);
      assertSame(okHttpClient4, okHttpClient9);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient12);
      assertSame(okHttpClient5, okHttpClient13);
      assertSame(okHttpClient5, okHttpClient10);
      assertSame(okHttpClient5, okHttpClient11);
      assertSame(okHttpClient5, okHttpClient9);
      assertSame(okHttpClient5, okHttpClient4);
      assertNotSame(connectionPool1, connectionPool0);
      assertSame(okHttpClient13, okHttpClient3);
      assertSame(okHttpClient13, okHttpClient11);
      assertSame(okHttpClient13, okHttpClient0);
      assertSame(okHttpClient13, okHttpClient10);
      assertSame(okHttpClient13, okHttpClient4);
      assertSame(okHttpClient13, okHttpClient1);
      assertSame(okHttpClient13, okHttpClient7);
      assertSame(okHttpClient13, okHttpClient9);
      assertSame(okHttpClient13, okHttpClient6);
      assertSame(okHttpClient13, okHttpClient2);
      assertSame(okHttpClient13, okHttpClient5);
      assertSame(okHttpClient13, okHttpClient8);
      assertSame(okHttpClient13, okHttpClient12);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertEquals(0, connectionPool1.getConnectionCount());
      assertTrue(okHttpClient13.getFollowProtocolRedirects());
      assertNotNull(okHttpClient13);
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertFalse(connectionPool1.equals((Object)connectionPool0));
      
      String string0 = "Unexpected protocol: ";
      String string1 = null;
      String string2 = "";
      MockFile mockFile0 = new MockFile(string1, string2);
      assertNotNull(mockFile0);
      assertFalse(string2.equals((Object)string0));
      
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      assertNotSame(string2, string0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(string0, string2);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("Unexpected protocol: 0Unexpected protocol: ", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1", file0.getParent());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/Unexpected protocol: 0Unexpected protocol: ", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string0.equals((Object)string2));
      
      long long2 = 0L;
      HttpResponseCache httpResponseCache0 = null;
      try {
        httpResponseCache0 = new HttpResponseCache(file0, long2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize <= 0
         //
         verifyException("com.squareup.okhttp.internal.DiskLruCache", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(cookieHandler0);
      
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(responseCache0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      List<String> list0 = okHttpClient0.getTransports();
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(list0);
      
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(connectionPool0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(responseCache0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(hostnameVerifier0);
      
      OkAuthenticator okAuthenticator0 = okHttpClient1.getAuthenticator();
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNull(okAuthenticator0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setCookieHandler(cookieHandler0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient5 = okHttpClient4.setAuthenticator(okAuthenticator0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient5);
      
      SSLSocketFactory sSLSocketFactory1 = okHttpClient5.getSslSocketFactory();
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(sSLSocketFactory0, sSLSocketFactory1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(sSLSocketFactory1, sSLSocketFactory0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(sSLSocketFactory1);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      ConnectionPool connectionPool0 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      assertNotNull(cookieHandler0);
      
      OkHttpClient okHttpClient5 = okHttpClient4.setCookieHandler(cookieHandler0);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient5);
      
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient5.open(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient4 = okHttpClient0.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      int int0 = 3538;
      boolean boolean1 = false;
      OkHttpClient okHttpClient5 = okHttpClient3.setFollowProtocolRedirects(boolean1);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient5);
      assertFalse(boolean1 == boolean0);
      
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      assertEquals(0, connectionPool0.getConnectionCount());
      assertNotNull(connectionPool0);
      
      OkHttpClient okHttpClient6 = okHttpClient3.setConnectionPool(connectionPool0);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(0, connectionPool0.getConnectionCount());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertNotNull(okHttpClient6);
      
      Proxy proxy0 = okHttpClient0.getProxy();
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertNull(proxy0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      String string0 = ")j/VK[uckDWih_";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SSLSocketFactory sSLSocketFactory0 = null;
      OkHttpClient okHttpClient3 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      long long0 = 2237L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("VK[uckDWih_", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j/VK[uckDWih_", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertNotNull(httpResponseCache0);
      
      mockFile0.deleteOnExit();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("VK[uckDWih_", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j/VK[uckDWih_", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      OkHttpClient okHttpClient4 = okHttpClient2.setResponseCache(httpResponseCache0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("VK[uckDWih_", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j/VK[uckDWih_", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      int int0 = 1148;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int0);
      assertNotNull(mockInetSocketAddress0);
      
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertEquals("SOCKS @ /192.168.1.42:1148", proxy0.toString());
      assertEquals("/192.168.1.42:1148", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(1148, mockInetSocketAddress0.getPort());
      assertNotNull(proxy0);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient5 = okHttpClient4.setAuthenticator(okAuthenticator0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("VK[uckDWih_", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j/VK[uckDWih_", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient5);
      
      OkHttpClient okHttpClient6 = okHttpClient4.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertEquals("SOCKS @ /192.168.1.42:1148", proxy0.toString());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("VK[uckDWih_", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j/VK[uckDWih_", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals("/192.168.1.42:1148", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(1148, mockInetSocketAddress0.getPort());
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient6.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient1);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient2);
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertEquals("SOCKS @ /192.168.1.42:1148", proxy0.toString());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient6.getFollowProtocolRedirects());
      assertTrue(okHttpClient7.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("VK[uckDWih_", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j/VK[uckDWih_", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertEquals("/192.168.1.42:1148", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(1148, mockInetSocketAddress0.getPort());
      assertNotNull(okHttpClient7);
      
      ProxySelector proxySelector1 = okHttpClient4.getProxySelector();
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("VK[uckDWih_", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j/VK[uckDWih_", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNull(proxySelector1);
      
      HostnameVerifier hostnameVerifier1 = okHttpClient2.getHostnameVerifier();
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(hostnameVerifier1, hostnameVerifier0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(hostnameVerifier1);
      
      httpResponseCache0.delete();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("VK[uckDWih_", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j/VK[uckDWih_", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      
      HostnameVerifier hostnameVerifier2 = okHttpClient4.getHostnameVerifier();
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(hostnameVerifier0, hostnameVerifier2);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(hostnameVerifier2, hostnameVerifier0);
      assertSame(hostnameVerifier2, hostnameVerifier1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("VK[uckDWih_", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j/VK[uckDWih_", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(hostnameVerifier2);
      
      boolean boolean0 = false;
      OkHttpClient okHttpClient8 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(hostnameVerifier0, hostnameVerifier2);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient3);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertNotNull(okHttpClient8);
      
      List<String> list0 = okHttpClient1.getTransports();
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(hostnameVerifier0, hostnameVerifier2);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertNull(list0);
      
      ProxySelector proxySelector2 = okHttpClient5.getProxySelector();
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(hostnameVerifier0, hostnameVerifier2);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("VK[uckDWih_", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j/VK[uckDWih_", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertNull(proxySelector2);
      
      boolean boolean1 = okHttpClient1.getFollowProtocolRedirects();
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(hostnameVerifier0, hostnameVerifier2);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(boolean1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = okHttpClient1.getFollowProtocolRedirects();
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(hostnameVerifier0, hostnameVerifier2);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertFalse(boolean2);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      HttpResponseCache httpResponseCache1 = (HttpResponseCache)okHttpClient5.getResponseCache();
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(hostnameVerifier0, hostnameVerifier2);
      assertSame(hostnameVerifier0, hostnameVerifier1);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient8);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(httpResponseCache0, httpResponseCache1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient5);
      assertSame(okHttpClient4, okHttpClient8);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient6);
      assertSame(okHttpClient4, okHttpClient7);
      assertSame(httpResponseCache1, httpResponseCache0);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("VK[uckDWih_", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/okhttp/35166168529bd27281685e56a0a122eff44460e9/evosuite_1/)j/VK[uckDWih_/)j/VK[uckDWih_", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertEquals(0, httpResponseCache1.getWriteSuccessCount());
      assertEquals(0, httpResponseCache1.getHitCount());
      assertEquals(0, httpResponseCache1.getNetworkCount());
      assertEquals(0, httpResponseCache1.getRequestCount());
      assertEquals(0, httpResponseCache1.getWriteAbortCount());
      assertNotNull(httpResponseCache1);
      
      // Undeclared exception!
      try { 
        okHttpClient2.setTransports(list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      boolean boolean0 = false;
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(okAuthenticator0).toString();
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(hostnameVerifier0);
      
      SSLSocketFactory sSLSocketFactory0 = okHttpClient1.getSslSocketFactory();
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNull(sSLSocketFactory0);
      
      List<String> list0 = okHttpClient0.getTransports();
      assertSame(okHttpClient0, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNull(list0);
      
      Proxy proxy0 = null;
      OkHttpClient okHttpClient2 = okHttpClient0.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      OkAuthenticator okAuthenticator1 = okHttpClient1.getAuthenticator();
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okAuthenticator1, okAuthenticator0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okAuthenticator1);
      
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      assertNull(proxySelector0);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setProxySelector(proxySelector0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertTrue(boolean0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      HostnameVerifier hostnameVerifier1 = okHttpClient1.getHostnameVerifier();
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNull(hostnameVerifier1);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient4 = okHttpClient3.setResponseCache(responseCache0);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      String string0 = "Proxy-Authenticate";
      int int0 = 0;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(string0, int0);
      assertNotNull(mockInetSocketAddress0);
      
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okAuthenticator0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      URL uRL0 = null;
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(responseCache0);
      assertNotNull(okResponseCacheAdapter0);
      
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient1, okResponseCacheAdapter0, linkedHashSet0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertNotNull(httpsURLConnectionImpl0);
      
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertNull(hostnameVerifier0);
      
      ResponseCache.setDefault(responseCache0);
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertNotNull(okHttpClient3);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(boolean1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient3);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient4.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertNotNull(okHttpClient4);
      
      OkHttpClient okHttpClient5 = okHttpClient3.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertNotNull(okHttpClient5);
      
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      assertNotNull(sSLSocketFactory0);
      
      OkHttpClient okHttpClient6 = okHttpClient5.setSSLSocketFactory(sSLSocketFactory0);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient5);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertNotNull(okHttpClient6);
      
      OkHttpClient okHttpClient7 = okHttpClient6.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient7);
      assertSame(okHttpClient3, okHttpClient6);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient6);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient7);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient0);
      assertSame(okHttpClient6, okHttpClient3);
      assertSame(okHttpClient6, okHttpClient7);
      assertSame(okHttpClient6, okHttpClient1);
      assertSame(okHttpClient6, okHttpClient2);
      assertSame(okHttpClient6, okHttpClient4);
      assertSame(okHttpClient6, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient0);
      assertSame(okHttpClient7, okHttpClient6);
      assertSame(okHttpClient7, okHttpClient2);
      assertSame(okHttpClient7, okHttpClient3);
      assertSame(okHttpClient7, okHttpClient5);
      assertSame(okHttpClient7, okHttpClient4);
      assertSame(okHttpClient7, okHttpClient1);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(httpsURLConnectionImpl0.usingProxy());
      assertTrue(httpsURLConnectionImpl0.getFollowRedirects());
      assertFalse(httpsURLConnectionImpl0.getDefaultAllowUserInteraction());
      assertFalse(okHttpClient3.getFollowProtocolRedirects());
      assertFalse(okHttpClient5.getFollowProtocolRedirects());
      assertFalse(okHttpClient6.getFollowProtocolRedirects());
      assertFalse(okHttpClient7.getFollowProtocolRedirects());
      assertNotNull(okHttpClient7);
      
      OkHttpClient okHttpClient8 = okHttpClient2.setResponseCache(responseCache0);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient6);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient8);
      
      CookieManager cookieManager0 = new CookieManager();
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient9 = okHttpClient8.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient8);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient6);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient9);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient0, okHttpClient7);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient9);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient7);
      assertSame(okHttpClient1, okHttpClient8);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient6);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient8, okHttpClient0);
      assertSame(okHttpClient8, okHttpClient4);
      assertSame(okHttpClient8, okHttpClient9);
      assertSame(okHttpClient8, okHttpClient3);
      assertSame(okHttpClient8, okHttpClient1);
      assertSame(okHttpClient8, okHttpClient7);
      assertSame(okHttpClient8, okHttpClient6);
      assertSame(okHttpClient8, okHttpClient5);
      assertSame(okHttpClient8, okHttpClient2);
      assertSame(okHttpClient2, okHttpClient8);
      assertSame(okHttpClient2, okHttpClient5);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient4);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient7);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient9);
      assertSame(okHttpClient2, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient3);
      assertSame(okHttpClient9, okHttpClient1);
      assertSame(okHttpClient9, okHttpClient2);
      assertSame(okHttpClient9, okHttpClient5);
      assertSame(okHttpClient9, okHttpClient6);
      assertSame(okHttpClient9, okHttpClient8);
      assertSame(okHttpClient9, okHttpClient0);
      assertSame(okHttpClient9, okHttpClient4);
      assertSame(okHttpClient9, okHttpClient7);
      assertFalse(okHttpClient0.getFollowProtocolRedirects());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:0", mockInetSocketAddress0.toString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:0", proxy0.toString());
      assertFalse(okHttpClient1.getFollowProtocolRedirects());
      assertFalse(okHttpClient8.getFollowProtocolRedirects());
      assertFalse(okHttpClient2.getFollowProtocolRedirects());
      assertFalse(okHttpClient9.getFollowProtocolRedirects());
      assertNotNull(okHttpClient9);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = "";
      double double0 = 0.0;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(string1, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = null;
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      assertNotNull(cookieManager0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      ResponseCache responseCache0 = null;
      HostnameVerifier hostnameVerifier0 = null;
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient2, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      OkHttpClient okHttpClient3 = okHttpClient1.setResponseCache(responseCache0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      boolean boolean0 = true;
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(boolean0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient1);
      assertSame(okHttpClient4, okHttpClient0);
      assertSame(okHttpClient4, okHttpClient2);
      assertSame(okHttpClient4, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertTrue(okHttpClient4.getFollowProtocolRedirects());
      assertNotNull(okHttpClient4);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      OkHttpClient okHttpClient5 = okHttpClient3.setProxy(proxy0);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(okHttpClient5);
      
      CookieHandler cookieHandler0 = okHttpClient5.getCookieHandler();
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(cookieManager0, cookieHandler0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertSame(cookieHandler0, cookieManager0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertNotNull(cookieHandler0);
      
      boolean boolean1 = okHttpClient5.getFollowProtocolRedirects();
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient0, okHttpClient5);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient4);
      assertSame(cookieManager0, cookieHandler0);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient1, okHttpClient4);
      assertSame(okHttpClient1, okHttpClient5);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertSame(okHttpClient3, okHttpClient5);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient4);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient2);
      assertSame(okHttpClient5, okHttpClient4);
      assertSame(okHttpClient5, okHttpClient0);
      assertSame(okHttpClient5, okHttpClient1);
      assertSame(okHttpClient5, okHttpClient3);
      assertTrue(boolean1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(okHttpClient5.getFollowProtocolRedirects());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      HostnameVerifier hostnameVerifier0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertNotNull(okHttpClient1);
      
      File file0 = null;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      long long0 = 1L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertNotNull(httpResponseCache0);
      
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(httpResponseCache0);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertNotNull(okHttpClient2);
      
      HostnameVerifier hostnameVerifier1 = HttpsURLConnection.getDefaultHostnameVerifier();
      assertNotNull(hostnameVerifier1);
      
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(hostnameVerifier1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient0, okHttpClient2);
      assertSame(okHttpClient0, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient3);
      assertSame(okHttpClient1, okHttpClient2);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient3);
      assertSame(okHttpClient2, okHttpClient0);
      assertSame(okHttpClient2, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient1);
      assertSame(okHttpClient3, okHttpClient2);
      assertSame(okHttpClient3, okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0, httpResponseCache0.getRequestCount());
      assertEquals(0, httpResponseCache0.getHitCount());
      assertEquals(0, httpResponseCache0.getWriteAbortCount());
      assertEquals(0, httpResponseCache0.getNetworkCount());
      assertEquals(0, httpResponseCache0.getWriteSuccessCount());
      assertTrue(okHttpClient2.getFollowProtocolRedirects());
      assertTrue(okHttpClient3.getFollowProtocolRedirects());
      assertNotNull(okHttpClient3);
      
      URL uRL0 = mockFile0.toURL();
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        okHttpClient3.open(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }
}
