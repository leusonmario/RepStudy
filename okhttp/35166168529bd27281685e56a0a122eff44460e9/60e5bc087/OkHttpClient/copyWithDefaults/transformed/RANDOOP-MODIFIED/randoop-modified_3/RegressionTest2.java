import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.Proxy proxy4 = okHttpClient0.proxy;
        java.net.ProxySelector proxySelector5 = null;
        okHttpClient0.proxySelector = proxySelector5;
        boolean boolean7 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient0.getSslSocketFactory();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(proxy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNull(sSLSocketFactory9);
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient11.getConnectionPool();
        int int15 = connectionPool14.getConnectionCount();
        com.squareup.okhttp.Address address16 = null;
        com.squareup.okhttp.Connection connection17 = connectionPool14.get(address16);
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(connection17);
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = okHttpClient21.getSslSocketFactory();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass23 = sSLSocketFactory22.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(sSLSocketFactory22);
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        boolean boolean11 = okHttpClient8.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setCookieHandler(cookieHandler12);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache14 = okHttpClient8.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = okHttpClient15.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient17.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient17.copyWithDefaults();
        java.net.ProxySelector proxySelector26 = okHttpClient25.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = okHttpClient25.getSslSocketFactory();
        okHttpClient15.sslSocketFactory = sSLSocketFactory27;
        java.lang.String[] strArray29 = sSLSocketFactory27.getDefaultCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory27;
        java.lang.String[] strArray31 = sSLSocketFactory27.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.net.Proxy proxy37 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress38 = proxy37.address();
        java.net.SocketAddress socketAddress39 = proxy37.address();
        okHttpClient32.proxy = proxy37;
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address44 = null;
        com.squareup.okhttp.Connection connection45 = connectionPool43.get(address44);
        int int46 = connectionPool43.getSpdyConnectionCount();
        connectionPool43.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient32.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ProxySelector proxySelector52 = okHttpClient49.proxySelector;
        java.net.ProxySelector proxySelector53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient49.setProxySelector(proxySelector53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient55.copyWithDefaults();
        java.net.ProxySelector proxySelector64 = okHttpClient63.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient63.getSslSocketFactory();
        okHttpClient49.sslSocketFactory = sSLSocketFactory65;
        okHttpClient32.sslSocketFactory = sSLSocketFactory65;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        okHttpClient68.hostnameVerifier = hostnameVerifier69;
        java.net.ResponseCache responseCache71 = null;
        okHttpClient68.responseCache = responseCache71;
        java.util.List<java.lang.String> strList73 = okHttpClient68.transports;
        com.squareup.okhttp.ConnectionPool connectionPool74 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient68.connectionPool = connectionPool74;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient68.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient77 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier78 = null;
        okHttpClient77.hostnameVerifier = hostnameVerifier78;
        java.net.ResponseCache responseCache80 = null;
        okHttpClient77.responseCache = responseCache80;
        java.util.List<java.lang.String> strList82 = okHttpClient77.transports;
        com.squareup.okhttp.ConnectionPool connectionPool83 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient77.connectionPool = connectionPool83;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient77.copyWithDefaults();
        java.net.ProxySelector proxySelector86 = okHttpClient85.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory87 = okHttpClient85.getSslSocketFactory();
        okHttpClient68.sslSocketFactory = sSLSocketFactory87;
        java.net.Socket socket89 = sSLSocketFactory87.createSocket();
        okHttpClient32.sslSocketFactory = sSLSocketFactory87;
        java.net.Socket socket91 = sSLSocketFactory87.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket95 = sSLSocketFactory27.createSocket(socket91, "DIRECT", (int) '#', false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(okResponseCache14);
        org.junit.Assert.assertNull(okAuthenticator16);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNotNull(okHttpClient25);
// flaky:         org.junit.Assert.assertNull(proxySelector26);
        org.junit.Assert.assertNotNull(sSLSocketFactory27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(proxy37);
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNull(socketAddress39);
        org.junit.Assert.assertNull(connection45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNotNull(okHttpClient63);
// flaky:         org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNotNull(sSLSocketFactory65);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNull(strList82);
        org.junit.Assert.assertNotNull(connectionPool83);
        org.junit.Assert.assertNotNull(okHttpClient85);
// flaky:         org.junit.Assert.assertNull(proxySelector86);
        org.junit.Assert.assertNotNull(sSLSocketFactory87);
        org.junit.Assert.assertNotNull(socket89);
        org.junit.Assert.assertEquals(socket89.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket91);
        org.junit.Assert.assertEquals(socket91.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.getSslSocketFactory();
        java.net.InetAddress inetAddress11 = null;
        java.net.InetAddress inetAddress13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket15 = sSLSocketFactory10.createSocket(inetAddress11, (int) ' ', inetAddress13, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler21 = okHttpClient0.cookieHandler;
        java.net.CookieHandler cookieHandler22 = null;
        okHttpClient0.cookieHandler = cookieHandler22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setConnectionPool(connectionPool33);
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient35.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator37 = okHttpClient35.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool40 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient35.connectionPool = connectionPool40;
        java.net.ResponseCache responseCache42 = okHttpClient35.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient35.sslSocketFactory;
        java.net.Proxy proxy44 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress45 = proxy44.address();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient35.setProxy(proxy44);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient(okHttpClient46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient48.copyWithDefaults();
        java.net.ProxySelector proxySelector57 = okHttpClient56.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory58 = okHttpClient56.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient46.setSSLSocketFactory(sSLSocketFactory58);
        java.lang.String[] strArray60 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray61 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray62 = sSLSocketFactory58.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory58;
        java.lang.Class<?> wildcardClass64 = okHttpClient0.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNull(okAuthenticator37);
        org.junit.Assert.assertNull(responseCache42);
        org.junit.Assert.assertNull(sSLSocketFactory43);
        org.junit.Assert.assertNotNull(proxy44);
        org.junit.Assert.assertNull(socketAddress45);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(okHttpClient56);
// flaky:         org.junit.Assert.assertNull(proxySelector57);
        org.junit.Assert.assertNotNull(sSLSocketFactory58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = okHttpClient0.proxySelector;
        java.net.ProxySelector proxySelector4 = null;
        okHttpClient0.proxySelector = proxySelector4;
        org.junit.Assert.assertNull(proxySelector3);
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.CookieHandler cookieHandler14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setCookieHandler(cookieHandler14);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient15);
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier19;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient13.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = okHttpClient13.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient23.hostnameVerifier;
        java.net.Proxy proxy29 = okHttpClient23.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool32 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient23.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.copyWithDefaults();
        java.net.Proxy proxy35 = okHttpClient34.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient34.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient13.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient12.setHostnameVerifier(hostnameVerifier36);
        boolean boolean39 = okHttpClient38.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.util.List<java.lang.String> strList48 = okHttpClient43.transports;
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.setConnectionPool(connectionPool49);
        com.squareup.okhttp.ConnectionPool connectionPool52 = okHttpClient51.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator53 = okHttpClient51.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool56 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient51.connectionPool = connectionPool56;
        java.net.ResponseCache responseCache58 = okHttpClient51.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory59 = okHttpClient51.sslSocketFactory;
        java.net.Proxy proxy60 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress61 = proxy60.address();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setProxy(proxy60);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient38.setProxy(proxy60);
        com.squareup.okhttp.ConnectionPool connectionPool66 = new com.squareup.okhttp.ConnectionPool((int) (short) 1, 10L);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient38.setConnectionPool(connectionPool66);
        com.squareup.okhttp.Connection connection68 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool66.recycle(connection68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNull(sSLSocketFactory22);
        org.junit.Assert.assertNull(hostnameVerifier28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(proxy35);
        org.junit.Assert.assertNotNull(hostnameVerifier36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(okAuthenticator53);
        org.junit.Assert.assertNull(responseCache58);
        org.junit.Assert.assertNull(sSLSocketFactory59);
        org.junit.Assert.assertNotNull(proxy60);
        org.junit.Assert.assertNull(socketAddress61);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(okHttpClient63);
        org.junit.Assert.assertNotNull(okHttpClient67);
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        java.util.Set<com.squareup.okhttp.Route> routeSet17 = okHttpClient0.failedRoutes;
        java.net.CookieHandler cookieHandler18 = null;
        okHttpClient0.cookieHandler = cookieHandler18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient32.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = okHttpClient32.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool37 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient32.connectionPool = connectionPool37;
        java.net.ResponseCache responseCache39 = okHttpClient32.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory40 = okHttpClient32.sslSocketFactory;
        java.net.Proxy proxy41 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress42 = proxy41.address();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.setProxy(proxy41);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient(okHttpClient43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient43.setSSLSocketFactory(sSLSocketFactory55);
        java.lang.String[] strArray57 = sSLSocketFactory55.getSupportedCipherSuites();
        java.lang.String[] strArray58 = sSLSocketFactory55.getSupportedCipherSuites();
        java.lang.String[] strArray59 = sSLSocketFactory55.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory55);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool62 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient61.connectionPool = connectionPool62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient(okHttpClient61);
        boolean boolean67 = okHttpClient61.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient(okHttpClient61);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ProxySelector proxySelector72 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient69.setProxySelector(proxySelector72);
        java.net.ResponseCache responseCache74 = null;
        okHttpClient73.responseCache = responseCache74;
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = okHttpClient73.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient73.copyWithDefaults();
        java.net.ResponseCache responseCache78 = okHttpClient77.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = new com.squareup.okhttp.OkHttpClient(okHttpClient77);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory80 = okHttpClient77.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient61.setSSLSocketFactory(sSLSocketFactory80);
        java.net.Socket socket82 = sSLSocketFactory80.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket86 = sSLSocketFactory55.createSocket(socket82, "", (int) '4', true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(routeSet17);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(okAuthenticator34);
        org.junit.Assert.assertNull(responseCache39);
        org.junit.Assert.assertNull(sSLSocketFactory40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNull(socketAddress42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNotNull(connectionPool62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(hostnameVerifier76);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertNull(responseCache78);
        org.junit.Assert.assertNotNull(sSLSocketFactory80);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(socket82);
        org.junit.Assert.assertEquals(socket82.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient15.setConnectionPool(connectionPool24);
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient15.connectionPool;
        int int28 = connectionPool27.getHttpConnectionCount();
        int int29 = connectionPool27.getHttpConnectionCount();
        okHttpClient11.connectionPool = connectionPool27;
        com.squareup.okhttp.Connection connection31 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool27.recycle(connection31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket24 = sSLSocketFactory19.createSocket("", (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        java.net.ProxySelector proxySelector10 = null;
        okHttpClient0.proxySelector = proxySelector10;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient12.setConnectionPool(connectionPool21);
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = okHttpClient23.getAuthenticator();
        java.net.ProxySelector proxySelector25 = okHttpClient23.getProxySelector();
        java.net.ResponseCache responseCache26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient23.setResponseCache(responseCache26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = okHttpClient28.hostnameVerifier;
        java.net.Proxy proxy34 = okHttpClient28.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache36 = okHttpClient35.okResponseCache();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient35.setResponseCache(responseCache37);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        okHttpClient35.transports = strList41;
        okHttpClient28.transports = strList41;
        okHttpClient23.transports = strList41;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList41;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(okAuthenticator24);
        org.junit.Assert.assertNull(proxySelector25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(hostnameVerifier33);
        org.junit.Assert.assertNull(proxy34);
        org.junit.Assert.assertNull(okResponseCache36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) '4');
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = null;
        okHttpClient0.proxy = proxy6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = null;
        okHttpClient0.connectionPool = connectionPool8;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        java.net.CookieHandler cookieHandler18 = okHttpClient10.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache19 = okHttpClient10.okResponseCache();
        java.net.CookieHandler cookieHandler20 = okHttpClient10.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient10);
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        boolean boolean24 = proxy22.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type25 = proxy22.type();
        java.net.SocketAddress socketAddress26 = proxy22.address();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient10.setProxy(proxy22);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.util.List<java.lang.String> strList33 = okHttpClient28.transports;
        com.squareup.okhttp.ConnectionPool connectionPool34 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient28.copyWithDefaults();
        java.net.ProxySelector proxySelector37 = okHttpClient36.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient36.getSslSocketFactory();
        okHttpClient27.sslSocketFactory = sSLSocketFactory38;
        java.lang.String[] strArray40 = sSLSocketFactory38.getDefaultCipherSuites();
        java.lang.String[] strArray41 = sSLSocketFactory38.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory38;
        java.lang.String[] strArray43 = sSLSocketFactory38.getDefaultCipherSuites();
        java.net.InetAddress inetAddress44 = null;
        java.net.InetAddress inetAddress46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket48 = sSLSocketFactory38.createSocket(inetAddress44, (int) '#', inetAddress46, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNull(cookieHandler18);
        org.junit.Assert.assertNull(okResponseCache19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress26);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(connectionPool34);
        org.junit.Assert.assertNotNull(okHttpClient36);
// flaky:         org.junit.Assert.assertNull(proxySelector37);
        org.junit.Assert.assertNotNull(sSLSocketFactory38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setResponseCache(responseCache8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.copyWithDefaults();
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient18.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient7.setSSLSocketFactory(sSLSocketFactory20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache30 = okHttpClient29.okResponseCache();
        java.net.ResponseCache responseCache31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient29.setResponseCache(responseCache31);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        okHttpClient29.transports = strList35;
        okHttpClient22.transports = strList35;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient22.sslSocketFactory;
        java.net.CookieHandler cookieHandler43 = okHttpClient22.cookieHandler;
        java.net.CookieHandler cookieHandler44 = null;
        okHttpClient22.cookieHandler = cookieHandler44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        java.util.List<java.lang.String> strList54 = okHttpClient49.transports;
        com.squareup.okhttp.ConnectionPool connectionPool55 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool55;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient46.setConnectionPool(connectionPool55);
        com.squareup.okhttp.ConnectionPool connectionPool58 = okHttpClient57.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator59 = okHttpClient57.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool62 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient57.connectionPool = connectionPool62;
        java.net.ResponseCache responseCache64 = okHttpClient57.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient57.sslSocketFactory;
        java.net.Proxy proxy66 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress67 = proxy66.address();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient57.setProxy(proxy66);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient(okHttpClient68);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = null;
        okHttpClient70.hostnameVerifier = hostnameVerifier71;
        java.net.ResponseCache responseCache73 = null;
        okHttpClient70.responseCache = responseCache73;
        java.util.List<java.lang.String> strList75 = okHttpClient70.transports;
        com.squareup.okhttp.ConnectionPool connectionPool76 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient70.connectionPool = connectionPool76;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient70.copyWithDefaults();
        java.net.ProxySelector proxySelector79 = okHttpClient78.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory80 = okHttpClient78.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient68.setSSLSocketFactory(sSLSocketFactory80);
        java.lang.String[] strArray82 = sSLSocketFactory80.getSupportedCipherSuites();
        java.lang.String[] strArray83 = sSLSocketFactory80.getSupportedCipherSuites();
        java.lang.String[] strArray84 = sSLSocketFactory80.getSupportedCipherSuites();
        okHttpClient22.sslSocketFactory = sSLSocketFactory80;
        okHttpClient21.sslSocketFactory = sSLSocketFactory80;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket89 = sSLSocketFactory80.createSocket("DIRECT", (int) '#');
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
// flaky:         org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNotNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNull(okResponseCache30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertNull(cookieHandler43);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(connectionPool55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNull(okAuthenticator59);
        org.junit.Assert.assertNull(responseCache64);
        org.junit.Assert.assertNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(proxy66);
        org.junit.Assert.assertNull(socketAddress67);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNull(strList75);
        org.junit.Assert.assertNotNull(connectionPool76);
        org.junit.Assert.assertNotNull(okHttpClient78);
// flaky:         org.junit.Assert.assertNull(proxySelector79);
        org.junit.Assert.assertNotNull(sSLSocketFactory80);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) 1);
        int int3 = connectionPool2.getConnectionCount();
        int int4 = connectionPool2.getSpdyConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        int int9 = connectionPool8.getHttpConnectionCount();
        int int10 = connectionPool8.getSpdyConnectionCount();
        int int11 = connectionPool8.getSpdyConnectionCount();
        com.squareup.okhttp.Connection connection12 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool8.maybeShare(connection12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient11.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        java.net.Proxy proxy23 = null;
        okHttpClient15.proxy = proxy23;
        boolean boolean25 = okHttpClient15.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient15.copyWithDefaults();
        java.net.CookieHandler cookieHandler27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setCookieHandler(cookieHandler27);
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient26.setProxy(proxy29);
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient26.authenticator;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient26.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient14.setHostnameVerifier(hostnameVerifier32);
        java.net.URL uRL34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection35 = okHttpClient33.open(uRL34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(hostnameVerifier12);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(okAuthenticator31);
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        org.junit.Assert.assertNotNull(okHttpClient33);
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        java.net.Proxy proxy11 = okHttpClient0.proxy;
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setCookieHandler(cookieHandler12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient14.hostnameVerifier;
        java.net.Proxy proxy20 = okHttpClient14.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool23 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient14.connectionPool = connectionPool23;
        java.util.List<java.lang.String> strList25 = okHttpClient14.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient14.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient14.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        okHttpClient30.hostnameVerifier = hostnameVerifier31;
        java.net.ProxySelector proxySelector33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient30.setProxySelector(proxySelector33);
        java.net.CookieHandler cookieHandler35 = okHttpClient30.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        java.net.Proxy proxy44 = null;
        okHttpClient36.proxy = proxy44;
        java.util.Set<com.squareup.okhttp.Route> routeSet46 = okHttpClient36.failedRoutes;
        okHttpClient30.failedRoutes = routeSet46;
        java.net.ProxySelector proxySelector48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient30.setProxySelector(proxySelector48);
        java.net.CookieHandler cookieHandler50 = okHttpClient30.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setConnectionPool(connectionPool60);
        java.net.Proxy proxy63 = okHttpClient62.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool65 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient64.connectionPool = connectionPool65;
        int int67 = connectionPool65.getSpdyConnectionCount();
        okHttpClient62.connectionPool = connectionPool65;
        int int69 = connectionPool65.getSpdyConnectionCount();
        int int70 = connectionPool65.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient30.setConnectionPool(connectionPool65);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = null;
        okHttpClient72.hostnameVerifier = hostnameVerifier73;
        java.net.ResponseCache responseCache75 = null;
        okHttpClient72.responseCache = responseCache75;
        java.util.List<java.lang.String> strList77 = okHttpClient72.transports;
        com.squareup.okhttp.ConnectionPool connectionPool78 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient72.connectionPool = connectionPool78;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient72.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient81 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier82 = null;
        okHttpClient81.hostnameVerifier = hostnameVerifier82;
        java.net.ResponseCache responseCache84 = null;
        okHttpClient81.responseCache = responseCache84;
        java.util.List<java.lang.String> strList86 = okHttpClient81.transports;
        com.squareup.okhttp.ConnectionPool connectionPool87 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient81.connectionPool = connectionPool87;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient81.copyWithDefaults();
        java.net.ProxySelector proxySelector90 = okHttpClient89.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory91 = okHttpClient89.getSslSocketFactory();
        okHttpClient72.sslSocketFactory = sSLSocketFactory91;
        okHttpClient30.sslSocketFactory = sSLSocketFactory91;
        java.lang.String[] strArray94 = sSLSocketFactory91.getSupportedCipherSuites();
        java.lang.String[] strArray95 = sSLSocketFactory91.getSupportedCipherSuites();
        okHttpClient29.sslSocketFactory = sSLSocketFactory91;
        okHttpClient13.sslSocketFactory = sSLSocketFactory91;
        okHttpClient13.followProtocolRedirects = false;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(cookieHandler35);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(routeSet46);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNull(cookieHandler50);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNull(proxy63);
        org.junit.Assert.assertNotNull(connectionPool65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(strList77);
        org.junit.Assert.assertNotNull(connectionPool78);
        org.junit.Assert.assertNotNull(okHttpClient80);
        org.junit.Assert.assertNull(strList86);
        org.junit.Assert.assertNotNull(connectionPool87);
        org.junit.Assert.assertNotNull(okHttpClient89);
// flaky:         org.junit.Assert.assertNull(proxySelector90);
        org.junit.Assert.assertNotNull(sSLSocketFactory91);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(strArray95);
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.ResponseCache responseCache7 = okHttpClient0.getResponseCache();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        java.util.List<java.lang.String> strList17 = okHttpClient12.transports;
        com.squareup.okhttp.ConnectionPool connectionPool18 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient9.setConnectionPool(connectionPool18);
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient9.connectionPool;
        okHttpClient0.connectionPool = connectionPool21;
        com.squareup.okhttp.Connection connection23 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool21.maybeShare(connection23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(responseCache7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(connectionPool21);
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.ProxySelector proxySelector8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setProxySelector(proxySelector8);
        java.net.ResponseCache responseCache10 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool11 = okHttpClient0.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        java.util.List<java.lang.String> strList17 = okHttpClient12.transports;
        com.squareup.okhttp.ConnectionPool connectionPool18 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient21.copyWithDefaults();
        java.net.ProxySelector proxySelector30 = okHttpClient29.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = okHttpClient29.getSslSocketFactory();
        okHttpClient12.sslSocketFactory = sSLSocketFactory31;
        java.net.Socket socket33 = sSLSocketFactory31.createSocket();
        java.net.Socket socket34 = sSLSocketFactory31.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory31;
        java.net.Socket socket36 = sSLSocketFactory31.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.net.Proxy proxy42 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress43 = proxy42.address();
        java.net.SocketAddress socketAddress44 = proxy42.address();
        okHttpClient37.proxy = proxy42;
        com.squareup.okhttp.ConnectionPool connectionPool48 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address49 = null;
        com.squareup.okhttp.Connection connection50 = connectionPool48.get(address49);
        int int51 = connectionPool48.getSpdyConnectionCount();
        connectionPool48.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient37.setConnectionPool(connectionPool48);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ProxySelector proxySelector57 = okHttpClient54.proxySelector;
        java.net.ProxySelector proxySelector58 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient54.setProxySelector(proxySelector58);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        okHttpClient60.hostnameVerifier = hostnameVerifier61;
        java.net.ResponseCache responseCache63 = null;
        okHttpClient60.responseCache = responseCache63;
        java.util.List<java.lang.String> strList65 = okHttpClient60.transports;
        com.squareup.okhttp.ConnectionPool connectionPool66 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient60.connectionPool = connectionPool66;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient60.copyWithDefaults();
        java.net.ProxySelector proxySelector69 = okHttpClient68.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory70 = okHttpClient68.getSslSocketFactory();
        okHttpClient54.sslSocketFactory = sSLSocketFactory70;
        okHttpClient37.sslSocketFactory = sSLSocketFactory70;
        java.lang.String[] strArray73 = sSLSocketFactory70.getSupportedCipherSuites();
        java.lang.String[] strArray74 = sSLSocketFactory70.getDefaultCipherSuites();
        java.net.Socket socket75 = sSLSocketFactory70.createSocket();
        java.io.InputStream inputStream76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket78 = sSLSocketFactory31.createSocket(socket75, inputStream76, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(responseCache10);
        org.junit.Assert.assertNull(connectionPool11);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(okHttpClient29);
// flaky:         org.junit.Assert.assertNull(proxySelector30);
        org.junit.Assert.assertNotNull(sSLSocketFactory31);
        org.junit.Assert.assertNotNull(socket33);
        org.junit.Assert.assertEquals(socket33.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket34);
        org.junit.Assert.assertEquals(socket34.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket36);
        org.junit.Assert.assertEquals(socket36.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(proxy42);
        org.junit.Assert.assertNull(socketAddress43);
        org.junit.Assert.assertNull(socketAddress44);
        org.junit.Assert.assertNull(connection50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNull(proxySelector57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNotNull(connectionPool66);
        org.junit.Assert.assertNotNull(okHttpClient68);
// flaky:         org.junit.Assert.assertNull(proxySelector69);
        org.junit.Assert.assertNotNull(sSLSocketFactory70);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(socket75);
        org.junit.Assert.assertEquals(socket75.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        int int3 = connectionPool2.getSpdyConnectionCount();
        int int4 = connectionPool2.getHttpConnectionCount();
        int int5 = connectionPool2.getHttpConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.ConnectionPool connectionPool19 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (short) 0);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient15.setConnectionPool(connectionPool19);
        com.squareup.okhttp.Connection connection21 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool19.maybeShare(connection21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient20);
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient4.proxySelector = proxySelector9;
        com.squareup.okhttp.ConnectionPool connectionPool13 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient4.setConnectionPool(connectionPool13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient15.setConnectionPool(connectionPool24);
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = okHttpClient26.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool31 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient26.connectionPool = connectionPool31;
        java.net.ResponseCache responseCache33 = okHttpClient26.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient26.sslSocketFactory;
        java.net.Proxy proxy35 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress36 = proxy35.address();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient26.setProxy(proxy35);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient26.setSSLSocketFactory(sSLSocketFactory38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = okHttpClient40.hostnameVerifier;
        java.net.Proxy proxy46 = okHttpClient40.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool49 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient40.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.copyWithDefaults();
        java.net.ResponseCache responseCache52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setResponseCache(responseCache52);
        com.squareup.okhttp.OkAuthenticator okAuthenticator54 = okHttpClient51.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient26.setAuthenticator(okAuthenticator54);
        java.net.Proxy proxy56 = okHttpClient55.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient14.setProxy(proxy56);
        boolean boolean58 = okHttpClient14.followProtocolRedirects;
        com.squareup.okhttp.ConnectionPool connectionPool59 = okHttpClient14.getConnectionPool();
        com.squareup.okhttp.Connection connection60 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool59.recycle(connection60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNull(okAuthenticator28);
        org.junit.Assert.assertNull(responseCache33);
        org.junit.Assert.assertNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(proxy35);
        org.junit.Assert.assertNull(socketAddress36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(hostnameVerifier45);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(okAuthenticator54);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(proxy56);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(connectionPool59);
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.CookieHandler cookieHandler26 = okHttpClient18.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient18.okResponseCache();
        java.net.CookieHandler cookieHandler28 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy30);
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient36.copyWithDefaults();
        boolean boolean42 = okHttpClient36.getFollowProtocolRedirects();
        com.squareup.okhttp.ConnectionPool connectionPool43 = okHttpClient36.connectionPool;
        com.squareup.okhttp.Address address44 = null;
        com.squareup.okhttp.Connection connection45 = connectionPool43.get(address44);
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNull(connection45);
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList12 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient17.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient14.setConnectionPool(connectionPool23);
        com.squareup.okhttp.ConnectionPool connectionPool26 = okHttpClient25.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator27 = okHttpClient25.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool30 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient25.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        java.net.CookieHandler cookieHandler40 = okHttpClient32.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache41 = okHttpClient32.okResponseCache();
        java.net.CookieHandler cookieHandler42 = okHttpClient32.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        java.net.Proxy proxy44 = java.net.Proxy.NO_PROXY;
        boolean boolean46 = proxy44.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type47 = proxy44.type();
        java.net.SocketAddress socketAddress48 = proxy44.address();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient32.setProxy(proxy44);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient25.setProxy(proxy44);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient0.setProxy(proxy44);
        java.net.ProxySelector proxySelector52 = null;
        okHttpClient51.proxySelector = proxySelector52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        java.net.CookieHandler cookieHandler62 = okHttpClient54.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache63 = okHttpClient54.okResponseCache();
        java.net.CookieHandler cookieHandler64 = okHttpClient54.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient(okHttpClient54);
        java.net.Proxy proxy66 = java.net.Proxy.NO_PROXY;
        boolean boolean68 = proxy66.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type69 = proxy66.type();
        java.net.SocketAddress socketAddress70 = proxy66.address();
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient54.setProxy(proxy66);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = null;
        okHttpClient72.hostnameVerifier = hostnameVerifier73;
        java.net.ResponseCache responseCache75 = null;
        okHttpClient72.responseCache = responseCache75;
        java.util.List<java.lang.String> strList77 = okHttpClient72.transports;
        com.squareup.okhttp.ConnectionPool connectionPool78 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient72.connectionPool = connectionPool78;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient72.copyWithDefaults();
        java.net.ProxySelector proxySelector81 = okHttpClient80.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory82 = okHttpClient80.getSslSocketFactory();
        okHttpClient71.sslSocketFactory = sSLSocketFactory82;
        java.lang.String[] strArray84 = sSLSocketFactory82.getDefaultCipherSuites();
        java.lang.String[] strArray85 = sSLSocketFactory82.getSupportedCipherSuites();
        okHttpClient51.sslSocketFactory = sSLSocketFactory82;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket89 = sSLSocketFactory82.createSocket("", 10);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNotNull(connectionPool26);
        org.junit.Assert.assertNull(okAuthenticator27);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(okResponseCache41);
        org.junit.Assert.assertNull(cookieHandler42);
        org.junit.Assert.assertNotNull(proxy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type47.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress48);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNull(cookieHandler62);
        org.junit.Assert.assertNull(okResponseCache63);
        org.junit.Assert.assertNull(cookieHandler64);
        org.junit.Assert.assertNotNull(proxy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type69.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress70);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(strList77);
        org.junit.Assert.assertNotNull(connectionPool78);
        org.junit.Assert.assertNotNull(okHttpClient80);
// flaky:         org.junit.Assert.assertNull(proxySelector81);
        org.junit.Assert.assertNotNull(sSLSocketFactory82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.util.List<java.lang.String> strList21 = okHttpClient0.transports;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient0.okResponseCache();
        boolean boolean23 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        java.net.CookieHandler cookieHandler32 = okHttpClient24.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient24.okResponseCache();
        java.net.CookieHandler cookieHandler34 = okHttpClient24.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        java.net.Proxy proxy36 = java.net.Proxy.NO_PROXY;
        boolean boolean38 = proxy36.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type39 = proxy36.type();
        java.net.SocketAddress socketAddress40 = proxy36.address();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient24.setProxy(proxy36);
        java.lang.String[] strArray43 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        okHttpClient24.transports = strList44;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient24.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool50 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient49.setConnectionPool(connectionPool58);
        com.squareup.okhttp.ConnectionPool connectionPool61 = okHttpClient60.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator62 = okHttpClient60.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool65 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient60.connectionPool = connectionPool65;
        java.net.ResponseCache responseCache67 = okHttpClient60.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient60.sslSocketFactory;
        java.net.Proxy proxy69 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress70 = proxy69.address();
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient60.setProxy(proxy69);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient(okHttpClient71);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        okHttpClient73.hostnameVerifier = hostnameVerifier74;
        java.net.ResponseCache responseCache76 = null;
        okHttpClient73.responseCache = responseCache76;
        java.util.List<java.lang.String> strList78 = okHttpClient73.transports;
        com.squareup.okhttp.ConnectionPool connectionPool79 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient73.connectionPool = connectionPool79;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient73.copyWithDefaults();
        java.net.ProxySelector proxySelector82 = okHttpClient81.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory83 = okHttpClient81.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient71.setSSLSocketFactory(sSLSocketFactory83);
        com.squareup.okhttp.OkHttpClient okHttpClient85 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier86 = null;
        okHttpClient85.hostnameVerifier = hostnameVerifier86;
        java.net.ProxySelector proxySelector88 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient85.setProxySelector(proxySelector88);
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient89.copyWithDefaults();
        java.net.ProxySelector proxySelector91 = null;
        okHttpClient90.proxySelector = proxySelector91;
        com.squareup.okhttp.OkAuthenticator okAuthenticator93 = okHttpClient90.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient71.setAuthenticator(okAuthenticator93);
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient24.setAuthenticator(okAuthenticator93);
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient0.setAuthenticator(okAuthenticator93);
        java.net.ResponseCache responseCache97 = okHttpClient96.responseCache;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNull(cookieHandler34);
        org.junit.Assert.assertNotNull(proxy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type39.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(connectionPool50);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNull(okAuthenticator62);
        org.junit.Assert.assertNull(responseCache67);
        org.junit.Assert.assertNull(sSLSocketFactory68);
        org.junit.Assert.assertNotNull(proxy69);
        org.junit.Assert.assertNull(socketAddress70);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(strList78);
        org.junit.Assert.assertNotNull(connectionPool79);
        org.junit.Assert.assertNotNull(okHttpClient81);
// flaky:         org.junit.Assert.assertNull(proxySelector82);
        org.junit.Assert.assertNotNull(sSLSocketFactory83);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okAuthenticator93);
        org.junit.Assert.assertNotNull(okHttpClient94);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNotNull(okHttpClient96);
        org.junit.Assert.assertNull(responseCache97);
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address26 = null;
        com.squareup.okhttp.Connection connection27 = connectionPool25.get(address26);
        int int28 = connectionPool25.getSpdyConnectionCount();
        connectionPool25.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient14.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = okHttpClient31.proxySelector;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient31.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient37.copyWithDefaults();
        java.net.ProxySelector proxySelector46 = okHttpClient45.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient45.getSslSocketFactory();
        okHttpClient31.sslSocketFactory = sSLSocketFactory47;
        okHttpClient14.sslSocketFactory = sSLSocketFactory47;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory47);
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket53 = sSLSocketFactory47.createSocket("DIRECT", (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNull(connection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
// flaky:         org.junit.Assert.assertNull(proxySelector46);
        org.junit.Assert.assertNotNull(sSLSocketFactory47);
        org.junit.Assert.assertNotNull(okHttpClient50);
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient32.copyWithDefaults();
        java.net.ProxySelector proxySelector41 = okHttpClient40.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient40.getSslSocketFactory();
        okHttpClient23.sslSocketFactory = sSLSocketFactory42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory42);
        java.net.InetAddress inetAddress45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket47 = sSLSocketFactory42.createSocket(inetAddress45, 10);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(okHttpClient40);
// flaky:         org.junit.Assert.assertNull(proxySelector41);
        org.junit.Assert.assertNotNull(sSLSocketFactory42);
        org.junit.Assert.assertNotNull(okHttpClient44);
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        java.net.CookieHandler cookieHandler4 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient5.hostnameVerifier;
        java.net.Proxy proxy11 = okHttpClient5.getProxy();
        java.net.CookieHandler cookieHandler12 = null;
        okHttpClient5.cookieHandler = cookieHandler12;
        okHttpClient5.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = okHttpClient16.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = okHttpClient16.sslSocketFactory;
        java.net.CookieHandler cookieHandler23 = okHttpClient16.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient16.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool26 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool26;
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = null;
        okHttpClient25.authenticator = okAuthenticator28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient25.responseCache = responseCache31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = okHttpClient33.hostnameVerifier;
        java.net.Proxy proxy39 = okHttpClient33.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool42 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient33.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient33.copyWithDefaults();
        java.net.Proxy proxy45 = okHttpClient44.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = okHttpClient44.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient25.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient16.setHostnameVerifier(hostnameVerifier46);
        okHttpClient5.hostnameVerifier = hostnameVerifier46;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient0.setHostnameVerifier(hostnameVerifier46);
        java.net.Proxy proxy51 = okHttpClient50.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient(okHttpClient50);
        java.util.List<java.lang.String> strList53 = okHttpClient50.getTransports();
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(cookieHandler4);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNull(hostnameVerifier21);
        org.junit.Assert.assertNull(sSLSocketFactory22);
        org.junit.Assert.assertNull(cookieHandler23);
        org.junit.Assert.assertNull(hostnameVerifier24);
        org.junit.Assert.assertNotNull(connectionPool26);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(hostnameVerifier38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNull(proxy45);
        org.junit.Assert.assertNotNull(hostnameVerifier46);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(proxy51);
        org.junit.Assert.assertNull(strList53);
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.CookieHandler cookieHandler26 = okHttpClient18.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient18.okResponseCache();
        java.net.CookieHandler cookieHandler28 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy30);
        java.net.Proxy proxy37 = okHttpClient11.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ProxySelector proxySelector43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient40.setProxySelector(proxySelector43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient44.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        okHttpClient47.hostnameVerifier = hostnameVerifier48;
        java.net.ProxySelector proxySelector50 = okHttpClient47.proxySelector;
        java.net.Proxy proxy51 = okHttpClient47.proxy;
        java.util.List<java.lang.String> strList52 = okHttpClient47.transports;
        boolean boolean53 = okHttpClient47.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool55 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.net.Proxy proxy59 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress60 = proxy59.address();
        java.net.SocketAddress socketAddress61 = proxy59.address();
        okHttpClient54.proxy = proxy59;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient47.setProxy(proxy59);
        okHttpClient45.proxy = proxy59;
        java.net.ProxySelector proxySelector65 = okHttpClient45.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = null;
        okHttpClient66.hostnameVerifier = hostnameVerifier67;
        java.net.ResponseCache responseCache69 = null;
        okHttpClient66.responseCache = responseCache69;
        java.util.List<java.lang.String> strList71 = okHttpClient66.transports;
        com.squareup.okhttp.ConnectionPool connectionPool72 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient66.connectionPool = connectionPool72;
        java.net.Proxy proxy74 = null;
        okHttpClient66.proxy = proxy74;
        boolean boolean76 = okHttpClient66.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = new com.squareup.okhttp.OkHttpClient(okHttpClient66);
        java.net.ProxySelector proxySelector78 = okHttpClient77.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = okHttpClient77.hostnameVerifier;
        java.net.Proxy proxy80 = java.net.Proxy.NO_PROXY;
        boolean boolean82 = proxy80.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type83 = proxy80.type();
        java.net.Proxy.Type type84 = proxy80.type();
        okHttpClient77.proxy = proxy80;
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient45.setProxy(proxy80);
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient11.setProxy(proxy80);
        com.squareup.okhttp.ConnectionPool connectionPool90 = new com.squareup.okhttp.ConnectionPool((int) (byte) -1, (long) (byte) 0);
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient87.setConnectionPool(connectionPool90);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache92 = okHttpClient91.okResponseCache();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(proxy37);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(proxySelector50);
        org.junit.Assert.assertNull(proxy51);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(connectionPool55);
        org.junit.Assert.assertNotNull(proxy59);
        org.junit.Assert.assertNull(socketAddress60);
        org.junit.Assert.assertNull(socketAddress61);
        org.junit.Assert.assertNotNull(okHttpClient63);
// flaky:         org.junit.Assert.assertNull(proxySelector65);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNotNull(connectionPool72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(proxySelector78);
        org.junit.Assert.assertNull(hostnameVerifier79);
        org.junit.Assert.assertNotNull(proxy80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + type83 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type83.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type84 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type84.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(okHttpClient87);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNull(okResponseCache92);
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = okHttpClient0.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool22 = okHttpClient0.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet23 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = null;
        okHttpClient0.authenticator = okAuthenticator24;
        java.net.URL uRL26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection27 = okHttpClient0.open(uRL26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNull(okAuthenticator21);
        org.junit.Assert.assertNull(connectionPool22);
        org.junit.Assert.assertNotNull(routeSet23);
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '4', (long) 'a');
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, 0L);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address26 = null;
        com.squareup.okhttp.Connection connection27 = connectionPool25.get(address26);
        int int28 = connectionPool25.getSpdyConnectionCount();
        connectionPool25.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient14.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = okHttpClient31.proxySelector;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient31.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient37.copyWithDefaults();
        java.net.ProxySelector proxySelector46 = okHttpClient45.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient45.getSslSocketFactory();
        okHttpClient31.sslSocketFactory = sSLSocketFactory47;
        okHttpClient14.sslSocketFactory = sSLSocketFactory47;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory47);
        java.net.InetAddress inetAddress51 = null;
        java.net.InetAddress inetAddress53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket55 = sSLSocketFactory47.createSocket(inetAddress51, 0, inetAddress53, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNull(connection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
// flaky:         org.junit.Assert.assertNull(proxySelector46);
        org.junit.Assert.assertNotNull(sSLSocketFactory47);
        org.junit.Assert.assertNotNull(okHttpClient50);
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient0.sslSocketFactory;
        java.net.ResponseCache responseCache14 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient0.connectionPool;
        java.net.ResponseCache responseCache16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setResponseCache(responseCache16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.setProxySelector(proxySelector21);
        java.net.CookieHandler cookieHandler23 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        java.net.Proxy proxy32 = null;
        okHttpClient24.proxy = proxy32;
        java.util.Set<com.squareup.okhttp.Route> routeSet34 = okHttpClient24.failedRoutes;
        okHttpClient18.failedRoutes = routeSet34;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient18.setHostnameVerifier(hostnameVerifier36);
        java.net.ProxySelector proxySelector38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient37.setProxySelector(proxySelector38);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient37.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient42.setConnectionPool(connectionPool51);
        java.net.Proxy proxy54 = okHttpClient53.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool56;
        int int58 = connectionPool56.getSpdyConnectionCount();
        okHttpClient53.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        okHttpClient60.hostnameVerifier = hostnameVerifier61;
        java.net.ResponseCache responseCache63 = null;
        okHttpClient60.responseCache = responseCache63;
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = okHttpClient60.hostnameVerifier;
        java.net.Proxy proxy66 = okHttpClient60.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool69 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient60.connectionPool = connectionPool69;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient60.copyWithDefaults();
        java.net.ResponseCache responseCache72 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient71.setResponseCache(responseCache72);
        com.squareup.okhttp.OkAuthenticator okAuthenticator74 = okHttpClient71.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient53.setAuthenticator(okAuthenticator74);
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient37.setAuthenticator(okAuthenticator74);
        okHttpClient17.authenticator = okAuthenticator74;
        java.net.URL uRL78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection79 = okHttpClient17.open(uRL78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNull(sSLSocketFactory13);
        org.junit.Assert.assertNull(responseCache14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(cookieHandler23);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(routeSet34);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNull(proxy54);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(hostnameVerifier65);
        org.junit.Assert.assertNull(proxy66);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNotNull(okAuthenticator74);
        org.junit.Assert.assertNotNull(okHttpClient75);
        org.junit.Assert.assertNotNull(okHttpClient76);
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient5.hostnameVerifier;
        java.net.Proxy proxy11 = okHttpClient5.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient5.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient5.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient16.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.copyWithDefaults();
        java.net.ProxySelector proxySelector28 = okHttpClient27.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient27.getSslSocketFactory();
        java.lang.String[] strArray30 = sSLSocketFactory29.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory29;
        java.net.Socket socket32 = sSLSocketFactory29.createSocket();
        java.net.InetAddress inetAddress35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket37 = sSLSocketFactory29.createSocket("", (int) 'a', inetAddress35, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(hostnameVerifier17);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
// flaky:         org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(socket32);
        org.junit.Assert.assertEquals(socket32.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.util.List<java.lang.String> strList6 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector9 = okHttpClient8.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        java.net.Proxy proxy16 = okHttpClient10.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool19 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient10.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient10.copyWithDefaults();
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient21.setResponseCache(responseCache22);
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setProxySelector(proxySelector24);
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = okHttpClient25.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.net.Proxy proxy32 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress33 = proxy32.address();
        java.net.SocketAddress socketAddress34 = proxy32.address();
        okHttpClient27.proxy = proxy32;
        com.squareup.okhttp.ConnectionPool connectionPool38 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address39 = null;
        com.squareup.okhttp.Connection connection40 = connectionPool38.get(address39);
        int int41 = connectionPool38.getSpdyConnectionCount();
        connectionPool38.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient27.setConnectionPool(connectionPool38);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ProxySelector proxySelector47 = okHttpClient44.proxySelector;
        java.net.ProxySelector proxySelector48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient44.setProxySelector(proxySelector48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        java.util.List<java.lang.String> strList55 = okHttpClient50.transports;
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient50.copyWithDefaults();
        java.net.ProxySelector proxySelector59 = okHttpClient58.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory60 = okHttpClient58.getSslSocketFactory();
        okHttpClient44.sslSocketFactory = sSLSocketFactory60;
        okHttpClient27.sslSocketFactory = sSLSocketFactory60;
        java.lang.String[] strArray63 = sSLSocketFactory60.getSupportedCipherSuites();
        java.lang.String[] strArray64 = sSLSocketFactory60.getDefaultCipherSuites();
        java.net.Socket socket65 = sSLSocketFactory60.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient25.setSSLSocketFactory(sSLSocketFactory60);
        okHttpClient8.sslSocketFactory = sSLSocketFactory60;
        java.net.URL uRL68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection69 = okHttpClient8.open(uRL68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(proxy16);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNotNull(okAuthenticator26);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(proxy32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNull(connection40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(proxySelector47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNotNull(okHttpClient58);
// flaky:         org.junit.Assert.assertNull(proxySelector59);
        org.junit.Assert.assertNotNull(sSLSocketFactory60);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(socket65);
        org.junit.Assert.assertEquals(socket65.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient66);
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        com.squareup.okhttp.Address address14 = null;
        com.squareup.okhttp.Connection connection15 = connectionPool12.get(address14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient5.setConnectionPool(connectionPool12);
        com.squareup.okhttp.Connection connection17 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool12.recycle(connection17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(connection15);
        org.junit.Assert.assertNotNull(okHttpClient16);
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient11.setAuthenticator(okAuthenticator39);
        java.net.Proxy proxy41 = okHttpClient40.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = okHttpClient40.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        java.net.ResponseCache responseCache49 = null;
        okHttpClient46.responseCache = responseCache49;
        java.util.List<java.lang.String> strList51 = okHttpClient46.transports;
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient43.setConnectionPool(connectionPool52);
        java.net.Proxy proxy55 = okHttpClient54.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient56.connectionPool = connectionPool57;
        int int59 = connectionPool57.getSpdyConnectionCount();
        okHttpClient54.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = okHttpClient61.hostnameVerifier;
        java.net.Proxy proxy67 = okHttpClient61.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool70 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient61.connectionPool = connectionPool70;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient61.copyWithDefaults();
        java.net.ResponseCache responseCache73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient72.setResponseCache(responseCache73);
        com.squareup.okhttp.OkAuthenticator okAuthenticator75 = okHttpClient72.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient54.setAuthenticator(okAuthenticator75);
        okHttpClient40.authenticator = okAuthenticator75;
        java.net.ResponseCache responseCache78 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient40.setResponseCache(responseCache78);
        com.squareup.okhttp.ConnectionPool connectionPool80 = okHttpClient40.getConnectionPool();
        java.net.ProxySelector proxySelector81 = null;
        okHttpClient40.proxySelector = proxySelector81;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNotNull(okAuthenticator42);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(hostnameVerifier66);
        org.junit.Assert.assertNull(proxy67);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okAuthenticator75);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNotNull(connectionPool80);
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) 'a', (long) 0);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.lang.String[] strArray19 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        okHttpClient0.transports = strList20;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.setConnectionPool(connectionPool27);
        java.net.CookieHandler cookieHandler29 = okHttpClient24.cookieHandler;
        java.util.Set<com.squareup.okhttp.Route> routeSet30 = okHttpClient24.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.setFollowProtocolRedirects(true);
        java.net.CookieHandler cookieHandler33 = okHttpClient32.cookieHandler;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(cookieHandler29);
        org.junit.Assert.assertNotNull(routeSet30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(cookieHandler33);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ProxySelector proxySelector15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.setProxySelector(proxySelector15);
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient12.hostnameVerifier;
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient12.setCookieHandler(cookieHandler18);
        java.net.ResponseCache responseCache20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setResponseCache(responseCache20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient22.copyWithDefaults();
        java.net.ProxySelector proxySelector31 = okHttpClient30.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = okHttpClient30.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient19.setSSLSocketFactory(sSLSocketFactory32);
        boolean boolean34 = proxy6.equals((java.lang.Object) sSLSocketFactory32);
        java.lang.String[] strArray35 = sSLSocketFactory32.getSupportedCipherSuites();
        java.net.InetAddress inetAddress36 = null;
        java.net.InetAddress inetAddress38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket40 = sSLSocketFactory32.createSocket(inetAddress36, (int) ' ', inetAddress38, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(hostnameVerifier17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(okHttpClient30);
// flaky:         org.junit.Assert.assertNull(proxySelector31);
        org.junit.Assert.assertNotNull(sSLSocketFactory32);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray35);
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.Proxy proxy15 = null;
        okHttpClient7.proxy = proxy15;
        boolean boolean17 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type24 = proxy21.type();
        java.net.Proxy.Type type25 = proxy21.type();
        okHttpClient18.proxy = proxy21;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient27.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient44.getSslSocketFactory();
        okHttpClient27.sslSocketFactory = sSLSocketFactory46;
        okHttpClient18.sslSocketFactory = sSLSocketFactory46;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory46);
        java.lang.String[] strArray50 = sSLSocketFactory46.getDefaultCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket53 = sSLSocketFactory46.createSocket("", 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type24.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
// flaky:         org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(strArray50);
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool12 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setConnectionPool(connectionPool12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        com.squareup.okhttp.ConnectionPool connectionPool22 = okHttpClient14.connectionPool;
        int int23 = connectionPool22.getHttpConnectionCount();
        com.squareup.okhttp.Address address24 = null;
        com.squareup.okhttp.Connection connection25 = connectionPool22.get(address24);
        okHttpClient13.connectionPool = connectionPool22;
        com.squareup.okhttp.Connection connection27 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool22.maybeShare(connection27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(connection25);
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address26 = null;
        com.squareup.okhttp.Connection connection27 = connectionPool25.get(address26);
        int int28 = connectionPool25.getSpdyConnectionCount();
        connectionPool25.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient14.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = okHttpClient31.proxySelector;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient31.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient37.copyWithDefaults();
        java.net.ProxySelector proxySelector46 = okHttpClient45.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient45.getSslSocketFactory();
        okHttpClient31.sslSocketFactory = sSLSocketFactory47;
        okHttpClient14.sslSocketFactory = sSLSocketFactory47;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory47);
        java.net.InetAddress inetAddress53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket55 = sSLSocketFactory47.createSocket("", (int) (short) 10, inetAddress53, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNull(connection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
// flaky:         org.junit.Assert.assertNull(proxySelector46);
        org.junit.Assert.assertNotNull(sSLSocketFactory47);
        org.junit.Assert.assertNotNull(okHttpClient50);
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        java.util.Set<com.squareup.okhttp.Route> routeSet10 = okHttpClient0.failedRoutes;
        java.util.Set<com.squareup.okhttp.Route> routeSet11 = okHttpClient0.failedRoutes;
        java.lang.Class<?> wildcardClass12 = routeSet11.getClass();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(routeSet10);
        org.junit.Assert.assertNotNull(routeSet11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.CookieHandler cookieHandler6 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.copyWithDefaults();
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection9 = okHttpClient0.open(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(cookieHandler6);
        org.junit.Assert.assertNotNull(okHttpClient7);
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        java.net.Proxy proxy23 = null;
        okHttpClient15.proxy = proxy23;
        boolean boolean25 = okHttpClient15.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient15.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.util.List<java.lang.String> strList33 = okHttpClient28.transports;
        com.squareup.okhttp.ConnectionPool connectionPool34 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool34;
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient28.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient15.setConnectionPool(connectionPool36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        java.util.List<java.lang.String> strList43 = okHttpClient38.transports;
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient38.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient38.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        okHttpClient47.hostnameVerifier = hostnameVerifier48;
        java.net.ResponseCache responseCache50 = null;
        okHttpClient47.responseCache = responseCache50;
        java.util.List<java.lang.String> strList52 = okHttpClient47.transports;
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient47.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient47.copyWithDefaults();
        java.net.ProxySelector proxySelector56 = okHttpClient55.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = okHttpClient55.getSslSocketFactory();
        okHttpClient38.sslSocketFactory = sSLSocketFactory57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient37.setSSLSocketFactory(sSLSocketFactory57);
        okHttpClient0.sslSocketFactory = sSLSocketFactory57;
        java.lang.String[] strArray61 = sSLSocketFactory57.getSupportedCipherSuites();
        java.lang.String[] strArray62 = sSLSocketFactory57.getDefaultCipherSuites();
        java.net.InetAddress inetAddress63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket65 = sSLSocketFactory57.createSocket(inetAddress63, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(connectionPool34);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(okHttpClient55);
// flaky:         org.junit.Assert.assertNull(proxySelector56);
        org.junit.Assert.assertNotNull(sSLSocketFactory57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(0, (long) (-1));
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        com.squareup.okhttp.Connection connection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(connection4);
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient4.okResponseCache();
        java.net.ResponseCache responseCache6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setResponseCache(responseCache6);
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        okHttpClient4.transports = strList10;
        okHttpClient0.transports = strList10;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        java.net.CookieHandler cookieHandler22 = okHttpClient14.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache23 = okHttpClient14.okResponseCache();
        java.net.CookieHandler cookieHandler24 = okHttpClient14.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        java.net.ResponseCache responseCache26 = okHttpClient14.responseCache;
        java.net.CookieHandler cookieHandler27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient14.setCookieHandler(cookieHandler27);
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        boolean boolean31 = proxy29.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient32.okResponseCache();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient32.setResponseCache(responseCache34);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        okHttpClient32.transports = strList38;
        boolean boolean41 = proxy29.equals((java.lang.Object) strList38);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList38;
        okHttpClient28.transports = strList38;
        okHttpClient0.transports = strList38;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache45 = okHttpClient0.okResponseCache();
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(cookieHandler22);
        org.junit.Assert.assertNull(okResponseCache23);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(responseCache26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(okResponseCache45);
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        java.net.ProxySelector proxySelector8 = okHttpClient4.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        java.net.Proxy proxy17 = null;
        okHttpClient9.proxy = proxy17;
        boolean boolean19 = okHttpClient9.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient9.copyWithDefaults();
        java.net.CookieHandler cookieHandler21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setCookieHandler(cookieHandler21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient23.hostnameVerifier;
        java.net.Proxy proxy29 = okHttpClient23.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool32 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient23.connectionPool = connectionPool32;
        boolean boolean34 = okHttpClient23.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient35.hostnameVerifier;
        java.net.Proxy proxy41 = okHttpClient35.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool44 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient35.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient35.copyWithDefaults();
        java.net.Proxy proxy47 = okHttpClient46.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = okHttpClient46.getHostnameVerifier();
        okHttpClient23.hostnameVerifier = hostnameVerifier48;
        okHttpClient20.hostnameVerifier = hostnameVerifier48;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient4.setHostnameVerifier(hostnameVerifier48);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        java.net.Proxy proxy60 = null;
        okHttpClient52.proxy = proxy60;
        boolean boolean62 = okHttpClient52.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient(okHttpClient52);
        java.net.ProxySelector proxySelector64 = okHttpClient63.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = okHttpClient63.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = okHttpClient63.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient67 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool68 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient67.connectionPool = connectionPool68;
        com.squareup.okhttp.OkAuthenticator okAuthenticator70 = null;
        okHttpClient67.authenticator = okAuthenticator70;
        java.net.CookieHandler cookieHandler72 = null;
        okHttpClient67.cookieHandler = cookieHandler72;
        java.net.Proxy proxy74 = java.net.Proxy.NO_PROXY;
        boolean boolean76 = proxy74.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache78 = okHttpClient77.okResponseCache();
        java.net.ResponseCache responseCache79 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient77.setResponseCache(responseCache79);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        okHttpClient77.transports = strList83;
        boolean boolean86 = proxy74.equals((java.lang.Object) strList83);
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient67.setProxy(proxy74);
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient63.setProxy(proxy74);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory89 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient63.setSSLSocketFactory(sSLSocketFactory89);
        com.squareup.okhttp.OkHttpClient okHttpClient91 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier92 = null;
        okHttpClient91.hostnameVerifier = hostnameVerifier92;
        java.util.Set<com.squareup.okhttp.Route> routeSet94 = okHttpClient91.failedRoutes;
        okHttpClient90.failedRoutes = routeSet94;
        okHttpClient51.failedRoutes = routeSet94;
        okHttpClient51.followProtocolRedirects = false;
        javax.net.ssl.HostnameVerifier hostnameVerifier99 = okHttpClient51.getHostnameVerifier();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNull(proxySelector8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(hostnameVerifier28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(hostnameVerifier40);
        org.junit.Assert.assertNull(proxy41);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(proxy47);
        org.junit.Assert.assertNotNull(hostnameVerifier48);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNull(hostnameVerifier65);
        org.junit.Assert.assertNull(hostnameVerifier66);
        org.junit.Assert.assertNotNull(connectionPool68);
        org.junit.Assert.assertNotNull(proxy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(okResponseCache78);
        org.junit.Assert.assertNotNull(okHttpClient80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(okHttpClient87);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(routeSet94);
        org.junit.Assert.assertNotNull(hostnameVerifier99);
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = null;
        okHttpClient21.authenticator = okAuthenticator24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.CookieHandler cookieHandler35 = okHttpClient27.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache36 = okHttpClient27.okResponseCache();
        java.net.CookieHandler cookieHandler37 = okHttpClient27.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient(okHttpClient27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient38.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator40 = okHttpClient38.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        java.net.CookieHandler cookieHandler49 = okHttpClient41.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache50 = okHttpClient41.okResponseCache();
        java.net.CookieHandler cookieHandler51 = okHttpClient41.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient(okHttpClient41);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ProxySelector proxySelector56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient53.setProxySelector(proxySelector56);
        java.net.CookieHandler cookieHandler58 = okHttpClient53.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        okHttpClient59.hostnameVerifier = hostnameVerifier60;
        java.net.ResponseCache responseCache62 = null;
        okHttpClient59.responseCache = responseCache62;
        java.util.List<java.lang.String> strList64 = okHttpClient59.transports;
        com.squareup.okhttp.ConnectionPool connectionPool65 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool65;
        java.net.Proxy proxy67 = null;
        okHttpClient59.proxy = proxy67;
        java.util.Set<com.squareup.okhttp.Route> routeSet69 = okHttpClient59.failedRoutes;
        okHttpClient53.failedRoutes = routeSet69;
        okHttpClient52.failedRoutes = routeSet69;
        okHttpClient38.failedRoutes = routeSet69;
        okHttpClient21.failedRoutes = routeSet69;
        okHttpClient19.failedRoutes = routeSet69;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient84 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier85 = null;
        okHttpClient84.hostnameVerifier = hostnameVerifier85;
        java.net.ResponseCache responseCache87 = null;
        okHttpClient84.responseCache = responseCache87;
        java.util.List<java.lang.String> strList89 = okHttpClient84.transports;
        com.squareup.okhttp.ConnectionPool connectionPool90 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient84.connectionPool = connectionPool90;
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient84.copyWithDefaults();
        java.net.ProxySelector proxySelector93 = okHttpClient92.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory94 = okHttpClient92.getSslSocketFactory();
        okHttpClient75.sslSocketFactory = sSLSocketFactory94;
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient19.setSSLSocketFactory(sSLSocketFactory94);
        java.net.CookieHandler cookieHandler97 = okHttpClient96.cookieHandler;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(cookieHandler35);
        org.junit.Assert.assertNull(okResponseCache36);
        org.junit.Assert.assertNull(cookieHandler37);
        org.junit.Assert.assertNull(sSLSocketFactory39);
        org.junit.Assert.assertNull(okAuthenticator40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNull(cookieHandler49);
        org.junit.Assert.assertNull(okResponseCache50);
        org.junit.Assert.assertNull(cookieHandler51);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNull(cookieHandler58);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(connectionPool65);
        org.junit.Assert.assertNotNull(routeSet69);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
        org.junit.Assert.assertNull(strList89);
        org.junit.Assert.assertNotNull(connectionPool90);
        org.junit.Assert.assertNotNull(okHttpClient92);
// flaky:         org.junit.Assert.assertNull(proxySelector93);
        org.junit.Assert.assertNotNull(sSLSocketFactory94);
        org.junit.Assert.assertNotNull(okHttpClient96);
        org.junit.Assert.assertNull(cookieHandler97);
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache12 = okHttpClient9.okResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient9.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache15 = okHttpClient14.okResponseCache();
        java.net.ResponseCache responseCache16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setResponseCache(responseCache16);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient14.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient14.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        boolean boolean23 = okHttpClient20.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler24 = okHttpClient20.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        okHttpClient20.authenticator = okAuthenticator39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient14.setAuthenticator(okAuthenticator39);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient9.setAuthenticator(okAuthenticator39);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ProxySelector proxySelector46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient43.setProxySelector(proxySelector46);
        java.net.CookieHandler cookieHandler48 = okHttpClient43.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        java.util.List<java.lang.String> strList54 = okHttpClient49.transports;
        com.squareup.okhttp.ConnectionPool connectionPool55 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool55;
        java.net.Proxy proxy57 = null;
        okHttpClient49.proxy = proxy57;
        java.util.Set<com.squareup.okhttp.Route> routeSet59 = okHttpClient49.failedRoutes;
        okHttpClient43.failedRoutes = routeSet59;
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient43.setHostnameVerifier(hostnameVerifier61);
        java.net.ProxySelector proxySelector63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient62.setProxySelector(proxySelector63);
        com.squareup.okhttp.ConnectionPool connectionPool67 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        okHttpClient62.connectionPool = connectionPool67;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient62.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory70 = okHttpClient69.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient9.setSSLSocketFactory(sSLSocketFactory70);
        java.lang.Class<?> wildcardClass72 = okHttpClient71.getClass();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okResponseCache12);
        org.junit.Assert.assertNull(connectionPool13);
        org.junit.Assert.assertNull(okResponseCache15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(sSLSocketFactory18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNull(cookieHandler48);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(connectionPool55);
        org.junit.Assert.assertNotNull(routeSet59);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(okHttpClient69);
        org.junit.Assert.assertNotNull(sSLSocketFactory70);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.ProxySelector proxySelector14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setProxySelector(proxySelector14);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient15.getSslSocketFactory();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient15.getSslSocketFactory();
        java.lang.String[] strArray18 = sSLSocketFactory17.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.copyWithDefaults();
        java.net.ProxySelector proxySelector28 = okHttpClient27.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient27.getSslSocketFactory();
        java.lang.String[] strArray30 = sSLSocketFactory29.getSupportedCipherSuites();
        java.net.Socket socket31 = sSLSocketFactory29.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket35 = sSLSocketFactory17.createSocket(socket31, "hi!", 10, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
        org.junit.Assert.assertNotNull(sSLSocketFactory17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
// flaky:         org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(socket31);
        org.junit.Assert.assertEquals(socket31.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.util.List<java.lang.String> strList21 = okHttpClient0.transports;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient0.okResponseCache();
        boolean boolean23 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        java.net.CookieHandler cookieHandler32 = okHttpClient24.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient24.okResponseCache();
        java.net.CookieHandler cookieHandler34 = okHttpClient24.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        java.net.Proxy proxy36 = java.net.Proxy.NO_PROXY;
        boolean boolean38 = proxy36.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type39 = proxy36.type();
        java.net.SocketAddress socketAddress40 = proxy36.address();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient24.setProxy(proxy36);
        java.lang.String[] strArray43 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        okHttpClient24.transports = strList44;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient24.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool50 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient49.setConnectionPool(connectionPool58);
        com.squareup.okhttp.ConnectionPool connectionPool61 = okHttpClient60.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator62 = okHttpClient60.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool65 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient60.connectionPool = connectionPool65;
        java.net.ResponseCache responseCache67 = okHttpClient60.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient60.sslSocketFactory;
        java.net.Proxy proxy69 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress70 = proxy69.address();
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient60.setProxy(proxy69);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient(okHttpClient71);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        okHttpClient73.hostnameVerifier = hostnameVerifier74;
        java.net.ResponseCache responseCache76 = null;
        okHttpClient73.responseCache = responseCache76;
        java.util.List<java.lang.String> strList78 = okHttpClient73.transports;
        com.squareup.okhttp.ConnectionPool connectionPool79 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient73.connectionPool = connectionPool79;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient73.copyWithDefaults();
        java.net.ProxySelector proxySelector82 = okHttpClient81.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory83 = okHttpClient81.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient71.setSSLSocketFactory(sSLSocketFactory83);
        com.squareup.okhttp.OkHttpClient okHttpClient85 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier86 = null;
        okHttpClient85.hostnameVerifier = hostnameVerifier86;
        java.net.ProxySelector proxySelector88 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient85.setProxySelector(proxySelector88);
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient89.copyWithDefaults();
        java.net.ProxySelector proxySelector91 = null;
        okHttpClient90.proxySelector = proxySelector91;
        com.squareup.okhttp.OkAuthenticator okAuthenticator93 = okHttpClient90.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient71.setAuthenticator(okAuthenticator93);
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient24.setAuthenticator(okAuthenticator93);
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient0.setAuthenticator(okAuthenticator93);
        java.net.Proxy proxy97 = okHttpClient0.getProxy();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNull(cookieHandler34);
        org.junit.Assert.assertNotNull(proxy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type39.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(connectionPool50);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNull(okAuthenticator62);
        org.junit.Assert.assertNull(responseCache67);
        org.junit.Assert.assertNull(sSLSocketFactory68);
        org.junit.Assert.assertNotNull(proxy69);
        org.junit.Assert.assertNull(socketAddress70);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(strList78);
        org.junit.Assert.assertNotNull(connectionPool79);
        org.junit.Assert.assertNotNull(okHttpClient81);
// flaky:         org.junit.Assert.assertNull(proxySelector82);
        org.junit.Assert.assertNotNull(sSLSocketFactory83);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okAuthenticator93);
        org.junit.Assert.assertNotNull(okHttpClient94);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNotNull(okHttpClient96);
        org.junit.Assert.assertNull(proxy97);
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.lang.String[] strArray64 = sSLSocketFactory61.getSupportedCipherSuites();
        java.net.InetAddress inetAddress67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket69 = sSLSocketFactory61.createSocket("", (int) ' ', inetAddress67, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(strArray64);
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        java.net.Socket socket22 = sSLSocketFactory19.createSocket();
        java.lang.String[] strArray23 = sSLSocketFactory19.getSupportedCipherSuites();
        java.net.Socket socket24 = sSLSocketFactory19.createSocket();
        java.net.InetAddress inetAddress25 = null;
        java.net.InetAddress inetAddress27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket29 = sSLSocketFactory19.createSocket(inetAddress25, 0, inetAddress27, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket22);
        org.junit.Assert.assertEquals(socket22.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(socket24);
        org.junit.Assert.assertEquals(socket24.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "DIRECT" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList3;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList3;
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) '4');
        okHttpClient0.connectionPool = connectionPool22;
        java.net.ProxySelector proxySelector24 = okHttpClient0.proxySelector;
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) (short) 100, (long) '#');
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient0.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(proxySelector24);
        org.junit.Assert.assertNotNull(okHttpClient28);
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        okHttpClient5.sslSocketFactory = sSLSocketFactory6;
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setResponseCache(responseCache8);
        java.net.ProxySelector proxySelector10 = okHttpClient9.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        java.net.CookieHandler cookieHandler19 = okHttpClient11.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient11.okResponseCache();
        java.net.CookieHandler cookieHandler21 = okHttpClient11.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.Proxy proxy23 = java.net.Proxy.NO_PROXY;
        boolean boolean25 = proxy23.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type26 = proxy23.type();
        java.net.SocketAddress socketAddress27 = proxy23.address();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient28.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient28.setSSLSocketFactory(sSLSocketFactory34);
        boolean boolean36 = proxy23.equals((java.lang.Object) okHttpClient28);
        java.net.SocketAddress socketAddress37 = proxy23.address();
        okHttpClient22.proxy = proxy23;
        okHttpClient9.proxy = proxy23;
        java.net.SocketAddress socketAddress40 = proxy23.address();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        java.net.Proxy proxy49 = null;
        okHttpClient41.proxy = proxy49;
        java.net.Proxy proxy51 = okHttpClient41.getProxy();
        java.net.ProxySelector proxySelector52 = null;
        okHttpClient41.proxySelector = proxySelector52;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache54 = okHttpClient41.okResponseCache();
        java.net.Proxy proxy55 = java.net.Proxy.NO_PROXY;
        boolean boolean57 = proxy55.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type58 = proxy55.type();
        java.lang.String str59 = proxy55.toString();
        java.net.Proxy.Type type60 = proxy55.type();
        java.net.Proxy.Type type61 = proxy55.type();
        okHttpClient41.proxy = proxy55;
        java.net.SocketAddress socketAddress63 = proxy55.address();
        java.net.Proxy.Type type64 = proxy55.type();
        boolean boolean65 = proxy23.equals((java.lang.Object) type64);
        java.net.SocketAddress socketAddress66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy67 = new java.net.Proxy(type64, socketAddress66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(proxySelector10);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNull(cookieHandler19);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNotNull(proxy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type26.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress27);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(socketAddress37);
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNull(proxy51);
        org.junit.Assert.assertNull(okResponseCache54);
        org.junit.Assert.assertNotNull(proxy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type58.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DIRECT" + "'", str59, "DIRECT");
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type60.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type61.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type64.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.lang.String[] strArray19 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        okHttpClient0.transports = strList20;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.setConnectionPool(connectionPool27);
        java.net.ProxySelector proxySelector29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient24.setProxySelector(proxySelector29);
        java.net.ProxySelector proxySelector31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setProxySelector(proxySelector31);
        java.net.ResponseCache responseCache33 = okHttpClient30.getResponseCache();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(responseCache33);
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.Proxy proxy8 = okHttpClient0.getProxy();
        boolean boolean9 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient10.setProxySelector(proxySelector11);
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient10.connectionPool;
        com.squareup.okhttp.Connection connection14 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool13.recycle(connection14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(proxy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNotNull(connectionPool13);
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory10;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient14.hostnameVerifier;
        java.net.Proxy proxy20 = okHttpClient14.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient21.okResponseCache();
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient21.setResponseCache(responseCache23);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        okHttpClient21.transports = strList27;
        okHttpClient14.transports = strList27;
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient14.sslSocketFactory;
        java.util.List<java.lang.String> strList35 = okHttpClient14.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList35;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient13.setTransports(strList35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(strList35);
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        okHttpClient0.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient11.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient11.sslSocketFactory;
        java.net.CookieHandler cookieHandler18 = okHttpClient11.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient11.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient20.connectionPool = connectionPool21;
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = null;
        okHttpClient20.authenticator = okAuthenticator23;
        java.util.List<java.lang.String> strList25 = okHttpClient20.transports;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient20.responseCache = responseCache26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = okHttpClient28.hostnameVerifier;
        java.net.Proxy proxy34 = okHttpClient28.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool37 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient28.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient28.copyWithDefaults();
        java.net.Proxy proxy40 = okHttpClient39.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient39.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient20.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient11.setHostnameVerifier(hostnameVerifier41);
        okHttpClient0.hostnameVerifier = hostnameVerifier41;
        boolean boolean45 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        java.net.ResponseCache responseCache49 = null;
        okHttpClient46.responseCache = responseCache49;
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = okHttpClient46.hostnameVerifier;
        java.net.Proxy proxy52 = okHttpClient46.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool55 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient46.connectionPool = connectionPool55;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient46.copyWithDefaults();
        java.util.List<java.lang.String> strList58 = okHttpClient46.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient46.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        okHttpClient60.hostnameVerifier = hostnameVerifier61;
        java.net.ProxySelector proxySelector63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient60.setProxySelector(proxySelector63);
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient64.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray66 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet67 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet67, routeArray66);
        okHttpClient65.failedRoutes = routeSet67;
        java.net.CookieHandler cookieHandler70 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient65.setCookieHandler(cookieHandler70);
        java.util.List<java.lang.String> strList72 = okHttpClient65.getTransports();
        okHttpClient59.transports = strList72;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient0.setTransports(strList72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNull(sSLSocketFactory17);
        org.junit.Assert.assertNull(cookieHandler18);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(hostnameVerifier33);
        org.junit.Assert.assertNull(proxy34);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(proxy40);
        org.junit.Assert.assertNotNull(hostnameVerifier41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(hostnameVerifier51);
        org.junit.Assert.assertNull(proxy52);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(routeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNotNull(strList72);
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ProxySelector proxySelector19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient16.setProxySelector(proxySelector19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient20.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient22.setConnectionPool(connectionPool31);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient34.setProxySelector(proxySelector37);
        java.net.CookieHandler cookieHandler39 = okHttpClient34.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        java.net.Proxy proxy48 = null;
        okHttpClient40.proxy = proxy48;
        java.util.Set<com.squareup.okhttp.Route> routeSet50 = okHttpClient40.failedRoutes;
        okHttpClient34.failedRoutes = routeSet50;
        java.net.ProxySelector proxySelector52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient34.setProxySelector(proxySelector52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient34.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = okHttpClient55.hostnameVerifier;
        java.net.Proxy proxy61 = okHttpClient55.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool64 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient55.connectionPool = connectionPool64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient55.copyWithDefaults();
        java.net.Proxy proxy67 = okHttpClient66.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = okHttpClient66.getHostnameVerifier();
        okHttpClient34.hostnameVerifier = hostnameVerifier68;
        okHttpClient33.hostnameVerifier = hostnameVerifier68;
        okHttpClient21.hostnameVerifier = hostnameVerifier68;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache72 = okHttpClient21.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient21.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool74 = okHttpClient73.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient0.setConnectionPool(connectionPool74);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory76 = okHttpClient0.getSslSocketFactory();
        java.net.Proxy proxy77 = okHttpClient0.proxy;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(cookieHandler39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(routeSet50);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(hostnameVerifier60);
        org.junit.Assert.assertNull(proxy61);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(proxy67);
        org.junit.Assert.assertNotNull(hostnameVerifier68);
        org.junit.Assert.assertNull(okResponseCache72);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertNotNull(okHttpClient75);
        org.junit.Assert.assertNull(sSLSocketFactory76);
        org.junit.Assert.assertNull(proxy77);
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory18);
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient11.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient32.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = okHttpClient32.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool37 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient32.connectionPool = connectionPool37;
        java.net.ResponseCache responseCache39 = okHttpClient32.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool42 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        okHttpClient32.connectionPool = connectionPool42;
        com.squareup.okhttp.ConnectionPool connectionPool46 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, 0L);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient32.setConnectionPool(connectionPool46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ProxySelector proxySelector51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient48.setProxySelector(proxySelector51);
        java.net.ResponseCache responseCache53 = null;
        okHttpClient52.responseCache = responseCache53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        java.net.CookieHandler cookieHandler63 = okHttpClient55.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache64 = okHttpClient55.okResponseCache();
        java.net.CookieHandler cookieHandler65 = okHttpClient55.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient(okHttpClient55);
        java.net.Proxy proxy67 = java.net.Proxy.NO_PROXY;
        boolean boolean69 = proxy67.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type70 = proxy67.type();
        java.net.SocketAddress socketAddress71 = proxy67.address();
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient55.setProxy(proxy67);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        okHttpClient73.hostnameVerifier = hostnameVerifier74;
        java.net.ResponseCache responseCache76 = null;
        okHttpClient73.responseCache = responseCache76;
        java.util.List<java.lang.String> strList78 = okHttpClient73.transports;
        com.squareup.okhttp.ConnectionPool connectionPool79 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient73.connectionPool = connectionPool79;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient73.copyWithDefaults();
        java.net.ProxySelector proxySelector82 = okHttpClient81.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory83 = okHttpClient81.getSslSocketFactory();
        okHttpClient72.sslSocketFactory = sSLSocketFactory83;
        java.lang.String[] strArray85 = sSLSocketFactory83.getDefaultCipherSuites();
        java.lang.String[] strArray86 = sSLSocketFactory83.getSupportedCipherSuites();
        java.net.Socket socket87 = sSLSocketFactory83.createSocket();
        okHttpClient52.sslSocketFactory = sSLSocketFactory83;
        okHttpClient32.sslSocketFactory = sSLSocketFactory83;
        okHttpClient11.sslSocketFactory = sSLSocketFactory83;
        java.net.InetAddress inetAddress93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket95 = sSLSocketFactory83.createSocket("DIRECT", 1, inetAddress93, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(okAuthenticator34);
        org.junit.Assert.assertNull(responseCache39);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNull(cookieHandler63);
        org.junit.Assert.assertNull(okResponseCache64);
        org.junit.Assert.assertNull(cookieHandler65);
        org.junit.Assert.assertNotNull(proxy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type70.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress71);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNull(strList78);
        org.junit.Assert.assertNotNull(connectionPool79);
        org.junit.Assert.assertNotNull(okHttpClient81);
// flaky:         org.junit.Assert.assertNull(proxySelector82);
        org.junit.Assert.assertNotNull(sSLSocketFactory83);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(socket87);
        org.junit.Assert.assertEquals(socket87.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        java.net.ProxySelector proxySelector9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setProxySelector(proxySelector9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        java.net.Proxy proxy19 = null;
        okHttpClient11.proxy = proxy19;
        boolean boolean21 = okHttpClient11.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache23 = okHttpClient22.okResponseCache();
        java.net.ResponseCache responseCache24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient22.setResponseCache(responseCache24);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        okHttpClient22.transports = strList28;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = okHttpClient33.hostnameVerifier;
        java.net.Proxy proxy39 = okHttpClient33.getProxy();
        java.net.CookieHandler cookieHandler40 = null;
        okHttpClient33.cookieHandler = cookieHandler40;
        okHttpClient33.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = okHttpClient44.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient44.sslSocketFactory;
        java.net.CookieHandler cookieHandler51 = okHttpClient44.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = okHttpClient44.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient53.connectionPool = connectionPool54;
        com.squareup.okhttp.OkAuthenticator okAuthenticator56 = null;
        okHttpClient53.authenticator = okAuthenticator56;
        java.util.List<java.lang.String> strList58 = okHttpClient53.transports;
        java.net.ResponseCache responseCache59 = null;
        okHttpClient53.responseCache = responseCache59;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = okHttpClient61.hostnameVerifier;
        java.net.Proxy proxy67 = okHttpClient61.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool70 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient61.connectionPool = connectionPool70;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient61.copyWithDefaults();
        java.net.Proxy proxy73 = okHttpClient72.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = okHttpClient72.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient53.setHostnameVerifier(hostnameVerifier74);
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient44.setHostnameVerifier(hostnameVerifier74);
        okHttpClient33.hostnameVerifier = hostnameVerifier74;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient22.setHostnameVerifier(hostnameVerifier74);
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient11.setHostnameVerifier(hostnameVerifier74);
        okHttpClient10.hostnameVerifier = hostnameVerifier74;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(okResponseCache23);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(hostnameVerifier38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNull(hostnameVerifier49);
        org.junit.Assert.assertNull(sSLSocketFactory50);
        org.junit.Assert.assertNull(cookieHandler51);
        org.junit.Assert.assertNull(hostnameVerifier52);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(hostnameVerifier66);
        org.junit.Assert.assertNull(proxy67);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNull(proxy73);
        org.junit.Assert.assertNotNull(hostnameVerifier74);
        org.junit.Assert.assertNotNull(okHttpClient75);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNotNull(okHttpClient79);
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 0, (long) ' ');
        int int3 = connectionPool2.getSpdyConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        java.net.Proxy proxy19 = null;
        okHttpClient11.proxy = proxy19;
        boolean boolean21 = okHttpClient11.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.ProxySelector proxySelector23 = okHttpClient22.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient22.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient22.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool27;
        com.squareup.okhttp.OkAuthenticator okAuthenticator29 = null;
        okHttpClient26.authenticator = okAuthenticator29;
        java.net.CookieHandler cookieHandler31 = null;
        okHttpClient26.cookieHandler = cookieHandler31;
        java.net.Proxy proxy33 = java.net.Proxy.NO_PROXY;
        boolean boolean35 = proxy33.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache37 = okHttpClient36.okResponseCache();
        java.net.ResponseCache responseCache38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setResponseCache(responseCache38);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        okHttpClient36.transports = strList42;
        boolean boolean45 = proxy33.equals((java.lang.Object) strList42);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient26.setProxy(proxy33);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient22.setProxy(proxy33);
        java.lang.String str48 = proxy33.toString();
        java.net.Proxy.Type type49 = proxy33.type();
        java.net.SocketAddress socketAddress50 = proxy33.address();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient0.setProxy(proxy33);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.net.Proxy proxy57 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress58 = proxy57.address();
        java.net.SocketAddress socketAddress59 = proxy57.address();
        okHttpClient52.proxy = proxy57;
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address64 = null;
        com.squareup.okhttp.Connection connection65 = connectionPool63.get(address64);
        int int66 = connectionPool63.getSpdyConnectionCount();
        connectionPool63.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient52.setConnectionPool(connectionPool63);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ProxySelector proxySelector72 = okHttpClient69.proxySelector;
        java.net.ProxySelector proxySelector73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient69.setProxySelector(proxySelector73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        okHttpClient69.sslSocketFactory = sSLSocketFactory85;
        okHttpClient52.sslSocketFactory = sSLSocketFactory85;
        java.lang.String[] strArray88 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray89 = sSLSocketFactory85.getSupportedCipherSuites();
        java.net.Socket socket90 = sSLSocketFactory85.createSocket();
        java.net.Socket socket91 = sSLSocketFactory85.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory85;
        java.net.Socket socket93 = sSLSocketFactory85.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket96 = sSLSocketFactory85.createSocket("DIRECT", (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(proxySelector23);
        org.junit.Assert.assertNull(hostnameVerifier24);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(proxy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(okResponseCache37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DIRECT" + "'", str48, "DIRECT");
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type49.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress50);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(proxy57);
        org.junit.Assert.assertNull(socketAddress58);
        org.junit.Assert.assertNull(socketAddress59);
        org.junit.Assert.assertNull(connection65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNull(proxySelector72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(socket90);
        org.junit.Assert.assertEquals(socket90.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket91);
        org.junit.Assert.assertEquals(socket91.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket93);
        org.junit.Assert.assertEquals(socket93.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        boolean boolean11 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient12.hostnameVerifier;
        java.net.Proxy proxy18 = okHttpClient12.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool21 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient12.connectionPool = connectionPool21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient12.copyWithDefaults();
        java.net.Proxy proxy24 = okHttpClient23.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient23.getHostnameVerifier();
        okHttpClient0.hostnameVerifier = hostnameVerifier25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        boolean boolean37 = okHttpClient27.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient27.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.ConnectionPool connectionPool48 = okHttpClient40.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient27.setConnectionPool(connectionPool48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        java.util.List<java.lang.String> strList55 = okHttpClient50.transports;
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient50.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        okHttpClient59.hostnameVerifier = hostnameVerifier60;
        java.net.ResponseCache responseCache62 = null;
        okHttpClient59.responseCache = responseCache62;
        java.util.List<java.lang.String> strList64 = okHttpClient59.transports;
        com.squareup.okhttp.ConnectionPool connectionPool65 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient59.copyWithDefaults();
        java.net.ProxySelector proxySelector68 = okHttpClient67.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory69 = okHttpClient67.getSslSocketFactory();
        okHttpClient50.sslSocketFactory = sSLSocketFactory69;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient49.setSSLSocketFactory(sSLSocketFactory69);
        okHttpClient0.sslSocketFactory = sSLSocketFactory69;
        com.squareup.okhttp.OkAuthenticator okAuthenticator73 = okHttpClient0.authenticator;
        com.squareup.okhttp.ConnectionPool connectionPool74 = okHttpClient0.getConnectionPool();
        com.squareup.okhttp.Address address75 = null;
        com.squareup.okhttp.Connection connection76 = connectionPool74.get(address75);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(hostnameVerifier17);
        org.junit.Assert.assertNull(proxy18);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(hostnameVerifier25);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(connectionPool65);
        org.junit.Assert.assertNotNull(okHttpClient67);
// flaky:         org.junit.Assert.assertNull(proxySelector68);
        org.junit.Assert.assertNotNull(sSLSocketFactory69);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(okAuthenticator73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertNull(connection76);
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        com.squareup.okhttp.Address address14 = null;
        com.squareup.okhttp.Connection connection15 = connectionPool12.get(address14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient5.setConnectionPool(connectionPool12);
        java.net.ProxySelector proxySelector17 = okHttpClient16.proxySelector;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(connection15);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector17);
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = okHttpClient20.authenticator;
        java.net.ProxySelector proxySelector22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setProxySelector(proxySelector22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient23.copyWithDefaults();
        java.net.Proxy proxy25 = okHttpClient23.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient23.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        boolean boolean37 = okHttpClient27.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient(okHttpClient27);
        java.net.ProxySelector proxySelector39 = okHttpClient38.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient38.hostnameVerifier;
        java.net.Proxy proxy41 = java.net.Proxy.NO_PROXY;
        boolean boolean43 = proxy41.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type44 = proxy41.type();
        java.net.Proxy.Type type45 = proxy41.type();
        okHttpClient38.proxy = proxy41;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        okHttpClient47.hostnameVerifier = hostnameVerifier48;
        java.net.ResponseCache responseCache50 = null;
        okHttpClient47.responseCache = responseCache50;
        java.util.List<java.lang.String> strList52 = okHttpClient47.transports;
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient47.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient47.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = null;
        okHttpClient56.hostnameVerifier = hostnameVerifier57;
        java.net.ResponseCache responseCache59 = null;
        okHttpClient56.responseCache = responseCache59;
        java.util.List<java.lang.String> strList61 = okHttpClient56.transports;
        com.squareup.okhttp.ConnectionPool connectionPool62 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient56.connectionPool = connectionPool62;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient56.copyWithDefaults();
        java.net.ProxySelector proxySelector65 = okHttpClient64.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory66 = okHttpClient64.getSslSocketFactory();
        okHttpClient47.sslSocketFactory = sSLSocketFactory66;
        okHttpClient38.sslSocketFactory = sSLSocketFactory66;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient23.setSSLSocketFactory(sSLSocketFactory66);
        java.net.InetAddress inetAddress70 = null;
        java.net.InetAddress inetAddress72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket74 = sSLSocketFactory66.createSocket(inetAddress70, (int) (byte) 1, inetAddress72, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(okAuthenticator21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(proxy25);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(proxySelector39);
        org.junit.Assert.assertNull(hostnameVerifier40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type44.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type45.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNotNull(connectionPool62);
        org.junit.Assert.assertNotNull(okHttpClient64);
// flaky:         org.junit.Assert.assertNull(proxySelector65);
        org.junit.Assert.assertNotNull(sSLSocketFactory66);
        org.junit.Assert.assertNotNull(okHttpClient69);
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        java.util.List<java.lang.String> strList16 = okHttpClient13.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.net.Proxy proxy37 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress38 = proxy37.address();
        java.net.SocketAddress socketAddress39 = proxy37.address();
        okHttpClient32.proxy = proxy37;
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address44 = null;
        com.squareup.okhttp.Connection connection45 = connectionPool43.get(address44);
        int int46 = connectionPool43.getSpdyConnectionCount();
        connectionPool43.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient32.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ProxySelector proxySelector52 = okHttpClient49.proxySelector;
        java.net.ProxySelector proxySelector53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient49.setProxySelector(proxySelector53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient55.copyWithDefaults();
        java.net.ProxySelector proxySelector64 = okHttpClient63.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient63.getSslSocketFactory();
        okHttpClient49.sslSocketFactory = sSLSocketFactory65;
        okHttpClient32.sslSocketFactory = sSLSocketFactory65;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient31.setSSLSocketFactory(sSLSocketFactory65);
        java.net.Socket socket69 = sSLSocketFactory65.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory65);
        java.net.InetAddress inetAddress71 = null;
        java.net.InetAddress inetAddress73 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket75 = sSLSocketFactory65.createSocket(inetAddress71, 0, inetAddress73, 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(proxy37);
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNull(socketAddress39);
        org.junit.Assert.assertNull(connection45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNotNull(okHttpClient63);
// flaky:         org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNotNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(socket69);
        org.junit.Assert.assertEquals(socket69.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient70);
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ResponseCache responseCache11 = null;
        okHttpClient8.responseCache = responseCache11;
        java.util.List<java.lang.String> strList13 = okHttpClient8.transports;
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient8.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool14);
        com.squareup.okhttp.Connection connection17 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool14.recycle(connection17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNotNull(okHttpClient16);
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.setConnectionPool(connectionPool20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        java.net.CookieHandler cookieHandler30 = okHttpClient22.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache31 = okHttpClient22.okResponseCache();
        java.net.CookieHandler cookieHandler32 = okHttpClient22.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        java.net.Proxy proxy34 = java.net.Proxy.NO_PROXY;
        boolean boolean36 = proxy34.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type37 = proxy34.type();
        java.net.SocketAddress socketAddress38 = proxy34.address();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient22.setProxy(proxy34);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector49 = okHttpClient48.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient48.getSslSocketFactory();
        okHttpClient39.sslSocketFactory = sSLSocketFactory50;
        java.lang.String[] strArray52 = sSLSocketFactory50.getDefaultCipherSuites();
        java.lang.String[] strArray53 = sSLSocketFactory50.getSupportedCipherSuites();
        java.net.Socket socket54 = sSLSocketFactory50.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient21.setSSLSocketFactory(sSLSocketFactory50);
        java.lang.String[] strArray56 = sSLSocketFactory50.getSupportedCipherSuites();
        java.net.Socket socket57 = sSLSocketFactory50.createSocket();
        java.net.InetAddress inetAddress58 = null;
        java.net.InetAddress inetAddress60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket62 = sSLSocketFactory50.createSocket(inetAddress58, (int) (short) 10, inetAddress60, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNull(cookieHandler30);
        org.junit.Assert.assertNull(okResponseCache31);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNotNull(proxy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
// flaky:         org.junit.Assert.assertNull(proxySelector49);
        org.junit.Assert.assertNotNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(socket54);
        org.junit.Assert.assertEquals(socket54.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(socket57);
        org.junit.Assert.assertEquals(socket57.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool21 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        okHttpClient11.connectionPool = connectionPool21;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, 0L);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ProxySelector proxySelector30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient27.setProxySelector(proxySelector30);
        java.net.ResponseCache responseCache32 = null;
        okHttpClient31.responseCache = responseCache32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        java.net.CookieHandler cookieHandler42 = okHttpClient34.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache43 = okHttpClient34.okResponseCache();
        java.net.CookieHandler cookieHandler44 = okHttpClient34.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient(okHttpClient34);
        java.net.Proxy proxy46 = java.net.Proxy.NO_PROXY;
        boolean boolean48 = proxy46.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type49 = proxy46.type();
        java.net.SocketAddress socketAddress50 = proxy46.address();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient34.setProxy(proxy46);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient52.copyWithDefaults();
        java.net.ProxySelector proxySelector61 = okHttpClient60.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory62 = okHttpClient60.getSslSocketFactory();
        okHttpClient51.sslSocketFactory = sSLSocketFactory62;
        java.lang.String[] strArray64 = sSLSocketFactory62.getDefaultCipherSuites();
        java.lang.String[] strArray65 = sSLSocketFactory62.getSupportedCipherSuites();
        java.net.Socket socket66 = sSLSocketFactory62.createSocket();
        okHttpClient31.sslSocketFactory = sSLSocketFactory62;
        okHttpClient11.sslSocketFactory = sSLSocketFactory62;
        java.net.Socket socket69 = sSLSocketFactory62.createSocket();
        java.net.InetAddress inetAddress70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket72 = sSLSocketFactory62.createSocket(inetAddress70, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNull(cookieHandler42);
        org.junit.Assert.assertNull(okResponseCache43);
        org.junit.Assert.assertNull(cookieHandler44);
        org.junit.Assert.assertNotNull(proxy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type49.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress50);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNotNull(okHttpClient60);
// flaky:         org.junit.Assert.assertNull(proxySelector61);
        org.junit.Assert.assertNotNull(sSLSocketFactory62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(socket66);
        org.junit.Assert.assertEquals(socket66.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket69);
        org.junit.Assert.assertEquals(socket69.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.sslSocketFactory;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(cookieHandler6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.lang.String[] strArray36 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory34.getDefaultCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket41 = sSLSocketFactory34.createSocket("hi!", 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient13.connectionPool;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient13.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = okHttpClient16.hostnameVerifier;
        java.net.Proxy proxy22 = okHttpClient16.getProxy();
        java.net.CookieHandler cookieHandler23 = null;
        okHttpClient16.cookieHandler = cookieHandler23;
        okHttpClient16.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient27.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient27.sslSocketFactory;
        java.net.CookieHandler cookieHandler34 = okHttpClient27.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = okHttpClient27.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool37 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool37;
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = null;
        okHttpClient36.authenticator = okAuthenticator39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient36.responseCache = responseCache42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = okHttpClient44.hostnameVerifier;
        java.net.Proxy proxy50 = okHttpClient44.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool53 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient44.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient44.copyWithDefaults();
        java.net.Proxy proxy56 = okHttpClient55.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = okHttpClient55.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient36.setHostnameVerifier(hostnameVerifier57);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient27.setHostnameVerifier(hostnameVerifier57);
        okHttpClient16.hostnameVerifier = hostnameVerifier57;
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = okHttpClient16.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ResponseCache responseCache65 = null;
        okHttpClient62.responseCache = responseCache65;
        java.util.List<java.lang.String> strList67 = okHttpClient62.transports;
        java.net.Proxy proxy68 = java.net.Proxy.NO_PROXY;
        boolean boolean70 = proxy68.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type71 = proxy68.type();
        java.net.SocketAddress socketAddress72 = proxy68.address();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient62.setProxy(proxy68);
        java.net.SocketAddress socketAddress74 = proxy68.address();
        java.net.Proxy.Type type75 = proxy68.type();
        java.net.Proxy.Type type76 = proxy68.type();
        com.squareup.okhttp.OkHttpClient okHttpClient77 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier78 = null;
        okHttpClient77.hostnameVerifier = hostnameVerifier78;
        java.net.ResponseCache responseCache80 = null;
        okHttpClient77.responseCache = responseCache80;
        java.util.List<java.lang.String> strList82 = okHttpClient77.transports;
        com.squareup.okhttp.ConnectionPool connectionPool83 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient77.connectionPool = connectionPool83;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient77.getSslSocketFactory();
        java.net.CookieHandler cookieHandler86 = okHttpClient77.cookieHandler;
        boolean boolean87 = proxy68.equals((java.lang.Object) cookieHandler86);
        okHttpClient16.proxy = proxy68;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient13.setProxy(proxy68);
        java.net.SocketAddress socketAddress90 = proxy68.address();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNull(sSLSocketFactory15);
        org.junit.Assert.assertNull(hostnameVerifier21);
        org.junit.Assert.assertNull(proxy22);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(sSLSocketFactory33);
        org.junit.Assert.assertNull(cookieHandler34);
        org.junit.Assert.assertNull(hostnameVerifier35);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(hostnameVerifier49);
        org.junit.Assert.assertNull(proxy50);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNull(proxy56);
        org.junit.Assert.assertNotNull(hostnameVerifier57);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(hostnameVerifier61);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(proxy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type71.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress72);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(socketAddress74);
        org.junit.Assert.assertTrue("'" + type75 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type75.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type76.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList82);
        org.junit.Assert.assertNotNull(connectionPool83);
        org.junit.Assert.assertNull(sSLSocketFactory85);
        org.junit.Assert.assertNull(cookieHandler86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNull(socketAddress90);
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient11.hostnameVerifier;
        java.util.List<java.lang.String> strList13 = okHttpClient11.transports;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.ResponseCache responseCache17 = okHttpClient11.responseCache;
        java.net.Proxy proxy18 = okHttpClient11.getProxy();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(hostnameVerifier12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(responseCache17);
        org.junit.Assert.assertNull(proxy18);
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setResponseCache(responseCache22);
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient23.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector30 = okHttpClient29.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient31.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient31.setConnectionPool(connectionPool40);
        com.squareup.okhttp.ConnectionPool connectionPool43 = okHttpClient42.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator44 = okHttpClient42.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool47 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient42.connectionPool = connectionPool47;
        java.net.ResponseCache responseCache49 = okHttpClient42.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient42.sslSocketFactory;
        java.net.Proxy proxy51 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress52 = proxy51.address();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient42.setProxy(proxy51);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient42.setSSLSocketFactory(sSLSocketFactory54);
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = null;
        okHttpClient56.hostnameVerifier = hostnameVerifier57;
        java.net.ResponseCache responseCache59 = null;
        okHttpClient56.responseCache = responseCache59;
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = okHttpClient56.hostnameVerifier;
        java.net.Proxy proxy62 = okHttpClient56.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool65 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient56.connectionPool = connectionPool65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient56.copyWithDefaults();
        java.net.ResponseCache responseCache68 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient67.setResponseCache(responseCache68);
        com.squareup.okhttp.OkAuthenticator okAuthenticator70 = okHttpClient67.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient42.setAuthenticator(okAuthenticator70);
        java.net.Proxy proxy72 = okHttpClient71.getProxy();
        java.net.Proxy.Type type73 = proxy72.type();
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient29.setProxy(proxy72);
        okHttpClient29.followProtocolRedirects = true;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(routeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(okHttpClient29);
// flaky:         org.junit.Assert.assertNull(proxySelector30);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNull(okAuthenticator44);
        org.junit.Assert.assertNull(responseCache49);
        org.junit.Assert.assertNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(proxy51);
        org.junit.Assert.assertNull(socketAddress52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNull(hostnameVerifier61);
        org.junit.Assert.assertNull(proxy62);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(okHttpClient69);
        org.junit.Assert.assertNotNull(okAuthenticator70);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNotNull(proxy72);
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type73.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(okHttpClient74);
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient11.setAuthenticator(okAuthenticator39);
        java.net.Proxy proxy41 = okHttpClient40.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = okHttpClient40.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        java.net.ResponseCache responseCache49 = null;
        okHttpClient46.responseCache = responseCache49;
        java.util.List<java.lang.String> strList51 = okHttpClient46.transports;
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient43.setConnectionPool(connectionPool52);
        java.net.Proxy proxy55 = okHttpClient54.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient56.connectionPool = connectionPool57;
        int int59 = connectionPool57.getSpdyConnectionCount();
        okHttpClient54.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = okHttpClient61.hostnameVerifier;
        java.net.Proxy proxy67 = okHttpClient61.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool70 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient61.connectionPool = connectionPool70;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient61.copyWithDefaults();
        java.net.ResponseCache responseCache73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient72.setResponseCache(responseCache73);
        com.squareup.okhttp.OkAuthenticator okAuthenticator75 = okHttpClient72.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient54.setAuthenticator(okAuthenticator75);
        okHttpClient40.authenticator = okAuthenticator75;
        java.net.ResponseCache responseCache78 = okHttpClient40.getResponseCache();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNotNull(okAuthenticator42);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(hostnameVerifier66);
        org.junit.Assert.assertNull(proxy67);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okAuthenticator75);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNull(responseCache78);
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkAuthenticator okAuthenticator14 = okHttpClient11.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        java.net.CookieHandler cookieHandler23 = okHttpClient15.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache24 = okHttpClient15.okResponseCache();
        java.net.CookieHandler cookieHandler25 = okHttpClient15.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        java.net.Proxy proxy27 = java.net.Proxy.NO_PROXY;
        boolean boolean29 = proxy27.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type30 = proxy27.type();
        java.net.SocketAddress socketAddress31 = proxy27.address();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient15.setProxy(proxy27);
        java.lang.String[] strArray34 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        okHttpClient15.transports = strList35;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient15.setFollowProtocolRedirects(false);
        com.squareup.okhttp.ConnectionPool connectionPool40 = okHttpClient39.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient11.setConnectionPool(connectionPool40);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okAuthenticator14);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNull(cookieHandler23);
        org.junit.Assert.assertNull(okResponseCache24);
        org.junit.Assert.assertNull(cookieHandler25);
        org.junit.Assert.assertNotNull(proxy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type30.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNotNull(okHttpClient41);
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient9.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy29 = okHttpClient28.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient0.setHostnameVerifier(hostnameVerifier30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        java.util.List<java.lang.String> strList40 = okHttpClient35.transports;
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient35.connectionPool = connectionPool41;
        com.squareup.okhttp.ConnectionPool connectionPool43 = okHttpClient35.connectionPool;
        boolean boolean44 = okHttpClient35.getFollowProtocolRedirects();
        com.squareup.okhttp.ConnectionPool connectionPool45 = okHttpClient35.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient32.setConnectionPool(connectionPool45);
        java.net.ResponseCache responseCache47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient46.setResponseCache(responseCache47);
        java.net.ResponseCache responseCache49 = okHttpClient48.responseCache;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNull(sSLSocketFactory34);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(responseCache49);
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setResponseCache(responseCache14);
        com.squareup.okhttp.ConnectionPool connectionPool18 = new com.squareup.okhttp.ConnectionPool((int) 'a', (long) (byte) -1);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setConnectionPool(connectionPool18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient32.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = okHttpClient32.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool37 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient32.connectionPool = connectionPool37;
        java.net.ResponseCache responseCache39 = okHttpClient32.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory40 = okHttpClient32.sslSocketFactory;
        java.net.Proxy proxy41 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress42 = proxy41.address();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.setProxy(proxy41);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient(okHttpClient43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient43.setSSLSocketFactory(sSLSocketFactory55);
        java.lang.String[] strArray57 = sSLSocketFactory55.getSupportedCipherSuites();
        java.lang.String[] strArray58 = sSLSocketFactory55.getSupportedCipherSuites();
        java.lang.String[] strArray59 = sSLSocketFactory55.getSupportedCipherSuites();
        okHttpClient15.sslSocketFactory = sSLSocketFactory55;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket63 = sSLSocketFactory55.createSocket("", (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(okAuthenticator34);
        org.junit.Assert.assertNull(responseCache39);
        org.junit.Assert.assertNull(sSLSocketFactory40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNull(socketAddress42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient5.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ProxySelector proxySelector10 = okHttpClient7.proxySelector;
        java.net.Proxy proxy11 = okHttpClient7.proxy;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        boolean boolean13 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient7.setProxy(proxy19);
        okHttpClient5.proxy = proxy19;
        java.net.ProxySelector proxySelector25 = okHttpClient5.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        java.net.Proxy proxy34 = null;
        okHttpClient26.proxy = proxy34;
        boolean boolean36 = okHttpClient26.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient(okHttpClient26);
        java.net.ProxySelector proxySelector38 = okHttpClient37.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = okHttpClient37.hostnameVerifier;
        java.net.Proxy proxy40 = java.net.Proxy.NO_PROXY;
        boolean boolean42 = proxy40.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type43 = proxy40.type();
        java.net.Proxy.Type type44 = proxy40.type();
        okHttpClient37.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient5.setProxy(proxy40);
        java.net.SocketAddress socketAddress47 = proxy40.address();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient6);
        org.junit.Assert.assertNull(proxySelector10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient23);
// flaky:         org.junit.Assert.assertNull(proxySelector25);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(proxySelector38);
        org.junit.Assert.assertNull(hostnameVerifier39);
        org.junit.Assert.assertNotNull(proxy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type43.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type44.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(socketAddress47);
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient7.getConnectionPool();
        boolean boolean9 = okHttpClient7.getFollowProtocolRedirects();
        java.lang.Class<?> wildcardClass10 = okHttpClient7.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache14 = okHttpClient11.okResponseCache();
        java.net.Proxy proxy15 = okHttpClient11.getProxy();
        java.net.CookieHandler cookieHandler16 = okHttpClient11.getCookieHandler();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(sSLSocketFactory12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(okResponseCache14);
        org.junit.Assert.assertNull(proxy15);
        org.junit.Assert.assertNull(cookieHandler16);
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.getSslSocketFactory();
        java.net.InetAddress inetAddress11 = null;
        java.net.InetAddress inetAddress13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket15 = sSLSocketFactory10.createSocket(inetAddress11, (int) ' ', inetAddress13, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.setConnectionPool(connectionPool22);
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        okHttpClient11.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient29.setConnectionPool(connectionPool38);
        java.net.ResponseCache responseCache41 = okHttpClient29.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient29.sslSocketFactory;
        java.net.CookieHandler cookieHandler43 = okHttpClient29.getCookieHandler();
        com.squareup.okhttp.OkAuthenticator okAuthenticator44 = okHttpClient29.authenticator;
        java.util.Set<com.squareup.okhttp.Route> routeSet45 = okHttpClient29.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient(okHttpClient29);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        okHttpClient47.hostnameVerifier = hostnameVerifier48;
        java.net.ResponseCache responseCache50 = null;
        okHttpClient47.responseCache = responseCache50;
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = okHttpClient47.hostnameVerifier;
        java.net.Proxy proxy53 = okHttpClient47.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool56 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient47.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient47.copyWithDefaults();
        java.net.ResponseCache responseCache59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient58.setResponseCache(responseCache59);
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = okHttpClient60.hostnameVerifier;
        okHttpClient46.hostnameVerifier = hostnameVerifier61;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient11.setHostnameVerifier(hostnameVerifier61);
        java.net.Proxy proxy64 = okHttpClient63.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient63.setFollowProtocolRedirects(true);
        com.squareup.okhttp.ConnectionPool connectionPool69 = new com.squareup.okhttp.ConnectionPool((-1), (long) (byte) -1);
        int int70 = connectionPool69.getSpdyConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient63.setConnectionPool(connectionPool69);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache72 = okHttpClient63.okResponseCache();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(responseCache41);
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertNull(cookieHandler43);
        org.junit.Assert.assertNull(okAuthenticator44);
        org.junit.Assert.assertNotNull(routeSet45);
        org.junit.Assert.assertNull(hostnameVerifier52);
        org.junit.Assert.assertNull(proxy53);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNotNull(hostnameVerifier61);
        org.junit.Assert.assertNotNull(okHttpClient63);
        org.junit.Assert.assertNull(proxy64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(okResponseCache72);
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.net.InetAddress inetAddress64 = null;
        java.net.InetAddress inetAddress66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket68 = sSLSocketFactory61.createSocket(inetAddress64, 0, inetAddress66, 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
        java.net.CookieHandler cookieHandler13 = okHttpClient11.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.CookieHandler cookieHandler15 = okHttpClient11.cookieHandler;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient11.sslSocketFactory;
        java.lang.Class<?> wildcardClass17 = sSLSocketFactory16.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(cookieHandler13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.lang.String[] strArray36 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory34.getSupportedCipherSuites();
        java.net.InetAddress inetAddress40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket42 = sSLSocketFactory34.createSocket("hi!", (int) 'a', inetAddress40, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        java.net.CookieHandler cookieHandler17 = okHttpClient9.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache18 = okHttpClient9.okResponseCache();
        java.net.CookieHandler cookieHandler19 = okHttpClient9.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient9);
        java.net.ResponseCache responseCache21 = okHttpClient9.responseCache;
        java.net.CookieHandler cookieHandler22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient9.setCookieHandler(cookieHandler22);
        java.net.Proxy proxy24 = java.net.Proxy.NO_PROXY;
        boolean boolean26 = proxy24.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache28 = okHttpClient27.okResponseCache();
        java.net.ResponseCache responseCache29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient27.setResponseCache(responseCache29);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        okHttpClient27.transports = strList33;
        boolean boolean36 = proxy24.equals((java.lang.Object) strList33);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList33;
        okHttpClient23.transports = strList33;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList33;
        okHttpClient0.transports = strList33;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(okResponseCache18);
        org.junit.Assert.assertNull(cookieHandler19);
        org.junit.Assert.assertNull(responseCache21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(proxy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(okResponseCache28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ProxySelector proxySelector6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient3.setProxySelector(proxySelector6);
        java.net.ResponseCache responseCache8 = null;
        okHttpClient7.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient7.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient7.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        int int22 = connectionPool21.getHttpConnectionCount();
        okHttpClient7.connectionPool = connectionPool21;
        boolean boolean24 = proxy0.equals((java.lang.Object) okHttpClient7);
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient7.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient7.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient7.getHostnameVerifier();
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(hostnameVerifier28);
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient11.responseCache = responseCache16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.net.Proxy proxy37 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress38 = proxy37.address();
        java.net.SocketAddress socketAddress39 = proxy37.address();
        okHttpClient32.proxy = proxy37;
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address44 = null;
        com.squareup.okhttp.Connection connection45 = connectionPool43.get(address44);
        int int46 = connectionPool43.getSpdyConnectionCount();
        connectionPool43.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient32.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ProxySelector proxySelector52 = okHttpClient49.proxySelector;
        java.net.ProxySelector proxySelector53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient49.setProxySelector(proxySelector53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient55.copyWithDefaults();
        java.net.ProxySelector proxySelector64 = okHttpClient63.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient63.getSslSocketFactory();
        okHttpClient49.sslSocketFactory = sSLSocketFactory65;
        okHttpClient32.sslSocketFactory = sSLSocketFactory65;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient31.setSSLSocketFactory(sSLSocketFactory65);
        okHttpClient11.sslSocketFactory = sSLSocketFactory65;
        java.net.InetAddress inetAddress70 = null;
        java.net.InetAddress inetAddress72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket74 = sSLSocketFactory65.createSocket(inetAddress70, (int) (byte) 100, inetAddress72, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(proxy37);
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNull(socketAddress39);
        org.junit.Assert.assertNull(connection45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNotNull(okHttpClient63);
// flaky:         org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNotNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(okHttpClient68);
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 1, (long) (byte) -1);
        int int3 = connectionPool2.getSpdyConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.setConnectionPool(connectionPool22);
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache28 = okHttpClient27.okResponseCache();
        java.net.ResponseCache responseCache29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient27.setResponseCache(responseCache29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache32 = okHttpClient31.okResponseCache();
        java.net.ResponseCache responseCache33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setResponseCache(responseCache33);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        okHttpClient31.transports = strList37;
        okHttpClient27.transports = strList37;
        okHttpClient26.transports = strList37;
        java.net.Proxy proxy42 = okHttpClient26.proxy;
        java.net.CookieHandler cookieHandler43 = okHttpClient26.getCookieHandler();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(okResponseCache28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(okResponseCache32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(proxy42);
        org.junit.Assert.assertNull(cookieHandler43);
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getDefaultCipherSuites();
        java.net.InetAddress inetAddress39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket41 = sSLSocketFactory33.createSocket("DIRECT", 0, inetAddress39, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        java.net.ResponseCache responseCache10 = okHttpClient0.responseCache;
        boolean boolean11 = okHttpClient0.getFollowProtocolRedirects();
        java.net.Proxy proxy12 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient0.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection17 = okHttpClient0.open(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNull(responseCache10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNotNull(okHttpClient15);
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket7 = socketFactory0.createSocket("hi!", 1, inetAddress5, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setFollowProtocolRedirects(false);
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setResponseCache(responseCache23);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory25 = okHttpClient22.sslSocketFactory;
        java.util.List<java.lang.String> strList26 = okHttpClient22.transports;
        boolean boolean27 = okHttpClient22.followProtocolRedirects;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(sSLSocketFactory25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool16;
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = null;
        okHttpClient15.authenticator = okAuthenticator18;
        java.net.CookieHandler cookieHandler20 = null;
        okHttpClient15.cookieHandler = cookieHandler20;
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        boolean boolean24 = proxy22.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache26 = okHttpClient25.okResponseCache();
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient25.setResponseCache(responseCache27);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        okHttpClient25.transports = strList31;
        boolean boolean34 = proxy22.equals((java.lang.Object) strList31);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient15.setProxy(proxy22);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy22);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient38.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        java.net.CookieHandler cookieHandler48 = okHttpClient40.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache49 = okHttpClient40.okResponseCache();
        java.net.CookieHandler cookieHandler50 = okHttpClient40.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient(okHttpClient40);
        java.net.ResponseCache responseCache52 = okHttpClient40.responseCache;
        java.net.CookieHandler cookieHandler53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient40.setCookieHandler(cookieHandler53);
        java.net.Proxy proxy55 = java.net.Proxy.NO_PROXY;
        boolean boolean57 = proxy55.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache59 = okHttpClient58.okResponseCache();
        java.net.ResponseCache responseCache60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient58.setResponseCache(responseCache60);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        okHttpClient58.transports = strList64;
        boolean boolean67 = proxy55.equals((java.lang.Object) strList64);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList64;
        okHttpClient54.transports = strList64;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList64;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient38.setTransports((java.util.List<java.lang.String>) strList64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(okResponseCache26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(okAuthenticator39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNull(cookieHandler48);
        org.junit.Assert.assertNull(okResponseCache49);
        org.junit.Assert.assertNull(cookieHandler50);
        org.junit.Assert.assertNull(responseCache52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNotNull(proxy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(okResponseCache59);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.SocketAddress socketAddress3 = proxy0.address();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient5.hostnameVerifier;
        java.net.Proxy proxy11 = okHttpClient5.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient5.connectionPool = connectionPool14;
        java.util.List<java.lang.String> strList16 = okHttpClient5.transports;
        boolean boolean17 = proxy0.equals((java.lang.Object) okHttpClient5);
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(1, 0L);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient5.setConnectionPool(connectionPool20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = null;
        okHttpClient21.sslSocketFactory = sSLSocketFactory22;
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(socketAddress3);
        org.junit.Assert.assertNull(socketAddress4);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(okHttpClient21);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setFollowProtocolRedirects(true);
        java.net.URL uRL24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection25 = okHttpClient19.open(uRL24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient23);
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        boolean boolean9 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient10.sslSocketFactory;
        java.net.CookieHandler cookieHandler17 = okHttpClient10.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient10.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = null;
        okHttpClient19.authenticator = okAuthenticator22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient19.responseCache = responseCache25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient27.hostnameVerifier;
        java.net.Proxy proxy33 = okHttpClient27.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool36 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient27.connectionPool = connectionPool36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient27.copyWithDefaults();
        java.net.Proxy proxy39 = okHttpClient38.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient38.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient19.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient10.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient0.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.ConnectionPool connectionPool44 = okHttpClient0.getConnectionPool();
        int int45 = connectionPool44.getSpdyConnectionCount();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNotNull(hostnameVerifier40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.ConnectionPool connectionPool18 = okHttpClient0.getConnectionPool();
        connectionPool18.evictAll();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(connectionPool18);
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setProxySelector(proxySelector12);
        com.squareup.okhttp.OkAuthenticator okAuthenticator14 = okHttpClient11.getAuthenticator();
        java.lang.Class<?> wildcardClass15 = okAuthenticator14.getClass();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okAuthenticator14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        java.util.List<java.lang.String> strList16 = okHttpClient13.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.net.Proxy proxy37 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress38 = proxy37.address();
        java.net.SocketAddress socketAddress39 = proxy37.address();
        okHttpClient32.proxy = proxy37;
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address44 = null;
        com.squareup.okhttp.Connection connection45 = connectionPool43.get(address44);
        int int46 = connectionPool43.getSpdyConnectionCount();
        connectionPool43.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient32.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ProxySelector proxySelector52 = okHttpClient49.proxySelector;
        java.net.ProxySelector proxySelector53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient49.setProxySelector(proxySelector53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient55.copyWithDefaults();
        java.net.ProxySelector proxySelector64 = okHttpClient63.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient63.getSslSocketFactory();
        okHttpClient49.sslSocketFactory = sSLSocketFactory65;
        okHttpClient32.sslSocketFactory = sSLSocketFactory65;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient31.setSSLSocketFactory(sSLSocketFactory65);
        java.net.Socket socket69 = sSLSocketFactory65.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory65);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient70.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool74 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        int int75 = connectionPool74.getConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient70.setConnectionPool(connectionPool74);
        com.squareup.okhttp.Connection connection77 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool74.recycle(connection77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(proxy37);
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNull(socketAddress39);
        org.junit.Assert.assertNull(connection45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNotNull(okHttpClient63);
// flaky:         org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNotNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(socket69);
        org.junit.Assert.assertEquals(socket69.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(okHttpClient76);
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient4.okResponseCache();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = okHttpClient4.authenticator;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(okResponseCache6);
        org.junit.Assert.assertNull(okAuthenticator7);
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.util.List<java.lang.String> strList13 = okHttpClient11.transports;
        java.net.ProxySelector proxySelector14 = okHttpClient11.getProxySelector();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient11.getHostnameVerifier();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(proxySelector14);
        org.junit.Assert.assertNull(hostnameVerifier15);
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) 0);
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        org.junit.Assert.assertNull(connection4);
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        boolean boolean11 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient12.hostnameVerifier;
        java.net.Proxy proxy18 = okHttpClient12.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool21 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient12.connectionPool = connectionPool21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient12.copyWithDefaults();
        java.net.Proxy proxy24 = okHttpClient23.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient23.getHostnameVerifier();
        okHttpClient0.hostnameVerifier = hostnameVerifier25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        boolean boolean37 = okHttpClient27.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient27.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.ConnectionPool connectionPool48 = okHttpClient40.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient27.setConnectionPool(connectionPool48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        java.util.List<java.lang.String> strList55 = okHttpClient50.transports;
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient50.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        okHttpClient59.hostnameVerifier = hostnameVerifier60;
        java.net.ResponseCache responseCache62 = null;
        okHttpClient59.responseCache = responseCache62;
        java.util.List<java.lang.String> strList64 = okHttpClient59.transports;
        com.squareup.okhttp.ConnectionPool connectionPool65 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient59.copyWithDefaults();
        java.net.ProxySelector proxySelector68 = okHttpClient67.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory69 = okHttpClient67.getSslSocketFactory();
        okHttpClient50.sslSocketFactory = sSLSocketFactory69;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient49.setSSLSocketFactory(sSLSocketFactory69);
        okHttpClient0.sslSocketFactory = sSLSocketFactory69;
        java.net.InetAddress inetAddress75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket77 = sSLSocketFactory69.createSocket("", (int) (short) 100, inetAddress75, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(hostnameVerifier17);
        org.junit.Assert.assertNull(proxy18);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(hostnameVerifier25);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(connectionPool65);
        org.junit.Assert.assertNotNull(okHttpClient67);
// flaky:         org.junit.Assert.assertNull(proxySelector68);
        org.junit.Assert.assertNotNull(sSLSocketFactory69);
        org.junit.Assert.assertNotNull(okHttpClient71);
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.lang.String[] strArray30 = sSLSocketFactory28.getDefaultCipherSuites();
        java.lang.String[] strArray31 = sSLSocketFactory28.getSupportedCipherSuites();
        java.net.InetAddress inetAddress32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket34 = sSLSocketFactory28.createSocket(inetAddress32, 10);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        java.net.ResponseCache responseCache23 = null;
        okHttpClient20.responseCache = responseCache23;
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient20.hostnameVerifier;
        java.net.Proxy proxy26 = okHttpClient20.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool29 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient20.connectionPool = connectionPool29;
        boolean boolean31 = okHttpClient20.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = okHttpClient32.hostnameVerifier;
        java.net.Proxy proxy38 = okHttpClient32.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool41 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient32.connectionPool = connectionPool41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.copyWithDefaults();
        java.net.Proxy proxy44 = okHttpClient43.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = okHttpClient43.getHostnameVerifier();
        okHttpClient20.hostnameVerifier = hostnameVerifier45;
        okHttpClient11.hostnameVerifier = hostnameVerifier45;
        com.squareup.okhttp.ConnectionPool connectionPool48 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.Connection connection49 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool48.maybeShare(connection49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNull(proxy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(hostnameVerifier37);
        org.junit.Assert.assertNull(proxy38);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(proxy44);
        org.junit.Assert.assertNotNull(hostnameVerifier45);
        org.junit.Assert.assertNotNull(connectionPool48);
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.lang.String[] strArray19 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        okHttpClient0.transports = strList20;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        okHttpClient30.hostnameVerifier = hostnameVerifier31;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient30.responseCache = responseCache33;
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = okHttpClient30.hostnameVerifier;
        java.net.Proxy proxy36 = okHttpClient30.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool39 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient30.connectionPool = connectionPool39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient30.copyWithDefaults();
        java.net.ResponseCache responseCache42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient41.setResponseCache(responseCache42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient44.connectionPool = connectionPool45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        java.net.Proxy proxy49 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress50 = proxy49.address();
        java.net.SocketAddress socketAddress51 = proxy49.address();
        okHttpClient44.proxy = proxy49;
        com.squareup.okhttp.ConnectionPool connectionPool55 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address56 = null;
        com.squareup.okhttp.Connection connection57 = connectionPool55.get(address56);
        int int58 = connectionPool55.getSpdyConnectionCount();
        connectionPool55.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient44.setConnectionPool(connectionPool55);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ProxySelector proxySelector64 = okHttpClient61.proxySelector;
        java.net.ProxySelector proxySelector65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient61.setProxySelector(proxySelector65);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = null;
        okHttpClient67.hostnameVerifier = hostnameVerifier68;
        java.net.ResponseCache responseCache70 = null;
        okHttpClient67.responseCache = responseCache70;
        java.util.List<java.lang.String> strList72 = okHttpClient67.transports;
        com.squareup.okhttp.ConnectionPool connectionPool73 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient67.connectionPool = connectionPool73;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient67.copyWithDefaults();
        java.net.ProxySelector proxySelector76 = okHttpClient75.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory77 = okHttpClient75.getSslSocketFactory();
        okHttpClient61.sslSocketFactory = sSLSocketFactory77;
        okHttpClient44.sslSocketFactory = sSLSocketFactory77;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient43.setSSLSocketFactory(sSLSocketFactory77);
        okHttpClient24.sslSocketFactory = sSLSocketFactory77;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier83 = null;
        okHttpClient82.hostnameVerifier = hostnameVerifier83;
        java.net.ResponseCache responseCache85 = null;
        okHttpClient82.responseCache = responseCache85;
        java.util.List<java.lang.String> strList87 = okHttpClient82.transports;
        com.squareup.okhttp.ConnectionPool connectionPool88 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient82.connectionPool = connectionPool88;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient82.copyWithDefaults();
        boolean boolean91 = okHttpClient90.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory92 = okHttpClient90.sslSocketFactory;
        java.net.Socket socket93 = sSLSocketFactory92.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket97 = sSLSocketFactory77.createSocket(socket93, "hi!", 0, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNull(hostnameVerifier35);
        org.junit.Assert.assertNull(proxy36);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(proxy49);
        org.junit.Assert.assertNull(socketAddress50);
        org.junit.Assert.assertNull(socketAddress51);
        org.junit.Assert.assertNull(connection57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(connectionPool73);
        org.junit.Assert.assertNotNull(okHttpClient75);
// flaky:         org.junit.Assert.assertNull(proxySelector76);
        org.junit.Assert.assertNotNull(sSLSocketFactory77);
        org.junit.Assert.assertNotNull(okHttpClient80);
        org.junit.Assert.assertNull(strList87);
        org.junit.Assert.assertNotNull(connectionPool88);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory92);
        org.junit.Assert.assertNotNull(socket93);
        org.junit.Assert.assertEquals(socket93.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        java.lang.String[] strArray22 = sSLSocketFactory19.getDefaultCipherSuites();
        java.net.InetAddress inetAddress25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket27 = sSLSocketFactory19.createSocket("", (int) (short) -1, inetAddress25, 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket("", (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.lang.String[] strArray64 = sSLSocketFactory61.getSupportedCipherSuites();
        java.net.InetAddress inetAddress65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket67 = sSLSocketFactory61.createSocket(inetAddress65, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(strArray64);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkAuthenticator okAuthenticator14 = okHttpClient11.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient15.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        java.net.Proxy proxy29 = null;
        okHttpClient21.proxy = proxy29;
        java.util.Set<com.squareup.okhttp.Route> routeSet31 = okHttpClient21.failedRoutes;
        okHttpClient15.failedRoutes = routeSet31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient15.setHostnameVerifier(hostnameVerifier33);
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient34.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient34.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient39.setConnectionPool(connectionPool48);
        java.net.Proxy proxy51 = okHttpClient50.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool53;
        int int55 = connectionPool53.getSpdyConnectionCount();
        okHttpClient50.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        okHttpClient57.hostnameVerifier = hostnameVerifier58;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient57.responseCache = responseCache60;
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = okHttpClient57.hostnameVerifier;
        java.net.Proxy proxy63 = okHttpClient57.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool66 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient57.connectionPool = connectionPool66;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient57.copyWithDefaults();
        java.net.ResponseCache responseCache69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient68.setResponseCache(responseCache69);
        com.squareup.okhttp.OkAuthenticator okAuthenticator71 = okHttpClient68.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient50.setAuthenticator(okAuthenticator71);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient34.setAuthenticator(okAuthenticator71);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient11.setAuthenticator(okAuthenticator71);
        java.lang.Class<?> wildcardClass75 = okAuthenticator71.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okAuthenticator14);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(routeSet31);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(proxy51);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(hostnameVerifier62);
        org.junit.Assert.assertNull(proxy63);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNotNull(okAuthenticator71);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ProxySelector proxySelector39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.setProxySelector(proxySelector39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector42 = null;
        okHttpClient41.proxySelector = proxySelector42;
        com.squareup.okhttp.OkAuthenticator okAuthenticator44 = okHttpClient41.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient22.setAuthenticator(okAuthenticator44);
        java.lang.Class<?> wildcardClass46 = okHttpClient45.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okAuthenticator44);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address26 = null;
        com.squareup.okhttp.Connection connection27 = connectionPool25.get(address26);
        int int28 = connectionPool25.getSpdyConnectionCount();
        connectionPool25.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient14.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = okHttpClient31.proxySelector;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient31.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient37.copyWithDefaults();
        java.net.ProxySelector proxySelector46 = okHttpClient45.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient45.getSslSocketFactory();
        okHttpClient31.sslSocketFactory = sSLSocketFactory47;
        okHttpClient14.sslSocketFactory = sSLSocketFactory47;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory47);
        java.lang.String[] strArray51 = sSLSocketFactory47.getDefaultCipherSuites();
        java.net.Socket socket52 = sSLSocketFactory47.createSocket();
        java.net.Proxy proxy53 = java.net.Proxy.NO_PROXY;
        boolean boolean55 = proxy53.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type56 = proxy53.type();
        java.lang.String str57 = proxy53.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = null;
        okHttpClient58.hostnameVerifier = hostnameVerifier59;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient58.getSslSocketFactory();
        boolean boolean62 = proxy53.equals((java.lang.Object) okHttpClient58);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient58.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient58.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient64.getSslSocketFactory();
        java.net.Socket socket66 = sSLSocketFactory65.createSocket();
        java.io.InputStream inputStream67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket69 = sSLSocketFactory47.createSocket(socket66, inputStream67, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNull(connection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
// flaky:         org.junit.Assert.assertNull(proxySelector46);
        org.junit.Assert.assertNotNull(sSLSocketFactory47);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(socket52);
        org.junit.Assert.assertEquals(socket52.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(proxy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type56.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DIRECT" + "'", str57, "DIRECT");
        org.junit.Assert.assertNull(sSLSocketFactory61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(okHttpClient63);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(socket66);
        org.junit.Assert.assertEquals(socket66.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        okHttpClient5.sslSocketFactory = sSLSocketFactory6;
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setResponseCache(responseCache8);
        java.net.CookieHandler cookieHandler10 = okHttpClient9.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.copyWithDefaults();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(okHttpClient11);
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.Proxy proxy15 = null;
        okHttpClient7.proxy = proxy15;
        boolean boolean17 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type24 = proxy21.type();
        java.net.Proxy.Type type25 = proxy21.type();
        okHttpClient18.proxy = proxy21;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient27.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient44.getSslSocketFactory();
        okHttpClient27.sslSocketFactory = sSLSocketFactory46;
        okHttpClient18.sslSocketFactory = sSLSocketFactory46;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory46);
        java.net.InetAddress inetAddress50 = null;
        java.net.InetAddress inetAddress52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket54 = sSLSocketFactory46.createSocket(inetAddress50, 10, inetAddress52, 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type24.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
// flaky:         org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(okHttpClient49);
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(0, (long) (byte) 100);
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        com.squareup.okhttp.Connection connection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(connection4);
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.net.InetAddress inetAddress64 = null;
        java.net.InetAddress inetAddress66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket68 = sSLSocketFactory61.createSocket(inetAddress64, (int) (byte) -1, inetAddress66, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(100, (long) (byte) 100);
        connectionPool2.evictAll();
        com.squareup.okhttp.Address address4 = null;
        com.squareup.okhttp.Connection connection5 = connectionPool2.get(address4);
        org.junit.Assert.assertNull(connection5);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.util.List<java.lang.String> strList4 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient0.getConnectionPool();
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient0.authenticator;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(connectionPool5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(okAuthenticator8);
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier6;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        java.net.Proxy proxy16 = okHttpClient10.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool19 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient10.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient10.copyWithDefaults();
        java.net.Proxy proxy22 = okHttpClient21.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient21.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setHostnameVerifier(hostnameVerifier23);
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) 'a', (long) (byte) -1);
        connectionPool27.evictAll();
        okHttpClient24.connectionPool = connectionPool27;
        java.net.CookieHandler cookieHandler30 = okHttpClient24.cookieHandler;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNull(sSLSocketFactory9);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(proxy16);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(proxy22);
        org.junit.Assert.assertNotNull(hostnameVerifier23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(cookieHandler30);
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.lang.String[] strArray19 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        okHttpClient0.transports = strList20;
        java.net.CookieHandler cookieHandler23 = okHttpClient0.cookieHandler;
        java.net.ProxySelector proxySelector24 = okHttpClient0.proxySelector;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(cookieHandler23);
        org.junit.Assert.assertNull(proxySelector24);
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.getSslSocketFactory();
        java.lang.String[] strArray11 = sSLSocketFactory10.getSupportedCipherSuites();
        java.net.Socket socket12 = sSLSocketFactory10.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket15 = sSLSocketFactory10.createSocket("hi!", (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(socket12);
        org.junit.Assert.assertEquals(socket12.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.util.List<java.lang.String> strList21 = okHttpClient0.transports;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient0.okResponseCache();
        boolean boolean23 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        java.net.CookieHandler cookieHandler32 = okHttpClient24.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient24.okResponseCache();
        java.net.CookieHandler cookieHandler34 = okHttpClient24.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        java.net.Proxy proxy36 = java.net.Proxy.NO_PROXY;
        boolean boolean38 = proxy36.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type39 = proxy36.type();
        java.net.SocketAddress socketAddress40 = proxy36.address();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient24.setProxy(proxy36);
        java.lang.String[] strArray43 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        okHttpClient24.transports = strList44;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient24.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool50 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient49.setConnectionPool(connectionPool58);
        com.squareup.okhttp.ConnectionPool connectionPool61 = okHttpClient60.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator62 = okHttpClient60.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool65 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient60.connectionPool = connectionPool65;
        java.net.ResponseCache responseCache67 = okHttpClient60.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient60.sslSocketFactory;
        java.net.Proxy proxy69 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress70 = proxy69.address();
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient60.setProxy(proxy69);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient(okHttpClient71);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        okHttpClient73.hostnameVerifier = hostnameVerifier74;
        java.net.ResponseCache responseCache76 = null;
        okHttpClient73.responseCache = responseCache76;
        java.util.List<java.lang.String> strList78 = okHttpClient73.transports;
        com.squareup.okhttp.ConnectionPool connectionPool79 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient73.connectionPool = connectionPool79;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient73.copyWithDefaults();
        java.net.ProxySelector proxySelector82 = okHttpClient81.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory83 = okHttpClient81.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient71.setSSLSocketFactory(sSLSocketFactory83);
        com.squareup.okhttp.OkHttpClient okHttpClient85 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier86 = null;
        okHttpClient85.hostnameVerifier = hostnameVerifier86;
        java.net.ProxySelector proxySelector88 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient85.setProxySelector(proxySelector88);
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient89.copyWithDefaults();
        java.net.ProxySelector proxySelector91 = null;
        okHttpClient90.proxySelector = proxySelector91;
        com.squareup.okhttp.OkAuthenticator okAuthenticator93 = okHttpClient90.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient71.setAuthenticator(okAuthenticator93);
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient24.setAuthenticator(okAuthenticator93);
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient0.setAuthenticator(okAuthenticator93);
        java.lang.Class<?> wildcardClass97 = okAuthenticator93.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNull(cookieHandler34);
        org.junit.Assert.assertNotNull(proxy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type39.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(connectionPool50);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNull(okAuthenticator62);
        org.junit.Assert.assertNull(responseCache67);
        org.junit.Assert.assertNull(sSLSocketFactory68);
        org.junit.Assert.assertNotNull(proxy69);
        org.junit.Assert.assertNull(socketAddress70);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(strList78);
        org.junit.Assert.assertNotNull(connectionPool79);
        org.junit.Assert.assertNotNull(okHttpClient81);
// flaky:         org.junit.Assert.assertNull(proxySelector82);
        org.junit.Assert.assertNotNull(sSLSocketFactory83);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okAuthenticator93);
        org.junit.Assert.assertNotNull(okHttpClient94);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNotNull(okHttpClient96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 100, (long) (byte) 10);
        int int3 = connectionPool2.getConnectionCount();
        com.squareup.okhttp.Connection connection4 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory20;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient23.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool26 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.util.List<java.lang.String> strList33 = okHttpClient28.transports;
        com.squareup.okhttp.ConnectionPool connectionPool34 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.setConnectionPool(connectionPool34);
        com.squareup.okhttp.OkAuthenticator okAuthenticator37 = okHttpClient36.getAuthenticator();
        java.net.ProxySelector proxySelector38 = okHttpClient36.getProxySelector();
        java.net.ProxySelector proxySelector39 = null;
        okHttpClient36.proxySelector = proxySelector39;
        java.net.ResponseCache responseCache41 = okHttpClient36.responseCache;
        java.net.ResponseCache responseCache42 = okHttpClient36.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.util.List<java.lang.String> strList48 = okHttpClient43.transports;
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool49;
        com.squareup.okhttp.ConnectionPool connectionPool51 = okHttpClient43.connectionPool;
        boolean boolean52 = okHttpClient43.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ResponseCache responseCache56 = null;
        okHttpClient53.responseCache = responseCache56;
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = okHttpClient53.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory59 = okHttpClient53.sslSocketFactory;
        java.net.CookieHandler cookieHandler60 = okHttpClient53.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = okHttpClient53.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool63 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool63;
        com.squareup.okhttp.OkAuthenticator okAuthenticator65 = null;
        okHttpClient62.authenticator = okAuthenticator65;
        java.util.List<java.lang.String> strList67 = okHttpClient62.transports;
        java.net.ResponseCache responseCache68 = null;
        okHttpClient62.responseCache = responseCache68;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = null;
        okHttpClient70.hostnameVerifier = hostnameVerifier71;
        java.net.ResponseCache responseCache73 = null;
        okHttpClient70.responseCache = responseCache73;
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = okHttpClient70.hostnameVerifier;
        java.net.Proxy proxy76 = okHttpClient70.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool79 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient70.connectionPool = connectionPool79;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient70.copyWithDefaults();
        java.net.Proxy proxy82 = okHttpClient81.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier83 = okHttpClient81.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient62.setHostnameVerifier(hostnameVerifier83);
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient53.setHostnameVerifier(hostnameVerifier83);
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient43.setHostnameVerifier(hostnameVerifier83);
        com.squareup.okhttp.OkHttpClient okHttpClient87 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier88 = null;
        okHttpClient87.hostnameVerifier = hostnameVerifier88;
        java.net.ProxySelector proxySelector90 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient87.setProxySelector(proxySelector90);
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient91.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray93 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet94 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet94, routeArray93);
        okHttpClient92.failedRoutes = routeSet94;
        okHttpClient43.failedRoutes = routeSet94;
        okHttpClient36.failedRoutes = routeSet94;
        okHttpClient23.failedRoutes = routeSet94;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(connectionPool26);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(connectionPool34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(okAuthenticator37);
        org.junit.Assert.assertNull(proxySelector38);
        org.junit.Assert.assertNull(responseCache41);
        org.junit.Assert.assertNull(responseCache42);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(hostnameVerifier58);
        org.junit.Assert.assertNull(sSLSocketFactory59);
        org.junit.Assert.assertNull(cookieHandler60);
        org.junit.Assert.assertNull(hostnameVerifier61);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNull(hostnameVerifier75);
        org.junit.Assert.assertNull(proxy76);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNull(proxy82);
        org.junit.Assert.assertNotNull(hostnameVerifier83);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(okHttpClient85);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(okHttpClient92);
        org.junit.Assert.assertNotNull(routeArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        boolean boolean11 = okHttpClient8.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setCookieHandler(cookieHandler12);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache14 = okHttpClient8.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = okHttpClient15.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient17.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient17.copyWithDefaults();
        java.net.ProxySelector proxySelector26 = okHttpClient25.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = okHttpClient25.getSslSocketFactory();
        okHttpClient15.sslSocketFactory = sSLSocketFactory27;
        java.lang.String[] strArray29 = sSLSocketFactory27.getDefaultCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory27;
        java.lang.String[] strArray31 = sSLSocketFactory27.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.net.Proxy proxy37 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress38 = proxy37.address();
        java.net.SocketAddress socketAddress39 = proxy37.address();
        okHttpClient32.proxy = proxy37;
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address44 = null;
        com.squareup.okhttp.Connection connection45 = connectionPool43.get(address44);
        int int46 = connectionPool43.getSpdyConnectionCount();
        connectionPool43.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient32.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ProxySelector proxySelector52 = okHttpClient49.proxySelector;
        java.net.ProxySelector proxySelector53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient49.setProxySelector(proxySelector53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient55.copyWithDefaults();
        java.net.ProxySelector proxySelector64 = okHttpClient63.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient63.getSslSocketFactory();
        okHttpClient49.sslSocketFactory = sSLSocketFactory65;
        okHttpClient32.sslSocketFactory = sSLSocketFactory65;
        java.lang.String[] strArray68 = sSLSocketFactory65.getSupportedCipherSuites();
        java.lang.String[] strArray69 = sSLSocketFactory65.getDefaultCipherSuites();
        java.net.Socket socket70 = sSLSocketFactory65.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket74 = sSLSocketFactory27.createSocket(socket70, "DIRECT", (int) '4', true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(okResponseCache14);
        org.junit.Assert.assertNull(okAuthenticator16);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNotNull(okHttpClient25);
// flaky:         org.junit.Assert.assertNull(proxySelector26);
        org.junit.Assert.assertNotNull(sSLSocketFactory27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(proxy37);
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNull(socketAddress39);
        org.junit.Assert.assertNull(connection45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNotNull(okHttpClient63);
// flaky:         org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNotNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(socket70);
        org.junit.Assert.assertEquals(socket70.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        java.net.Proxy proxy10 = okHttpClient0.getProxy();
        java.net.ProxySelector proxySelector11 = null;
        okHttpClient0.proxySelector = proxySelector11;
        java.net.Proxy proxy13 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient14.sslSocketFactory;
        java.net.Socket socket16 = sSLSocketFactory15.createSocket();
        java.net.InetAddress inetAddress19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket21 = sSLSocketFactory15.createSocket("", 100, inetAddress19, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(proxy10);
        org.junit.Assert.assertNull(proxy13);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(sSLSocketFactory15);
        org.junit.Assert.assertNotNull(socket16);
        org.junit.Assert.assertEquals(socket16.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool16;
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = null;
        okHttpClient15.authenticator = okAuthenticator18;
        java.net.CookieHandler cookieHandler20 = null;
        okHttpClient15.cookieHandler = cookieHandler20;
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        boolean boolean24 = proxy22.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache26 = okHttpClient25.okResponseCache();
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient25.setResponseCache(responseCache27);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        okHttpClient25.transports = strList31;
        boolean boolean34 = proxy22.equals((java.lang.Object) strList31);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient15.setProxy(proxy22);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy22);
        java.lang.String str37 = proxy22.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = okHttpClient38.hostnameVerifier;
        java.net.Proxy proxy44 = okHttpClient38.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool47 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient38.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient38.copyWithDefaults();
        java.net.ResponseCache responseCache50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient49.setResponseCache(responseCache50);
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = okHttpClient51.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.copyWithDefaults();
        java.util.List<java.lang.String> strList54 = okHttpClient51.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        java.net.Proxy proxy61 = java.net.Proxy.NO_PROXY;
        boolean boolean63 = proxy61.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type64 = proxy61.type();
        java.net.SocketAddress socketAddress65 = proxy61.address();
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient55.setProxy(proxy61);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = null;
        okHttpClient67.hostnameVerifier = hostnameVerifier68;
        java.net.ProxySelector proxySelector70 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient67.setProxySelector(proxySelector70);
        javax.net.ssl.HostnameVerifier hostnameVerifier72 = okHttpClient67.hostnameVerifier;
        java.net.CookieHandler cookieHandler73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient67.setCookieHandler(cookieHandler73);
        java.net.ResponseCache responseCache75 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient74.setResponseCache(responseCache75);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier78 = null;
        okHttpClient77.hostnameVerifier = hostnameVerifier78;
        java.net.ResponseCache responseCache80 = null;
        okHttpClient77.responseCache = responseCache80;
        java.util.List<java.lang.String> strList82 = okHttpClient77.transports;
        com.squareup.okhttp.ConnectionPool connectionPool83 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient77.connectionPool = connectionPool83;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient77.copyWithDefaults();
        java.net.ProxySelector proxySelector86 = okHttpClient85.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory87 = okHttpClient85.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient74.setSSLSocketFactory(sSLSocketFactory87);
        boolean boolean89 = proxy61.equals((java.lang.Object) sSLSocketFactory87);
        java.lang.String[] strArray90 = sSLSocketFactory87.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient51.setSSLSocketFactory(sSLSocketFactory87);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory92 = okHttpClient91.getSslSocketFactory();
        java.net.ProxySelector proxySelector93 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient91.setProxySelector(proxySelector93);
        boolean boolean95 = proxy22.equals((java.lang.Object) proxySelector93);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(okResponseCache26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DIRECT" + "'", str37, "DIRECT");
        org.junit.Assert.assertNull(hostnameVerifier43);
        org.junit.Assert.assertNull(proxy44);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(hostnameVerifier52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(proxy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type64.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress65);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(hostnameVerifier72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNull(strList82);
        org.junit.Assert.assertNotNull(connectionPool83);
        org.junit.Assert.assertNotNull(okHttpClient85);
// flaky:         org.junit.Assert.assertNull(proxySelector86);
        org.junit.Assert.assertNotNull(sSLSocketFactory87);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(sSLSocketFactory92);
        org.junit.Assert.assertNotNull(okHttpClient94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        java.net.ResponseCache responseCache6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setResponseCache(responseCache6);
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient7.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ProxySelector proxySelector12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient9.setProxySelector(proxySelector12);
        java.net.ResponseCache responseCache14 = null;
        okHttpClient13.responseCache = responseCache14;
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient13.hostnameVerifier;
        java.util.List<java.lang.String> strList17 = okHttpClient13.getTransports();
        java.net.Proxy proxy18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient13.setProxy(proxy18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        java.net.ProxySelector proxySelector23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient20.setProxySelector(proxySelector23);
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient20.hostnameVerifier;
        java.net.CookieHandler cookieHandler26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient20.setCookieHandler(cookieHandler26);
        java.net.ResponseCache responseCache28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient27.setResponseCache(responseCache28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        okHttpClient30.hostnameVerifier = hostnameVerifier31;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient30.responseCache = responseCache33;
        java.util.List<java.lang.String> strList35 = okHttpClient30.transports;
        com.squareup.okhttp.ConnectionPool connectionPool36 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient30.connectionPool = connectionPool36;
        java.net.Proxy proxy38 = null;
        okHttpClient30.proxy = proxy38;
        boolean boolean40 = okHttpClient30.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient30.copyWithDefaults();
        java.net.CookieHandler cookieHandler42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient30.setCookieHandler(cookieHandler42);
        java.net.Proxy proxy44 = okHttpClient43.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ProxySelector proxySelector48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.setProxySelector(proxySelector48);
        java.net.CookieHandler cookieHandler50 = okHttpClient45.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        java.net.Proxy proxy59 = null;
        okHttpClient51.proxy = proxy59;
        java.util.Set<com.squareup.okhttp.Route> routeSet61 = okHttpClient51.failedRoutes;
        okHttpClient45.failedRoutes = routeSet61;
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient45.setHostnameVerifier(hostnameVerifier63);
        java.net.ProxySelector proxySelector65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient64.setProxySelector(proxySelector65);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache68 = okHttpClient67.okResponseCache();
        java.net.ResponseCache responseCache69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient67.setResponseCache(responseCache69);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory71 = okHttpClient67.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory72 = okHttpClient67.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        okHttpClient73.hostnameVerifier = hostnameVerifier74;
        boolean boolean76 = okHttpClient73.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler77 = okHttpClient73.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = null;
        okHttpClient78.hostnameVerifier = hostnameVerifier79;
        java.net.ResponseCache responseCache81 = null;
        okHttpClient78.responseCache = responseCache81;
        javax.net.ssl.HostnameVerifier hostnameVerifier83 = okHttpClient78.hostnameVerifier;
        java.net.Proxy proxy84 = okHttpClient78.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool87 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient78.connectionPool = connectionPool87;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient78.copyWithDefaults();
        java.net.ResponseCache responseCache90 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient89.setResponseCache(responseCache90);
        com.squareup.okhttp.OkAuthenticator okAuthenticator92 = okHttpClient89.authenticator;
        okHttpClient73.authenticator = okAuthenticator92;
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient67.setAuthenticator(okAuthenticator92);
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient66.setAuthenticator(okAuthenticator92);
        okHttpClient43.authenticator = okAuthenticator92;
        okHttpClient27.authenticator = okAuthenticator92;
        okHttpClient13.authenticator = okAuthenticator92;
        com.squareup.okhttp.OkHttpClient okHttpClient99 = okHttpClient7.setAuthenticator(okAuthenticator92);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(connectionPool8);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(proxy44);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNull(cookieHandler50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(routeSet61);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(okResponseCache68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(sSLSocketFactory71);
        org.junit.Assert.assertNull(sSLSocketFactory72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(cookieHandler77);
        org.junit.Assert.assertNull(hostnameVerifier83);
        org.junit.Assert.assertNull(proxy84);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(okAuthenticator92);
        org.junit.Assert.assertNotNull(okHttpClient94);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNotNull(okHttpClient99);
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.getSslSocketFactory();
        java.net.Socket socket11 = sSLSocketFactory10.createSocket();
        java.net.Socket socket12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket16 = sSLSocketFactory10.createSocket(socket12, "", (-1), false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertNotNull(socket11);
        org.junit.Assert.assertEquals(socket11.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setProxySelector(proxySelector16);
        java.net.CookieHandler cookieHandler18 = okHttpClient13.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        java.net.Proxy proxy27 = null;
        okHttpClient19.proxy = proxy27;
        java.util.Set<com.squareup.okhttp.Route> routeSet29 = okHttpClient19.failedRoutes;
        okHttpClient13.failedRoutes = routeSet29;
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient13.setHostnameVerifier(hostnameVerifier31);
        java.net.ProxySelector proxySelector33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient32.setProxySelector(proxySelector33);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient32.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient(okHttpClient36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool39 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient38.connectionPool = connectionPool39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient38.setConnectionPool(connectionPool47);
        java.net.Proxy proxy50 = okHttpClient49.proxy;
        okHttpClient49.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient53.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = null;
        okHttpClient56.hostnameVerifier = hostnameVerifier57;
        java.net.ResponseCache responseCache59 = null;
        okHttpClient56.responseCache = responseCache59;
        java.util.List<java.lang.String> strList61 = okHttpClient56.transports;
        com.squareup.okhttp.ConnectionPool connectionPool62 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient56.connectionPool = connectionPool62;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient53.setConnectionPool(connectionPool62);
        com.squareup.okhttp.ConnectionPool connectionPool65 = okHttpClient64.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator66 = okHttpClient64.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool69 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient64.connectionPool = connectionPool69;
        java.net.ResponseCache responseCache71 = okHttpClient64.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory72 = okHttpClient64.sslSocketFactory;
        java.net.Proxy proxy73 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress74 = proxy73.address();
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient64.setProxy(proxy73);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory76 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient64.setSSLSocketFactory(sSLSocketFactory76);
        com.squareup.okhttp.OkHttpClient okHttpClient78 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = null;
        okHttpClient78.hostnameVerifier = hostnameVerifier79;
        java.net.ResponseCache responseCache81 = null;
        okHttpClient78.responseCache = responseCache81;
        javax.net.ssl.HostnameVerifier hostnameVerifier83 = okHttpClient78.hostnameVerifier;
        java.net.Proxy proxy84 = okHttpClient78.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool87 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient78.connectionPool = connectionPool87;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient78.copyWithDefaults();
        java.net.ResponseCache responseCache90 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient89.setResponseCache(responseCache90);
        com.squareup.okhttp.OkAuthenticator okAuthenticator92 = okHttpClient89.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient64.setAuthenticator(okAuthenticator92);
        java.net.Proxy proxy94 = okHttpClient93.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator95 = okHttpClient93.getAuthenticator();
        okHttpClient49.authenticator = okAuthenticator95;
        com.squareup.okhttp.OkHttpClient okHttpClient97 = okHttpClient36.setAuthenticator(okAuthenticator95);
        okHttpClient11.authenticator = okAuthenticator95;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(cookieHandler18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(routeSet29);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(connectionPool39);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNull(proxy50);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNotNull(connectionPool62);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(connectionPool65);
        org.junit.Assert.assertNull(okAuthenticator66);
        org.junit.Assert.assertNull(responseCache71);
        org.junit.Assert.assertNull(sSLSocketFactory72);
        org.junit.Assert.assertNotNull(proxy73);
        org.junit.Assert.assertNull(socketAddress74);
        org.junit.Assert.assertNotNull(okHttpClient75);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertNull(hostnameVerifier83);
        org.junit.Assert.assertNull(proxy84);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(okAuthenticator92);
        org.junit.Assert.assertNotNull(okHttpClient93);
        org.junit.Assert.assertNotNull(proxy94);
        org.junit.Assert.assertNotNull(okAuthenticator95);
        org.junit.Assert.assertNotNull(okHttpClient97);
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        java.net.ResponseCache responseCache6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setResponseCache(responseCache6);
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection9 = okHttpClient0.open(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNotNull(okHttpClient7);
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        java.net.ProxySelector proxySelector4 = okHttpClient0.getProxySelector();
        boolean boolean5 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = okHttpClient6.hostnameVerifier;
        java.net.Proxy proxy12 = okHttpClient6.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool15 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient6.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient6.copyWithDefaults();
        java.net.ResponseCache responseCache18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setResponseCache(responseCache18);
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = okHttpClient17.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setProxySelector(proxySelector24);
        java.net.CookieHandler cookieHandler26 = okHttpClient21.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        java.util.Set<com.squareup.okhttp.Route> routeSet37 = okHttpClient27.failedRoutes;
        okHttpClient21.failedRoutes = routeSet37;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient21.setHostnameVerifier(hostnameVerifier39);
        java.net.ProxySelector proxySelector41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient40.setProxySelector(proxySelector41);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient40.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient45.setConnectionPool(connectionPool54);
        java.net.Proxy proxy57 = okHttpClient56.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool59 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient58.connectionPool = connectionPool59;
        int int61 = connectionPool59.getSpdyConnectionCount();
        okHttpClient56.connectionPool = connectionPool59;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        okHttpClient63.hostnameVerifier = hostnameVerifier64;
        java.net.ResponseCache responseCache66 = null;
        okHttpClient63.responseCache = responseCache66;
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = okHttpClient63.hostnameVerifier;
        java.net.Proxy proxy69 = okHttpClient63.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool72 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient63.connectionPool = connectionPool72;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient63.copyWithDefaults();
        java.net.ResponseCache responseCache75 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient74.setResponseCache(responseCache75);
        com.squareup.okhttp.OkAuthenticator okAuthenticator77 = okHttpClient74.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient56.setAuthenticator(okAuthenticator77);
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient40.setAuthenticator(okAuthenticator77);
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient17.setAuthenticator(okAuthenticator77);
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient0.setAuthenticator(okAuthenticator77);
        java.net.ResponseCache responseCache82 = okHttpClient81.getResponseCache();
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(proxySelector4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(hostnameVerifier11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okAuthenticator20);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(routeSet37);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNull(proxy57);
        org.junit.Assert.assertNotNull(connectionPool59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(hostnameVerifier68);
        org.junit.Assert.assertNull(proxy69);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okAuthenticator77);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNotNull(okHttpClient80);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNull(responseCache82);
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient0.connectionPool;
        connectionPool12.evictAll();
        com.squareup.okhttp.Address address14 = null;
        com.squareup.okhttp.Connection connection15 = connectionPool12.get(address14);
        int int16 = connectionPool12.getSpdyConnectionCount();
        connectionPool12.evictAll();
        int int18 = connectionPool12.getSpdyConnectionCount();
        int int19 = connectionPool12.getSpdyConnectionCount();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(connection15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.CookieHandler cookieHandler20 = null;
        okHttpClient19.cookieHandler = cookieHandler20;
        java.net.ProxySelector proxySelector22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setProxySelector(proxySelector22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient19.copyWithDefaults();
        java.lang.Class<?> wildcardClass25 = okHttpClient19.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        okHttpClient0.transports = strList6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory9);
        java.net.Proxy proxy11 = okHttpClient10.proxy;
        java.net.CookieHandler cookieHandler12 = okHttpClient10.getCookieHandler();
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNull(cookieHandler12);
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        java.net.SocketAddress socketAddress12 = proxy6.address();
        java.net.Proxy.Type type13 = proxy6.type();
        java.net.SocketAddress socketAddress14 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient15.hostnameVerifier;
        java.net.Proxy proxy21 = okHttpClient15.getProxy();
        java.net.CookieHandler cookieHandler22 = null;
        okHttpClient15.cookieHandler = cookieHandler22;
        okHttpClient15.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler26 = okHttpClient15.getCookieHandler();
        boolean boolean27 = proxy6.equals((java.lang.Object) okHttpClient15);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = okHttpClient28.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient28.setSSLSocketFactory(sSLSocketFactory34);
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient35.getConnectionPool();
        java.net.ResponseCache responseCache37 = null;
        okHttpClient35.responseCache = responseCache37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient35);
        boolean boolean40 = proxy6.equals((java.lang.Object) okHttpClient35);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = okHttpClient41.hostnameVerifier;
        java.net.Proxy proxy47 = okHttpClient41.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool50 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient41.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient41.copyWithDefaults();
        java.net.ResponseCache responseCache53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient52.setResponseCache(responseCache53);
        java.net.ResponseCache responseCache55 = okHttpClient54.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory56 = okHttpClient54.sslSocketFactory;
        java.util.List<java.lang.String> strList57 = okHttpClient54.transports;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient35.setTransports(strList57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(socketAddress12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type13.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress14);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNull(proxy21);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(hostnameVerifier33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(connectionPool36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(hostnameVerifier46);
        org.junit.Assert.assertNull(proxy47);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(responseCache55);
        org.junit.Assert.assertNotNull(sSLSocketFactory56);
        org.junit.Assert.assertNotNull(strList57);
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        java.util.List<java.lang.String> strList16 = okHttpClient13.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient13.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient19.setConnectionPool(connectionPool28);
        java.net.Proxy proxy31 = okHttpClient30.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        int int35 = connectionPool33.getSpdyConnectionCount();
        okHttpClient30.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = okHttpClient37.hostnameVerifier;
        java.net.Proxy proxy43 = okHttpClient37.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool46 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient37.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient37.copyWithDefaults();
        java.net.ResponseCache responseCache49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient48.setResponseCache(responseCache49);
        com.squareup.okhttp.OkAuthenticator okAuthenticator51 = okHttpClient48.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient30.setAuthenticator(okAuthenticator51);
        okHttpClient13.authenticator = okAuthenticator51;
        java.net.CookieHandler cookieHandler54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient13.setCookieHandler(cookieHandler54);
        com.squareup.okhttp.ConnectionPool connectionPool58 = new com.squareup.okhttp.ConnectionPool(0, (long) (byte) 1);
        okHttpClient13.connectionPool = connectionPool58;
        java.net.CookieHandler cookieHandler60 = okHttpClient13.getCookieHandler();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(hostnameVerifier42);
        org.junit.Assert.assertNull(proxy43);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(okAuthenticator51);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNull(cookieHandler60);
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient0.proxySelector = proxySelector9;
        java.net.CookieHandler cookieHandler11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setCookieHandler(cookieHandler11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient12);
        boolean boolean14 = okHttpClient13.followProtocolRedirects;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.CookieHandler cookieHandler26 = okHttpClient18.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient18.okResponseCache();
        java.net.CookieHandler cookieHandler28 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy30);
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.ConnectionPool connectionPool39 = okHttpClient36.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient40.copyWithDefaults();
        boolean boolean49 = okHttpClient48.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient48.sslSocketFactory;
        java.lang.String[] strArray51 = sSLSocketFactory50.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ResponseCache responseCache56 = null;
        okHttpClient53.responseCache = responseCache56;
        java.util.List<java.lang.String> strList58 = okHttpClient53.transports;
        com.squareup.okhttp.ConnectionPool connectionPool59 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient53.connectionPool = connectionPool59;
        java.net.Proxy proxy61 = null;
        okHttpClient53.proxy = proxy61;
        java.net.Proxy proxy63 = okHttpClient53.getProxy();
        java.net.ProxySelector proxySelector64 = null;
        okHttpClient53.proxySelector = proxySelector64;
        java.net.Proxy proxy66 = okHttpClient53.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient53.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient67.sslSocketFactory;
        java.net.Socket socket69 = sSLSocketFactory68.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket73 = sSLSocketFactory50.createSocket(socket69, "", (int) (short) 0, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(connectionPool39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(connectionPool59);
        org.junit.Assert.assertNull(proxy63);
        org.junit.Assert.assertNull(proxy66);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(sSLSocketFactory68);
        org.junit.Assert.assertNotNull(socket69);
        org.junit.Assert.assertEquals(socket69.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        java.net.ResponseCache responseCache13 = okHttpClient0.getResponseCache();
        java.net.ResponseCache responseCache14 = okHttpClient0.responseCache;
        java.net.ResponseCache responseCache15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setResponseCache(responseCache15);
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient0.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        com.squareup.okhttp.ConnectionPool connectionPool32 = okHttpClient29.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        java.util.List<java.lang.String> strList38 = okHttpClient33.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier39;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache41 = okHttpClient33.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient33.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = okHttpClient43.hostnameVerifier;
        java.net.Proxy proxy49 = okHttpClient43.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool52 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient43.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient43.copyWithDefaults();
        java.net.Proxy proxy55 = okHttpClient54.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = okHttpClient54.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient33.setHostnameVerifier(hostnameVerifier56);
        okHttpClient29.hostnameVerifier = hostnameVerifier56;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient0.setHostnameVerifier(hostnameVerifier56);
        java.net.Proxy proxy60 = okHttpClient0.getProxy();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNull(responseCache13);
        org.junit.Assert.assertNull(responseCache14);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(okResponseCache41);
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertNull(hostnameVerifier48);
        org.junit.Assert.assertNull(proxy49);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(hostnameVerifier56);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNull(proxy60);
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        com.squareup.okhttp.ConnectionPool connectionPool0 = com.squareup.okhttp.ConnectionPool.getDefault();
        com.squareup.okhttp.Address address1 = null;
        com.squareup.okhttp.Connection connection2 = connectionPool0.get(address1);
        int int3 = connectionPool0.getConnectionCount();
        org.junit.Assert.assertNotNull(connectionPool0);
        org.junit.Assert.assertNull(connection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient23.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory25 = okHttpClient23.getSslSocketFactory();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(hostnameVerifier24);
        org.junit.Assert.assertNull(sSLSocketFactory25);
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        java.util.List<java.lang.String> strList16 = okHttpClient13.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.net.Proxy proxy37 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress38 = proxy37.address();
        java.net.SocketAddress socketAddress39 = proxy37.address();
        okHttpClient32.proxy = proxy37;
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address44 = null;
        com.squareup.okhttp.Connection connection45 = connectionPool43.get(address44);
        int int46 = connectionPool43.getSpdyConnectionCount();
        connectionPool43.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient32.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ProxySelector proxySelector52 = okHttpClient49.proxySelector;
        java.net.ProxySelector proxySelector53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient49.setProxySelector(proxySelector53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient55.copyWithDefaults();
        java.net.ProxySelector proxySelector64 = okHttpClient63.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient63.getSslSocketFactory();
        okHttpClient49.sslSocketFactory = sSLSocketFactory65;
        okHttpClient32.sslSocketFactory = sSLSocketFactory65;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient31.setSSLSocketFactory(sSLSocketFactory65);
        java.net.Socket socket69 = sSLSocketFactory65.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory65);
        java.lang.String[] strArray71 = sSLSocketFactory65.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket74 = sSLSocketFactory65.createSocket("hi!", 1);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(proxy37);
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNull(socketAddress39);
        org.junit.Assert.assertNull(connection45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNotNull(okHttpClient63);
// flaky:         org.junit.Assert.assertNull(proxySelector64);
        org.junit.Assert.assertNotNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(socket69);
        org.junit.Assert.assertEquals(socket69.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNotNull(strArray71);
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        com.squareup.okhttp.ConnectionPool connectionPool23 = okHttpClient22.connectionPool;
        connectionPool23.evictAll();
        com.squareup.okhttp.Address address25 = null;
        com.squareup.okhttp.Connection connection26 = connectionPool23.get(address25);
        com.squareup.okhttp.Connection connection27 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool23.recycle(connection27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNull(connection26);
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.net.ResponseCache responseCache18 = null;
        okHttpClient0.responseCache = responseCache18;
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool(0, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient0.setConnectionPool(connectionPool22);
        java.lang.Class<?> wildcardClass24 = connectionPool22.getClass();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = okHttpClient11.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient20.okResponseCache();
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setResponseCache(responseCache22);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        okHttpClient20.transports = strList26;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient20.setSSLSocketFactory(sSLSocketFactory29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache32 = okHttpClient31.okResponseCache();
        java.net.ResponseCache responseCache33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setResponseCache(responseCache33);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        okHttpClient31.transports = strList37;
        okHttpClient20.transports = strList37;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList37;
        okHttpClient11.transports = strList37;
        java.net.ProxySelector proxySelector43 = okHttpClient11.getProxySelector();
        java.net.CookieHandler cookieHandler44 = okHttpClient11.cookieHandler;
        java.net.ProxySelector proxySelector45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient11.setProxySelector(proxySelector45);
        java.net.CookieHandler cookieHandler47 = null;
        okHttpClient11.cookieHandler = cookieHandler47;
        boolean boolean49 = okHttpClient11.followProtocolRedirects;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(sSLSocketFactory18);
        org.junit.Assert.assertNull(okAuthenticator19);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(okResponseCache32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(proxySelector43);
        org.junit.Assert.assertNull(cookieHandler44);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient19.setConnectionPool(connectionPool28);
        com.squareup.okhttp.ConnectionPool connectionPool31 = okHttpClient30.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient30.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient30.connectionPool = connectionPool35;
        java.net.ResponseCache responseCache37 = okHttpClient30.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient30.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient39.hostnameVerifier;
        java.net.Proxy proxy45 = okHttpClient39.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool48 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient39.connectionPool = connectionPool48;
        boolean boolean50 = okHttpClient39.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = okHttpClient51.hostnameVerifier;
        java.net.Proxy proxy57 = okHttpClient51.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool60 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient51.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.copyWithDefaults();
        java.net.Proxy proxy63 = okHttpClient62.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = okHttpClient62.getHostnameVerifier();
        okHttpClient39.hostnameVerifier = hostnameVerifier64;
        okHttpClient30.hostnameVerifier = hostnameVerifier64;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient0.setHostnameVerifier(hostnameVerifier64);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        okHttpClient68.hostnameVerifier = hostnameVerifier69;
        java.net.ResponseCache responseCache71 = null;
        okHttpClient68.responseCache = responseCache71;
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = okHttpClient68.hostnameVerifier;
        java.net.Proxy proxy74 = okHttpClient68.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache76 = okHttpClient75.okResponseCache();
        java.net.ResponseCache responseCache77 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient75.setResponseCache(responseCache77);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        okHttpClient75.transports = strList81;
        okHttpClient68.transports = strList81;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList81;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient67.setTransports((java.util.List<java.lang.String>) strList81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNull(okAuthenticator32);
        org.junit.Assert.assertNull(responseCache37);
        org.junit.Assert.assertNull(sSLSocketFactory38);
        org.junit.Assert.assertNull(hostnameVerifier44);
        org.junit.Assert.assertNull(proxy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(hostnameVerifier56);
        org.junit.Assert.assertNull(proxy57);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNull(proxy63);
        org.junit.Assert.assertNotNull(hostnameVerifier64);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(hostnameVerifier73);
        org.junit.Assert.assertNull(proxy74);
        org.junit.Assert.assertNull(okResponseCache76);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector12 = okHttpClient0.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient0.connectionPool;
        int int15 = connectionPool14.getSpdyConnectionCount();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = okHttpClient0.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        java.util.List<java.lang.String> strList17 = okHttpClient12.transports;
        com.squareup.okhttp.ConnectionPool connectionPool18 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient9.setConnectionPool(connectionPool18);
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient20.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = okHttpClient20.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient20.connectionPool = connectionPool25;
        java.net.ResponseCache responseCache27 = okHttpClient20.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient20.sslSocketFactory;
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress30 = proxy29.address();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient20.setProxy(proxy29);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient(okHttpClient31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        java.util.List<java.lang.String> strList38 = okHttpClient33.transports;
        com.squareup.okhttp.ConnectionPool connectionPool39 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient33.connectionPool = connectionPool39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient33.copyWithDefaults();
        java.net.ProxySelector proxySelector42 = okHttpClient41.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient41.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient31.setSSLSocketFactory(sSLSocketFactory43);
        java.net.Socket socket45 = sSLSocketFactory43.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory43);
        javax.net.SocketFactory socketFactory47 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket48 = socketFactory47.createSocket();
        java.net.Socket socket49 = socketFactory47.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket53 = sSLSocketFactory43.createSocket(socket49, "DIRECT", (-1), true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(proxy8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNull(okAuthenticator22);
        org.junit.Assert.assertNull(responseCache27);
        org.junit.Assert.assertNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertNull(socketAddress30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(connectionPool39);
        org.junit.Assert.assertNotNull(okHttpClient41);
// flaky:         org.junit.Assert.assertNull(proxySelector42);
        org.junit.Assert.assertNotNull(sSLSocketFactory43);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(socket45);
        org.junit.Assert.assertEquals(socket45.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(socketFactory47);
        org.junit.Assert.assertNotNull(socket48);
        org.junit.Assert.assertEquals(socket48.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket49);
        org.junit.Assert.assertEquals(socket49.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        java.lang.String[] strArray22 = sSLSocketFactory19.getDefaultCipherSuites();
        java.lang.String[] strArray23 = sSLSocketFactory19.getDefaultCipherSuites();
        java.net.InetAddress inetAddress26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket28 = sSLSocketFactory19.createSocket("hi!", 10, inetAddress26, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setResponseCache(responseCache8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.copyWithDefaults();
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient18.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient7.setSSLSocketFactory(sSLSocketFactory20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache30 = okHttpClient29.okResponseCache();
        java.net.ResponseCache responseCache31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient29.setResponseCache(responseCache31);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        okHttpClient29.transports = strList35;
        okHttpClient22.transports = strList35;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient22.sslSocketFactory;
        java.net.CookieHandler cookieHandler43 = okHttpClient22.cookieHandler;
        java.net.CookieHandler cookieHandler44 = null;
        okHttpClient22.cookieHandler = cookieHandler44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        java.util.List<java.lang.String> strList54 = okHttpClient49.transports;
        com.squareup.okhttp.ConnectionPool connectionPool55 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool55;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient46.setConnectionPool(connectionPool55);
        com.squareup.okhttp.ConnectionPool connectionPool58 = okHttpClient57.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator59 = okHttpClient57.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool62 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient57.connectionPool = connectionPool62;
        java.net.ResponseCache responseCache64 = okHttpClient57.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient57.sslSocketFactory;
        java.net.Proxy proxy66 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress67 = proxy66.address();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient57.setProxy(proxy66);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient(okHttpClient68);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = null;
        okHttpClient70.hostnameVerifier = hostnameVerifier71;
        java.net.ResponseCache responseCache73 = null;
        okHttpClient70.responseCache = responseCache73;
        java.util.List<java.lang.String> strList75 = okHttpClient70.transports;
        com.squareup.okhttp.ConnectionPool connectionPool76 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient70.connectionPool = connectionPool76;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient70.copyWithDefaults();
        java.net.ProxySelector proxySelector79 = okHttpClient78.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory80 = okHttpClient78.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient68.setSSLSocketFactory(sSLSocketFactory80);
        java.lang.String[] strArray82 = sSLSocketFactory80.getSupportedCipherSuites();
        java.lang.String[] strArray83 = sSLSocketFactory80.getSupportedCipherSuites();
        java.lang.String[] strArray84 = sSLSocketFactory80.getSupportedCipherSuites();
        okHttpClient22.sslSocketFactory = sSLSocketFactory80;
        okHttpClient21.sslSocketFactory = sSLSocketFactory80;
        com.squareup.okhttp.ConnectionPool connectionPool87 = okHttpClient21.connectionPool;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
// flaky:         org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNotNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNull(okResponseCache30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertNull(cookieHandler43);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(connectionPool55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNull(okAuthenticator59);
        org.junit.Assert.assertNull(responseCache64);
        org.junit.Assert.assertNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(proxy66);
        org.junit.Assert.assertNull(socketAddress67);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNull(strList75);
        org.junit.Assert.assertNotNull(connectionPool76);
        org.junit.Assert.assertNotNull(okHttpClient78);
// flaky:         org.junit.Assert.assertNull(proxySelector79);
        org.junit.Assert.assertNotNull(sSLSocketFactory80);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNull(connectionPool87);
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        int int12 = connectionPool9.getSpdyConnectionCount();
        int int13 = connectionPool9.getSpdyConnectionCount();
        com.squareup.okhttp.Connection connection14 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool9.recycle(connection14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy13 = okHttpClient12.proxy;
        java.net.ProxySelector proxySelector14 = okHttpClient12.getProxySelector();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(proxy13);
        org.junit.Assert.assertNull(proxySelector14);
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.net.CookieHandler cookieHandler18 = null;
        okHttpClient17.cookieHandler = cookieHandler18;
        java.net.CookieHandler cookieHandler20 = okHttpClient17.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        java.net.Proxy proxy27 = java.net.Proxy.NO_PROXY;
        boolean boolean29 = proxy27.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type30 = proxy27.type();
        java.net.SocketAddress socketAddress31 = proxy27.address();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setProxy(proxy27);
        java.net.SocketAddress socketAddress33 = proxy27.address();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient17.setProxy(proxy27);
        com.squareup.okhttp.OkAuthenticator okAuthenticator35 = okHttpClient34.getAuthenticator();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(proxy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type30.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(okAuthenticator35);
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = okHttpClient17.authenticator;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(okAuthenticator18);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.ConnectionPool connectionPool24 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        okHttpClient19.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient19.copyWithDefaults();
        java.net.Proxy proxy27 = okHttpClient26.getProxy();
        java.net.ResponseCache responseCache28 = okHttpClient26.responseCache;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(proxy27);
        org.junit.Assert.assertNull(responseCache28);
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler21 = okHttpClient0.cookieHandler;
        java.net.CookieHandler cookieHandler22 = null;
        okHttpClient0.cookieHandler = cookieHandler22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy25 = okHttpClient0.proxy;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNull(proxy25);
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address26 = null;
        com.squareup.okhttp.Connection connection27 = connectionPool25.get(address26);
        int int28 = connectionPool25.getSpdyConnectionCount();
        connectionPool25.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient14.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = okHttpClient31.proxySelector;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient31.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient37.copyWithDefaults();
        java.net.ProxySelector proxySelector46 = okHttpClient45.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient45.getSslSocketFactory();
        okHttpClient31.sslSocketFactory = sSLSocketFactory47;
        okHttpClient14.sslSocketFactory = sSLSocketFactory47;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory47);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setConnectionPool(connectionPool60);
        com.squareup.okhttp.ConnectionPool connectionPool63 = okHttpClient62.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator64 = okHttpClient62.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool67 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient62.connectionPool = connectionPool67;
        java.net.ResponseCache responseCache69 = okHttpClient62.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory70 = okHttpClient62.sslSocketFactory;
        java.net.Proxy proxy71 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress72 = proxy71.address();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient62.setProxy(proxy71);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient(okHttpClient73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient73.setSSLSocketFactory(sSLSocketFactory85);
        java.lang.String[] strArray87 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray88 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray89 = sSLSocketFactory85.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory85);
        com.squareup.okhttp.OkAuthenticator okAuthenticator91 = okHttpClient90.getAuthenticator();
        java.lang.Class<?> wildcardClass92 = okHttpClient90.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNull(connection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
// flaky:         org.junit.Assert.assertNull(proxySelector46);
        org.junit.Assert.assertNotNull(sSLSocketFactory47);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(okAuthenticator64);
        org.junit.Assert.assertNull(responseCache69);
        org.junit.Assert.assertNull(sSLSocketFactory70);
        org.junit.Assert.assertNotNull(proxy71);
        org.junit.Assert.assertNull(socketAddress72);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okAuthenticator91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler21 = okHttpClient0.cookieHandler;
        java.net.CookieHandler cookieHandler22 = null;
        okHttpClient0.cookieHandler = cookieHandler22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setConnectionPool(connectionPool33);
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient35.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator37 = okHttpClient35.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool40 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient35.connectionPool = connectionPool40;
        java.net.ResponseCache responseCache42 = okHttpClient35.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient35.sslSocketFactory;
        java.net.Proxy proxy44 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress45 = proxy44.address();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient35.setProxy(proxy44);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient(okHttpClient46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient48.copyWithDefaults();
        java.net.ProxySelector proxySelector57 = okHttpClient56.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory58 = okHttpClient56.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient46.setSSLSocketFactory(sSLSocketFactory58);
        java.lang.String[] strArray60 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray61 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray62 = sSLSocketFactory58.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory58;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool65 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient64.connectionPool = connectionPool65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = null;
        okHttpClient67.hostnameVerifier = hostnameVerifier68;
        java.net.ResponseCache responseCache70 = null;
        okHttpClient67.responseCache = responseCache70;
        java.util.List<java.lang.String> strList72 = okHttpClient67.transports;
        com.squareup.okhttp.ConnectionPool connectionPool73 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient67.connectionPool = connectionPool73;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient64.setConnectionPool(connectionPool73);
        com.squareup.okhttp.ConnectionPool connectionPool76 = okHttpClient64.connectionPool;
        java.util.List<java.lang.String> strList77 = okHttpClient64.getTransports();
        java.net.CookieHandler cookieHandler78 = null;
        okHttpClient64.cookieHandler = cookieHandler78;
        java.net.CookieHandler cookieHandler80 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient64.setCookieHandler(cookieHandler80);
        com.squareup.okhttp.OkHttpClient okHttpClient82 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier83 = null;
        okHttpClient82.hostnameVerifier = hostnameVerifier83;
        java.net.ResponseCache responseCache85 = null;
        okHttpClient82.responseCache = responseCache85;
        javax.net.ssl.HostnameVerifier hostnameVerifier87 = okHttpClient82.hostnameVerifier;
        java.net.Proxy proxy88 = okHttpClient82.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool91 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient82.connectionPool = connectionPool91;
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient82.copyWithDefaults();
        java.net.ResponseCache responseCache94 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient93.setResponseCache(responseCache94);
        com.squareup.okhttp.OkAuthenticator okAuthenticator96 = okHttpClient93.authenticator;
        javax.net.ssl.HostnameVerifier hostnameVerifier97 = okHttpClient93.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient98 = okHttpClient64.setHostnameVerifier(hostnameVerifier97);
        okHttpClient0.hostnameVerifier = hostnameVerifier97;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNull(okAuthenticator37);
        org.junit.Assert.assertNull(responseCache42);
        org.junit.Assert.assertNull(sSLSocketFactory43);
        org.junit.Assert.assertNotNull(proxy44);
        org.junit.Assert.assertNull(socketAddress45);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(okHttpClient56);
// flaky:         org.junit.Assert.assertNull(proxySelector57);
        org.junit.Assert.assertNotNull(sSLSocketFactory58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(connectionPool65);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(connectionPool73);
        org.junit.Assert.assertNotNull(okHttpClient75);
        org.junit.Assert.assertNotNull(connectionPool76);
        org.junit.Assert.assertNull(strList77);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNull(hostnameVerifier87);
        org.junit.Assert.assertNull(proxy88);
        org.junit.Assert.assertNotNull(okHttpClient93);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNotNull(okAuthenticator96);
        org.junit.Assert.assertNotNull(hostnameVerifier97);
        org.junit.Assert.assertNotNull(okHttpClient98);
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        okHttpClient0.followProtocolRedirects = true;
        java.util.Set<com.squareup.okhttp.Route> routeSet8 = okHttpClient0.failedRoutes;
        java.util.List<java.lang.String> strList9 = okHttpClient0.transports;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeSet8);
        org.junit.Assert.assertNull(strList9);
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.copyWithDefaults();
        java.lang.Class<?> wildcardClass13 = okHttpClient12.getClass();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        boolean boolean9 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient10.sslSocketFactory;
        java.net.CookieHandler cookieHandler17 = okHttpClient10.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient10.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = null;
        okHttpClient19.authenticator = okAuthenticator22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient19.responseCache = responseCache25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient27.hostnameVerifier;
        java.net.Proxy proxy33 = okHttpClient27.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool36 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient27.connectionPool = connectionPool36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient27.copyWithDefaults();
        java.net.Proxy proxy39 = okHttpClient38.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient38.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient19.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient10.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient0.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ProxySelector proxySelector47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient44.setProxySelector(proxySelector47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient48.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray50 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet51 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet51, routeArray50);
        okHttpClient49.failedRoutes = routeSet51;
        okHttpClient0.failedRoutes = routeSet51;
        java.net.ResponseCache responseCache55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient0.setResponseCache(responseCache55);
        java.lang.Class<?> wildcardClass57 = okHttpClient0.getClass();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNotNull(hostnameVerifier40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(routeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient13.proxySelector = proxySelector14;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient19.setConnectionPool(connectionPool28);
        com.squareup.okhttp.ConnectionPool connectionPool31 = okHttpClient30.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient30.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient30.connectionPool = connectionPool35;
        java.net.ResponseCache responseCache37 = okHttpClient30.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient30.sslSocketFactory;
        java.net.Proxy proxy39 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress40 = proxy39.address();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient30.setProxy(proxy39);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient(okHttpClient41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.util.List<java.lang.String> strList48 = okHttpClient43.transports;
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient43.copyWithDefaults();
        java.net.ProxySelector proxySelector52 = okHttpClient51.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory53 = okHttpClient51.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient41.setSSLSocketFactory(sSLSocketFactory53);
        java.lang.String[] strArray55 = sSLSocketFactory53.getSupportedCipherSuites();
        java.lang.String[] strArray56 = sSLSocketFactory53.getSupportedCipherSuites();
        okHttpClient11.sslSocketFactory = sSLSocketFactory53;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = null;
        okHttpClient58.hostnameVerifier = hostnameVerifier59;
        java.net.ResponseCache responseCache61 = null;
        okHttpClient58.responseCache = responseCache61;
        java.util.List<java.lang.String> strList63 = okHttpClient58.transports;
        com.squareup.okhttp.ConnectionPool connectionPool64 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient58.connectionPool = connectionPool64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient58.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient67 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = null;
        okHttpClient67.hostnameVerifier = hostnameVerifier68;
        java.net.ResponseCache responseCache70 = null;
        okHttpClient67.responseCache = responseCache70;
        java.util.List<java.lang.String> strList72 = okHttpClient67.transports;
        com.squareup.okhttp.ConnectionPool connectionPool73 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient67.connectionPool = connectionPool73;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient67.copyWithDefaults();
        java.net.ProxySelector proxySelector76 = okHttpClient75.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory77 = okHttpClient75.getSslSocketFactory();
        okHttpClient58.sslSocketFactory = sSLSocketFactory77;
        java.net.Socket socket79 = sSLSocketFactory77.createSocket();
        java.net.Socket socket80 = sSLSocketFactory77.createSocket();
        java.lang.String[] strArray81 = sSLSocketFactory77.getSupportedCipherSuites();
        java.net.Socket socket82 = sSLSocketFactory77.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket86 = sSLSocketFactory53.createSocket(socket82, "DIRECT", (int) (byte) 1, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNull(okAuthenticator32);
        org.junit.Assert.assertNull(responseCache37);
        org.junit.Assert.assertNull(sSLSocketFactory38);
        org.junit.Assert.assertNotNull(proxy39);
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(okHttpClient51);
// flaky:         org.junit.Assert.assertNull(proxySelector52);
        org.junit.Assert.assertNotNull(sSLSocketFactory53);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(connectionPool64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(connectionPool73);
        org.junit.Assert.assertNotNull(okHttpClient75);
// flaky:         org.junit.Assert.assertNull(proxySelector76);
        org.junit.Assert.assertNotNull(sSLSocketFactory77);
        org.junit.Assert.assertNotNull(socket79);
        org.junit.Assert.assertEquals(socket79.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket80);
        org.junit.Assert.assertEquals(socket80.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(socket82);
        org.junit.Assert.assertEquals(socket82.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.ConnectionPool connectionPool22 = okHttpClient19.connectionPool;
        java.net.ProxySelector proxySelector23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient19.setProxySelector(proxySelector23);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList14 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient0.copyWithDefaults();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(okHttpClient15);
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.util.List<java.lang.String> strList10 = okHttpClient0.getTransports();
        java.net.Proxy proxy11 = okHttpClient0.proxy;
        boolean boolean12 = okHttpClient0.getFollowProtocolRedirects();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setResponseCache(responseCache22);
        java.net.Proxy proxy24 = okHttpClient19.proxy;
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = okHttpClient19.getAuthenticator();
        java.net.ProxySelector proxySelector26 = null;
        okHttpClient19.proxySelector = proxySelector26;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNull(okAuthenticator25);
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        java.util.List<java.lang.String> strList28 = okHttpClient17.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient17.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient17.copyWithDefaults();
        java.util.List<java.lang.String> strList32 = okHttpClient31.getTransports();
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient16.setTransports(strList32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        com.squareup.okhttp.ConnectionPool connectionPool10 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) (byte) 100);
        int int11 = connectionPool10.getConnectionCount();
        okHttpClient0.connectionPool = connectionPool10;
        com.squareup.okhttp.Connection connection13 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool10.maybeShare(connection13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.ResponseCache responseCache6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setResponseCache(responseCache6);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient7.getSslSocketFactory();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(sSLSocketFactory10);
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) 'a', (long) (byte) -1);
        connectionPool2.evictAll();
        com.squareup.okhttp.Address address4 = null;
        com.squareup.okhttp.Connection connection5 = connectionPool2.get(address4);
        connectionPool2.evictAll();
        int int7 = connectionPool2.getConnectionCount();
        org.junit.Assert.assertNull(connection5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setResponseCache(responseCache22);
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient23.getSslSocketFactory();
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        boolean boolean31 = proxy29.equals((java.lang.Object) 1L);
        java.net.SocketAddress socketAddress32 = proxy29.address();
        java.net.SocketAddress socketAddress33 = proxy29.address();
        boolean boolean35 = proxy29.equals((java.lang.Object) (short) 1);
        java.net.SocketAddress socketAddress36 = proxy29.address();
        okHttpClient23.proxy = proxy29;
        java.net.SocketAddress socketAddress38 = proxy29.address();
        java.net.Proxy.Type type39 = proxy29.type();
        java.net.SocketAddress socketAddress40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy41 = new java.net.Proxy(type39, socketAddress40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(routeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(socketAddress32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(socketAddress36);
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type39.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.net.CookieHandler cookieHandler5 = null;
        okHttpClient0.cookieHandler = cookieHandler5;
        java.net.Proxy proxy7 = java.net.Proxy.NO_PROXY;
        boolean boolean9 = proxy7.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient10.okResponseCache();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setResponseCache(responseCache12);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        okHttpClient10.transports = strList16;
        boolean boolean19 = proxy7.equals((java.lang.Object) strList16);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setProxy(proxy7);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setProxySelector(proxySelector24);
        java.net.CookieHandler cookieHandler26 = okHttpClient21.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        java.util.Set<com.squareup.okhttp.Route> routeSet37 = okHttpClient27.failedRoutes;
        okHttpClient21.failedRoutes = routeSet37;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient21.setHostnameVerifier(hostnameVerifier39);
        boolean boolean41 = proxy7.equals((java.lang.Object) okHttpClient40);
        java.net.Proxy proxy42 = okHttpClient40.proxy;
        boolean boolean43 = okHttpClient40.getFollowProtocolRedirects();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(okResponseCache11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(routeSet37);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(proxy42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache12 = okHttpClient9.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.setConnectionPool(connectionPool22);
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient24.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = okHttpClient24.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool29 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient24.connectionPool = connectionPool29;
        java.net.ResponseCache responseCache31 = okHttpClient24.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = okHttpClient24.sslSocketFactory;
        java.net.Proxy proxy33 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress34 = proxy33.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setProxy(proxy33);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient24.setSSLSocketFactory(sSLSocketFactory36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = okHttpClient38.hostnameVerifier;
        java.net.Proxy proxy44 = okHttpClient38.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool47 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient38.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient38.copyWithDefaults();
        java.net.ResponseCache responseCache50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient49.setResponseCache(responseCache50);
        com.squareup.okhttp.OkAuthenticator okAuthenticator52 = okHttpClient49.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient24.setAuthenticator(okAuthenticator52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient9.setAuthenticator(okAuthenticator52);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient9.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient(okHttpClient9);
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient57.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        okHttpClient60.hostnameVerifier = hostnameVerifier61;
        java.net.ResponseCache responseCache63 = null;
        okHttpClient60.responseCache = responseCache63;
        java.util.List<java.lang.String> strList65 = okHttpClient60.transports;
        com.squareup.okhttp.ConnectionPool connectionPool66 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient60.connectionPool = connectionPool66;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient57.setConnectionPool(connectionPool66);
        java.net.Proxy proxy69 = okHttpClient68.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool71 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient70.connectionPool = connectionPool71;
        int int73 = connectionPool71.getSpdyConnectionCount();
        okHttpClient68.connectionPool = connectionPool71;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        javax.net.ssl.HostnameVerifier hostnameVerifier80 = okHttpClient75.hostnameVerifier;
        java.net.Proxy proxy81 = okHttpClient75.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool84 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient75.connectionPool = connectionPool84;
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient75.copyWithDefaults();
        java.net.ResponseCache responseCache87 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient86.setResponseCache(responseCache87);
        com.squareup.okhttp.OkAuthenticator okAuthenticator89 = okHttpClient86.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient68.setAuthenticator(okAuthenticator89);
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient9.setAuthenticator(okAuthenticator89);
        java.net.ProxySelector proxySelector92 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient9.setProxySelector(proxySelector92);
        com.squareup.okhttp.ConnectionPool connectionPool96 = new com.squareup.okhttp.ConnectionPool((int) (short) 0, (long) (byte) 1);
        com.squareup.okhttp.OkHttpClient okHttpClient97 = okHttpClient93.setConnectionPool(connectionPool96);
        com.squareup.okhttp.Address address98 = null;
        com.squareup.okhttp.Connection connection99 = connectionPool96.get(address98);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okResponseCache12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(okAuthenticator26);
        org.junit.Assert.assertNull(responseCache31);
        org.junit.Assert.assertNull(sSLSocketFactory32);
        org.junit.Assert.assertNotNull(proxy33);
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(hostnameVerifier43);
        org.junit.Assert.assertNull(proxy44);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(okAuthenticator52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNotNull(connectionPool66);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNull(proxy69);
        org.junit.Assert.assertNotNull(connectionPool71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNull(hostnameVerifier80);
        org.junit.Assert.assertNull(proxy81);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNotNull(okAuthenticator89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(okHttpClient93);
        org.junit.Assert.assertNotNull(okHttpClient97);
        org.junit.Assert.assertNull(connection99);
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.lang.String[] strArray36 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory34.getDefaultCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket41 = sSLSocketFactory34.createSocket("hi!", 10);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.Proxy proxy8 = okHttpClient0.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = okHttpClient0.getHostnameVerifier();
        java.util.Set<com.squareup.okhttp.Route> routeSet10 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient0.okResponseCache();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(proxy8);
        org.junit.Assert.assertNull(hostnameVerifier9);
        org.junit.Assert.assertNotNull(routeSet10);
        org.junit.Assert.assertNull(okResponseCache11);
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient5.hostnameVerifier;
        java.net.Proxy proxy11 = okHttpClient5.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient5.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient5.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient16.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.copyWithDefaults();
        java.net.ProxySelector proxySelector28 = okHttpClient27.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient27.getSslSocketFactory();
        java.lang.String[] strArray30 = sSLSocketFactory29.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory29;
        java.net.Socket socket32 = sSLSocketFactory29.createSocket();
        java.net.Socket socket33 = sSLSocketFactory29.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket36 = sSLSocketFactory29.createSocket("DIRECT", (int) '4');
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(hostnameVerifier17);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
// flaky:         org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(socket32);
        org.junit.Assert.assertEquals(socket32.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket33);
        org.junit.Assert.assertEquals(socket33.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        boolean boolean9 = okHttpClient6.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler10 = okHttpClient6.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient11.hostnameVerifier;
        java.net.Proxy proxy17 = okHttpClient11.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient11.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setResponseCache(responseCache23);
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = okHttpClient22.authenticator;
        okHttpClient6.authenticator = okAuthenticator25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient0.setAuthenticator(okAuthenticator25);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList29 = okHttpClient0.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        okHttpClient30.hostnameVerifier = hostnameVerifier31;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient30.responseCache = responseCache33;
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = okHttpClient30.hostnameVerifier;
        java.net.Proxy proxy36 = okHttpClient30.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool39 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient30.connectionPool = connectionPool39;
        java.util.List<java.lang.String> strList41 = okHttpClient30.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient30.setHostnameVerifier(hostnameVerifier42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient(okHttpClient30);
        java.util.List<java.lang.String> strList45 = okHttpClient30.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        java.util.List<java.lang.String> strList54 = okHttpClient49.transports;
        com.squareup.okhttp.ConnectionPool connectionPool55 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool55;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient46.setConnectionPool(connectionPool55);
        com.squareup.okhttp.ConnectionPool connectionPool58 = okHttpClient57.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator59 = okHttpClient57.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool62 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient57.connectionPool = connectionPool62;
        java.net.ResponseCache responseCache64 = okHttpClient57.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient57.sslSocketFactory;
        java.net.Proxy proxy66 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress67 = proxy66.address();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient57.setProxy(proxy66);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient57.setSSLSocketFactory(sSLSocketFactory69);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier72 = null;
        okHttpClient71.hostnameVerifier = hostnameVerifier72;
        java.net.ResponseCache responseCache74 = null;
        okHttpClient71.responseCache = responseCache74;
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = okHttpClient71.hostnameVerifier;
        java.net.Proxy proxy77 = okHttpClient71.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool80 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient71.connectionPool = connectionPool80;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient71.copyWithDefaults();
        java.net.ResponseCache responseCache83 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient82.setResponseCache(responseCache83);
        com.squareup.okhttp.OkAuthenticator okAuthenticator85 = okHttpClient82.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient57.setAuthenticator(okAuthenticator85);
        java.net.Proxy proxy87 = okHttpClient86.getProxy();
        java.net.ResponseCache responseCache88 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient86.setResponseCache(responseCache88);
        com.squareup.okhttp.OkAuthenticator okAuthenticator90 = okHttpClient86.getAuthenticator();
        okHttpClient30.authenticator = okAuthenticator90;
        okHttpClient0.authenticator = okAuthenticator90;
        java.lang.Class<?> wildcardClass93 = okHttpClient0.getClass();
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNull(proxy17);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okAuthenticator25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(hostnameVerifier35);
        org.junit.Assert.assertNull(proxy36);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(connectionPool55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNull(okAuthenticator59);
        org.junit.Assert.assertNull(responseCache64);
        org.junit.Assert.assertNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(proxy66);
        org.junit.Assert.assertNull(socketAddress67);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(hostnameVerifier76);
        org.junit.Assert.assertNull(proxy77);
        org.junit.Assert.assertNotNull(okHttpClient82);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(okAuthenticator85);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(proxy87);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNotNull(okAuthenticator90);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient7.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient7.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        java.lang.String[] strArray22 = sSLSocketFactory19.getSupportedCipherSuites();
        java.net.InetAddress inetAddress25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket27 = sSLSocketFactory19.createSocket("DIRECT", (int) (short) 0, inetAddress25, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(okResponseCache6);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient11.setAuthenticator(okAuthenticator39);
        java.net.Proxy proxy41 = okHttpClient40.getProxy();
        java.net.ResponseCache responseCache42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setResponseCache(responseCache42);
        com.squareup.okhttp.OkAuthenticator okAuthenticator44 = okHttpClient40.getAuthenticator();
        boolean boolean45 = okHttpClient40.getFollowProtocolRedirects();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(okAuthenticator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier6;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        java.net.Proxy proxy16 = okHttpClient10.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool19 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient10.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient10.copyWithDefaults();
        java.net.Proxy proxy22 = okHttpClient21.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient21.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setHostnameVerifier(hostnameVerifier23);
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) 'a', (long) (byte) -1);
        connectionPool27.evictAll();
        okHttpClient24.connectionPool = connectionPool27;
        com.squareup.okhttp.Connection connection30 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool27.recycle(connection30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNull(sSLSocketFactory9);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(proxy16);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(proxy22);
        org.junit.Assert.assertNotNull(hostnameVerifier23);
        org.junit.Assert.assertNotNull(okHttpClient24);
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '#', 100L);
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        org.junit.Assert.assertNull(connection4);
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        boolean boolean9 = okHttpClient0.getFollowProtocolRedirects();
        java.net.ResponseCache responseCache10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setResponseCache(responseCache10);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient11.cookieHandler = cookieHandler13;
        boolean boolean15 = okHttpClient11.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler16 = null;
        okHttpClient11.cookieHandler = cookieHandler16;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.SocketAddress socketAddress3 = proxy0.address();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        java.net.Proxy.Type type5 = proxy0.type();
        java.net.SocketAddress socketAddress6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy7 = new java.net.Proxy(type5, socketAddress6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(socketAddress3);
        org.junit.Assert.assertNull(socketAddress4);
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type5.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ProxySelector proxySelector12 = null;
        okHttpClient0.proxySelector = proxySelector12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = null;
        okHttpClient14.authenticator = okAuthenticator17;
        java.net.CookieHandler cookieHandler19 = null;
        okHttpClient14.cookieHandler = cookieHandler19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient24.okResponseCache();
        java.net.ResponseCache responseCache26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setResponseCache(responseCache26);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        okHttpClient24.transports = strList30;
        boolean boolean33 = proxy21.equals((java.lang.Object) strList30);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient14.setProxy(proxy21);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ProxySelector proxySelector38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.setProxySelector(proxySelector38);
        java.net.CookieHandler cookieHandler40 = okHttpClient35.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        java.net.Proxy proxy49 = null;
        okHttpClient41.proxy = proxy49;
        java.util.Set<com.squareup.okhttp.Route> routeSet51 = okHttpClient41.failedRoutes;
        okHttpClient35.failedRoutes = routeSet51;
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient35.setHostnameVerifier(hostnameVerifier53);
        boolean boolean55 = proxy21.equals((java.lang.Object) okHttpClient54);
        okHttpClient0.proxy = proxy21;
        java.lang.Object obj57 = null;
        boolean boolean58 = proxy21.equals(obj57);
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(okResponseCache25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(routeSet51);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) '4');
        okHttpClient0.connectionPool = connectionPool22;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory24);
        java.util.List<java.lang.String> strList26 = okHttpClient0.transports;
        java.net.ResponseCache responseCache27 = okHttpClient0.getResponseCache();
        java.net.ResponseCache responseCache28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient0.setResponseCache(responseCache28);
        boolean boolean30 = okHttpClient29.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient31.connectionPool = connectionPool32;
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = null;
        okHttpClient31.authenticator = okAuthenticator34;
        java.util.List<java.lang.String> strList36 = okHttpClient31.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        java.net.CookieHandler cookieHandler45 = okHttpClient37.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache46 = okHttpClient37.okResponseCache();
        java.net.CookieHandler cookieHandler47 = okHttpClient37.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient(okHttpClient37);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient48.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator50 = okHttpClient48.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        java.net.CookieHandler cookieHandler59 = okHttpClient51.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache60 = okHttpClient51.okResponseCache();
        java.net.CookieHandler cookieHandler61 = okHttpClient51.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient(okHttpClient51);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        okHttpClient63.hostnameVerifier = hostnameVerifier64;
        java.net.ProxySelector proxySelector66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient63.setProxySelector(proxySelector66);
        java.net.CookieHandler cookieHandler68 = okHttpClient63.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ResponseCache responseCache72 = null;
        okHttpClient69.responseCache = responseCache72;
        java.util.List<java.lang.String> strList74 = okHttpClient69.transports;
        com.squareup.okhttp.ConnectionPool connectionPool75 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient69.connectionPool = connectionPool75;
        java.net.Proxy proxy77 = null;
        okHttpClient69.proxy = proxy77;
        java.util.Set<com.squareup.okhttp.Route> routeSet79 = okHttpClient69.failedRoutes;
        okHttpClient63.failedRoutes = routeSet79;
        okHttpClient62.failedRoutes = routeSet79;
        okHttpClient48.failedRoutes = routeSet79;
        okHttpClient31.failedRoutes = routeSet79;
        okHttpClient29.failedRoutes = routeSet79;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(responseCache27);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNull(cookieHandler45);
        org.junit.Assert.assertNull(okResponseCache46);
        org.junit.Assert.assertNull(cookieHandler47);
        org.junit.Assert.assertNull(sSLSocketFactory49);
        org.junit.Assert.assertNull(okAuthenticator50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNull(cookieHandler59);
        org.junit.Assert.assertNull(okResponseCache60);
        org.junit.Assert.assertNull(cookieHandler61);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(cookieHandler68);
        org.junit.Assert.assertNull(strList74);
        org.junit.Assert.assertNotNull(connectionPool75);
        org.junit.Assert.assertNotNull(routeSet79);
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.CookieHandler cookieHandler26 = okHttpClient18.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient18.okResponseCache();
        java.net.CookieHandler cookieHandler28 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy30);
        java.net.Proxy.Type type37 = proxy30.type();
        java.lang.String str38 = proxy30.toString();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DIRECT" + "'", str38, "DIRECT");
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ProxySelector proxySelector15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.setProxySelector(proxySelector15);
        java.net.CookieHandler cookieHandler17 = okHttpClient12.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.Proxy proxy26 = null;
        okHttpClient18.proxy = proxy26;
        java.util.Set<com.squareup.okhttp.Route> routeSet28 = okHttpClient18.failedRoutes;
        okHttpClient12.failedRoutes = routeSet28;
        okHttpClient11.failedRoutes = routeSet28;
        java.util.List<java.lang.String> strList31 = okHttpClient11.getTransports();
        java.net.ResponseCache responseCache32 = null;
        okHttpClient11.responseCache = responseCache32;
        java.net.Proxy proxy34 = java.net.Proxy.NO_PROXY;
        boolean boolean36 = proxy34.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type37 = proxy34.type();
        java.net.Proxy.Type type38 = proxy34.type();
        okHttpClient11.proxy = proxy34;
        com.squareup.okhttp.OkAuthenticator okAuthenticator40 = okHttpClient11.authenticator;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(routeSet28);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(proxy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type38.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(okAuthenticator40);
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient5.hostnameVerifier;
        java.net.Proxy proxy11 = okHttpClient5.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient5.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient5.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient16.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.copyWithDefaults();
        java.net.ProxySelector proxySelector28 = okHttpClient27.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient27.getSslSocketFactory();
        java.lang.String[] strArray30 = sSLSocketFactory29.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory29;
        java.net.Socket socket32 = sSLSocketFactory29.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket35 = sSLSocketFactory29.createSocket("hi!", (int) '4');
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(hostnameVerifier17);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
// flaky:         org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(socket32);
        org.junit.Assert.assertEquals(socket32.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = okHttpClient0.proxySelector;
        java.net.Proxy proxy4 = okHttpClient0.proxy;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        boolean boolean6 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool8 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress13 = proxy12.address();
        java.net.SocketAddress socketAddress14 = proxy12.address();
        okHttpClient7.proxy = proxy12;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setProxy(proxy12);
        java.net.CookieHandler cookieHandler17 = okHttpClient0.getCookieHandler();
        java.net.ProxySelector proxySelector18 = okHttpClient0.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient19.hostnameVerifier;
        java.net.Proxy proxy25 = okHttpClient19.getProxy();
        java.net.CookieHandler cookieHandler26 = null;
        okHttpClient19.cookieHandler = cookieHandler26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.util.List<java.lang.String> strList33 = okHttpClient28.transports;
        com.squareup.okhttp.ConnectionPool connectionPool34 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool34;
        java.net.CookieHandler cookieHandler36 = okHttpClient28.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache37 = okHttpClient28.okResponseCache();
        java.net.CookieHandler cookieHandler38 = okHttpClient28.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient28);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ProxySelector proxySelector43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient40.setProxySelector(proxySelector43);
        java.net.CookieHandler cookieHandler45 = okHttpClient40.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        java.net.ResponseCache responseCache49 = null;
        okHttpClient46.responseCache = responseCache49;
        java.util.List<java.lang.String> strList51 = okHttpClient46.transports;
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool52;
        java.net.Proxy proxy54 = null;
        okHttpClient46.proxy = proxy54;
        java.util.Set<com.squareup.okhttp.Route> routeSet56 = okHttpClient46.failedRoutes;
        okHttpClient40.failedRoutes = routeSet56;
        okHttpClient39.failedRoutes = routeSet56;
        okHttpClient19.failedRoutes = routeSet56;
        okHttpClient0.failedRoutes = routeSet56;
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool((int) (short) -1, 0L);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient0.setConnectionPool(connectionPool63);
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = okHttpClient64.hostnameVerifier;
        java.net.CookieHandler cookieHandler66 = okHttpClient64.getCookieHandler();
        org.junit.Assert.assertNull(proxySelector3);
        org.junit.Assert.assertNull(proxy4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertNull(socketAddress13);
        org.junit.Assert.assertNull(socketAddress14);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNull(hostnameVerifier24);
        org.junit.Assert.assertNull(proxy25);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(connectionPool34);
        org.junit.Assert.assertNull(cookieHandler36);
        org.junit.Assert.assertNull(okResponseCache37);
        org.junit.Assert.assertNull(cookieHandler38);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNull(cookieHandler45);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNotNull(routeSet56);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNull(hostnameVerifier65);
        org.junit.Assert.assertNull(cookieHandler66);
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient11.copyWithDefaults();
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient11.setCookieHandler(cookieHandler19);
        java.util.Set<com.squareup.okhttp.Route> routeSet21 = okHttpClient20.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool31 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient22.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient22.copyWithDefaults();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient33.setResponseCache(responseCache34);
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.setProxySelector(proxySelector36);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient37.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient20.setSSLSocketFactory(sSLSocketFactory38);
        java.lang.Class<?> wildcardClass40 = sSLSocketFactory38.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(routeSet21);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(sSLSocketFactory38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        boolean boolean6 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient9.hostnameVerifier;
        java.net.Proxy proxy15 = okHttpClient9.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool18 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient9.connectionPool = connectionPool18;
        java.util.List<java.lang.String> strList20 = okHttpClient9.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient9.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient22.copyWithDefaults();
        okHttpClient23.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        java.net.Proxy proxy34 = null;
        okHttpClient26.proxy = proxy34;
        boolean boolean36 = okHttpClient26.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient26.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier45;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache47 = okHttpClient39.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory48 = okHttpClient39.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = okHttpClient49.hostnameVerifier;
        java.net.Proxy proxy55 = okHttpClient49.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool58 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient49.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient49.copyWithDefaults();
        java.net.Proxy proxy61 = okHttpClient60.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = okHttpClient60.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient39.setHostnameVerifier(hostnameVerifier62);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient38.setHostnameVerifier(hostnameVerifier62);
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient23.setHostnameVerifier(hostnameVerifier62);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient8.setHostnameVerifier(hostnameVerifier62);
        java.net.ProxySelector proxySelector67 = okHttpClient66.proxySelector;
        java.lang.Class<?> wildcardClass68 = okHttpClient66.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNull(proxy15);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNull(okResponseCache47);
        org.junit.Assert.assertNull(sSLSocketFactory48);
        org.junit.Assert.assertNull(hostnameVerifier54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNull(proxy61);
        org.junit.Assert.assertNotNull(hostnameVerifier62);
        org.junit.Assert.assertNotNull(okHttpClient63);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(proxySelector67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((-1), (long) (short) -1);
        int int3 = connectionPool2.getSpdyConnectionCount();
        com.squareup.okhttp.Address address4 = null;
        com.squareup.okhttp.Connection connection5 = connectionPool2.get(address4);
        com.squareup.okhttp.Connection connection6 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(connection5);
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient13.cookieHandler = cookieHandler14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient16.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient16.sslSocketFactory = sSLSocketFactory35;
        java.net.Socket socket37 = sSLSocketFactory35.createSocket();
        java.net.Socket socket38 = sSLSocketFactory35.createSocket();
        okHttpClient13.sslSocketFactory = sSLSocketFactory35;
        java.net.InetAddress inetAddress42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket44 = sSLSocketFactory35.createSocket("hi!", (-1), inetAddress42, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(socket37);
        org.junit.Assert.assertEquals(socket37.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool16;
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = null;
        okHttpClient15.authenticator = okAuthenticator18;
        java.net.CookieHandler cookieHandler20 = null;
        okHttpClient15.cookieHandler = cookieHandler20;
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        boolean boolean24 = proxy22.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache26 = okHttpClient25.okResponseCache();
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient25.setResponseCache(responseCache27);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        okHttpClient25.transports = strList31;
        boolean boolean34 = proxy22.equals((java.lang.Object) strList31);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient15.setProxy(proxy22);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy22);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient38.getAuthenticator();
        boolean boolean40 = okHttpClient38.getFollowProtocolRedirects();
        java.util.Set<com.squareup.okhttp.Route> routeSet41 = okHttpClient38.failedRoutes;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(okResponseCache26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(okAuthenticator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(routeSet41);
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) '4');
        okHttpClient0.connectionPool = connectionPool22;
        java.net.ResponseCache responseCache24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient0.setResponseCache(responseCache24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = okHttpClient26.hostnameVerifier;
        java.net.Proxy proxy32 = okHttpClient26.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient26.connectionPool = connectionPool35;
        connectionPool35.evictAll();
        com.squareup.okhttp.Address address38 = null;
        com.squareup.okhttp.Connection connection39 = connectionPool35.get(address38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient25.setConnectionPool(connectionPool35);
        int int41 = connectionPool35.getSpdyConnectionCount();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(hostnameVerifier31);
        org.junit.Assert.assertNull(proxy32);
        org.junit.Assert.assertNull(connection39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient13.hostnameVerifier;
        java.net.Proxy proxy19 = okHttpClient13.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient13.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.copyWithDefaults();
        java.net.ResponseCache responseCache25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setResponseCache(responseCache25);
        okHttpClient26.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList29 = okHttpClient26.getTransports();
        okHttpClient11.transports = strList29;
        com.squareup.okhttp.ConnectionPool connectionPool33 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (byte) 100);
        okHttpClient11.connectionPool = connectionPool33;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient11.sslSocketFactory;
        java.net.Socket socket36 = sSLSocketFactory35.createSocket();
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.net.InetAddress inetAddress38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket40 = sSLSocketFactory35.createSocket(inetAddress38, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNull(proxy19);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(socket36);
        org.junit.Assert.assertEquals(socket36.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.ConnectionPool connectionPool14 = null;
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        java.net.CookieHandler cookieHandler24 = okHttpClient16.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient16.okResponseCache();
        java.net.CookieHandler cookieHandler26 = okHttpClient16.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient(okHttpClient16);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ProxySelector proxySelector31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.setProxySelector(proxySelector31);
        java.net.CookieHandler cookieHandler33 = okHttpClient28.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        java.net.Proxy proxy42 = null;
        okHttpClient34.proxy = proxy42;
        java.util.Set<com.squareup.okhttp.Route> routeSet44 = okHttpClient34.failedRoutes;
        okHttpClient28.failedRoutes = routeSet44;
        okHttpClient27.failedRoutes = routeSet44;
        java.util.List<java.lang.String> strList47 = okHttpClient27.getTransports();
        java.net.ResponseCache responseCache48 = null;
        okHttpClient27.responseCache = responseCache48;
        java.net.Proxy proxy50 = java.net.Proxy.NO_PROXY;
        boolean boolean52 = proxy50.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type53 = proxy50.type();
        java.net.Proxy.Type type54 = proxy50.type();
        okHttpClient27.proxy = proxy50;
        okHttpClient11.proxy = proxy50;
        java.net.CookieHandler cookieHandler57 = null;
        okHttpClient11.cookieHandler = cookieHandler57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.ResponseCache responseCache61 = null;
        okHttpClient60.responseCache = responseCache61;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(hostnameVerifier13);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(okResponseCache25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(cookieHandler33);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNotNull(routeSet44);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(proxy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type53.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type54.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 100, (long) (short) 1);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.ConnectionPool connectionPool24 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        okHttpClient19.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient19.copyWithDefaults();
        java.net.Proxy proxy27 = okHttpClient26.getProxy();
        boolean boolean28 = okHttpClient26.followProtocolRedirects;
        java.net.Proxy proxy29 = okHttpClient26.proxy;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(proxy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(proxy29);
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler21 = okHttpClient0.cookieHandler;
        java.net.CookieHandler cookieHandler22 = null;
        okHttpClient0.cookieHandler = cookieHandler22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setConnectionPool(connectionPool33);
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient35.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator37 = okHttpClient35.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool40 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient35.connectionPool = connectionPool40;
        java.net.ResponseCache responseCache42 = okHttpClient35.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient35.sslSocketFactory;
        java.net.Proxy proxy44 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress45 = proxy44.address();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient35.setProxy(proxy44);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient(okHttpClient46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient48.copyWithDefaults();
        java.net.ProxySelector proxySelector57 = okHttpClient56.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory58 = okHttpClient56.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient46.setSSLSocketFactory(sSLSocketFactory58);
        java.lang.String[] strArray60 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray61 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray62 = sSLSocketFactory58.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory58;
        java.util.List<java.lang.String> strList64 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList64;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList64;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNull(okAuthenticator37);
        org.junit.Assert.assertNull(responseCache42);
        org.junit.Assert.assertNull(sSLSocketFactory43);
        org.junit.Assert.assertNotNull(proxy44);
        org.junit.Assert.assertNull(socketAddress45);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(okHttpClient56);
// flaky:         org.junit.Assert.assertNull(proxySelector57);
        org.junit.Assert.assertNotNull(sSLSocketFactory58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.ConnectionPool connectionPool4 = new com.squareup.okhttp.ConnectionPool((int) (short) -1, (long) '#');
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient1.setConnectionPool(connectionPool4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ProxySelector proxySelector9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.setProxySelector(proxySelector9);
        java.net.ResponseCache responseCache11 = null;
        okHttpClient10.responseCache = responseCache11;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient10.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient10.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient15.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient17.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient18.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = okHttpClient26.hostnameVerifier;
        java.net.Proxy proxy32 = okHttpClient26.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient26.connectionPool = connectionPool35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient26.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = okHttpClient37.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient21.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector49 = okHttpClient48.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient48.getSslSocketFactory();
        java.lang.String[] strArray51 = sSLSocketFactory50.getSupportedCipherSuites();
        okHttpClient21.sslSocketFactory = sSLSocketFactory50;
        java.net.Socket socket53 = sSLSocketFactory50.createSocket();
        java.net.Socket socket54 = sSLSocketFactory50.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket58 = sSLSocketFactory19.createSocket(socket54, "hi!", (-1), false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(hostnameVerifier31);
        org.junit.Assert.assertNull(proxy32);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(hostnameVerifier38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
// flaky:         org.junit.Assert.assertNull(proxySelector49);
        org.junit.Assert.assertNotNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(socket53);
        org.junit.Assert.assertEquals(socket53.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket54);
        org.junit.Assert.assertEquals(socket54.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory33.getSupportedCipherSuites();
        java.net.Socket socket38 = sSLSocketFactory33.createSocket();
        java.net.Socket socket39 = sSLSocketFactory33.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket42 = sSLSocketFactory33.createSocket("DIRECT", (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        java.net.Proxy proxy10 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setConnectionPool(connectionPool20);
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool(0, 0L);
        okHttpClient11.connectionPool = connectionPool25;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = okHttpClient11.sslSocketFactory;
        java.net.CookieHandler cookieHandler28 = okHttpClient11.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.Proxy proxy30 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ResponseCache responseCache34 = null;
        okHttpClient31.responseCache = responseCache34;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient31.hostnameVerifier;
        java.net.Proxy proxy37 = okHttpClient31.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool40 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient31.connectionPool = connectionPool40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient31.copyWithDefaults();
        java.net.CookieHandler cookieHandler43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient42.setCookieHandler(cookieHandler43);
        java.util.List<java.lang.String> strList45 = okHttpClient42.transports;
        okHttpClient11.transports = strList45;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList45;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient0.setTransports(strList45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(proxy10);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(sSLSocketFactory27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNull(proxy30);
        org.junit.Assert.assertNull(hostnameVerifier36);
        org.junit.Assert.assertNull(proxy37);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(strList45);
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient7.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient7.sslSocketFactory = sSLSocketFactory19;
        java.lang.String[] strArray21 = sSLSocketFactory19.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient22.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ResponseCache responseCache34 = null;
        okHttpClient31.responseCache = responseCache34;
        java.util.List<java.lang.String> strList36 = okHttpClient31.transports;
        com.squareup.okhttp.ConnectionPool connectionPool37 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient31.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient31.copyWithDefaults();
        java.net.ProxySelector proxySelector40 = okHttpClient39.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient39.getSslSocketFactory();
        okHttpClient22.sslSocketFactory = sSLSocketFactory41;
        java.net.Socket socket43 = sSLSocketFactory41.createSocket();
        java.net.Socket socket44 = sSLSocketFactory41.createSocket();
        java.lang.String[] strArray45 = sSLSocketFactory41.getSupportedCipherSuites();
        java.net.Socket socket46 = sSLSocketFactory41.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket50 = sSLSocketFactory19.createSocket(socket46, "hi!", (int) (short) 1, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(okResponseCache6);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertNotNull(okHttpClient39);
// flaky:         org.junit.Assert.assertNull(proxySelector40);
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        org.junit.Assert.assertNotNull(socket43);
        org.junit.Assert.assertEquals(socket43.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket44);
        org.junit.Assert.assertEquals(socket44.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(socket46);
        org.junit.Assert.assertEquals(socket46.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setResponseCache(responseCache23);
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient24.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient26.copyWithDefaults();
        boolean boolean35 = okHttpClient34.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = okHttpClient34.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient24.setSSLSocketFactory(sSLSocketFactory36);
        java.net.Socket socket38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket42 = sSLSocketFactory36.createSocket(socket38, "", (int) (short) 100, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory36);
        org.junit.Assert.assertNotNull(okHttpClient37);
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient0.connectionPool;
        java.net.CookieHandler cookieHandler6 = okHttpClient0.cookieHandler;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(cookieHandler4);
        org.junit.Assert.assertNull(connectionPool5);
        org.junit.Assert.assertNull(cookieHandler6);
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setResponseCache(responseCache14);
        java.net.CookieHandler cookieHandler16 = null;
        okHttpClient15.cookieHandler = cookieHandler16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient15.getHostnameVerifier();
        java.net.ResponseCache responseCache19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient15.setResponseCache(responseCache19);
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = okHttpClient20.hostnameVerifier;
        boolean boolean22 = okHttpClient20.followProtocolRedirects;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(hostnameVerifier21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        java.util.List<java.lang.String> strList19 = okHttpClient11.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setResponseCache(responseCache21);
        boolean boolean23 = okHttpClient20.followProtocolRedirects;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient0.connectionPool;
        java.util.List<java.lang.String> strList13 = okHttpClient0.getTransports();
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient0.cookieHandler = cookieHandler14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ResponseCache responseCache17 = null;
        okHttpClient0.responseCache = responseCache17;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache19 = okHttpClient0.okResponseCache();
        java.util.List<java.lang.String> strList20 = okHttpClient0.transports;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(okResponseCache19);
        org.junit.Assert.assertNull(strList20);
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.Proxy proxy8 = okHttpClient0.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = okHttpClient0.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        java.net.Proxy proxy18 = null;
        okHttpClient10.proxy = proxy18;
        java.net.Proxy proxy20 = okHttpClient10.getProxy();
        java.net.ProxySelector proxySelector21 = null;
        okHttpClient10.proxySelector = proxySelector21;
        java.net.Proxy proxy23 = okHttpClient10.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient10.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory25 = okHttpClient24.sslSocketFactory;
        okHttpClient0.sslSocketFactory = sSLSocketFactory25;
        java.net.Socket socket27 = sSLSocketFactory25.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket30 = sSLSocketFactory25.createSocket("", 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(proxy8);
        org.junit.Assert.assertNull(hostnameVerifier9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(sSLSocketFactory25);
        org.junit.Assert.assertNotNull(socket27);
        org.junit.Assert.assertEquals(socket27.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient29.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient11.setAuthenticator(okAuthenticator32);
        java.net.Proxy proxy34 = okHttpClient33.getProxy();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okAuthenticator32);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNull(proxy34);
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient0.responseCache = responseCache6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ResponseCache responseCache11 = null;
        okHttpClient8.responseCache = responseCache11;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient8.hostnameVerifier;
        java.net.Proxy proxy14 = okHttpClient8.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool17 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient8.connectionPool = connectionPool17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient8.copyWithDefaults();
        java.net.Proxy proxy20 = okHttpClient19.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = okHttpClient19.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setHostnameVerifier(hostnameVerifier21);
        java.net.CookieHandler cookieHandler23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setCookieHandler(cookieHandler23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        java.net.Proxy proxy33 = null;
        okHttpClient25.proxy = proxy33;
        java.net.Proxy proxy35 = okHttpClient25.getProxy();
        java.net.ProxySelector proxySelector36 = null;
        okHttpClient25.proxySelector = proxySelector36;
        java.net.Proxy proxy38 = okHttpClient25.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient25.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory40 = okHttpClient39.sslSocketFactory;
        java.net.Socket socket41 = sSLSocketFactory40.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient24.setSSLSocketFactory(sSLSocketFactory40);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.net.Proxy proxy48 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress49 = proxy48.address();
        java.net.SocketAddress socketAddress50 = proxy48.address();
        okHttpClient43.proxy = proxy48;
        com.squareup.okhttp.ConnectionPool connectionPool54 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address55 = null;
        com.squareup.okhttp.Connection connection56 = connectionPool54.get(address55);
        int int57 = connectionPool54.getSpdyConnectionCount();
        connectionPool54.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient43.setConnectionPool(connectionPool54);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        okHttpClient60.hostnameVerifier = hostnameVerifier61;
        java.net.ProxySelector proxySelector63 = okHttpClient60.proxySelector;
        java.net.ProxySelector proxySelector64 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient60.setProxySelector(proxySelector64);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = null;
        okHttpClient66.hostnameVerifier = hostnameVerifier67;
        java.net.ResponseCache responseCache69 = null;
        okHttpClient66.responseCache = responseCache69;
        java.util.List<java.lang.String> strList71 = okHttpClient66.transports;
        com.squareup.okhttp.ConnectionPool connectionPool72 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient66.connectionPool = connectionPool72;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient66.copyWithDefaults();
        java.net.ProxySelector proxySelector75 = okHttpClient74.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory76 = okHttpClient74.getSslSocketFactory();
        okHttpClient60.sslSocketFactory = sSLSocketFactory76;
        okHttpClient43.sslSocketFactory = sSLSocketFactory76;
        java.lang.String[] strArray79 = sSLSocketFactory76.getSupportedCipherSuites();
        java.lang.String[] strArray80 = sSLSocketFactory76.getSupportedCipherSuites();
        java.net.Socket socket81 = sSLSocketFactory76.createSocket();
        java.net.Socket socket82 = sSLSocketFactory76.createSocket();
        java.io.InputStream inputStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket85 = sSLSocketFactory40.createSocket(socket82, inputStream83, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(proxy14);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNotNull(hostnameVerifier21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNull(proxy35);
        org.junit.Assert.assertNull(proxy38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(sSLSocketFactory40);
        org.junit.Assert.assertNotNull(socket41);
        org.junit.Assert.assertEquals(socket41.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNotNull(proxy48);
        org.junit.Assert.assertNull(socketAddress49);
        org.junit.Assert.assertNull(socketAddress50);
        org.junit.Assert.assertNull(connection56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNull(proxySelector63);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNotNull(connectionPool72);
        org.junit.Assert.assertNotNull(okHttpClient74);
// flaky:         org.junit.Assert.assertNull(proxySelector75);
        org.junit.Assert.assertNotNull(sSLSocketFactory76);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(socket81);
        org.junit.Assert.assertEquals(socket81.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket82);
        org.junit.Assert.assertEquals(socket82.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = okHttpClient21.hostnameVerifier;
        java.net.Proxy proxy27 = okHttpClient21.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool30 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient21.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.copyWithDefaults();
        java.net.Proxy proxy33 = okHttpClient32.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = okHttpClient32.getHostnameVerifier();
        okHttpClient0.hostnameVerifier = hostnameVerifier34;
        java.net.CookieHandler cookieHandler36 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient0.setFollowProtocolRedirects(false);
        java.lang.Class<?> wildcardClass39 = okHttpClient0.getClass();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(hostnameVerifier26);
        org.junit.Assert.assertNull(proxy27);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(hostnameVerifier34);
        org.junit.Assert.assertNull(cookieHandler36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient0.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.Proxy proxy15 = java.net.Proxy.NO_PROXY;
        boolean boolean17 = proxy15.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type18 = proxy15.type();
        java.net.SocketAddress socketAddress19 = proxy15.address();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient9.setProxy(proxy15);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setProxySelector(proxySelector24);
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = okHttpClient21.hostnameVerifier;
        java.net.CookieHandler cookieHandler27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient21.setCookieHandler(cookieHandler27);
        java.net.ResponseCache responseCache29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setResponseCache(responseCache29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ResponseCache responseCache34 = null;
        okHttpClient31.responseCache = responseCache34;
        java.util.List<java.lang.String> strList36 = okHttpClient31.transports;
        com.squareup.okhttp.ConnectionPool connectionPool37 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient31.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient31.copyWithDefaults();
        java.net.ProxySelector proxySelector40 = okHttpClient39.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient39.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient28.setSSLSocketFactory(sSLSocketFactory41);
        boolean boolean43 = proxy15.equals((java.lang.Object) sSLSocketFactory41);
        java.lang.String[] strArray44 = sSLSocketFactory41.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory41);
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket48 = sSLSocketFactory41.createSocket("hi!", (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(proxy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type18.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(hostnameVerifier26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertNotNull(okHttpClient39);
// flaky:         org.junit.Assert.assertNull(proxySelector40);
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(okHttpClient45);
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        java.net.SocketAddress socketAddress12 = proxy6.address();
        java.net.Proxy.Type type13 = proxy6.type();
        java.net.SocketAddress socketAddress14 = proxy6.address();
        java.net.SocketAddress socketAddress15 = proxy6.address();
        com.squareup.okhttp.ConnectionPool connectionPool18 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        boolean boolean19 = proxy6.equals((java.lang.Object) connectionPool18);
        com.squareup.okhttp.Connection connection20 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool18.maybeShare(connection20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(socketAddress12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type13.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress14);
        org.junit.Assert.assertNull(socketAddress15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ResponseCache responseCache11 = null;
        okHttpClient8.responseCache = responseCache11;
        java.util.List<java.lang.String> strList13 = okHttpClient8.transports;
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient8.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool14);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = okHttpClient0.authenticator;
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(sSLSocketFactory5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(okAuthenticator18);
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.ProxySelector proxySelector8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setProxySelector(proxySelector8);
        java.net.ResponseCache responseCache10 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool11 = okHttpClient0.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        java.util.List<java.lang.String> strList17 = okHttpClient12.transports;
        com.squareup.okhttp.ConnectionPool connectionPool18 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient21.copyWithDefaults();
        java.net.ProxySelector proxySelector30 = okHttpClient29.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = okHttpClient29.getSslSocketFactory();
        okHttpClient12.sslSocketFactory = sSLSocketFactory31;
        java.net.Socket socket33 = sSLSocketFactory31.createSocket();
        java.net.Socket socket34 = sSLSocketFactory31.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory31;
        java.net.InetAddress inetAddress36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket38 = sSLSocketFactory31.createSocket(inetAddress36, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(responseCache10);
        org.junit.Assert.assertNull(connectionPool11);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(okHttpClient29);
// flaky:         org.junit.Assert.assertNull(proxySelector30);
        org.junit.Assert.assertNotNull(sSLSocketFactory31);
        org.junit.Assert.assertNotNull(socket33);
        org.junit.Assert.assertEquals(socket33.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket34);
        org.junit.Assert.assertEquals(socket34.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        java.net.ResponseCache responseCache16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setResponseCache(responseCache16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.setConnectionPool(connectionPool27);
        java.net.ResponseCache responseCache30 = okHttpClient18.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = okHttpClient18.sslSocketFactory;
        java.net.CookieHandler cookieHandler32 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkAuthenticator okAuthenticator33 = okHttpClient18.authenticator;
        java.util.Set<com.squareup.okhttp.Route> routeSet34 = okHttpClient18.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient36.hostnameVerifier;
        java.net.Proxy proxy42 = okHttpClient36.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool45 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient36.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient36.copyWithDefaults();
        java.net.ResponseCache responseCache48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient47.setResponseCache(responseCache48);
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = okHttpClient49.hostnameVerifier;
        okHttpClient35.hostnameVerifier = hostnameVerifier50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient13.setHostnameVerifier(hostnameVerifier50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ResponseCache responseCache56 = null;
        okHttpClient53.responseCache = responseCache56;
        java.util.List<java.lang.String> strList58 = okHttpClient53.transports;
        com.squareup.okhttp.ConnectionPool connectionPool59 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient53.connectionPool = connectionPool59;
        java.net.Proxy proxy61 = null;
        okHttpClient53.proxy = proxy61;
        boolean boolean63 = okHttpClient53.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient53.copyWithDefaults();
        java.net.ProxySelector proxySelector65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient64.setProxySelector(proxySelector65);
        com.squareup.okhttp.OkAuthenticator okAuthenticator67 = okHttpClient64.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient13.setAuthenticator(okAuthenticator67);
        java.net.URL uRL69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection70 = okHttpClient68.open(uRL69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNull(responseCache30);
        org.junit.Assert.assertNull(sSLSocketFactory31);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNull(okAuthenticator33);
        org.junit.Assert.assertNotNull(routeSet34);
        org.junit.Assert.assertNull(hostnameVerifier41);
        org.junit.Assert.assertNull(proxy42);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(hostnameVerifier50);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(connectionPool59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNotNull(okAuthenticator67);
        org.junit.Assert.assertNotNull(okHttpClient68);
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) 1);
        int int3 = connectionPool2.getHttpConnectionCount();
        com.squareup.okhttp.Connection connection4 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList12 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient14.copyWithDefaults();
        java.lang.Class<?> wildcardClass16 = okHttpClient15.getClass();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        int int18 = connectionPool14.getHttpConnectionCount();
        int int19 = connectionPool14.getHttpConnectionCount();
        com.squareup.okhttp.Address address20 = null;
        com.squareup.okhttp.Connection connection21 = connectionPool14.get(address20);
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(connection21);
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory18);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient11.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.lang.Class<?> wildcardClass22 = okHttpClient21.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 0, (long) (byte) 1);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient4.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        java.net.Proxy proxy48 = java.net.Proxy.NO_PROXY;
        boolean boolean50 = proxy48.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type51 = proxy48.type();
        java.net.SocketAddress socketAddress52 = proxy48.address();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient42.setProxy(proxy48);
        java.net.SocketAddress socketAddress54 = proxy48.address();
        java.net.Proxy.Type type55 = proxy48.type();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = null;
        okHttpClient56.hostnameVerifier = hostnameVerifier57;
        java.net.ProxySelector proxySelector59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient56.setProxySelector(proxySelector59);
        java.net.Proxy proxy61 = okHttpClient60.getProxy();
        java.util.List<java.lang.String> strList62 = okHttpClient60.getTransports();
        java.net.ResponseCache responseCache63 = null;
        okHttpClient60.responseCache = responseCache63;
        boolean boolean65 = proxy48.equals((java.lang.Object) responseCache63);
        okHttpClient4.proxy = proxy48;
        java.lang.String str67 = proxy48.toString();
        java.lang.Object obj68 = null;
        boolean boolean69 = proxy48.equals(obj68);
        java.net.Proxy.Type type70 = proxy48.type();
        java.net.SocketAddress socketAddress71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy72 = new java.net.Proxy(type70, socketAddress71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(proxy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type51.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNull(socketAddress54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type55.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNull(proxy61);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DIRECT" + "'", str67, "DIRECT");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type70.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.CookieHandler cookieHandler26 = okHttpClient18.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient18.okResponseCache();
        java.net.CookieHandler cookieHandler28 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy30);
        java.net.Proxy.Type type37 = proxy30.type();
        java.net.SocketAddress socketAddress38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy39 = new java.net.Proxy(type37, socketAddress38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.util.List<java.lang.String> strList6 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient7.getSslSocketFactory();
        java.lang.String[] strArray9 = sSLSocketFactory8.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ProxySelector proxySelector13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.setProxySelector(proxySelector13);
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        java.net.CookieHandler cookieHandler16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient10.setCookieHandler(cookieHandler16);
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = okHttpClient10.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        java.net.Proxy proxy25 = java.net.Proxy.NO_PROXY;
        boolean boolean27 = proxy25.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type28 = proxy25.type();
        java.net.SocketAddress socketAddress29 = proxy25.address();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient19.setProxy(proxy25);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient31.setProxySelector(proxySelector34);
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient31.hostnameVerifier;
        java.net.CookieHandler cookieHandler37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient31.setCookieHandler(cookieHandler37);
        java.net.ResponseCache responseCache39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.setResponseCache(responseCache39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient41.copyWithDefaults();
        java.net.ProxySelector proxySelector50 = okHttpClient49.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory51 = okHttpClient49.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient38.setSSLSocketFactory(sSLSocketFactory51);
        boolean boolean53 = proxy25.equals((java.lang.Object) sSLSocketFactory51);
        java.lang.String[] strArray54 = sSLSocketFactory51.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient10.setSSLSocketFactory(sSLSocketFactory51);
        java.net.ResponseCache responseCache56 = null;
        okHttpClient55.responseCache = responseCache56;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory58 = okHttpClient55.sslSocketFactory;
        java.net.Socket socket59 = sSLSocketFactory58.createSocket();
        java.io.InputStream inputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket62 = sSLSocketFactory8.createSocket(socket59, inputStream60, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(sSLSocketFactory8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(okAuthenticator18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(proxy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type28.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress29);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(hostnameVerifier36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(okHttpClient49);
// flaky:         org.junit.Assert.assertNull(proxySelector50);
        org.junit.Assert.assertNotNull(sSLSocketFactory51);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(sSLSocketFactory58);
        org.junit.Assert.assertNotNull(socket59);
        org.junit.Assert.assertEquals(socket59.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory6;
        java.net.ProxySelector proxySelector8 = okHttpClient0.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient9.cookieHandler = cookieHandler14;
        java.net.Proxy proxy16 = java.net.Proxy.NO_PROXY;
        boolean boolean18 = proxy16.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient19.okResponseCache();
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setResponseCache(responseCache21);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        okHttpClient19.transports = strList25;
        boolean boolean28 = proxy16.equals((java.lang.Object) strList25);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient9.setProxy(proxy16);
        com.squareup.okhttp.ConnectionPool connectionPool32 = new com.squareup.okhttp.ConnectionPool(0, 100L);
        int int33 = connectionPool32.getHttpConnectionCount();
        okHttpClient9.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient0.setConnectionPool(connectionPool32);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient36.hostnameVerifier;
        java.net.Proxy proxy42 = okHttpClient36.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool45 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient36.connectionPool = connectionPool45;
        java.util.List<java.lang.String> strList47 = okHttpClient36.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient36.setHostnameVerifier(hostnameVerifier48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient(okHttpClient36);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ProxySelector proxySelector54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.setProxySelector(proxySelector54);
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient55.copyWithDefaults();
        java.net.ProxySelector proxySelector57 = null;
        okHttpClient56.proxySelector = proxySelector57;
        com.squareup.okhttp.OkAuthenticator okAuthenticator59 = okHttpClient56.authenticator;
        okHttpClient50.authenticator = okAuthenticator59;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient0.setAuthenticator(okAuthenticator59);
        java.lang.Class<?> wildcardClass62 = okAuthenticator59.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(proxySelector8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNotNull(proxy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(hostnameVerifier41);
        org.junit.Assert.assertNull(proxy42);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNotNull(okAuthenticator59);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ResponseCache responseCache11 = null;
        okHttpClient8.responseCache = responseCache11;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient8.hostnameVerifier;
        java.net.Proxy proxy14 = okHttpClient8.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient15.okResponseCache();
        java.net.ResponseCache responseCache17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setResponseCache(responseCache17);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        okHttpClient15.transports = strList21;
        okHttpClient8.transports = strList21;
        java.util.Set<com.squareup.okhttp.Route> routeSet25 = okHttpClient8.failedRoutes;
        java.net.CookieHandler cookieHandler26 = null;
        okHttpClient8.cookieHandler = cookieHandler26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache29 = okHttpClient28.okResponseCache();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setResponseCache(responseCache30);
        java.net.CookieHandler cookieHandler32 = okHttpClient28.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = okHttpClient33.hostnameVerifier;
        java.net.Proxy proxy39 = okHttpClient33.getProxy();
        java.net.CookieHandler cookieHandler40 = null;
        okHttpClient33.cookieHandler = cookieHandler40;
        okHttpClient33.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = okHttpClient44.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient44.sslSocketFactory;
        java.net.CookieHandler cookieHandler51 = okHttpClient44.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = okHttpClient44.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient53.connectionPool = connectionPool54;
        com.squareup.okhttp.OkAuthenticator okAuthenticator56 = null;
        okHttpClient53.authenticator = okAuthenticator56;
        java.util.List<java.lang.String> strList58 = okHttpClient53.transports;
        java.net.ResponseCache responseCache59 = null;
        okHttpClient53.responseCache = responseCache59;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = okHttpClient61.hostnameVerifier;
        java.net.Proxy proxy67 = okHttpClient61.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool70 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient61.connectionPool = connectionPool70;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient61.copyWithDefaults();
        java.net.Proxy proxy73 = okHttpClient72.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = okHttpClient72.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient53.setHostnameVerifier(hostnameVerifier74);
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient44.setHostnameVerifier(hostnameVerifier74);
        okHttpClient33.hostnameVerifier = hostnameVerifier74;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient28.setHostnameVerifier(hostnameVerifier74);
        okHttpClient8.hostnameVerifier = hostnameVerifier74;
        java.net.Proxy proxy80 = okHttpClient8.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient81 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache82 = okHttpClient81.okResponseCache();
        java.net.ResponseCache responseCache83 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient81.setResponseCache(responseCache83);
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        okHttpClient81.transports = strList87;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory90 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient81.setSSLSocketFactory(sSLSocketFactory90);
        java.net.Proxy proxy92 = okHttpClient91.proxy;
        java.util.List<java.lang.String> strList93 = okHttpClient91.transports;
        okHttpClient8.transports = strList93;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient4.setTransports(strList93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(proxy14);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(routeSet25);
        org.junit.Assert.assertNull(okResponseCache29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNull(hostnameVerifier38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNull(hostnameVerifier49);
        org.junit.Assert.assertNull(sSLSocketFactory50);
        org.junit.Assert.assertNull(cookieHandler51);
        org.junit.Assert.assertNull(hostnameVerifier52);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(hostnameVerifier66);
        org.junit.Assert.assertNull(proxy67);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNull(proxy73);
        org.junit.Assert.assertNotNull(hostnameVerifier74);
        org.junit.Assert.assertNotNull(okHttpClient75);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNull(proxy80);
        org.junit.Assert.assertNull(okResponseCache82);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNull(proxy92);
        org.junit.Assert.assertNotNull(strList93);
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        java.lang.String[] strArray36 = sSLSocketFactory33.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory33.getDefaultCipherSuites();
        java.net.Socket socket38 = sSLSocketFactory33.createSocket();
        java.net.InetAddress inetAddress39 = null;
        java.net.InetAddress inetAddress41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket43 = sSLSocketFactory33.createSocket(inetAddress39, (int) (short) -1, inetAddress41, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory10;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory12);
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient0.proxySelector = proxySelector14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress22 = proxy21.address();
        java.net.SocketAddress socketAddress23 = proxy21.address();
        okHttpClient16.proxy = proxy21;
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address28 = null;
        com.squareup.okhttp.Connection connection29 = connectionPool27.get(address28);
        int int30 = connectionPool27.getSpdyConnectionCount();
        connectionPool27.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient16.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ProxySelector proxySelector36 = okHttpClient33.proxySelector;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient33.setProxySelector(proxySelector37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient39.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = okHttpClient47.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient47.getSslSocketFactory();
        okHttpClient33.sslSocketFactory = sSLSocketFactory49;
        okHttpClient16.sslSocketFactory = sSLSocketFactory49;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory49);
        java.lang.String[] strArray53 = sSLSocketFactory49.getDefaultCipherSuites();
        java.net.Socket socket54 = sSLSocketFactory49.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket57 = sSLSocketFactory49.createSocket("hi!", (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertNull(socketAddress22);
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNull(connection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxySelector36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
// flaky:         org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(sSLSocketFactory49);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(socket54);
        org.junit.Assert.assertEquals(socket54.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '4', 10L);
        int int3 = connectionPool2.getConnectionCount();
        com.squareup.okhttp.Address address4 = null;
        com.squareup.okhttp.Connection connection5 = connectionPool2.get(address4);
        com.squareup.okhttp.Connection connection6 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(connection5);
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList12 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type24 = proxy21.type();
        java.net.SocketAddress socketAddress25 = proxy21.address();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient15.setProxy(proxy21);
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient26.hostnameVerifier;
        java.net.Proxy proxy28 = java.net.Proxy.NO_PROXY;
        boolean boolean30 = proxy28.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type31 = proxy28.type();
        java.lang.String str32 = proxy28.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = okHttpClient33.getSslSocketFactory();
        boolean boolean37 = proxy28.equals((java.lang.Object) okHttpClient33);
        java.lang.String str38 = proxy28.toString();
        java.net.Proxy.Type type39 = proxy28.type();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient26.setProxy(proxy28);
        okHttpClient14.proxy = proxy28;
        java.net.Proxy.Type type42 = proxy28.type();
        java.net.SocketAddress socketAddress43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy44 = new java.net.Proxy(type42, socketAddress43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type24.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress25);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNotNull(proxy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type31.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DIRECT" + "'", str32, "DIRECT");
        org.junit.Assert.assertNull(sSLSocketFactory36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DIRECT" + "'", str38, "DIRECT");
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type39.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type42.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient5.setCookieHandler(cookieHandler10);
        java.util.List<java.lang.String> strList12 = okHttpClient5.getTransports();
        java.net.Proxy proxy13 = okHttpClient5.proxy;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(proxy13);
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.net.ResponseCache responseCache18 = null;
        okHttpClient0.responseCache = responseCache18;
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool(0, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient0.setConnectionPool(connectionPool22);
        connectionPool22.evictAll();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient23);
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = okHttpClient0.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool31 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient22.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient22.copyWithDefaults();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient33.setResponseCache(responseCache34);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient35.setFollowProtocolRedirects(false);
        java.util.List<java.lang.String> strList38 = okHttpClient35.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient35.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        java.util.List<java.lang.String> strList49 = okHttpClient44.transports;
        com.squareup.okhttp.ConnectionPool connectionPool50 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient44.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient41.setConnectionPool(connectionPool50);
        java.net.Proxy proxy53 = okHttpClient52.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool55 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool55;
        int int57 = connectionPool55.getSpdyConnectionCount();
        okHttpClient52.connectionPool = connectionPool55;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        okHttpClient59.hostnameVerifier = hostnameVerifier60;
        java.net.ResponseCache responseCache62 = null;
        okHttpClient59.responseCache = responseCache62;
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = okHttpClient59.hostnameVerifier;
        java.net.Proxy proxy65 = okHttpClient59.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool68 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient59.connectionPool = connectionPool68;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient59.copyWithDefaults();
        java.net.ResponseCache responseCache71 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient70.setResponseCache(responseCache71);
        com.squareup.okhttp.OkAuthenticator okAuthenticator73 = okHttpClient70.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient52.setAuthenticator(okAuthenticator73);
        okHttpClient35.authenticator = okAuthenticator73;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient0.setAuthenticator(okAuthenticator73);
        java.lang.Class<?> wildcardClass77 = okAuthenticator73.getClass();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNull(okAuthenticator21);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(connectionPool50);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNull(proxy53);
        org.junit.Assert.assertNotNull(connectionPool55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(hostnameVerifier64);
        org.junit.Assert.assertNull(proxy65);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okAuthenticator73);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        java.util.List<java.lang.String> strList16 = okHttpClient13.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        java.net.Proxy proxy23 = java.net.Proxy.NO_PROXY;
        boolean boolean25 = proxy23.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type26 = proxy23.type();
        java.net.SocketAddress socketAddress27 = proxy23.address();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.setProxy(proxy23);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ProxySelector proxySelector32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient29.setProxySelector(proxySelector32);
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = okHttpClient29.hostnameVerifier;
        java.net.CookieHandler cookieHandler35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient29.setCookieHandler(cookieHandler35);
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient39.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = okHttpClient47.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient47.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory49);
        boolean boolean51 = proxy23.equals((java.lang.Object) sSLSocketFactory49);
        java.lang.String[] strArray52 = sSLSocketFactory49.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory49);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory54 = okHttpClient53.getSslSocketFactory();
        java.lang.String[] strArray55 = sSLSocketFactory54.getDefaultCipherSuites();
        java.net.InetAddress inetAddress58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket60 = sSLSocketFactory54.createSocket("hi!", (int) (short) -1, inetAddress58, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(proxy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type26.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress27);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNull(hostnameVerifier34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
// flaky:         org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(sSLSocketFactory49);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(sSLSocketFactory54);
        org.junit.Assert.assertNotNull(strArray55);
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient11.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool19 = okHttpClient11.connectionPool;
        java.net.ProxySelector proxySelector20 = okHttpClient11.getProxySelector();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNull(proxySelector20);
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        java.net.CookieHandler cookieHandler19 = okHttpClient11.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient11.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = null;
        okHttpClient11.sslSocketFactory = sSLSocketFactory21;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        java.net.ProxySelector proxySelector25 = null;
        okHttpClient11.proxySelector = proxySelector25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.net.Proxy proxy32 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress33 = proxy32.address();
        java.net.SocketAddress socketAddress34 = proxy32.address();
        okHttpClient27.proxy = proxy32;
        com.squareup.okhttp.ConnectionPool connectionPool38 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address39 = null;
        com.squareup.okhttp.Connection connection40 = connectionPool38.get(address39);
        int int41 = connectionPool38.getSpdyConnectionCount();
        connectionPool38.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient27.setConnectionPool(connectionPool38);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ProxySelector proxySelector47 = okHttpClient44.proxySelector;
        java.net.ProxySelector proxySelector48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient44.setProxySelector(proxySelector48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        java.util.List<java.lang.String> strList55 = okHttpClient50.transports;
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient50.copyWithDefaults();
        java.net.ProxySelector proxySelector59 = okHttpClient58.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory60 = okHttpClient58.getSslSocketFactory();
        okHttpClient44.sslSocketFactory = sSLSocketFactory60;
        okHttpClient27.sslSocketFactory = sSLSocketFactory60;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory60);
        java.net.Socket socket64 = sSLSocketFactory60.createSocket();
        java.io.InputStream inputStream65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket67 = sSLSocketFactory10.createSocket(socket64, inputStream65, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNull(cookieHandler19);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNotNull(proxy32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNull(connection40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(proxySelector47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNotNull(okHttpClient58);
// flaky:         org.junit.Assert.assertNull(proxySelector59);
        org.junit.Assert.assertNotNull(sSLSocketFactory60);
        org.junit.Assert.assertNotNull(okHttpClient63);
        org.junit.Assert.assertNotNull(socket64);
        org.junit.Assert.assertEquals(socket64.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(0, 0L);
        okHttpClient0.connectionPool = connectionPool14;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler17 = okHttpClient0.getCookieHandler();
        boolean boolean18 = okHttpClient0.getFollowProtocolRedirects();
        java.lang.Class<?> wildcardClass19 = okHttpClient0.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier6;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        java.net.Proxy proxy16 = okHttpClient10.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool19 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient10.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient10.copyWithDefaults();
        java.net.Proxy proxy22 = okHttpClient21.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient21.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setHostnameVerifier(hostnameVerifier23);
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) 'a', (long) (byte) -1);
        connectionPool27.evictAll();
        okHttpClient24.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache31 = okHttpClient30.okResponseCache();
        java.net.ResponseCache responseCache32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setResponseCache(responseCache32);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        okHttpClient30.transports = strList36;
        java.net.CookieHandler cookieHandler39 = okHttpClient30.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient30.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient41.copyWithDefaults();
        boolean boolean50 = okHttpClient49.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory51 = okHttpClient49.sslSocketFactory;
        okHttpClient30.sslSocketFactory = sSLSocketFactory51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient24.setSSLSocketFactory(sSLSocketFactory51);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool55 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient(okHttpClient54);
        boolean boolean60 = okHttpClient54.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient(okHttpClient54);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ProxySelector proxySelector65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient62.setProxySelector(proxySelector65);
        java.net.ResponseCache responseCache67 = null;
        okHttpClient66.responseCache = responseCache67;
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = okHttpClient66.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient66.copyWithDefaults();
        java.net.ResponseCache responseCache71 = okHttpClient70.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient(okHttpClient70);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory73 = okHttpClient70.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient54.setSSLSocketFactory(sSLSocketFactory73);
        java.net.Socket socket75 = sSLSocketFactory73.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket79 = sSLSocketFactory51.createSocket(socket75, "", (int) (byte) 1, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNull(sSLSocketFactory9);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(proxy16);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(proxy22);
        org.junit.Assert.assertNotNull(hostnameVerifier23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(okResponseCache31);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(cookieHandler39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory51);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(connectionPool55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(hostnameVerifier69);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(responseCache71);
        org.junit.Assert.assertNotNull(sSLSocketFactory73);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(socket75);
        org.junit.Assert.assertEquals(socket75.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient11.setAuthenticator(okAuthenticator39);
        java.net.Proxy proxy41 = okHttpClient40.getProxy();
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = okHttpClient40.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        java.net.ResponseCache responseCache49 = null;
        okHttpClient46.responseCache = responseCache49;
        java.util.List<java.lang.String> strList51 = okHttpClient46.transports;
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient43.setConnectionPool(connectionPool52);
        java.net.Proxy proxy55 = okHttpClient54.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient56.connectionPool = connectionPool57;
        int int59 = connectionPool57.getSpdyConnectionCount();
        okHttpClient54.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = okHttpClient61.hostnameVerifier;
        java.net.Proxy proxy67 = okHttpClient61.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool70 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient61.connectionPool = connectionPool70;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient61.copyWithDefaults();
        java.net.ResponseCache responseCache73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient72.setResponseCache(responseCache73);
        com.squareup.okhttp.OkAuthenticator okAuthenticator75 = okHttpClient72.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient54.setAuthenticator(okAuthenticator75);
        okHttpClient40.authenticator = okAuthenticator75;
        java.net.ResponseCache responseCache78 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient40.setResponseCache(responseCache78);
        com.squareup.okhttp.ConnectionPool connectionPool80 = okHttpClient40.getConnectionPool();
        java.net.CookieHandler cookieHandler81 = okHttpClient40.cookieHandler;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNotNull(okAuthenticator42);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(hostnameVerifier66);
        org.junit.Assert.assertNull(proxy67);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okAuthenticator75);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNotNull(connectionPool80);
        org.junit.Assert.assertNull(cookieHandler81);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool16;
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = null;
        okHttpClient15.authenticator = okAuthenticator18;
        java.net.CookieHandler cookieHandler20 = null;
        okHttpClient15.cookieHandler = cookieHandler20;
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        boolean boolean24 = proxy22.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache26 = okHttpClient25.okResponseCache();
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient25.setResponseCache(responseCache27);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        okHttpClient25.transports = strList31;
        boolean boolean34 = proxy22.equals((java.lang.Object) strList31);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient15.setProxy(proxy22);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy22);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient(okHttpClient36);
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = okHttpClient36.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = okHttpClient36.getHostnameVerifier();
        java.net.ProxySelector proxySelector40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient36.setProxySelector(proxySelector40);
        java.net.CookieHandler cookieHandler42 = null;
        okHttpClient41.cookieHandler = cookieHandler42;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(okResponseCache26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(hostnameVerifier38);
        org.junit.Assert.assertNull(hostnameVerifier39);
        org.junit.Assert.assertNotNull(okHttpClient41);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.ConnectionPool connectionPool24 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        okHttpClient19.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient19.copyWithDefaults();
        java.net.Proxy proxy27 = okHttpClient26.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.util.List<java.lang.String> strList33 = okHttpClient28.transports;
        com.squareup.okhttp.ConnectionPool connectionPool34 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool34;
        java.net.Proxy proxy36 = null;
        okHttpClient28.proxy = proxy36;
        boolean boolean38 = okHttpClient28.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient28.copyWithDefaults();
        java.net.Proxy proxy40 = java.net.Proxy.NO_PROXY;
        boolean boolean42 = proxy40.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type43 = proxy40.type();
        java.lang.String str44 = proxy40.toString();
        java.net.Proxy.Type type45 = proxy40.type();
        okHttpClient28.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache48 = okHttpClient47.okResponseCache();
        java.net.ResponseCache responseCache49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient47.setResponseCache(responseCache49);
        java.net.ProxySelector proxySelector51 = okHttpClient47.getProxySelector();
        com.squareup.okhttp.OkAuthenticator okAuthenticator52 = okHttpClient47.getAuthenticator();
        boolean boolean53 = proxy40.equals((java.lang.Object) okHttpClient47);
        java.net.SocketAddress socketAddress54 = proxy40.address();
        okHttpClient26.proxy = proxy40;
        java.net.SocketAddress socketAddress56 = proxy40.address();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(proxy27);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(connectionPool34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(proxy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type43.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DIRECT" + "'", str44, "DIRECT");
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type45.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(okResponseCache48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(proxySelector51);
        org.junit.Assert.assertNull(okAuthenticator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(socketAddress54);
        org.junit.Assert.assertNull(socketAddress56);
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray41 = sSLSocketFactory35.getSupportedCipherSuites();
        java.lang.String[] strArray42 = sSLSocketFactory35.getDefaultCipherSuites();
        java.net.InetAddress inetAddress43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket45 = sSLSocketFactory35.createSocket(inetAddress43, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient4.sslSocketFactory;
        java.lang.String[] strArray42 = sSLSocketFactory41.getSupportedCipherSuites();
        java.lang.String[] strArray43 = sSLSocketFactory41.getSupportedCipherSuites();
        java.lang.Class<?> wildcardClass44 = strArray43.getClass();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) -1, 10L);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '4', 0L);
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient0.responseCache = responseCache6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ResponseCache responseCache11 = null;
        okHttpClient8.responseCache = responseCache11;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient8.hostnameVerifier;
        java.net.Proxy proxy14 = okHttpClient8.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool17 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient8.connectionPool = connectionPool17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient8.copyWithDefaults();
        java.net.Proxy proxy20 = okHttpClient19.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = okHttpClient19.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setHostnameVerifier(hostnameVerifier21);
        java.net.CookieHandler cookieHandler23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setCookieHandler(cookieHandler23);
        okHttpClient22.followProtocolRedirects = false;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(proxy14);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNotNull(hostnameVerifier21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy15 = java.net.Proxy.NO_PROXY;
        boolean boolean17 = proxy15.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache19 = okHttpClient18.okResponseCache();
        java.net.ResponseCache responseCache20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setResponseCache(responseCache20);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        okHttpClient18.transports = strList24;
        boolean boolean27 = proxy15.equals((java.lang.Object) strList24);
        okHttpClient14.transports = strList24;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ProxySelector proxySelector32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient29.setProxySelector(proxySelector32);
        java.net.ResponseCache responseCache34 = null;
        okHttpClient33.responseCache = responseCache34;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient33.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient33.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.setProxySelector(proxySelector39);
        java.net.ProxySelector proxySelector41 = okHttpClient40.proxySelector;
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = okHttpClient40.authenticator;
        java.net.ProxySelector proxySelector43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient40.setProxySelector(proxySelector43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.net.Proxy proxy50 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress51 = proxy50.address();
        java.net.SocketAddress socketAddress52 = proxy50.address();
        okHttpClient45.proxy = proxy50;
        com.squareup.okhttp.ConnectionPool connectionPool56 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address57 = null;
        com.squareup.okhttp.Connection connection58 = connectionPool56.get(address57);
        int int59 = connectionPool56.getSpdyConnectionCount();
        connectionPool56.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient45.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ProxySelector proxySelector65 = okHttpClient62.proxySelector;
        java.net.ProxySelector proxySelector66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient62.setProxySelector(proxySelector66);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        okHttpClient68.hostnameVerifier = hostnameVerifier69;
        java.net.ResponseCache responseCache71 = null;
        okHttpClient68.responseCache = responseCache71;
        java.util.List<java.lang.String> strList73 = okHttpClient68.transports;
        com.squareup.okhttp.ConnectionPool connectionPool74 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient68.connectionPool = connectionPool74;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient68.copyWithDefaults();
        java.net.ProxySelector proxySelector77 = okHttpClient76.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory78 = okHttpClient76.getSslSocketFactory();
        okHttpClient62.sslSocketFactory = sSLSocketFactory78;
        okHttpClient45.sslSocketFactory = sSLSocketFactory78;
        okHttpClient40.sslSocketFactory = sSLSocketFactory78;
        java.lang.String[] strArray82 = sSLSocketFactory78.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient14.setSSLSocketFactory(sSLSocketFactory78);
        java.net.InetAddress inetAddress86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket88 = sSLSocketFactory78.createSocket("DIRECT", (int) (short) -1, inetAddress86, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(proxy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(okResponseCache19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNull(hostnameVerifier36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(proxySelector41);
        org.junit.Assert.assertNull(okAuthenticator42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(proxy50);
        org.junit.Assert.assertNull(socketAddress51);
        org.junit.Assert.assertNull(socketAddress52);
        org.junit.Assert.assertNull(connection58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNull(proxySelector65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertNotNull(okHttpClient76);
// flaky:         org.junit.Assert.assertNull(proxySelector77);
        org.junit.Assert.assertNotNull(sSLSocketFactory78);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(okHttpClient83);
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.SocketAddress socketAddress3 = proxy0.address();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        java.lang.String str5 = proxy0.toString();
        java.lang.String str6 = proxy0.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool8 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool8;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient7.setConnectionPool(connectionPool16);
        com.squareup.okhttp.ConnectionPool connectionPool19 = okHttpClient18.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = okHttpClient18.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool23 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient18.connectionPool = connectionPool23;
        java.net.ResponseCache responseCache25 = okHttpClient18.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool28 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 10L);
        okHttpClient18.connectionPool = connectionPool28;
        java.util.List<java.lang.String> strList30 = okHttpClient18.transports;
        java.util.List<java.lang.String> strList31 = okHttpClient18.transports;
        boolean boolean32 = proxy0.equals((java.lang.Object) okHttpClient18);
        java.net.CookieHandler cookieHandler33 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient34.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkAuthenticator okAuthenticator46 = okHttpClient45.getAuthenticator();
        java.net.ProxySelector proxySelector47 = okHttpClient45.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient48.setConnectionPool(connectionPool57);
        java.net.ResponseCache responseCache60 = okHttpClient48.responseCache;
        java.net.ResponseCache responseCache61 = okHttpClient48.getResponseCache();
        java.net.ResponseCache responseCache62 = okHttpClient48.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache64 = okHttpClient63.okResponseCache();
        java.net.ResponseCache responseCache65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient63.setResponseCache(responseCache65);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory67 = okHttpClient63.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient63.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        boolean boolean72 = okHttpClient69.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler73 = okHttpClient69.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = null;
        okHttpClient74.hostnameVerifier = hostnameVerifier75;
        java.net.ResponseCache responseCache77 = null;
        okHttpClient74.responseCache = responseCache77;
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = okHttpClient74.hostnameVerifier;
        java.net.Proxy proxy80 = okHttpClient74.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool83 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient74.connectionPool = connectionPool83;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient74.copyWithDefaults();
        java.net.ResponseCache responseCache86 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient85.setResponseCache(responseCache86);
        com.squareup.okhttp.OkAuthenticator okAuthenticator88 = okHttpClient85.authenticator;
        okHttpClient69.authenticator = okAuthenticator88;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient63.setAuthenticator(okAuthenticator88);
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient48.setAuthenticator(okAuthenticator88);
        okHttpClient45.authenticator = okAuthenticator88;
        com.squareup.okhttp.ConnectionPool connectionPool93 = okHttpClient45.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient18.setConnectionPool(connectionPool93);
        java.util.List<java.lang.String> strList95 = okHttpClient94.getTransports();
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(socketAddress3);
        org.junit.Assert.assertNull(socketAddress4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DIRECT" + "'", str5, "DIRECT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DIRECT" + "'", str6, "DIRECT");
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNull(okAuthenticator20);
        org.junit.Assert.assertNull(responseCache25);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(cookieHandler33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNull(okAuthenticator46);
        org.junit.Assert.assertNull(proxySelector47);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNull(responseCache60);
        org.junit.Assert.assertNull(responseCache61);
        org.junit.Assert.assertNull(responseCache62);
        org.junit.Assert.assertNull(okResponseCache64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(sSLSocketFactory67);
        org.junit.Assert.assertNull(sSLSocketFactory68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(cookieHandler73);
        org.junit.Assert.assertNull(hostnameVerifier79);
        org.junit.Assert.assertNull(proxy80);
        org.junit.Assert.assertNotNull(okHttpClient85);
        org.junit.Assert.assertNotNull(okHttpClient87);
        org.junit.Assert.assertNotNull(okAuthenticator88);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(connectionPool93);
        org.junit.Assert.assertNotNull(okHttpClient94);
        org.junit.Assert.assertNull(strList95);
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient5.setCookieHandler(cookieHandler10);
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.ResponseCache responseCache8 = okHttpClient0.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ProxySelector proxySelector13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.setProxySelector(proxySelector13);
        java.net.ResponseCache responseCache15 = null;
        okHttpClient14.responseCache = responseCache15;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.setSSLSocketFactory(sSLSocketFactory17);
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = null;
        okHttpClient14.authenticator = okAuthenticator19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        boolean boolean24 = okHttpClient21.getFollowProtocolRedirects();
        java.net.Proxy proxy25 = okHttpClient21.proxy;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        java.util.List<java.lang.String> strList27 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient21.transports = strList27;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList27;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList27;
        okHttpClient14.transports = strList27;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient0.setTransports(strList27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(responseCache8);
        org.junit.Assert.assertNull(sSLSocketFactory9);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(proxy25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        java.net.SocketAddress socketAddress12 = proxy6.address();
        java.net.Proxy.Type type13 = proxy6.type();
        java.net.SocketAddress socketAddress14 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient15.hostnameVerifier;
        java.net.Proxy proxy21 = okHttpClient15.getProxy();
        java.net.CookieHandler cookieHandler22 = null;
        okHttpClient15.cookieHandler = cookieHandler22;
        okHttpClient15.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler26 = okHttpClient15.getCookieHandler();
        boolean boolean27 = proxy6.equals((java.lang.Object) okHttpClient15);
        java.lang.String str28 = proxy6.toString();
        java.net.Proxy.Type type29 = proxy6.type();
        java.net.SocketAddress socketAddress30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy31 = new java.net.Proxy(type29, socketAddress30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(socketAddress12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type13.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress14);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNull(proxy21);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DIRECT" + "'", str28, "DIRECT");
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type29.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient9.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy29 = okHttpClient28.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient0.setHostnameVerifier(hostnameVerifier30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        java.util.Set<com.squareup.okhttp.Route> routeSet34 = okHttpClient32.failedRoutes;
        boolean boolean35 = okHttpClient32.followProtocolRedirects;
        java.net.CookieHandler cookieHandler36 = null;
        okHttpClient32.cookieHandler = cookieHandler36;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(routeSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        java.util.Set<com.squareup.okhttp.Route> routeSet13 = okHttpClient11.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient15.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache18 = okHttpClient17.okResponseCache();
        java.net.ResponseCache responseCache19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.setResponseCache(responseCache19);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        okHttpClient17.transports = strList23;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient17.setSSLSocketFactory(sSLSocketFactory26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = okHttpClient28.hostnameVerifier;
        java.net.Proxy proxy34 = okHttpClient28.getProxy();
        java.net.CookieHandler cookieHandler35 = null;
        okHttpClient28.cookieHandler = cookieHandler35;
        okHttpClient28.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient39.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory45 = okHttpClient39.sslSocketFactory;
        java.net.CookieHandler cookieHandler46 = okHttpClient39.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = okHttpClient39.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool49;
        com.squareup.okhttp.OkAuthenticator okAuthenticator51 = null;
        okHttpClient48.authenticator = okAuthenticator51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient48.responseCache = responseCache54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = null;
        okHttpClient56.hostnameVerifier = hostnameVerifier57;
        java.net.ResponseCache responseCache59 = null;
        okHttpClient56.responseCache = responseCache59;
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = okHttpClient56.hostnameVerifier;
        java.net.Proxy proxy62 = okHttpClient56.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool65 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient56.connectionPool = connectionPool65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient56.copyWithDefaults();
        java.net.Proxy proxy68 = okHttpClient67.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = okHttpClient67.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient48.setHostnameVerifier(hostnameVerifier69);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient39.setHostnameVerifier(hostnameVerifier69);
        okHttpClient28.hostnameVerifier = hostnameVerifier69;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient17.setHostnameVerifier(hostnameVerifier69);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient15.setHostnameVerifier(hostnameVerifier69);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient14.setHostnameVerifier(hostnameVerifier69);
        java.net.CookieHandler cookieHandler76 = okHttpClient75.getCookieHandler();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(routeSet13);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(okResponseCache18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(hostnameVerifier33);
        org.junit.Assert.assertNull(proxy34);
        org.junit.Assert.assertNull(hostnameVerifier44);
        org.junit.Assert.assertNull(sSLSocketFactory45);
        org.junit.Assert.assertNull(cookieHandler46);
        org.junit.Assert.assertNull(hostnameVerifier47);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNull(hostnameVerifier61);
        org.junit.Assert.assertNull(proxy62);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(proxy68);
        org.junit.Assert.assertNotNull(hostnameVerifier69);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okHttpClient75);
        org.junit.Assert.assertNull(cookieHandler76);
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector12 = okHttpClient0.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient17.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient14.setConnectionPool(connectionPool23);
        java.net.Proxy proxy26 = okHttpClient25.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = null;
        okHttpClient25.sslSocketFactory = sSLSocketFactory27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        java.util.List<java.lang.String> strList34 = okHttpClient29.transports;
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool35;
        com.squareup.okhttp.ConnectionPool connectionPool37 = okHttpClient29.connectionPool;
        int int38 = connectionPool37.getHttpConnectionCount();
        com.squareup.okhttp.Address address39 = null;
        com.squareup.okhttp.Connection connection40 = connectionPool37.get(address39);
        okHttpClient25.connectionPool = connectionPool37;
        java.net.ProxySelector proxySelector42 = okHttpClient25.proxySelector;
        java.net.Proxy proxy43 = java.net.Proxy.NO_PROXY;
        boolean boolean45 = proxy43.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache47 = okHttpClient46.okResponseCache();
        java.net.ResponseCache responseCache48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient46.setResponseCache(responseCache48);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        okHttpClient46.transports = strList52;
        boolean boolean55 = proxy43.equals((java.lang.Object) strList52);
        okHttpClient25.proxy = proxy43;
        java.lang.String str57 = proxy43.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient0.setProxy(proxy43);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.CookieHandler cookieHandler60 = okHttpClient59.getCookieHandler();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass61 = cookieHandler60.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(proxy26);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(connection40);
        org.junit.Assert.assertNull(proxySelector42);
        org.junit.Assert.assertNotNull(proxy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(okResponseCache47);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DIRECT" + "'", str57, "DIRECT");
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNull(cookieHandler60);
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        java.net.Proxy proxy14 = java.net.Proxy.NO_PROXY;
        boolean boolean16 = proxy14.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type17 = proxy14.type();
        java.net.Proxy.Type type18 = proxy14.type();
        okHttpClient11.proxy = proxy14;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        java.net.ResponseCache responseCache23 = null;
        okHttpClient20.responseCache = responseCache23;
        java.util.List<java.lang.String> strList25 = okHttpClient20.transports;
        com.squareup.okhttp.ConnectionPool connectionPool26 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient20.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient20.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        java.util.List<java.lang.String> strList34 = okHttpClient29.transports;
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient29.copyWithDefaults();
        java.net.ProxySelector proxySelector38 = okHttpClient37.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient37.getSslSocketFactory();
        okHttpClient20.sslSocketFactory = sSLSocketFactory39;
        okHttpClient11.sslSocketFactory = sSLSocketFactory39;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        java.net.Proxy proxy48 = java.net.Proxy.NO_PROXY;
        boolean boolean50 = proxy48.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type51 = proxy48.type();
        java.net.SocketAddress socketAddress52 = proxy48.address();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient42.setProxy(proxy48);
        java.net.SocketAddress socketAddress54 = proxy48.address();
        java.net.Proxy.Type type55 = proxy48.type();
        java.net.SocketAddress socketAddress56 = proxy48.address();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        okHttpClient57.hostnameVerifier = hostnameVerifier58;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient57.responseCache = responseCache60;
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = okHttpClient57.hostnameVerifier;
        java.net.Proxy proxy63 = okHttpClient57.getProxy();
        java.net.CookieHandler cookieHandler64 = null;
        okHttpClient57.cookieHandler = cookieHandler64;
        okHttpClient57.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler68 = okHttpClient57.getCookieHandler();
        boolean boolean69 = proxy48.equals((java.lang.Object) okHttpClient57);
        okHttpClient11.proxy = proxy48;
        java.net.SocketAddress socketAddress71 = proxy48.address();
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = null;
        okHttpClient72.hostnameVerifier = hostnameVerifier73;
        java.net.ResponseCache responseCache75 = null;
        okHttpClient72.responseCache = responseCache75;
        javax.net.ssl.HostnameVerifier hostnameVerifier77 = okHttpClient72.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory78 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient72.setSSLSocketFactory(sSLSocketFactory78);
        java.net.ResponseCache responseCache80 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient72.setResponseCache(responseCache80);
        boolean boolean82 = proxy48.equals((java.lang.Object) okHttpClient81);
        java.lang.Class<?> wildcardClass83 = proxy48.getClass();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNotNull(proxy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type17.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type18.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(connectionPool26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNotNull(okHttpClient37);
// flaky:         org.junit.Assert.assertNull(proxySelector38);
        org.junit.Assert.assertNotNull(sSLSocketFactory39);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(proxy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type51.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNull(socketAddress54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type55.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress56);
        org.junit.Assert.assertNull(hostnameVerifier62);
        org.junit.Assert.assertNull(proxy63);
        org.junit.Assert.assertNull(cookieHandler68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(socketAddress71);
        org.junit.Assert.assertNull(hostnameVerifier77);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        okHttpClient0.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        java.net.Proxy proxy19 = null;
        okHttpClient11.proxy = proxy19;
        boolean boolean21 = okHttpClient11.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.ProxySelector proxySelector23 = okHttpClient22.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy25 = java.net.Proxy.NO_PROXY;
        boolean boolean27 = proxy25.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type28 = proxy25.type();
        java.net.Proxy.Type type29 = proxy25.type();
        okHttpClient22.proxy = proxy25;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ResponseCache responseCache34 = null;
        okHttpClient31.responseCache = responseCache34;
        java.util.List<java.lang.String> strList36 = okHttpClient31.transports;
        com.squareup.okhttp.ConnectionPool connectionPool37 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient31.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient31.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector49 = okHttpClient48.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient48.getSslSocketFactory();
        okHttpClient31.sslSocketFactory = sSLSocketFactory50;
        okHttpClient22.sslSocketFactory = sSLSocketFactory50;
        java.net.Socket socket53 = sSLSocketFactory50.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory50);
        java.net.InetAddress inetAddress55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket57 = sSLSocketFactory50.createSocket(inetAddress55, 1);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(proxySelector23);
        org.junit.Assert.assertNull(hostnameVerifier24);
        org.junit.Assert.assertNotNull(proxy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type28.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type29.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
// flaky:         org.junit.Assert.assertNull(proxySelector49);
        org.junit.Assert.assertNotNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(socket53);
        org.junit.Assert.assertEquals(socket53.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient54);
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(1, (long) 100);
        int int3 = connectionPool2.getSpdyConnectionCount();
        java.lang.Class<?> wildcardClass4 = connectionPool2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 100, (long) 0);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        java.net.Proxy proxy14 = java.net.Proxy.NO_PROXY;
        boolean boolean16 = proxy14.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type17 = proxy14.type();
        java.net.Proxy.Type type18 = proxy14.type();
        okHttpClient11.proxy = proxy14;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        java.net.ResponseCache responseCache23 = null;
        okHttpClient20.responseCache = responseCache23;
        java.util.List<java.lang.String> strList25 = okHttpClient20.transports;
        com.squareup.okhttp.ConnectionPool connectionPool26 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient20.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient20.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        java.util.List<java.lang.String> strList34 = okHttpClient29.transports;
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient29.copyWithDefaults();
        java.net.ProxySelector proxySelector38 = okHttpClient37.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient37.getSslSocketFactory();
        okHttpClient20.sslSocketFactory = sSLSocketFactory39;
        okHttpClient11.sslSocketFactory = sSLSocketFactory39;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        java.net.Proxy proxy48 = java.net.Proxy.NO_PROXY;
        boolean boolean50 = proxy48.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type51 = proxy48.type();
        java.net.SocketAddress socketAddress52 = proxy48.address();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient42.setProxy(proxy48);
        java.net.SocketAddress socketAddress54 = proxy48.address();
        java.net.Proxy.Type type55 = proxy48.type();
        java.net.SocketAddress socketAddress56 = proxy48.address();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        okHttpClient57.hostnameVerifier = hostnameVerifier58;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient57.responseCache = responseCache60;
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = okHttpClient57.hostnameVerifier;
        java.net.Proxy proxy63 = okHttpClient57.getProxy();
        java.net.CookieHandler cookieHandler64 = null;
        okHttpClient57.cookieHandler = cookieHandler64;
        okHttpClient57.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler68 = okHttpClient57.getCookieHandler();
        boolean boolean69 = proxy48.equals((java.lang.Object) okHttpClient57);
        okHttpClient11.proxy = proxy48;
        java.net.SocketAddress socketAddress71 = proxy48.address();
        java.net.Proxy.Type type72 = proxy48.type();
        java.net.SocketAddress socketAddress73 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy74 = new java.net.Proxy(type72, socketAddress73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNotNull(proxy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type17.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type18.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(connectionPool26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNotNull(okHttpClient37);
// flaky:         org.junit.Assert.assertNull(proxySelector38);
        org.junit.Assert.assertNotNull(sSLSocketFactory39);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(proxy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type51.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNull(socketAddress54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type55.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress56);
        org.junit.Assert.assertNull(hostnameVerifier62);
        org.junit.Assert.assertNull(proxy63);
        org.junit.Assert.assertNull(cookieHandler68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(socketAddress71);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type72.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setResponseCache(responseCache22);
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient23.getSslSocketFactory();
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        boolean boolean31 = proxy29.equals((java.lang.Object) 1L);
        java.net.SocketAddress socketAddress32 = proxy29.address();
        java.net.SocketAddress socketAddress33 = proxy29.address();
        boolean boolean35 = proxy29.equals((java.lang.Object) (short) 1);
        java.net.SocketAddress socketAddress36 = proxy29.address();
        okHttpClient23.proxy = proxy29;
        java.net.SocketAddress socketAddress38 = proxy29.address();
        java.net.Proxy.Type type39 = proxy29.type();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.util.List<java.lang.String> strList48 = okHttpClient43.transports;
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.setConnectionPool(connectionPool49);
        com.squareup.okhttp.OkAuthenticator okAuthenticator52 = okHttpClient51.getAuthenticator();
        java.net.Proxy proxy53 = okHttpClient51.getProxy();
        java.net.CookieHandler cookieHandler54 = okHttpClient51.cookieHandler;
        boolean boolean55 = proxy29.equals((java.lang.Object) okHttpClient51);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(routeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(socketAddress32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(socketAddress36);
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type39.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNull(okAuthenticator52);
        org.junit.Assert.assertNull(proxy53);
        org.junit.Assert.assertNull(cookieHandler54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.util.List<java.lang.String> strList6 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient7.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.net.Proxy proxy14 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress15 = proxy14.address();
        java.net.SocketAddress socketAddress16 = proxy14.address();
        okHttpClient9.proxy = proxy14;
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address21 = null;
        com.squareup.okhttp.Connection connection22 = connectionPool20.get(address21);
        int int23 = connectionPool20.getSpdyConnectionCount();
        connectionPool20.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient9.setConnectionPool(connectionPool20);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ProxySelector proxySelector29 = okHttpClient26.proxySelector;
        java.net.ProxySelector proxySelector30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient26.setProxySelector(proxySelector30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient32.hostnameVerifier = hostnameVerifier33;
        java.net.ResponseCache responseCache35 = null;
        okHttpClient32.responseCache = responseCache35;
        java.util.List<java.lang.String> strList37 = okHttpClient32.transports;
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient32.copyWithDefaults();
        java.net.ProxySelector proxySelector41 = okHttpClient40.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient40.getSslSocketFactory();
        okHttpClient26.sslSocketFactory = sSLSocketFactory42;
        okHttpClient9.sslSocketFactory = sSLSocketFactory42;
        java.lang.String[] strArray45 = sSLSocketFactory42.getSupportedCipherSuites();
        java.lang.String[] strArray46 = sSLSocketFactory42.getSupportedCipherSuites();
        java.net.Socket socket47 = sSLSocketFactory42.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket51 = sSLSocketFactory8.createSocket(socket47, "hi!", (int) (short) 1, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(sSLSocketFactory8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNotNull(proxy14);
        org.junit.Assert.assertNull(socketAddress15);
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNull(connection22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(proxySelector29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNotNull(okHttpClient40);
// flaky:         org.junit.Assert.assertNull(proxySelector41);
        org.junit.Assert.assertNotNull(sSLSocketFactory42);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(socket47);
        org.junit.Assert.assertEquals(socket47.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient9.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy29 = okHttpClient28.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient0.setHostnameVerifier(hostnameVerifier30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        java.util.Set<com.squareup.okhttp.Route> routeSet34 = okHttpClient32.failedRoutes;
        boolean boolean35 = okHttpClient32.followProtocolRedirects;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient32.hostnameVerifier;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(routeSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(hostnameVerifier36);
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient4.sslSocketFactory;
        java.lang.String[] strArray42 = sSLSocketFactory41.getSupportedCipherSuites();
        java.net.InetAddress inetAddress45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket47 = sSLSocketFactory41.createSocket("DIRECT", (int) (byte) 10, inetAddress45, 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) -1);
        connectionPool2.evictAll();
        com.squareup.okhttp.Connection connection4 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient7.sslSocketFactory;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.net.ResponseCache responseCache11 = okHttpClient10.getResponseCache();
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(responseCache11);
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        java.net.ResponseCache responseCache10 = okHttpClient0.responseCache;
        java.net.CookieHandler cookieHandler11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setCookieHandler(cookieHandler11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient13.hostnameVerifier;
        java.net.Proxy proxy19 = okHttpClient13.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient13.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.copyWithDefaults();
        java.net.Proxy proxy25 = okHttpClient24.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = okHttpClient26.hostnameVerifier;
        java.net.Proxy proxy32 = okHttpClient26.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient26.connectionPool = connectionPool35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient26.copyWithDefaults();
        java.net.ResponseCache responseCache38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient37.setResponseCache(responseCache38);
        okHttpClient39.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList42 = okHttpClient39.getTransports();
        okHttpClient24.transports = strList42;
        com.squareup.okhttp.ConnectionPool connectionPool46 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (byte) 100);
        okHttpClient24.connectionPool = connectionPool46;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory48 = okHttpClient24.sslSocketFactory;
        java.net.Socket socket49 = sSLSocketFactory48.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory48);
        java.net.InetAddress inetAddress51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket53 = sSLSocketFactory48.createSocket(inetAddress51, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNull(responseCache10);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNull(proxy19);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(proxy25);
        org.junit.Assert.assertNull(hostnameVerifier31);
        org.junit.Assert.assertNull(proxy32);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(sSLSocketFactory48);
        org.junit.Assert.assertNotNull(socket49);
        org.junit.Assert.assertEquals(socket49.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient50);
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool7 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient6.setConnectionPool(connectionPool15);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.setProxySelector(proxySelector21);
        java.net.CookieHandler cookieHandler23 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        java.net.Proxy proxy32 = null;
        okHttpClient24.proxy = proxy32;
        java.util.Set<com.squareup.okhttp.Route> routeSet34 = okHttpClient24.failedRoutes;
        okHttpClient18.failedRoutes = routeSet34;
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient18.setProxySelector(proxySelector36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient39.hostnameVerifier;
        java.net.Proxy proxy45 = okHttpClient39.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool48 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient39.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient39.copyWithDefaults();
        java.net.Proxy proxy51 = okHttpClient50.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = okHttpClient50.getHostnameVerifier();
        okHttpClient18.hostnameVerifier = hostnameVerifier52;
        okHttpClient17.hostnameVerifier = hostnameVerifier52;
        okHttpClient5.hostnameVerifier = hostnameVerifier52;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache56 = okHttpClient5.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = okHttpClient5.sslSocketFactory;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket60 = sSLSocketFactory57.createSocket("", (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(connectionPool7);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(cookieHandler23);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(routeSet34);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(hostnameVerifier44);
        org.junit.Assert.assertNull(proxy45);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(proxy51);
        org.junit.Assert.assertNotNull(hostnameVerifier52);
        org.junit.Assert.assertNull(okResponseCache56);
        org.junit.Assert.assertNotNull(sSLSocketFactory57);
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler14 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector18 = okHttpClient0.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ProxySelector proxySelector22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setProxySelector(proxySelector22);
        java.net.CookieHandler cookieHandler24 = okHttpClient19.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        java.net.Proxy proxy33 = null;
        okHttpClient25.proxy = proxy33;
        java.util.Set<com.squareup.okhttp.Route> routeSet35 = okHttpClient25.failedRoutes;
        okHttpClient19.failedRoutes = routeSet35;
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient19.setHostnameVerifier(hostnameVerifier37);
        java.net.Proxy proxy39 = okHttpClient38.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory40 = okHttpClient38.sslSocketFactory;
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient38.hostnameVerifier;
        java.net.Proxy proxy42 = java.net.Proxy.NO_PROXY;
        boolean boolean44 = proxy42.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache46 = okHttpClient45.okResponseCache();
        java.net.ResponseCache responseCache47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setResponseCache(responseCache47);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        okHttpClient45.transports = strList51;
        boolean boolean54 = proxy42.equals((java.lang.Object) strList51);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList51;
        okHttpClient38.transports = strList51;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNull(sSLSocketFactory13);
        org.junit.Assert.assertNull(cookieHandler14);
        org.junit.Assert.assertNull(okAuthenticator15);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(routeSet35);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNull(sSLSocketFactory40);
        org.junit.Assert.assertNull(hostnameVerifier41);
        org.junit.Assert.assertNotNull(proxy42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(okResponseCache46);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        boolean boolean9 = okHttpClient0.getFollowProtocolRedirects();
        java.net.ProxySelector proxySelector10 = null;
        okHttpClient0.proxySelector = proxySelector10;
        java.util.List<java.lang.String> strList12 = okHttpClient0.getTransports();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(strList12);
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache12 = okHttpClient9.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.setConnectionPool(connectionPool22);
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient24.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = okHttpClient24.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool29 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient24.connectionPool = connectionPool29;
        java.net.ResponseCache responseCache31 = okHttpClient24.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = okHttpClient24.sslSocketFactory;
        java.net.Proxy proxy33 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress34 = proxy33.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setProxy(proxy33);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient24.setSSLSocketFactory(sSLSocketFactory36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = okHttpClient38.hostnameVerifier;
        java.net.Proxy proxy44 = okHttpClient38.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool47 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient38.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient38.copyWithDefaults();
        java.net.ResponseCache responseCache50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient49.setResponseCache(responseCache50);
        com.squareup.okhttp.OkAuthenticator okAuthenticator52 = okHttpClient49.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient24.setAuthenticator(okAuthenticator52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient9.setAuthenticator(okAuthenticator52);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient9.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient56.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        okHttpClient59.hostnameVerifier = hostnameVerifier60;
        java.net.ResponseCache responseCache62 = null;
        okHttpClient59.responseCache = responseCache62;
        java.util.List<java.lang.String> strList64 = okHttpClient59.transports;
        com.squareup.okhttp.ConnectionPool connectionPool65 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient56.setConnectionPool(connectionPool65);
        com.squareup.okhttp.ConnectionPool connectionPool68 = okHttpClient67.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator69 = okHttpClient67.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool72 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient67.connectionPool = connectionPool72;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory74 = okHttpClient67.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator75 = okHttpClient67.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache77 = okHttpClient76.okResponseCache();
        java.net.ResponseCache responseCache78 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient76.setResponseCache(responseCache78);
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        okHttpClient76.transports = strList82;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient76.setSSLSocketFactory(sSLSocketFactory85);
        com.squareup.okhttp.OkHttpClient okHttpClient87 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache88 = okHttpClient87.okResponseCache();
        java.net.ResponseCache responseCache89 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient87.setResponseCache(responseCache89);
        java.lang.String[] strArray92 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList93 = new java.util.ArrayList<java.lang.String>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList93, strArray92);
        okHttpClient87.transports = strList93;
        okHttpClient76.transports = strList93;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList93;
        okHttpClient67.transports = strList93;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient99 = okHttpClient9.setTransports((java.util.List<java.lang.String>) strList93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okResponseCache12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(okAuthenticator26);
        org.junit.Assert.assertNull(responseCache31);
        org.junit.Assert.assertNull(sSLSocketFactory32);
        org.junit.Assert.assertNotNull(proxy33);
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(hostnameVerifier43);
        org.junit.Assert.assertNull(proxy44);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(okAuthenticator52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(connectionPool65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(connectionPool68);
        org.junit.Assert.assertNull(okAuthenticator69);
        org.junit.Assert.assertNull(sSLSocketFactory74);
        org.junit.Assert.assertNull(okAuthenticator75);
        org.junit.Assert.assertNull(okResponseCache77);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNull(okResponseCache88);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 100, (long) (short) 100);
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory10;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory12);
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient0.proxySelector = proxySelector14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress22 = proxy21.address();
        java.net.SocketAddress socketAddress23 = proxy21.address();
        okHttpClient16.proxy = proxy21;
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address28 = null;
        com.squareup.okhttp.Connection connection29 = connectionPool27.get(address28);
        int int30 = connectionPool27.getSpdyConnectionCount();
        connectionPool27.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient16.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ProxySelector proxySelector36 = okHttpClient33.proxySelector;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient33.setProxySelector(proxySelector37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient39.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = okHttpClient47.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient47.getSslSocketFactory();
        okHttpClient33.sslSocketFactory = sSLSocketFactory49;
        okHttpClient16.sslSocketFactory = sSLSocketFactory49;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory49);
        java.lang.String[] strArray53 = sSLSocketFactory49.getDefaultCipherSuites();
        java.net.InetAddress inetAddress56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket58 = sSLSocketFactory49.createSocket("", 1, inetAddress56, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertNull(socketAddress22);
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNull(connection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxySelector36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
// flaky:         org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(sSLSocketFactory49);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        okHttpClient0.cookieHandler = cookieHandler8;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        java.net.CookieHandler cookieHandler18 = okHttpClient10.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache19 = okHttpClient10.okResponseCache();
        java.net.CookieHandler cookieHandler20 = okHttpClient10.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient10);
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        boolean boolean24 = proxy22.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type25 = proxy22.type();
        java.net.SocketAddress socketAddress26 = proxy22.address();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient10.setProxy(proxy22);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.util.List<java.lang.String> strList33 = okHttpClient28.transports;
        com.squareup.okhttp.ConnectionPool connectionPool34 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient28.copyWithDefaults();
        java.net.ProxySelector proxySelector37 = okHttpClient36.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = okHttpClient36.getSslSocketFactory();
        okHttpClient27.sslSocketFactory = sSLSocketFactory38;
        okHttpClient0.sslSocketFactory = sSLSocketFactory38;
        java.net.InetAddress inetAddress43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket45 = sSLSocketFactory38.createSocket("", (int) (short) 100, inetAddress43, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNull(cookieHandler18);
        org.junit.Assert.assertNull(okResponseCache19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress26);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(connectionPool34);
        org.junit.Assert.assertNotNull(okHttpClient36);
// flaky:         org.junit.Assert.assertNull(proxySelector37);
        org.junit.Assert.assertNotNull(sSLSocketFactory38);
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type3 = proxy0.type();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache10 = okHttpClient5.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient5.setSSLSocketFactory(sSLSocketFactory11);
        boolean boolean13 = proxy0.equals((java.lang.Object) okHttpClient5);
        boolean boolean14 = okHttpClient5.getFollowProtocolRedirects();
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type3.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress4);
        org.junit.Assert.assertNull(okResponseCache10);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        int int12 = connectionPool9.getConnectionCount();
        int int13 = connectionPool9.getSpdyConnectionCount();
        com.squareup.okhttp.Address address14 = null;
        com.squareup.okhttp.Connection connection15 = connectionPool9.get(address14);
        com.squareup.okhttp.Connection connection16 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool9.recycle(connection16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(connection15);
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.ProxySelector proxySelector8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setProxySelector(proxySelector8);
        java.net.ResponseCache responseCache10 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool11 = okHttpClient0.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        java.util.List<java.lang.String> strList17 = okHttpClient12.transports;
        com.squareup.okhttp.ConnectionPool connectionPool18 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient21.copyWithDefaults();
        java.net.ProxySelector proxySelector30 = okHttpClient29.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = okHttpClient29.getSslSocketFactory();
        okHttpClient12.sslSocketFactory = sSLSocketFactory31;
        java.net.Socket socket33 = sSLSocketFactory31.createSocket();
        java.net.Socket socket34 = sSLSocketFactory31.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory31;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        java.net.CookieHandler cookieHandler44 = okHttpClient36.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache45 = okHttpClient36.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = null;
        okHttpClient36.sslSocketFactory = sSLSocketFactory46;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory48);
        java.net.ProxySelector proxySelector50 = null;
        okHttpClient36.proxySelector = proxySelector50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.net.Proxy proxy57 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress58 = proxy57.address();
        java.net.SocketAddress socketAddress59 = proxy57.address();
        okHttpClient52.proxy = proxy57;
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address64 = null;
        com.squareup.okhttp.Connection connection65 = connectionPool63.get(address64);
        int int66 = connectionPool63.getSpdyConnectionCount();
        connectionPool63.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient52.setConnectionPool(connectionPool63);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ProxySelector proxySelector72 = okHttpClient69.proxySelector;
        java.net.ProxySelector proxySelector73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient69.setProxySelector(proxySelector73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        okHttpClient69.sslSocketFactory = sSLSocketFactory85;
        okHttpClient52.sslSocketFactory = sSLSocketFactory85;
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory85);
        java.net.Socket socket89 = sSLSocketFactory85.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket93 = sSLSocketFactory31.createSocket(socket89, "DIRECT", 100, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(responseCache10);
        org.junit.Assert.assertNull(connectionPool11);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(okHttpClient29);
// flaky:         org.junit.Assert.assertNull(proxySelector30);
        org.junit.Assert.assertNotNull(sSLSocketFactory31);
        org.junit.Assert.assertNotNull(socket33);
        org.junit.Assert.assertEquals(socket33.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket34);
        org.junit.Assert.assertEquals(socket34.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNull(cookieHandler44);
        org.junit.Assert.assertNull(okResponseCache45);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(proxy57);
        org.junit.Assert.assertNull(socketAddress58);
        org.junit.Assert.assertNull(socketAddress59);
        org.junit.Assert.assertNull(connection65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNull(proxySelector72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNotNull(socket89);
        org.junit.Assert.assertEquals(socket89.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address26 = null;
        com.squareup.okhttp.Connection connection27 = connectionPool25.get(address26);
        int int28 = connectionPool25.getSpdyConnectionCount();
        connectionPool25.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient14.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = okHttpClient31.proxySelector;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient31.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient37.copyWithDefaults();
        java.net.ProxySelector proxySelector46 = okHttpClient45.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient45.getSslSocketFactory();
        okHttpClient31.sslSocketFactory = sSLSocketFactory47;
        okHttpClient14.sslSocketFactory = sSLSocketFactory47;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory47);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setConnectionPool(connectionPool60);
        com.squareup.okhttp.ConnectionPool connectionPool63 = okHttpClient62.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator64 = okHttpClient62.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool67 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient62.connectionPool = connectionPool67;
        java.net.ResponseCache responseCache69 = okHttpClient62.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory70 = okHttpClient62.sslSocketFactory;
        java.net.Proxy proxy71 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress72 = proxy71.address();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient62.setProxy(proxy71);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient(okHttpClient73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient73.setSSLSocketFactory(sSLSocketFactory85);
        java.lang.String[] strArray87 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray88 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray89 = sSLSocketFactory85.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory85);
        com.squareup.okhttp.OkAuthenticator okAuthenticator91 = okHttpClient90.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient92 = new com.squareup.okhttp.OkHttpClient(okHttpClient90);
        com.squareup.okhttp.OkHttpClient okHttpClient93 = new com.squareup.okhttp.OkHttpClient(okHttpClient90);
        java.net.ResponseCache responseCache94 = okHttpClient90.responseCache;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNull(connection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
// flaky:         org.junit.Assert.assertNull(proxySelector46);
        org.junit.Assert.assertNotNull(sSLSocketFactory47);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(okAuthenticator64);
        org.junit.Assert.assertNull(responseCache69);
        org.junit.Assert.assertNull(sSLSocketFactory70);
        org.junit.Assert.assertNotNull(proxy71);
        org.junit.Assert.assertNull(socketAddress72);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okAuthenticator91);
        org.junit.Assert.assertNull(responseCache94);
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool12 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setConnectionPool(connectionPool12);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient0.copyWithDefaults();
        java.lang.Class<?> wildcardClass16 = okHttpClient0.getClass();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(sSLSocketFactory14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache19 = null;
        okHttpClient11.responseCache = responseCache19;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient11.okResponseCache();
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection23 = okHttpClient11.open(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(okResponseCache21);
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.ConnectionPool connectionPool14 = null;
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        java.net.CookieHandler cookieHandler24 = okHttpClient16.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient16.okResponseCache();
        java.net.CookieHandler cookieHandler26 = okHttpClient16.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient(okHttpClient16);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ProxySelector proxySelector31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.setProxySelector(proxySelector31);
        java.net.CookieHandler cookieHandler33 = okHttpClient28.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        java.net.Proxy proxy42 = null;
        okHttpClient34.proxy = proxy42;
        java.util.Set<com.squareup.okhttp.Route> routeSet44 = okHttpClient34.failedRoutes;
        okHttpClient28.failedRoutes = routeSet44;
        okHttpClient27.failedRoutes = routeSet44;
        java.util.List<java.lang.String> strList47 = okHttpClient27.getTransports();
        java.net.ResponseCache responseCache48 = null;
        okHttpClient27.responseCache = responseCache48;
        java.net.Proxy proxy50 = java.net.Proxy.NO_PROXY;
        boolean boolean52 = proxy50.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type53 = proxy50.type();
        java.net.Proxy.Type type54 = proxy50.type();
        okHttpClient27.proxy = proxy50;
        okHttpClient11.proxy = proxy50;
        java.net.CookieHandler cookieHandler57 = null;
        okHttpClient11.cookieHandler = cookieHandler57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        okHttpClient59.hostnameVerifier = hostnameVerifier60;
        java.net.ResponseCache responseCache62 = null;
        okHttpClient59.responseCache = responseCache62;
        java.util.List<java.lang.String> strList64 = okHttpClient59.transports;
        com.squareup.okhttp.ConnectionPool connectionPool65 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient59.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        okHttpClient68.hostnameVerifier = hostnameVerifier69;
        java.net.ResponseCache responseCache71 = null;
        okHttpClient68.responseCache = responseCache71;
        java.util.List<java.lang.String> strList73 = okHttpClient68.transports;
        com.squareup.okhttp.ConnectionPool connectionPool74 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient68.connectionPool = connectionPool74;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient68.copyWithDefaults();
        java.net.ProxySelector proxySelector77 = okHttpClient76.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory78 = okHttpClient76.getSslSocketFactory();
        okHttpClient59.sslSocketFactory = sSLSocketFactory78;
        java.net.Socket socket80 = sSLSocketFactory78.createSocket();
        okHttpClient11.sslSocketFactory = sSLSocketFactory78;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory82 = okHttpClient11.getSslSocketFactory();
        java.net.InetAddress inetAddress85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket87 = sSLSocketFactory82.createSocket("DIRECT", 10, inetAddress85, 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: DIRECT");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(hostnameVerifier13);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(okResponseCache25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(cookieHandler33);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNotNull(routeSet44);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(proxy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type53.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type54.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(connectionPool65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertNotNull(okHttpClient76);
// flaky:         org.junit.Assert.assertNull(proxySelector77);
        org.junit.Assert.assertNotNull(sSLSocketFactory78);
        org.junit.Assert.assertNotNull(socket80);
        org.junit.Assert.assertEquals(socket80.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory82);
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient4.sslSocketFactory;
        java.lang.String[] strArray42 = sSLSocketFactory41.getSupportedCipherSuites();
        java.net.InetAddress inetAddress45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket47 = sSLSocketFactory41.createSocket("hi!", (int) (byte) 100, inetAddress45, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient12.sslSocketFactory;
        java.lang.String[] strArray14 = sSLSocketFactory13.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        java.net.Proxy proxy23 = null;
        okHttpClient15.proxy = proxy23;
        boolean boolean25 = okHttpClient15.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient15.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.util.List<java.lang.String> strList33 = okHttpClient28.transports;
        com.squareup.okhttp.ConnectionPool connectionPool34 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool34;
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient28.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient15.setConnectionPool(connectionPool36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        java.util.List<java.lang.String> strList43 = okHttpClient38.transports;
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient38.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient38.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        okHttpClient47.hostnameVerifier = hostnameVerifier48;
        java.net.ResponseCache responseCache50 = null;
        okHttpClient47.responseCache = responseCache50;
        java.util.List<java.lang.String> strList52 = okHttpClient47.transports;
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient47.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient47.copyWithDefaults();
        java.net.ProxySelector proxySelector56 = okHttpClient55.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = okHttpClient55.getSslSocketFactory();
        okHttpClient38.sslSocketFactory = sSLSocketFactory57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient37.setSSLSocketFactory(sSLSocketFactory57);
        java.lang.String[] strArray60 = sSLSocketFactory57.getSupportedCipherSuites();
        java.net.Socket socket61 = sSLSocketFactory57.createSocket();
        java.io.InputStream inputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket64 = sSLSocketFactory13.createSocket(socket61, inputStream62, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNotNull(sSLSocketFactory13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(connectionPool34);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(okHttpClient55);
// flaky:         org.junit.Assert.assertNull(proxySelector56);
        org.junit.Assert.assertNotNull(sSLSocketFactory57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(socket61);
        org.junit.Assert.assertEquals(socket61.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(0, 0L);
        okHttpClient0.connectionPool = connectionPool14;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.copyWithDefaults();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(sSLSocketFactory17);
        org.junit.Assert.assertNotNull(okHttpClient18);
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory10;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory12);
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient0.proxySelector = proxySelector14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress22 = proxy21.address();
        java.net.SocketAddress socketAddress23 = proxy21.address();
        okHttpClient16.proxy = proxy21;
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address28 = null;
        com.squareup.okhttp.Connection connection29 = connectionPool27.get(address28);
        int int30 = connectionPool27.getSpdyConnectionCount();
        connectionPool27.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient16.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ProxySelector proxySelector36 = okHttpClient33.proxySelector;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient33.setProxySelector(proxySelector37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient39.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = okHttpClient47.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient47.getSslSocketFactory();
        okHttpClient33.sslSocketFactory = sSLSocketFactory49;
        okHttpClient16.sslSocketFactory = sSLSocketFactory49;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory49);
        java.net.Socket socket53 = sSLSocketFactory49.createSocket();
        java.net.InetAddress inetAddress56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket58 = sSLSocketFactory49.createSocket("DIRECT", (int) (byte) 100, inetAddress56, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertNull(socketAddress22);
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNull(connection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxySelector36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
// flaky:         org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(sSLSocketFactory49);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(socket53);
        org.junit.Assert.assertEquals(socket53.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.lang.String[] strArray30 = sSLSocketFactory28.getDefaultCipherSuites();
        java.lang.String[] strArray31 = sSLSocketFactory28.getSupportedCipherSuites();
        java.lang.String[] strArray32 = sSLSocketFactory28.getDefaultCipherSuites();
        java.net.Socket socket33 = sSLSocketFactory28.createSocket();
        java.lang.String[] strArray34 = sSLSocketFactory28.getDefaultCipherSuites();
        java.net.InetAddress inetAddress35 = null;
        java.net.InetAddress inetAddress37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket39 = sSLSocketFactory28.createSocket(inetAddress35, (int) (byte) 100, inetAddress37, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(socket33);
        org.junit.Assert.assertEquals(socket33.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray34);
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = okHttpClient0.getHostnameVerifier();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(hostnameVerifier6);
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        java.net.ProxySelector proxySelector9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setProxySelector(proxySelector9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setConnectionPool(connectionPool20);
        java.net.ProxySelector proxySelector23 = null;
        okHttpClient11.proxySelector = proxySelector23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool26 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool26;
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = null;
        okHttpClient25.authenticator = okAuthenticator28;
        java.net.CookieHandler cookieHandler30 = null;
        okHttpClient25.cookieHandler = cookieHandler30;
        java.net.Proxy proxy32 = java.net.Proxy.NO_PROXY;
        boolean boolean34 = proxy32.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache36 = okHttpClient35.okResponseCache();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient35.setResponseCache(responseCache37);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        okHttpClient35.transports = strList41;
        boolean boolean44 = proxy32.equals((java.lang.Object) strList41);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient25.setProxy(proxy32);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        okHttpClient46.hostnameVerifier = hostnameVerifier47;
        java.net.ProxySelector proxySelector49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient46.setProxySelector(proxySelector49);
        java.net.CookieHandler cookieHandler51 = okHttpClient46.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        java.net.Proxy proxy60 = null;
        okHttpClient52.proxy = proxy60;
        java.util.Set<com.squareup.okhttp.Route> routeSet62 = okHttpClient52.failedRoutes;
        okHttpClient46.failedRoutes = routeSet62;
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient46.setHostnameVerifier(hostnameVerifier64);
        boolean boolean66 = proxy32.equals((java.lang.Object) okHttpClient65);
        okHttpClient11.proxy = proxy32;
        java.net.Proxy proxy68 = java.net.Proxy.NO_PROXY;
        boolean boolean70 = proxy68.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type71 = proxy68.type();
        java.lang.String str72 = proxy68.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        okHttpClient73.hostnameVerifier = hostnameVerifier74;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory76 = okHttpClient73.getSslSocketFactory();
        boolean boolean77 = proxy68.equals((java.lang.Object) okHttpClient73);
        java.lang.String str78 = proxy68.toString();
        java.net.Proxy.Type type79 = proxy68.type();
        okHttpClient11.proxy = proxy68;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier82 = null;
        okHttpClient81.hostnameVerifier = hostnameVerifier82;
        java.net.ResponseCache responseCache84 = null;
        okHttpClient81.responseCache = responseCache84;
        java.util.List<java.lang.String> strList86 = okHttpClient81.transports;
        java.net.Proxy proxy87 = java.net.Proxy.NO_PROXY;
        boolean boolean89 = proxy87.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type90 = proxy87.type();
        java.net.SocketAddress socketAddress91 = proxy87.address();
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient81.setProxy(proxy87);
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient11.setProxy(proxy87);
        okHttpClient0.proxy = proxy87;
        java.net.ResponseCache responseCache95 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient0.setResponseCache(responseCache95);
        okHttpClient96.followProtocolRedirects = false;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(connectionPool26);
        org.junit.Assert.assertNotNull(proxy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(okResponseCache36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(cookieHandler51);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNotNull(routeSet62);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(proxy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type71.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "DIRECT" + "'", str72, "DIRECT");
        org.junit.Assert.assertNull(sSLSocketFactory76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "DIRECT" + "'", str78, "DIRECT");
        org.junit.Assert.assertTrue("'" + type79 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type79.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList86);
        org.junit.Assert.assertNotNull(proxy87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + type90 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type90.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress91);
        org.junit.Assert.assertNotNull(okHttpClient92);
        org.junit.Assert.assertNotNull(okHttpClient93);
        org.junit.Assert.assertNotNull(okHttpClient96);
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        java.net.Proxy proxy17 = okHttpClient0.getProxy();
        boolean boolean18 = okHttpClient0.getFollowProtocolRedirects();
        java.net.ProxySelector proxySelector19 = okHttpClient0.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.copyWithDefaults();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(proxy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNotNull(okHttpClient20);
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = okHttpClient0.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        java.util.List<java.lang.String> strList17 = okHttpClient12.transports;
        com.squareup.okhttp.ConnectionPool connectionPool18 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient9.setConnectionPool(connectionPool18);
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient20.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = okHttpClient20.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient20.connectionPool = connectionPool25;
        java.net.ResponseCache responseCache27 = okHttpClient20.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient20.sslSocketFactory;
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress30 = proxy29.address();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient20.setProxy(proxy29);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient(okHttpClient31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        java.util.List<java.lang.String> strList38 = okHttpClient33.transports;
        com.squareup.okhttp.ConnectionPool connectionPool39 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient33.connectionPool = connectionPool39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient33.copyWithDefaults();
        java.net.ProxySelector proxySelector42 = okHttpClient41.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient41.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient31.setSSLSocketFactory(sSLSocketFactory43);
        java.net.Socket socket45 = sSLSocketFactory43.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory43);
        java.util.List<java.lang.String> strList47 = okHttpClient46.getTransports();
        java.net.ProxySelector proxySelector48 = null;
        okHttpClient46.proxySelector = proxySelector48;
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(proxy8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNull(okAuthenticator22);
        org.junit.Assert.assertNull(responseCache27);
        org.junit.Assert.assertNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertNull(socketAddress30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(connectionPool39);
        org.junit.Assert.assertNotNull(okHttpClient41);
// flaky:         org.junit.Assert.assertNull(proxySelector42);
        org.junit.Assert.assertNotNull(sSLSocketFactory43);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(socket45);
        org.junit.Assert.assertEquals(socket45.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList47);
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        okHttpClient0.transports = strList6;
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setCookieHandler(cookieHandler10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        java.net.CookieHandler cookieHandler21 = okHttpClient13.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient13.okResponseCache();
        java.net.CookieHandler cookieHandler23 = okHttpClient13.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient(okHttpClient13);
        java.net.Proxy proxy25 = java.net.Proxy.NO_PROXY;
        boolean boolean27 = proxy25.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type28 = proxy25.type();
        java.net.SocketAddress socketAddress29 = proxy25.address();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient13.setProxy(proxy25);
        boolean boolean31 = okHttpClient30.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient33.copyWithDefaults();
        java.net.Proxy proxy35 = okHttpClient33.getProxy();
        okHttpClient0.proxy = proxy35;
        java.net.Proxy.Type type37 = proxy35.type();
        java.net.SocketAddress socketAddress38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy39 = new java.net.Proxy(type37, socketAddress38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertNull(cookieHandler23);
        org.junit.Assert.assertNotNull(proxy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type28.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress29);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(proxy35);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(100, (long) 10);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool12 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setConnectionPool(connectionPool12);
        java.net.Proxy proxy14 = okHttpClient0.proxy;
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient0.getConnectionPool();
        java.net.CookieHandler cookieHandler16 = null;
        okHttpClient0.cookieHandler = cookieHandler16;
        java.net.ResponseCache responseCache18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setResponseCache(responseCache18);
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient19.getConnectionPool();
        com.squareup.okhttp.Connection connection21 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool20.maybeShare(connection21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(proxy14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(connectionPool20);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = okHttpClient0.proxySelector;
        java.net.ProxySelector proxySelector4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setProxySelector(proxySelector4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient6.copyWithDefaults();
        java.net.ProxySelector proxySelector15 = okHttpClient14.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient14.getSslSocketFactory();
        okHttpClient0.sslSocketFactory = sSLSocketFactory16;
        java.net.InetAddress inetAddress18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket20 = sSLSocketFactory16.createSocket(inetAddress18, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(proxySelector3);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(okHttpClient14);
// flaky:         org.junit.Assert.assertNull(proxySelector15);
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        java.net.CookieHandler cookieHandler26 = okHttpClient18.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient18.okResponseCache();
        java.net.CookieHandler cookieHandler28 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        boolean boolean32 = proxy30.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type33 = proxy30.type();
        java.net.SocketAddress socketAddress34 = proxy30.address();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxy(proxy30);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient11.setProxy(proxy30);
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory39);
        java.net.ProxySelector proxySelector41 = okHttpClient40.proxySelector;
        java.net.Proxy proxy42 = okHttpClient40.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = okHttpClient43.hostnameVerifier;
        java.net.Proxy proxy49 = okHttpClient43.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool52 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient43.connectionPool = connectionPool52;
        java.util.List<java.lang.String> strList54 = okHttpClient43.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient43.setHostnameVerifier(hostnameVerifier55);
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient56.copyWithDefaults();
        okHttpClient57.followProtocolRedirects = false;
        java.net.ProxySelector proxySelector60 = okHttpClient57.getProxySelector();
        java.net.Proxy proxy61 = okHttpClient57.proxy;
        boolean boolean62 = proxy42.equals((java.lang.Object) proxy61);
        // The following exception was thrown during execution in test generation
        try {
            java.net.SocketAddress socketAddress63 = proxy61.address();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(proxySelector41);
        org.junit.Assert.assertNotNull(proxy42);
        org.junit.Assert.assertNull(hostnameVerifier48);
        org.junit.Assert.assertNull(proxy49);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNotNull(okHttpClient57);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNull(proxy61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((-1), (long) (short) 0);
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        org.junit.Assert.assertNull(connection4);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.lang.String[] strArray30 = sSLSocketFactory28.getDefaultCipherSuites();
        java.lang.String[] strArray31 = sSLSocketFactory28.getDefaultCipherSuites();
        java.lang.String[] strArray32 = sSLSocketFactory28.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket35 = sSLSocketFactory28.createSocket("", (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.lang.String[] strArray30 = sSLSocketFactory28.getDefaultCipherSuites();
        java.lang.String[] strArray31 = sSLSocketFactory28.getSupportedCipherSuites();
        java.net.Socket socket32 = sSLSocketFactory28.createSocket();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.setProxySelector(proxySelector36);
        java.net.ResponseCache responseCache38 = null;
        okHttpClient37.responseCache = responseCache38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        java.net.CookieHandler cookieHandler48 = okHttpClient40.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache49 = okHttpClient40.okResponseCache();
        java.net.CookieHandler cookieHandler50 = okHttpClient40.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient(okHttpClient40);
        java.net.Proxy proxy52 = java.net.Proxy.NO_PROXY;
        boolean boolean54 = proxy52.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type55 = proxy52.type();
        java.net.SocketAddress socketAddress56 = proxy52.address();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient40.setProxy(proxy52);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = null;
        okHttpClient58.hostnameVerifier = hostnameVerifier59;
        java.net.ResponseCache responseCache61 = null;
        okHttpClient58.responseCache = responseCache61;
        java.util.List<java.lang.String> strList63 = okHttpClient58.transports;
        com.squareup.okhttp.ConnectionPool connectionPool64 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient58.connectionPool = connectionPool64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient58.copyWithDefaults();
        java.net.ProxySelector proxySelector67 = okHttpClient66.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient66.getSslSocketFactory();
        okHttpClient57.sslSocketFactory = sSLSocketFactory68;
        java.lang.String[] strArray70 = sSLSocketFactory68.getDefaultCipherSuites();
        java.lang.String[] strArray71 = sSLSocketFactory68.getSupportedCipherSuites();
        java.net.Socket socket72 = sSLSocketFactory68.createSocket();
        okHttpClient37.sslSocketFactory = sSLSocketFactory68;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory74 = okHttpClient37.sslSocketFactory;
        java.net.Socket socket75 = sSLSocketFactory74.createSocket();
        java.io.InputStream inputStream76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket78 = sSLSocketFactory28.createSocket(socket75, inputStream76, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(socket32);
        org.junit.Assert.assertEquals(socket32.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNull(cookieHandler48);
        org.junit.Assert.assertNull(okResponseCache49);
        org.junit.Assert.assertNull(cookieHandler50);
        org.junit.Assert.assertNotNull(proxy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type55.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress56);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(connectionPool64);
        org.junit.Assert.assertNotNull(okHttpClient66);
// flaky:         org.junit.Assert.assertNull(proxySelector67);
        org.junit.Assert.assertNotNull(sSLSocketFactory68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(socket72);
        org.junit.Assert.assertEquals(socket72.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory74);
        org.junit.Assert.assertNotNull(socket75);
        org.junit.Assert.assertEquals(socket75.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(responseCache18);
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = okHttpClient11.authenticator;
        java.net.ResponseCache responseCache20 = okHttpClient11.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.Address address22 = null;
        com.squareup.okhttp.Connection connection23 = connectionPool21.get(address22);
        int int24 = connectionPool21.getConnectionCount();
        com.squareup.okhttp.Connection connection25 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool21.recycle(connection25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(sSLSocketFactory18);
        org.junit.Assert.assertNull(okAuthenticator19);
        org.junit.Assert.assertNull(responseCache20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNull(connection23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        boolean boolean6 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy7 = okHttpClient0.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.setProxySelector(proxySelector11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ProxySelector proxySelector18 = okHttpClient15.proxySelector;
        java.net.Proxy proxy19 = okHttpClient15.proxy;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        boolean boolean21 = okHttpClient15.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.net.Proxy proxy27 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress28 = proxy27.address();
        java.net.SocketAddress socketAddress29 = proxy27.address();
        okHttpClient22.proxy = proxy27;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient15.setProxy(proxy27);
        okHttpClient13.proxy = proxy27;
        java.net.Proxy.Type type33 = proxy27.type();
        okHttpClient0.proxy = proxy27;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient35.hostnameVerifier;
        java.net.Proxy proxy41 = okHttpClient35.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool44 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient35.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient35.copyWithDefaults();
        java.net.Proxy proxy47 = okHttpClient46.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = okHttpClient46.getHostnameVerifier();
        com.squareup.okhttp.ConnectionPool connectionPool49 = null;
        okHttpClient46.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        java.net.CookieHandler cookieHandler59 = okHttpClient51.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache60 = okHttpClient51.okResponseCache();
        java.net.CookieHandler cookieHandler61 = okHttpClient51.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient(okHttpClient51);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        okHttpClient63.hostnameVerifier = hostnameVerifier64;
        java.net.ProxySelector proxySelector66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient63.setProxySelector(proxySelector66);
        java.net.CookieHandler cookieHandler68 = okHttpClient63.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ResponseCache responseCache72 = null;
        okHttpClient69.responseCache = responseCache72;
        java.util.List<java.lang.String> strList74 = okHttpClient69.transports;
        com.squareup.okhttp.ConnectionPool connectionPool75 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient69.connectionPool = connectionPool75;
        java.net.Proxy proxy77 = null;
        okHttpClient69.proxy = proxy77;
        java.util.Set<com.squareup.okhttp.Route> routeSet79 = okHttpClient69.failedRoutes;
        okHttpClient63.failedRoutes = routeSet79;
        okHttpClient62.failedRoutes = routeSet79;
        java.util.List<java.lang.String> strList82 = okHttpClient62.getTransports();
        java.net.ResponseCache responseCache83 = null;
        okHttpClient62.responseCache = responseCache83;
        java.net.Proxy proxy85 = java.net.Proxy.NO_PROXY;
        boolean boolean87 = proxy85.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type88 = proxy85.type();
        java.net.Proxy.Type type89 = proxy85.type();
        okHttpClient62.proxy = proxy85;
        okHttpClient46.proxy = proxy85;
        java.net.CookieHandler cookieHandler92 = null;
        okHttpClient46.cookieHandler = cookieHandler92;
        com.squareup.okhttp.OkHttpClient okHttpClient94 = new com.squareup.okhttp.OkHttpClient(okHttpClient46);
        com.squareup.okhttp.ConnectionPool connectionPool95 = okHttpClient94.connectionPool;
        boolean boolean96 = proxy27.equals((java.lang.Object) okHttpClient94);
        java.net.Proxy.Type type97 = proxy27.type();
        java.net.SocketAddress socketAddress98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy99 = new java.net.Proxy(type97, socketAddress98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(proxy7);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNull(proxy19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNotNull(proxy27);
        org.junit.Assert.assertNull(socketAddress28);
        org.junit.Assert.assertNull(socketAddress29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(hostnameVerifier40);
        org.junit.Assert.assertNull(proxy41);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(proxy47);
        org.junit.Assert.assertNotNull(hostnameVerifier48);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNull(cookieHandler59);
        org.junit.Assert.assertNull(okResponseCache60);
        org.junit.Assert.assertNull(cookieHandler61);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(cookieHandler68);
        org.junit.Assert.assertNull(strList74);
        org.junit.Assert.assertNotNull(connectionPool75);
        org.junit.Assert.assertNotNull(routeSet79);
        org.junit.Assert.assertNull(strList82);
        org.junit.Assert.assertNotNull(proxy85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + type88 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type88.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type89 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type89.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(connectionPool95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + type97 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type97.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        java.net.ProxySelector proxySelector9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setProxySelector(proxySelector9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient10);
        java.util.List<java.lang.String> strList12 = okHttpClient11.getTransports();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(strList12);
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        java.util.Set<com.squareup.okhttp.Route> routeSet17 = okHttpClient0.failedRoutes;
        okHttpClient0.followProtocolRedirects = false;
        okHttpClient0.followProtocolRedirects = true;
        java.util.Set<com.squareup.okhttp.Route> routeSet22 = okHttpClient0.failedRoutes;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(routeSet17);
        org.junit.Assert.assertNotNull(routeSet22);
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.ConnectionPool connectionPool14 = null;
        okHttpClient11.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        java.net.CookieHandler cookieHandler24 = okHttpClient16.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient16.okResponseCache();
        java.net.CookieHandler cookieHandler26 = okHttpClient16.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient(okHttpClient16);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ProxySelector proxySelector31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.setProxySelector(proxySelector31);
        java.net.CookieHandler cookieHandler33 = okHttpClient28.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        java.util.List<java.lang.String> strList39 = okHttpClient34.transports;
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool40;
        java.net.Proxy proxy42 = null;
        okHttpClient34.proxy = proxy42;
        java.util.Set<com.squareup.okhttp.Route> routeSet44 = okHttpClient34.failedRoutes;
        okHttpClient28.failedRoutes = routeSet44;
        okHttpClient27.failedRoutes = routeSet44;
        java.util.List<java.lang.String> strList47 = okHttpClient27.getTransports();
        java.net.ResponseCache responseCache48 = null;
        okHttpClient27.responseCache = responseCache48;
        java.net.Proxy proxy50 = java.net.Proxy.NO_PROXY;
        boolean boolean52 = proxy50.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type53 = proxy50.type();
        java.net.Proxy.Type type54 = proxy50.type();
        okHttpClient27.proxy = proxy50;
        okHttpClient11.proxy = proxy50;
        java.net.CookieHandler cookieHandler57 = okHttpClient11.cookieHandler;
        java.net.Proxy proxy58 = java.net.Proxy.NO_PROXY;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient11.setProxy(proxy58);
        boolean boolean60 = okHttpClient59.followProtocolRedirects;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(hostnameVerifier13);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(okResponseCache25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(cookieHandler33);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNotNull(routeSet44);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(proxy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type53.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type54.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(cookieHandler57);
        org.junit.Assert.assertNotNull(proxy58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        java.util.List<java.lang.String> strList17 = okHttpClient12.transports;
        com.squareup.okhttp.ConnectionPool connectionPool18 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient9.setConnectionPool(connectionPool18);
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = okHttpClient20.getAuthenticator();
        java.net.ProxySelector proxySelector22 = okHttpClient20.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.setConnectionPool(connectionPool32);
        java.net.ResponseCache responseCache35 = okHttpClient23.responseCache;
        java.net.ResponseCache responseCache36 = okHttpClient23.getResponseCache();
        java.net.ResponseCache responseCache37 = okHttpClient23.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache39 = okHttpClient38.okResponseCache();
        java.net.ResponseCache responseCache40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient38.setResponseCache(responseCache40);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient38.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient38.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        boolean boolean47 = okHttpClient44.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler48 = okHttpClient44.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = okHttpClient49.hostnameVerifier;
        java.net.Proxy proxy55 = okHttpClient49.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool58 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient49.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient49.copyWithDefaults();
        java.net.ResponseCache responseCache61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient60.setResponseCache(responseCache61);
        com.squareup.okhttp.OkAuthenticator okAuthenticator63 = okHttpClient60.authenticator;
        okHttpClient44.authenticator = okAuthenticator63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient38.setAuthenticator(okAuthenticator63);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient23.setAuthenticator(okAuthenticator63);
        okHttpClient20.authenticator = okAuthenticator63;
        com.squareup.okhttp.ConnectionPool connectionPool68 = okHttpClient20.getConnectionPool();
        okHttpClient0.connectionPool = connectionPool68;
        boolean boolean70 = okHttpClient0.followProtocolRedirects;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(okResponseCache6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(okAuthenticator21);
        org.junit.Assert.assertNull(proxySelector22);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(responseCache35);
        org.junit.Assert.assertNull(responseCache36);
        org.junit.Assert.assertNull(responseCache37);
        org.junit.Assert.assertNull(okResponseCache39);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertNull(sSLSocketFactory43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(cookieHandler48);
        org.junit.Assert.assertNull(hostnameVerifier54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(okAuthenticator63);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNotNull(connectionPool68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        boolean boolean6 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy7 = okHttpClient0.proxy;
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = null;
        okHttpClient0.authenticator = okAuthenticator8;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(proxy7);
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (byte) -1);
        int int3 = connectionPool2.getConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient0.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.Proxy proxy15 = java.net.Proxy.NO_PROXY;
        boolean boolean17 = proxy15.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type18 = proxy15.type();
        java.net.SocketAddress socketAddress19 = proxy15.address();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient9.setProxy(proxy15);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setProxySelector(proxySelector24);
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = okHttpClient21.hostnameVerifier;
        java.net.CookieHandler cookieHandler27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient21.setCookieHandler(cookieHandler27);
        java.net.ResponseCache responseCache29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setResponseCache(responseCache29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ResponseCache responseCache34 = null;
        okHttpClient31.responseCache = responseCache34;
        java.util.List<java.lang.String> strList36 = okHttpClient31.transports;
        com.squareup.okhttp.ConnectionPool connectionPool37 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient31.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient31.copyWithDefaults();
        java.net.ProxySelector proxySelector40 = okHttpClient39.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient39.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient28.setSSLSocketFactory(sSLSocketFactory41);
        boolean boolean43 = proxy15.equals((java.lang.Object) sSLSocketFactory41);
        java.lang.String[] strArray44 = sSLSocketFactory41.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory41);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient46.connectionPool = connectionPool47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ResponseCache responseCache52 = null;
        okHttpClient49.responseCache = responseCache52;
        java.util.List<java.lang.String> strList54 = okHttpClient49.transports;
        com.squareup.okhttp.ConnectionPool connectionPool55 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool55;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient46.setConnectionPool(connectionPool55);
        com.squareup.okhttp.ConnectionPool connectionPool58 = okHttpClient57.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator59 = okHttpClient57.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool62 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient57.connectionPool = connectionPool62;
        java.net.ResponseCache responseCache64 = okHttpClient57.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient57.sslSocketFactory;
        java.net.Proxy proxy66 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress67 = proxy66.address();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient57.setProxy(proxy66);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient(okHttpClient68);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = null;
        okHttpClient70.hostnameVerifier = hostnameVerifier71;
        java.net.ResponseCache responseCache73 = null;
        okHttpClient70.responseCache = responseCache73;
        java.util.List<java.lang.String> strList75 = okHttpClient70.transports;
        com.squareup.okhttp.ConnectionPool connectionPool76 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient70.connectionPool = connectionPool76;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient70.copyWithDefaults();
        java.net.ProxySelector proxySelector79 = okHttpClient78.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory80 = okHttpClient78.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient68.setSSLSocketFactory(sSLSocketFactory80);
        java.net.Socket socket82 = sSLSocketFactory80.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket86 = sSLSocketFactory41.createSocket(socket82, "hi!", 0, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(proxy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type18.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(hostnameVerifier26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertNotNull(okHttpClient39);
// flaky:         org.junit.Assert.assertNull(proxySelector40);
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(connectionPool55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNull(okAuthenticator59);
        org.junit.Assert.assertNull(responseCache64);
        org.junit.Assert.assertNull(sSLSocketFactory65);
        org.junit.Assert.assertNotNull(proxy66);
        org.junit.Assert.assertNull(socketAddress67);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNull(strList75);
        org.junit.Assert.assertNotNull(connectionPool76);
        org.junit.Assert.assertNotNull(okHttpClient78);
// flaky:         org.junit.Assert.assertNull(proxySelector79);
        org.junit.Assert.assertNotNull(sSLSocketFactory80);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(socket82);
        org.junit.Assert.assertEquals(socket82.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        boolean boolean16 = okHttpClient6.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient(okHttpClient6);
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient17.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient17.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = null;
        okHttpClient21.authenticator = okAuthenticator24;
        java.net.CookieHandler cookieHandler26 = null;
        okHttpClient21.cookieHandler = cookieHandler26;
        java.net.Proxy proxy28 = java.net.Proxy.NO_PROXY;
        boolean boolean30 = proxy28.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache32 = okHttpClient31.okResponseCache();
        java.net.ResponseCache responseCache33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setResponseCache(responseCache33);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        okHttpClient31.transports = strList37;
        boolean boolean40 = proxy28.equals((java.lang.Object) strList37);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient21.setProxy(proxy28);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient17.setProxy(proxy28);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient17.setSSLSocketFactory(sSLSocketFactory43);
        java.net.Proxy proxy45 = java.net.Proxy.NO_PROXY;
        boolean boolean47 = proxy45.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type48 = proxy45.type();
        java.net.SocketAddress socketAddress49 = proxy45.address();
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache55 = okHttpClient50.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient50.setSSLSocketFactory(sSLSocketFactory56);
        boolean boolean58 = proxy45.equals((java.lang.Object) okHttpClient50);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ResponseCache responseCache65 = null;
        okHttpClient62.responseCache = responseCache65;
        java.util.List<java.lang.String> strList67 = okHttpClient62.transports;
        com.squareup.okhttp.ConnectionPool connectionPool68 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool68;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient59.setConnectionPool(connectionPool68);
        java.net.ResponseCache responseCache71 = okHttpClient59.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory72 = okHttpClient59.sslSocketFactory;
        java.net.ResponseCache responseCache73 = okHttpClient59.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool74 = okHttpClient59.connectionPool;
        boolean boolean75 = proxy45.equals((java.lang.Object) connectionPool74);
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient44.setProxy(proxy45);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient0.setProxy(proxy45);
        java.net.Proxy.Type type78 = proxy45.type();
        java.net.SocketAddress socketAddress79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy80 = new java.net.Proxy(type78, socketAddress79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNull(hostnameVerifier19);
        org.junit.Assert.assertNull(hostnameVerifier20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(proxy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(okResponseCache32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(proxy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type48.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress49);
        org.junit.Assert.assertNull(okResponseCache55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(connectionPool68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(responseCache71);
        org.junit.Assert.assertNull(sSLSocketFactory72);
        org.junit.Assert.assertNull(responseCache73);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertTrue("'" + type78 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type78.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient12.sslSocketFactory;
        java.lang.String[] strArray14 = sSLSocketFactory13.getSupportedCipherSuites();
        java.net.Socket socket15 = sSLSocketFactory13.createSocket();
        java.net.InetAddress inetAddress16 = null;
        java.net.InetAddress inetAddress18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket20 = sSLSocketFactory13.createSocket(inetAddress16, (int) (byte) 100, inetAddress18, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNotNull(sSLSocketFactory13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(socket15);
        org.junit.Assert.assertEquals(socket15.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.Proxy proxy20 = okHttpClient19.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = okHttpClient19.sslSocketFactory;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient19.hostnameVerifier;
        java.net.Proxy proxy23 = java.net.Proxy.NO_PROXY;
        boolean boolean25 = proxy23.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient26.okResponseCache();
        java.net.ResponseCache responseCache28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setResponseCache(responseCache28);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        okHttpClient26.transports = strList32;
        boolean boolean35 = proxy23.equals((java.lang.Object) strList32);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList32;
        okHttpClient19.transports = strList32;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList32;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList32;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(proxy20);
        org.junit.Assert.assertNull(sSLSocketFactory21);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNotNull(proxy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(okResponseCache27);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.lang.String[] strArray19 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        okHttpClient0.transports = strList20;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.setConnectionPool(connectionPool27);
        java.net.CookieHandler cookieHandler29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setCookieHandler(cookieHandler29);
        java.net.ResponseCache responseCache31 = okHttpClient30.responseCache;
        java.net.Proxy proxy32 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress33 = proxy32.address();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient30.setProxy(proxy32);
        java.net.Proxy.Type type35 = proxy32.type();
        java.net.Proxy.Type type36 = proxy32.type();
        java.net.SocketAddress socketAddress37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy38 = new java.net.Proxy(type36, socketAddress37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(responseCache31);
        org.junit.Assert.assertNotNull(proxy32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type35.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type36.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setCookieHandler(cookieHandler12);
        java.util.List<java.lang.String> strList14 = okHttpClient11.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList14;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient12.getHostnameVerifier();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(hostnameVerifier16);
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        java.net.Proxy proxy23 = null;
        okHttpClient15.proxy = proxy23;
        boolean boolean25 = okHttpClient15.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient15.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.util.List<java.lang.String> strList33 = okHttpClient28.transports;
        com.squareup.okhttp.ConnectionPool connectionPool34 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool34;
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient28.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient15.setConnectionPool(connectionPool36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        java.util.List<java.lang.String> strList43 = okHttpClient38.transports;
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient38.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient38.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        okHttpClient47.hostnameVerifier = hostnameVerifier48;
        java.net.ResponseCache responseCache50 = null;
        okHttpClient47.responseCache = responseCache50;
        java.util.List<java.lang.String> strList52 = okHttpClient47.transports;
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient47.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient47.copyWithDefaults();
        java.net.ProxySelector proxySelector56 = okHttpClient55.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = okHttpClient55.getSslSocketFactory();
        okHttpClient38.sslSocketFactory = sSLSocketFactory57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient37.setSSLSocketFactory(sSLSocketFactory57);
        okHttpClient0.sslSocketFactory = sSLSocketFactory57;
        java.lang.String[] strArray61 = sSLSocketFactory57.getSupportedCipherSuites();
        java.lang.String[] strArray62 = sSLSocketFactory57.getSupportedCipherSuites();
        java.net.InetAddress inetAddress63 = null;
        java.net.InetAddress inetAddress65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket67 = sSLSocketFactory57.createSocket(inetAddress63, (int) (byte) 100, inetAddress65, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(connectionPool34);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(okHttpClient55);
// flaky:         org.junit.Assert.assertNull(proxySelector56);
        org.junit.Assert.assertNotNull(sSLSocketFactory57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        boolean boolean11 = okHttpClient8.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setCookieHandler(cookieHandler12);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache14 = okHttpClient8.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = okHttpClient15.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient17.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient17.copyWithDefaults();
        java.net.ProxySelector proxySelector26 = okHttpClient25.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = okHttpClient25.getSslSocketFactory();
        okHttpClient15.sslSocketFactory = sSLSocketFactory27;
        java.lang.String[] strArray29 = sSLSocketFactory27.getDefaultCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory27;
        java.lang.String[] strArray31 = sSLSocketFactory27.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket34 = sSLSocketFactory27.createSocket("hi!", (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(okResponseCache14);
        org.junit.Assert.assertNull(okAuthenticator16);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNotNull(okHttpClient25);
// flaky:         org.junit.Assert.assertNull(proxySelector26);
        org.junit.Assert.assertNotNull(sSLSocketFactory27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.copyWithDefaults();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(sSLSocketFactory12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNotNull(okHttpClient14);
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 0, (long) 0);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) (byte) 100);
        int int3 = connectionPool2.getHttpConnectionCount();
        int int4 = connectionPool2.getHttpConnectionCount();
        com.squareup.okhttp.Connection connection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.ResponseCache responseCache7 = okHttpClient0.getResponseCache();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.getHostnameVerifier();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        java.net.CookieHandler cookieHandler16 = okHttpClient10.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient(okHttpClient10);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient18.hostnameVerifier;
        java.net.Proxy proxy24 = okHttpClient18.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient18.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient18.copyWithDefaults();
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setResponseCache(responseCache30);
        com.squareup.okhttp.ConnectionPool connectionPool32 = okHttpClient29.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        java.util.List<java.lang.String> strList38 = okHttpClient33.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier39;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache41 = okHttpClient33.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient33.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = okHttpClient43.hostnameVerifier;
        java.net.Proxy proxy49 = okHttpClient43.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool52 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient43.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient43.copyWithDefaults();
        java.net.Proxy proxy55 = okHttpClient54.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = okHttpClient54.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient33.setHostnameVerifier(hostnameVerifier56);
        okHttpClient29.hostnameVerifier = hostnameVerifier56;
        okHttpClient17.hostnameVerifier = hostnameVerifier56;
        okHttpClient0.hostnameVerifier = hostnameVerifier56;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(responseCache7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(cookieHandler16);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(okResponseCache41);
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertNull(hostnameVerifier48);
        org.junit.Assert.assertNull(proxy49);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(proxy55);
        org.junit.Assert.assertNotNull(hostnameVerifier56);
        org.junit.Assert.assertNotNull(okHttpClient57);
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.ConnectionPool connectionPool24 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        okHttpClient19.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient19.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.Proxy proxy35 = null;
        okHttpClient27.proxy = proxy35;
        boolean boolean37 = okHttpClient27.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient27.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = okHttpClient40.hostnameVerifier;
        java.net.Proxy proxy46 = okHttpClient40.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache48 = okHttpClient47.okResponseCache();
        java.net.ResponseCache responseCache49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient47.setResponseCache(responseCache49);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        okHttpClient47.transports = strList53;
        okHttpClient40.transports = strList53;
        java.net.Proxy proxy57 = okHttpClient40.getProxy();
        boolean boolean58 = okHttpClient40.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        okHttpClient62.hostnameVerifier = hostnameVerifier63;
        java.net.ResponseCache responseCache65 = null;
        okHttpClient62.responseCache = responseCache65;
        java.util.List<java.lang.String> strList67 = okHttpClient62.transports;
        com.squareup.okhttp.ConnectionPool connectionPool68 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient62.connectionPool = connectionPool68;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient59.setConnectionPool(connectionPool68);
        java.net.Proxy proxy71 = okHttpClient70.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool73 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient72.connectionPool = connectionPool73;
        int int75 = connectionPool73.getSpdyConnectionCount();
        okHttpClient70.connectionPool = connectionPool73;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier78 = null;
        okHttpClient77.hostnameVerifier = hostnameVerifier78;
        java.net.ResponseCache responseCache80 = null;
        okHttpClient77.responseCache = responseCache80;
        javax.net.ssl.HostnameVerifier hostnameVerifier82 = okHttpClient77.hostnameVerifier;
        java.net.Proxy proxy83 = okHttpClient77.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool86 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient77.connectionPool = connectionPool86;
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient77.copyWithDefaults();
        java.net.ResponseCache responseCache89 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient88.setResponseCache(responseCache89);
        com.squareup.okhttp.OkAuthenticator okAuthenticator91 = okHttpClient88.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient70.setAuthenticator(okAuthenticator91);
        okHttpClient40.authenticator = okAuthenticator91;
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient39.setAuthenticator(okAuthenticator91);
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient19.setAuthenticator(okAuthenticator91);
        java.util.List<java.lang.String> strList96 = okHttpClient95.getTransports();
        java.net.URL uRL97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection98 = okHttpClient95.open(uRL97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(hostnameVerifier45);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertNull(okResponseCache48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(proxy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(connectionPool68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(proxy71);
        org.junit.Assert.assertNotNull(connectionPool73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(hostnameVerifier82);
        org.junit.Assert.assertNull(proxy83);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okAuthenticator91);
        org.junit.Assert.assertNotNull(okHttpClient92);
        org.junit.Assert.assertNotNull(okHttpClient94);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNull(strList96);
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setResponseCache(responseCache23);
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient24.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient26.copyWithDefaults();
        boolean boolean35 = okHttpClient34.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = okHttpClient34.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient24.setSSLSocketFactory(sSLSocketFactory36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool39 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient38.connectionPool = connectionPool39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        java.net.Proxy proxy43 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress44 = proxy43.address();
        java.net.SocketAddress socketAddress45 = proxy43.address();
        okHttpClient38.proxy = proxy43;
        com.squareup.okhttp.ConnectionPool connectionPool49 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address50 = null;
        com.squareup.okhttp.Connection connection51 = connectionPool49.get(address50);
        int int52 = connectionPool49.getSpdyConnectionCount();
        connectionPool49.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient38.setConnectionPool(connectionPool49);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ProxySelector proxySelector58 = okHttpClient55.proxySelector;
        java.net.ProxySelector proxySelector59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient55.setProxySelector(proxySelector59);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        java.util.List<java.lang.String> strList66 = okHttpClient61.transports;
        com.squareup.okhttp.ConnectionPool connectionPool67 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient61.connectionPool = connectionPool67;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient61.copyWithDefaults();
        java.net.ProxySelector proxySelector70 = okHttpClient69.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory71 = okHttpClient69.getSslSocketFactory();
        okHttpClient55.sslSocketFactory = sSLSocketFactory71;
        okHttpClient38.sslSocketFactory = sSLSocketFactory71;
        java.lang.String[] strArray74 = sSLSocketFactory71.getSupportedCipherSuites();
        java.lang.String[] strArray75 = sSLSocketFactory71.getSupportedCipherSuites();
        java.net.Socket socket76 = sSLSocketFactory71.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket80 = sSLSocketFactory36.createSocket(socket76, "DIRECT", (int) (byte) 1, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(connectionPool39);
        org.junit.Assert.assertNotNull(proxy43);
        org.junit.Assert.assertNull(socketAddress44);
        org.junit.Assert.assertNull(socketAddress45);
        org.junit.Assert.assertNull(connection51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(proxySelector58);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNotNull(connectionPool67);
        org.junit.Assert.assertNotNull(okHttpClient69);
// flaky:         org.junit.Assert.assertNull(proxySelector70);
        org.junit.Assert.assertNotNull(sSLSocketFactory71);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(socket76);
        org.junit.Assert.assertEquals(socket76.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory10;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory12);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = okHttpClient13.getSslSocketFactory();
        java.net.Proxy proxy15 = okHttpClient13.getProxy();
        java.net.CookieHandler cookieHandler16 = okHttpClient13.cookieHandler;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(sSLSocketFactory14);
        org.junit.Assert.assertNull(proxy15);
        org.junit.Assert.assertNull(cookieHandler16);
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier19;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient13.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = okHttpClient13.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient23.hostnameVerifier;
        java.net.Proxy proxy29 = okHttpClient23.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool32 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient23.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.copyWithDefaults();
        java.net.Proxy proxy35 = okHttpClient34.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient34.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient13.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient12.setHostnameVerifier(hostnameVerifier36);
        boolean boolean39 = okHttpClient38.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler40 = okHttpClient38.cookieHandler;
        java.net.ResponseCache responseCache41 = okHttpClient38.responseCache;
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = okHttpClient38.authenticator;
        java.net.CookieHandler cookieHandler43 = null;
        okHttpClient38.cookieHandler = cookieHandler43;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNull(sSLSocketFactory22);
        org.junit.Assert.assertNull(hostnameVerifier28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(proxy35);
        org.junit.Assert.assertNotNull(hostnameVerifier36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(cookieHandler40);
        org.junit.Assert.assertNull(responseCache41);
        org.junit.Assert.assertNull(okAuthenticator42);
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient2 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool3 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient2.connectionPool = connectionPool3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        java.util.List<java.lang.String> strList10 = okHttpClient5.transports;
        com.squareup.okhttp.ConnectionPool connectionPool11 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient5.connectionPool = connectionPool11;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient2.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator14 = okHttpClient13.getAuthenticator();
        java.net.ProxySelector proxySelector15 = okHttpClient13.getProxySelector();
        java.net.ResponseCache responseCache16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setResponseCache(responseCache16);
        java.net.Proxy proxy18 = java.net.Proxy.NO_PROXY;
        boolean boolean20 = proxy18.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type21 = proxy18.type();
        java.net.SocketAddress socketAddress22 = proxy18.address();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient17.setProxy(proxy18);
        java.net.Proxy proxy24 = java.net.Proxy.NO_PROXY;
        boolean boolean26 = proxy24.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type27 = proxy24.type();
        java.net.Proxy.Type type28 = proxy24.type();
        boolean boolean29 = proxy18.equals((java.lang.Object) proxy24);
        java.net.Proxy.Type type30 = proxy24.type();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient0.setProxy(proxy24);
        java.net.SocketAddress socketAddress32 = proxy24.address();
        java.net.Proxy.Type type33 = proxy24.type();
        java.net.SocketAddress socketAddress34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy35 = new java.net.Proxy(type33, socketAddress34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(connectionPool3);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(connectionPool11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(okAuthenticator14);
        org.junit.Assert.assertNull(proxySelector15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(proxy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type21.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress22);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(proxy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type27.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type28.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type30.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNull(socketAddress32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type33.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient13.cookieHandler = cookieHandler14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient16.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient16.sslSocketFactory = sSLSocketFactory35;
        java.net.Socket socket37 = sSLSocketFactory35.createSocket();
        java.net.Socket socket38 = sSLSocketFactory35.createSocket();
        okHttpClient13.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray40 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.InetAddress inetAddress43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket45 = sSLSocketFactory35.createSocket("DIRECT", (int) (byte) 10, inetAddress43, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(socket37);
        org.junit.Assert.assertEquals(socket37.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        java.lang.String[] strArray36 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray37 = sSLSocketFactory34.getSupportedCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory34.getDefaultCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory34.createSocket();
        java.net.Socket socket40 = null;
        java.io.InputStream inputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket43 = sSLSocketFactory34.createSocket(socket40, inputStream41, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: the existing socket cannot be null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient9.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy29 = okHttpClient28.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient0.setHostnameVerifier(hostnameVerifier30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        java.net.ProxySelector proxySelector34 = okHttpClient32.getProxySelector();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient32.getSslSocketFactory();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNull(sSLSocketFactory35);
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        java.util.List<java.lang.String> strList19 = okHttpClient11.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        java.net.ResponseCache responseCache23 = null;
        okHttpClient20.responseCache = responseCache23;
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient20.hostnameVerifier;
        java.net.Proxy proxy26 = okHttpClient20.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool29 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient20.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient20.copyWithDefaults();
        java.net.ResponseCache responseCache32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient31.setResponseCache(responseCache32);
        java.net.CookieHandler cookieHandler34 = null;
        okHttpClient33.cookieHandler = cookieHandler34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        okHttpClient36.sslSocketFactory = sSLSocketFactory55;
        java.net.Socket socket57 = sSLSocketFactory55.createSocket();
        java.net.Socket socket58 = sSLSocketFactory55.createSocket();
        okHttpClient33.sslSocketFactory = sSLSocketFactory55;
        okHttpClient11.sslSocketFactory = sSLSocketFactory55;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool62 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient61.connectionPool = connectionPool62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient(okHttpClient61);
        boolean boolean67 = okHttpClient61.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient(okHttpClient61);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ProxySelector proxySelector72 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient69.setProxySelector(proxySelector72);
        java.net.ResponseCache responseCache74 = null;
        okHttpClient73.responseCache = responseCache74;
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = okHttpClient73.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient73.copyWithDefaults();
        java.net.ResponseCache responseCache78 = okHttpClient77.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = new com.squareup.okhttp.OkHttpClient(okHttpClient77);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory80 = okHttpClient77.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient61.setSSLSocketFactory(sSLSocketFactory80);
        java.net.Socket socket82 = sSLSocketFactory80.createSocket();
        java.io.InputStream inputStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket85 = sSLSocketFactory55.createSocket(socket82, inputStream83, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNull(proxy26);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(socket57);
        org.junit.Assert.assertEquals(socket57.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket58);
        org.junit.Assert.assertEquals(socket58.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(connectionPool62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(hostnameVerifier76);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertNull(responseCache78);
        org.junit.Assert.assertNotNull(sSLSocketFactory80);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(socket82);
        org.junit.Assert.assertEquals(socket82.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setConnectionPool(connectionPool21);
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setResponseCache(responseCache23);
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient24.hostnameVerifier;
        java.net.ProxySelector proxySelector26 = null;
        okHttpClient24.proxySelector = proxySelector26;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier25);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier6;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        java.net.Proxy proxy16 = okHttpClient10.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool19 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient10.connectionPool = connectionPool19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient10.copyWithDefaults();
        java.net.Proxy proxy22 = okHttpClient21.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient21.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient0.setHostnameVerifier(hostnameVerifier23);
        java.util.Set<com.squareup.okhttp.Route> routeSet25 = okHttpClient24.failedRoutes;
        boolean boolean26 = okHttpClient24.followProtocolRedirects;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNull(sSLSocketFactory9);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(proxy16);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(proxy22);
        org.junit.Assert.assertNotNull(hostnameVerifier23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(routeSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((-1), 10L);
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setResponseCache(responseCache14);
        java.net.Proxy proxy16 = java.net.Proxy.NO_PROXY;
        boolean boolean18 = proxy16.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type19 = proxy16.type();
        java.net.SocketAddress socketAddress20 = proxy16.address();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient15.setProxy(proxy16);
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        boolean boolean24 = proxy22.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type25 = proxy22.type();
        java.net.Proxy.Type type26 = proxy22.type();
        boolean boolean27 = proxy16.equals((java.lang.Object) proxy22);
        java.lang.String str28 = proxy22.toString();
        java.net.Proxy.Type type29 = proxy22.type();
        java.net.SocketAddress socketAddress30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy31 = new java.net.Proxy(type29, socketAddress30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(proxy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type19.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type26.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DIRECT" + "'", str28, "DIRECT");
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type29.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient9.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy29 = okHttpClient28.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient0.setHostnameVerifier(hostnameVerifier30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        java.util.List<java.lang.String> strList40 = okHttpClient35.transports;
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient35.connectionPool = connectionPool41;
        com.squareup.okhttp.ConnectionPool connectionPool43 = okHttpClient35.connectionPool;
        boolean boolean44 = okHttpClient35.getFollowProtocolRedirects();
        com.squareup.okhttp.ConnectionPool connectionPool45 = okHttpClient35.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient32.setConnectionPool(connectionPool45);
        java.net.ResponseCache responseCache47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient46.setResponseCache(responseCache47);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient46.sslSocketFactory;
        java.util.List<java.lang.String> strList50 = okHttpClient46.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setConnectionPool(connectionPool60);
        java.net.ResponseCache responseCache63 = okHttpClient51.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        okHttpClient65.hostnameVerifier = hostnameVerifier66;
        java.net.ResponseCache responseCache68 = null;
        okHttpClient65.responseCache = responseCache68;
        java.util.List<java.lang.String> strList70 = okHttpClient65.transports;
        com.squareup.okhttp.ConnectionPool connectionPool71 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient65.connectionPool = connectionPool71;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient65.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = null;
        okHttpClient74.hostnameVerifier = hostnameVerifier75;
        java.net.ResponseCache responseCache77 = null;
        okHttpClient74.responseCache = responseCache77;
        java.util.List<java.lang.String> strList79 = okHttpClient74.transports;
        com.squareup.okhttp.ConnectionPool connectionPool80 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient74.connectionPool = connectionPool80;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient74.copyWithDefaults();
        java.net.ProxySelector proxySelector83 = okHttpClient82.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory84 = okHttpClient82.getSslSocketFactory();
        okHttpClient65.sslSocketFactory = sSLSocketFactory84;
        okHttpClient64.sslSocketFactory = sSLSocketFactory84;
        okHttpClient46.sslSocketFactory = sSLSocketFactory84;
        java.net.ResponseCache responseCache88 = null;
        okHttpClient46.responseCache = responseCache88;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNull(sSLSocketFactory34);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(sSLSocketFactory49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNull(responseCache63);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(connectionPool71);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(strList79);
        org.junit.Assert.assertNotNull(connectionPool80);
        org.junit.Assert.assertNotNull(okHttpClient82);
// flaky:         org.junit.Assert.assertNull(proxySelector83);
        org.junit.Assert.assertNotNull(sSLSocketFactory84);
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setResponseCache(responseCache14);
        java.net.Proxy proxy16 = java.net.Proxy.NO_PROXY;
        boolean boolean18 = proxy16.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type19 = proxy16.type();
        java.net.SocketAddress socketAddress20 = proxy16.address();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient15.setProxy(proxy16);
        java.net.Proxy.Type type22 = proxy16.type();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        java.util.List<java.lang.String> strList31 = okHttpClient26.transports;
        com.squareup.okhttp.ConnectionPool connectionPool32 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.setConnectionPool(connectionPool32);
        com.squareup.okhttp.OkAuthenticator okAuthenticator35 = okHttpClient34.getAuthenticator();
        java.net.ProxySelector proxySelector36 = okHttpClient34.getProxySelector();
        java.net.ProxySelector proxySelector37 = null;
        okHttpClient34.proxySelector = proxySelector37;
        java.net.ProxySelector proxySelector39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient34.setProxySelector(proxySelector39);
        java.net.CookieHandler cookieHandler41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient40.setCookieHandler(cookieHandler41);
        java.net.CookieHandler cookieHandler43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient40.setCookieHandler(cookieHandler43);
        com.squareup.okhttp.ConnectionPool connectionPool45 = okHttpClient40.connectionPool;
        boolean boolean46 = proxy16.equals((java.lang.Object) connectionPool45);
        com.squareup.okhttp.Connection connection47 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool45.recycle(connection47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(proxy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type19.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(connectionPool32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(okAuthenticator35);
        org.junit.Assert.assertNull(proxySelector36);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient11.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient13.copyWithDefaults();
        java.util.List<java.lang.String> strList15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.setTransports(strList15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(hostnameVerifier12);
        org.junit.Assert.assertNotNull(okHttpClient14);
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.sslSocketFactory;
        java.lang.String[] strArray11 = sSLSocketFactory10.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient12.setConnectionPool(connectionPool21);
        com.squareup.okhttp.ConnectionPool connectionPool24 = okHttpClient23.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = okHttpClient23.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool28 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient23.connectionPool = connectionPool28;
        java.net.ResponseCache responseCache30 = okHttpClient23.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = okHttpClient23.sslSocketFactory;
        java.net.Proxy proxy32 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress33 = proxy32.address();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.setProxy(proxy32);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient44.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient34.setSSLSocketFactory(sSLSocketFactory46);
        java.lang.String[] strArray48 = sSLSocketFactory46.getSupportedCipherSuites();
        java.lang.String[] strArray49 = sSLSocketFactory46.getSupportedCipherSuites();
        java.lang.String[] strArray50 = sSLSocketFactory46.getDefaultCipherSuites();
        java.net.Socket socket51 = sSLSocketFactory46.createSocket();
        java.io.InputStream inputStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket54 = sSLSocketFactory10.createSocket(socket51, inputStream52, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNull(okAuthenticator25);
        org.junit.Assert.assertNull(responseCache30);
        org.junit.Assert.assertNull(sSLSocketFactory31);
        org.junit.Assert.assertNotNull(proxy32);
        org.junit.Assert.assertNull(socketAddress33);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
// flaky:         org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(socket51);
        org.junit.Assert.assertEquals(socket51.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.net.Proxy proxy18 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress19 = proxy18.address();
        java.net.SocketAddress socketAddress20 = proxy18.address();
        okHttpClient13.proxy = proxy18;
        com.squareup.okhttp.ConnectionPool connectionPool24 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address25 = null;
        com.squareup.okhttp.Connection connection26 = connectionPool24.get(address25);
        int int27 = connectionPool24.getSpdyConnectionCount();
        connectionPool24.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient13.setConnectionPool(connectionPool24);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        okHttpClient30.hostnameVerifier = hostnameVerifier31;
        java.net.ProxySelector proxySelector33 = okHttpClient30.proxySelector;
        java.net.ProxySelector proxySelector34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient30.setProxySelector(proxySelector34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient44.getSslSocketFactory();
        okHttpClient30.sslSocketFactory = sSLSocketFactory46;
        okHttpClient13.sslSocketFactory = sSLSocketFactory46;
        java.lang.String[] strArray49 = sSLSocketFactory46.getSupportedCipherSuites();
        java.lang.String[] strArray50 = sSLSocketFactory46.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory46);
        java.lang.String[] strArray52 = sSLSocketFactory46.getSupportedCipherSuites();
        java.net.InetAddress inetAddress53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket55 = sSLSocketFactory46.createSocket(inetAddress53, 1);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNotNull(proxy18);
        org.junit.Assert.assertNull(socketAddress19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(connection26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
// flaky:         org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(strArray52);
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ResponseCache responseCache11 = null;
        okHttpClient8.responseCache = responseCache11;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient8.hostnameVerifier;
        java.net.Proxy proxy14 = okHttpClient8.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool17 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient8.connectionPool = connectionPool17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient8.copyWithDefaults();
        java.net.ResponseCache responseCache20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setResponseCache(responseCache20);
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient21.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient21.copyWithDefaults();
        java.util.List<java.lang.String> strList24 = okHttpClient21.getTransports();
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient4.setTransports(strList24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNull(proxy14);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(hostnameVerifier22);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.setConnectionPool(connectionPool22);
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient13.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient11.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient(okHttpClient26);
        com.squareup.okhttp.ConnectionPool connectionPool30 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient26.setConnectionPool(connectionPool30);
        java.net.CookieHandler cookieHandler32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient31.setCookieHandler(cookieHandler32);
        java.net.URL uRL34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection35 = okHttpClient31.open(uRL34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient33);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        okHttpClient5.sslSocketFactory = sSLSocketFactory6;
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setResponseCache(responseCache8);
        java.net.ProxySelector proxySelector10 = okHttpClient9.getProxySelector();
        java.net.ResponseCache responseCache11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setResponseCache(responseCache11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient9.getAuthenticator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(proxySelector10);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(okAuthenticator13);
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        connectionPool6.evictAll();
        com.squareup.okhttp.Connection connection9 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool6.recycle(connection9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        java.net.ResponseCache responseCache23 = null;
        okHttpClient20.responseCache = responseCache23;
        java.util.List<java.lang.String> strList25 = okHttpClient20.transports;
        com.squareup.okhttp.ConnectionPool connectionPool26 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient20.connectionPool = connectionPool26;
        java.net.Proxy proxy28 = null;
        okHttpClient20.proxy = proxy28;
        boolean boolean30 = okHttpClient20.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient20.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        java.util.List<java.lang.String> strList40 = okHttpClient35.transports;
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient35.connectionPool = connectionPool41;
        java.net.Proxy proxy43 = null;
        okHttpClient35.proxy = proxy43;
        boolean boolean45 = okHttpClient35.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient35.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient48.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient35.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = null;
        okHttpClient58.hostnameVerifier = hostnameVerifier59;
        java.net.ResponseCache responseCache61 = null;
        okHttpClient58.responseCache = responseCache61;
        java.util.List<java.lang.String> strList63 = okHttpClient58.transports;
        com.squareup.okhttp.ConnectionPool connectionPool64 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient58.connectionPool = connectionPool64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient58.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient67 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = null;
        okHttpClient67.hostnameVerifier = hostnameVerifier68;
        java.net.ResponseCache responseCache70 = null;
        okHttpClient67.responseCache = responseCache70;
        java.util.List<java.lang.String> strList72 = okHttpClient67.transports;
        com.squareup.okhttp.ConnectionPool connectionPool73 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient67.connectionPool = connectionPool73;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient67.copyWithDefaults();
        java.net.ProxySelector proxySelector76 = okHttpClient75.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory77 = okHttpClient75.getSslSocketFactory();
        okHttpClient58.sslSocketFactory = sSLSocketFactory77;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient57.setSSLSocketFactory(sSLSocketFactory77);
        okHttpClient20.sslSocketFactory = sSLSocketFactory77;
        java.lang.String[] strArray81 = sSLSocketFactory77.getSupportedCipherSuites();
        java.lang.String[] strArray82 = sSLSocketFactory77.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory77);
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient83.setFollowProtocolRedirects(true);
        java.net.CookieHandler cookieHandler86 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient85.setCookieHandler(cookieHandler86);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(connectionPool26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(connectionPool64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(connectionPool73);
        org.junit.Assert.assertNotNull(okHttpClient75);
// flaky:         org.junit.Assert.assertNull(proxySelector76);
        org.junit.Assert.assertNotNull(sSLSocketFactory77);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(okHttpClient83);
        org.junit.Assert.assertNotNull(okHttpClient85);
        org.junit.Assert.assertNotNull(okHttpClient87);
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) 'a', (long) (short) 10);
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        int int5 = connectionPool2.getHttpConnectionCount();
        int int6 = connectionPool2.getHttpConnectionCount();
        org.junit.Assert.assertNull(connection4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        java.net.Proxy proxy23 = null;
        okHttpClient15.proxy = proxy23;
        boolean boolean25 = okHttpClient15.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient15.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.util.List<java.lang.String> strList33 = okHttpClient28.transports;
        com.squareup.okhttp.ConnectionPool connectionPool34 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool34;
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient28.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient15.setConnectionPool(connectionPool36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        java.util.List<java.lang.String> strList43 = okHttpClient38.transports;
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient38.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient38.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        okHttpClient47.hostnameVerifier = hostnameVerifier48;
        java.net.ResponseCache responseCache50 = null;
        okHttpClient47.responseCache = responseCache50;
        java.util.List<java.lang.String> strList52 = okHttpClient47.transports;
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient47.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient47.copyWithDefaults();
        java.net.ProxySelector proxySelector56 = okHttpClient55.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = okHttpClient55.getSslSocketFactory();
        okHttpClient38.sslSocketFactory = sSLSocketFactory57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient37.setSSLSocketFactory(sSLSocketFactory57);
        okHttpClient0.sslSocketFactory = sSLSocketFactory57;
        java.lang.String[] strArray61 = sSLSocketFactory57.getSupportedCipherSuites();
        java.net.InetAddress inetAddress62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket64 = sSLSocketFactory57.createSocket(inetAddress62, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(connectionPool34);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(okHttpClient55);
// flaky:         org.junit.Assert.assertNull(proxySelector56);
        org.junit.Assert.assertNotNull(sSLSocketFactory57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(strArray61);
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool10);
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool((int) (byte) 100, (long) 1);
        okHttpClient0.connectionPool = connectionPool14;
        com.squareup.okhttp.Connection connection16 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool14.maybeShare(connection16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNotNull(okHttpClient11);
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.ResponseCache responseCache14 = okHttpClient13.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient13.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ProxySelector proxySelector19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient16.setProxySelector(proxySelector19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient20.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient22.setConnectionPool(connectionPool31);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient34.setProxySelector(proxySelector37);
        java.net.CookieHandler cookieHandler39 = okHttpClient34.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        java.net.Proxy proxy48 = null;
        okHttpClient40.proxy = proxy48;
        java.util.Set<com.squareup.okhttp.Route> routeSet50 = okHttpClient40.failedRoutes;
        okHttpClient34.failedRoutes = routeSet50;
        java.net.ProxySelector proxySelector52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient34.setProxySelector(proxySelector52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient34.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = okHttpClient55.hostnameVerifier;
        java.net.Proxy proxy61 = okHttpClient55.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool64 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient55.connectionPool = connectionPool64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient55.copyWithDefaults();
        java.net.Proxy proxy67 = okHttpClient66.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = okHttpClient66.getHostnameVerifier();
        okHttpClient34.hostnameVerifier = hostnameVerifier68;
        okHttpClient33.hostnameVerifier = hostnameVerifier68;
        okHttpClient21.hostnameVerifier = hostnameVerifier68;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient13.setHostnameVerifier(hostnameVerifier68);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient13.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient74.copyWithDefaults();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(responseCache14);
        org.junit.Assert.assertNotNull(sSLSocketFactory15);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(cookieHandler39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(routeSet50);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(okHttpClient54);
        org.junit.Assert.assertNull(hostnameVerifier60);
        org.junit.Assert.assertNull(proxy61);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(proxy67);
        org.junit.Assert.assertNotNull(hostnameVerifier68);
        org.junit.Assert.assertNotNull(okHttpClient72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNotNull(okHttpClient75);
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.util.List<java.lang.String> strList21 = okHttpClient0.transports;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient0.okResponseCache();
        boolean boolean23 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        java.net.CookieHandler cookieHandler32 = okHttpClient24.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient24.okResponseCache();
        java.net.CookieHandler cookieHandler34 = okHttpClient24.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        java.net.Proxy proxy36 = java.net.Proxy.NO_PROXY;
        boolean boolean38 = proxy36.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type39 = proxy36.type();
        java.net.SocketAddress socketAddress40 = proxy36.address();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient24.setProxy(proxy36);
        java.lang.String[] strArray43 = new java.lang.String[] { "DIRECT" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        okHttpClient24.transports = strList44;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient24.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool50 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient49.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        okHttpClient52.hostnameVerifier = hostnameVerifier53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.util.List<java.lang.String> strList57 = okHttpClient52.transports;
        com.squareup.okhttp.ConnectionPool connectionPool58 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient49.setConnectionPool(connectionPool58);
        com.squareup.okhttp.ConnectionPool connectionPool61 = okHttpClient60.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator62 = okHttpClient60.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool65 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient60.connectionPool = connectionPool65;
        java.net.ResponseCache responseCache67 = okHttpClient60.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient60.sslSocketFactory;
        java.net.Proxy proxy69 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress70 = proxy69.address();
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient60.setProxy(proxy69);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient(okHttpClient71);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        okHttpClient73.hostnameVerifier = hostnameVerifier74;
        java.net.ResponseCache responseCache76 = null;
        okHttpClient73.responseCache = responseCache76;
        java.util.List<java.lang.String> strList78 = okHttpClient73.transports;
        com.squareup.okhttp.ConnectionPool connectionPool79 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient73.connectionPool = connectionPool79;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient73.copyWithDefaults();
        java.net.ProxySelector proxySelector82 = okHttpClient81.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory83 = okHttpClient81.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient71.setSSLSocketFactory(sSLSocketFactory83);
        com.squareup.okhttp.OkHttpClient okHttpClient85 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier86 = null;
        okHttpClient85.hostnameVerifier = hostnameVerifier86;
        java.net.ProxySelector proxySelector88 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient85.setProxySelector(proxySelector88);
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient89.copyWithDefaults();
        java.net.ProxySelector proxySelector91 = null;
        okHttpClient90.proxySelector = proxySelector91;
        com.squareup.okhttp.OkAuthenticator okAuthenticator93 = okHttpClient90.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient71.setAuthenticator(okAuthenticator93);
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient24.setAuthenticator(okAuthenticator93);
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient0.setAuthenticator(okAuthenticator93);
        java.util.Set<com.squareup.okhttp.Route> routeSet97 = okHttpClient96.failedRoutes;
        java.net.CookieHandler cookieHandler98 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient99 = okHttpClient96.setCookieHandler(cookieHandler98);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNull(cookieHandler34);
        org.junit.Assert.assertNotNull(proxy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type39.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(connectionPool50);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(connectionPool58);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNull(okAuthenticator62);
        org.junit.Assert.assertNull(responseCache67);
        org.junit.Assert.assertNull(sSLSocketFactory68);
        org.junit.Assert.assertNotNull(proxy69);
        org.junit.Assert.assertNull(socketAddress70);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(strList78);
        org.junit.Assert.assertNotNull(connectionPool79);
        org.junit.Assert.assertNotNull(okHttpClient81);
// flaky:         org.junit.Assert.assertNull(proxySelector82);
        org.junit.Assert.assertNotNull(sSLSocketFactory83);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okAuthenticator93);
        org.junit.Assert.assertNotNull(okHttpClient94);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNotNull(okHttpClient96);
        org.junit.Assert.assertNotNull(routeSet97);
        org.junit.Assert.assertNotNull(okHttpClient99);
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache14 = okHttpClient11.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient15.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        java.net.Proxy proxy29 = null;
        okHttpClient21.proxy = proxy29;
        java.util.Set<com.squareup.okhttp.Route> routeSet31 = okHttpClient21.failedRoutes;
        okHttpClient15.failedRoutes = routeSet31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient15.setHostnameVerifier(hostnameVerifier33);
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient34.setProxySelector(proxySelector35);
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient34.setResponseCache(responseCache37);
        com.squareup.okhttp.Route[] routeArray39 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet40 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet40, routeArray39);
        okHttpClient38.failedRoutes = routeSet40;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient38.getSslSocketFactory();
        java.net.Proxy proxy44 = java.net.Proxy.NO_PROXY;
        boolean boolean46 = proxy44.equals((java.lang.Object) 1L);
        java.net.SocketAddress socketAddress47 = proxy44.address();
        java.net.SocketAddress socketAddress48 = proxy44.address();
        boolean boolean50 = proxy44.equals((java.lang.Object) (short) 1);
        java.net.SocketAddress socketAddress51 = proxy44.address();
        okHttpClient38.proxy = proxy44;
        java.net.SocketAddress socketAddress53 = proxy44.address();
        okHttpClient11.proxy = proxy44;
        java.net.Proxy.Type type55 = proxy44.type();
        java.net.SocketAddress socketAddress56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy57 = new java.net.Proxy(type55, socketAddress56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(okResponseCache14);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(routeSet31);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(routeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(sSLSocketFactory43);
        org.junit.Assert.assertNotNull(proxy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(socketAddress47);
        org.junit.Assert.assertNull(socketAddress48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(socketAddress51);
        org.junit.Assert.assertNull(socketAddress53);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type55.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.ResponseCache responseCache7 = okHttpClient0.getResponseCache();
        okHttpClient0.followProtocolRedirects = false;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(responseCache7);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        okHttpClient0.transports = strList6;
        java.net.CookieHandler cookieHandler9 = okHttpClient0.cookieHandler;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setCookieHandler(cookieHandler10);
        java.net.ResponseCache responseCache12 = okHttpClient11.getResponseCache();
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) (byte) 10);
        int int3 = connectionPool2.getConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList14 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient15.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool27;
        java.net.Proxy proxy29 = null;
        okHttpClient21.proxy = proxy29;
        java.util.Set<com.squareup.okhttp.Route> routeSet31 = okHttpClient21.failedRoutes;
        okHttpClient15.failedRoutes = routeSet31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient15.setHostnameVerifier(hostnameVerifier33);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache35 = okHttpClient15.okResponseCache();
        com.squareup.okhttp.OkAuthenticator okAuthenticator36 = okHttpClient15.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool37 = okHttpClient15.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet38 = okHttpClient15.failedRoutes;
        okHttpClient0.failedRoutes = routeSet38;
        java.lang.Class<?> wildcardClass40 = routeSet38.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(routeSet31);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(okResponseCache35);
        org.junit.Assert.assertNull(okAuthenticator36);
        org.junit.Assert.assertNull(connectionPool37);
        org.junit.Assert.assertNotNull(routeSet38);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        java.net.CookieHandler cookieHandler10 = okHttpClient5.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient11.copyWithDefaults();
        java.net.ProxySelector proxySelector20 = okHttpClient19.proxySelector;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient19.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet22 = okHttpClient19.failedRoutes;
        okHttpClient5.failedRoutes = routeSet22;
        boolean boolean24 = okHttpClient5.getFollowProtocolRedirects();
        okHttpClient5.followProtocolRedirects = false;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient5.responseCache = responseCache27;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(okHttpClient19);
// flaky:         org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(routeSet22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ProxySelector proxySelector19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient16.setProxySelector(proxySelector19);
        java.net.ResponseCache responseCache21 = null;
        okHttpClient20.responseCache = responseCache21;
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient20.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient20.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient25.setProxySelector(proxySelector26);
        okHttpClient27.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient27.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient31.setProxySelector(proxySelector34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient35.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient37.setConnectionPool(connectionPool46);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        java.net.ProxySelector proxySelector52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient49.setProxySelector(proxySelector52);
        java.net.CookieHandler cookieHandler54 = okHttpClient49.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        okHttpClient55.hostnameVerifier = hostnameVerifier56;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient55.responseCache = responseCache58;
        java.util.List<java.lang.String> strList60 = okHttpClient55.transports;
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool61;
        java.net.Proxy proxy63 = null;
        okHttpClient55.proxy = proxy63;
        java.util.Set<com.squareup.okhttp.Route> routeSet65 = okHttpClient55.failedRoutes;
        okHttpClient49.failedRoutes = routeSet65;
        java.net.ProxySelector proxySelector67 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient49.setProxySelector(proxySelector67);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient49.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = null;
        okHttpClient70.hostnameVerifier = hostnameVerifier71;
        java.net.ResponseCache responseCache73 = null;
        okHttpClient70.responseCache = responseCache73;
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = okHttpClient70.hostnameVerifier;
        java.net.Proxy proxy76 = okHttpClient70.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool79 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient70.connectionPool = connectionPool79;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient70.copyWithDefaults();
        java.net.Proxy proxy82 = okHttpClient81.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier83 = okHttpClient81.getHostnameVerifier();
        okHttpClient49.hostnameVerifier = hostnameVerifier83;
        okHttpClient48.hostnameVerifier = hostnameVerifier83;
        okHttpClient36.hostnameVerifier = hostnameVerifier83;
        okHttpClient27.hostnameVerifier = hostnameVerifier83;
        okHttpClient11.hostnameVerifier = hostnameVerifier83;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory89 = okHttpClient11.sslSocketFactory;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(hostnameVerifier23);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNull(cookieHandler54);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNotNull(routeSet65);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(okHttpClient69);
        org.junit.Assert.assertNull(hostnameVerifier75);
        org.junit.Assert.assertNull(proxy76);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNull(proxy82);
        org.junit.Assert.assertNotNull(hostnameVerifier83);
        org.junit.Assert.assertNull(sSLSocketFactory89);
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        java.net.SocketAddress socketAddress12 = proxy6.address();
        java.net.Proxy.Type type13 = proxy6.type();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ProxySelector proxySelector17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.setProxySelector(proxySelector17);
        java.net.Proxy proxy19 = okHttpClient18.getProxy();
        java.util.List<java.lang.String> strList20 = okHttpClient18.getTransports();
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        boolean boolean23 = proxy6.equals((java.lang.Object) responseCache21);
        java.net.Proxy.Type type24 = proxy6.type();
        java.net.SocketAddress socketAddress25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy26 = new java.net.Proxy(type24, socketAddress25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(socketAddress12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type13.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(proxy19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type24.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        java.net.ResponseCache responseCache10 = null;
        okHttpClient7.responseCache = responseCache10;
        java.util.List<java.lang.String> strList12 = okHttpClient7.transports;
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient7.connectionPool = connectionPool13;
        java.net.CookieHandler cookieHandler15 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache16 = okHttpClient7.okResponseCache();
        java.net.CookieHandler cookieHandler17 = okHttpClient7.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getDefaultCipherSuites();
        java.lang.String[] strArray38 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.Socket socket39 = sSLSocketFactory35.createSocket();
        okHttpClient4.sslSocketFactory = sSLSocketFactory35;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient4.sslSocketFactory;
        java.net.InetAddress inetAddress42 = null;
        java.net.InetAddress inetAddress44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket46 = sSLSocketFactory41.createSocket(inetAddress42, (int) (byte) 1, inetAddress44, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(okResponseCache16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(socket39);
        org.junit.Assert.assertEquals(socket39.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (byte) 1);
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient13.cookieHandler = cookieHandler14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient16.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.util.List<java.lang.String> strList30 = okHttpClient25.transports;
        com.squareup.okhttp.ConnectionPool connectionPool31 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient33.getSslSocketFactory();
        okHttpClient16.sslSocketFactory = sSLSocketFactory35;
        java.net.Socket socket37 = sSLSocketFactory35.createSocket();
        java.net.Socket socket38 = sSLSocketFactory35.createSocket();
        okHttpClient13.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray40 = sSLSocketFactory35.getSupportedCipherSuites();
        java.net.InetAddress inetAddress41 = null;
        java.net.InetAddress inetAddress43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket45 = sSLSocketFactory35.createSocket(inetAddress41, (-1), inetAddress43, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(connectionPool31);
        org.junit.Assert.assertNotNull(okHttpClient33);
// flaky:         org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(socket37);
        org.junit.Assert.assertEquals(socket37.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket38);
        org.junit.Assert.assertEquals(socket38.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient9.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy29 = okHttpClient28.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient0.setHostnameVerifier(hostnameVerifier30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        java.util.List<java.lang.String> strList40 = okHttpClient35.transports;
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient35.connectionPool = connectionPool41;
        com.squareup.okhttp.ConnectionPool connectionPool43 = okHttpClient35.connectionPool;
        boolean boolean44 = okHttpClient35.getFollowProtocolRedirects();
        com.squareup.okhttp.ConnectionPool connectionPool45 = okHttpClient35.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient32.setConnectionPool(connectionPool45);
        java.net.ResponseCache responseCache47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient46.setResponseCache(responseCache47);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient46.sslSocketFactory;
        java.util.List<java.lang.String> strList50 = okHttpClient46.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setConnectionPool(connectionPool60);
        java.net.ResponseCache responseCache63 = okHttpClient51.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        okHttpClient65.hostnameVerifier = hostnameVerifier66;
        java.net.ResponseCache responseCache68 = null;
        okHttpClient65.responseCache = responseCache68;
        java.util.List<java.lang.String> strList70 = okHttpClient65.transports;
        com.squareup.okhttp.ConnectionPool connectionPool71 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient65.connectionPool = connectionPool71;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient65.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = null;
        okHttpClient74.hostnameVerifier = hostnameVerifier75;
        java.net.ResponseCache responseCache77 = null;
        okHttpClient74.responseCache = responseCache77;
        java.util.List<java.lang.String> strList79 = okHttpClient74.transports;
        com.squareup.okhttp.ConnectionPool connectionPool80 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient74.connectionPool = connectionPool80;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient74.copyWithDefaults();
        java.net.ProxySelector proxySelector83 = okHttpClient82.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory84 = okHttpClient82.getSslSocketFactory();
        okHttpClient65.sslSocketFactory = sSLSocketFactory84;
        okHttpClient64.sslSocketFactory = sSLSocketFactory84;
        okHttpClient46.sslSocketFactory = sSLSocketFactory84;
        java.net.InetAddress inetAddress88 = null;
        java.net.InetAddress inetAddress90 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket92 = sSLSocketFactory84.createSocket(inetAddress88, (int) (short) -1, inetAddress90, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNull(sSLSocketFactory34);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(okHttpClient48);
        org.junit.Assert.assertNull(sSLSocketFactory49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNull(responseCache63);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(connectionPool71);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(strList79);
        org.junit.Assert.assertNotNull(connectionPool80);
        org.junit.Assert.assertNotNull(okHttpClient82);
// flaky:         org.junit.Assert.assertNull(proxySelector83);
        org.junit.Assert.assertNotNull(sSLSocketFactory84);
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) '4');
        okHttpClient0.connectionPool = connectionPool22;
        java.net.ResponseCache responseCache24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient0.setResponseCache(responseCache24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = okHttpClient26.hostnameVerifier;
        java.net.Proxy proxy32 = okHttpClient26.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient26.connectionPool = connectionPool35;
        connectionPool35.evictAll();
        com.squareup.okhttp.Address address38 = null;
        com.squareup.okhttp.Connection connection39 = connectionPool35.get(address38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient25.setConnectionPool(connectionPool35);
        boolean boolean41 = okHttpClient40.followProtocolRedirects;
        java.util.Set<com.squareup.okhttp.Route> routeSet42 = null;
        okHttpClient40.failedRoutes = routeSet42;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = okHttpClient40.sslSocketFactory;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(hostnameVerifier31);
        org.junit.Assert.assertNull(proxy32);
        org.junit.Assert.assertNull(connection39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(sSLSocketFactory44);
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient4.proxySelector = proxySelector9;
        com.squareup.okhttp.ConnectionPool connectionPool13 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient4.setConnectionPool(connectionPool13);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        java.util.List<java.lang.String> strList22 = okHttpClient17.transports;
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient17.connectionPool = connectionPool23;
        java.net.Proxy proxy25 = null;
        okHttpClient17.proxy = proxy25;
        boolean boolean27 = okHttpClient17.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.CookieHandler cookieHandler29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setCookieHandler(cookieHandler29);
        java.util.List<java.lang.String> strList31 = okHttpClient30.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList31;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient16.setTransports(strList31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) -1, (long) 'a');
        int int3 = connectionPool2.getHttpConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(10, (long) 0);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.ConnectionPool connectionPool22 = null;
        okHttpClient21.connectionPool = connectionPool22;
        java.net.Proxy proxy24 = okHttpClient21.proxy;
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient21.connectionPool;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(proxy24);
        org.junit.Assert.assertNull(connectionPool25);
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress20 = proxy19.address();
        java.net.SocketAddress socketAddress21 = proxy19.address();
        okHttpClient14.proxy = proxy19;
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address26 = null;
        com.squareup.okhttp.Connection connection27 = connectionPool25.get(address26);
        int int28 = connectionPool25.getSpdyConnectionCount();
        connectionPool25.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient14.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ProxySelector proxySelector34 = okHttpClient31.proxySelector;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient31.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        okHttpClient37.hostnameVerifier = hostnameVerifier38;
        java.net.ResponseCache responseCache40 = null;
        okHttpClient37.responseCache = responseCache40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        com.squareup.okhttp.ConnectionPool connectionPool43 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient37.copyWithDefaults();
        java.net.ProxySelector proxySelector46 = okHttpClient45.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient45.getSslSocketFactory();
        okHttpClient31.sslSocketFactory = sSLSocketFactory47;
        okHttpClient14.sslSocketFactory = sSLSocketFactory47;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory47);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool52 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool52;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        java.util.List<java.lang.String> strList59 = okHttpClient54.transports;
        com.squareup.okhttp.ConnectionPool connectionPool60 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient54.connectionPool = connectionPool60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setConnectionPool(connectionPool60);
        com.squareup.okhttp.ConnectionPool connectionPool63 = okHttpClient62.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator64 = okHttpClient62.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool67 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient62.connectionPool = connectionPool67;
        java.net.ResponseCache responseCache69 = okHttpClient62.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory70 = okHttpClient62.sslSocketFactory;
        java.net.Proxy proxy71 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress72 = proxy71.address();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient62.setProxy(proxy71);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient(okHttpClient73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient73.setSSLSocketFactory(sSLSocketFactory85);
        java.lang.String[] strArray87 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray88 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray89 = sSLSocketFactory85.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory85);
        java.lang.String[] strArray91 = sSLSocketFactory85.getDefaultCipherSuites();
        java.net.InetAddress inetAddress92 = null;
        java.net.InetAddress inetAddress94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket96 = sSLSocketFactory85.createSocket(inetAddress92, (int) (short) -1, inetAddress94, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertNull(socketAddress20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNull(connection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(connectionPool43);
        org.junit.Assert.assertNotNull(okHttpClient45);
// flaky:         org.junit.Assert.assertNull(proxySelector46);
        org.junit.Assert.assertNotNull(sSLSocketFactory47);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(connectionPool60);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(connectionPool63);
        org.junit.Assert.assertNull(okAuthenticator64);
        org.junit.Assert.assertNull(responseCache69);
        org.junit.Assert.assertNull(sSLSocketFactory70);
        org.junit.Assert.assertNotNull(proxy71);
        org.junit.Assert.assertNull(socketAddress72);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(strArray91);
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        java.net.ProxySelector proxySelector18 = null;
        okHttpClient17.proxySelector = proxySelector18;
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = okHttpClient17.getAuthenticator();
        java.net.URL uRL21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection22 = okHttpClient17.open(uRL21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(okAuthenticator20);
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.Proxy proxy4 = okHttpClient0.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient5.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ResponseCache responseCache11 = null;
        okHttpClient8.responseCache = responseCache11;
        java.util.List<java.lang.String> strList13 = okHttpClient8.transports;
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient8.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient5.setConnectionPool(connectionPool14);
        java.net.ResponseCache responseCache17 = okHttpClient5.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient5.sslSocketFactory;
        java.net.ResponseCache responseCache19 = okHttpClient5.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient5.connectionPool;
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient5.setResponseCache(responseCache21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ProxySelector proxySelector26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient23.setProxySelector(proxySelector26);
        java.net.CookieHandler cookieHandler28 = okHttpClient23.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        java.util.List<java.lang.String> strList34 = okHttpClient29.transports;
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool35;
        java.net.Proxy proxy37 = null;
        okHttpClient29.proxy = proxy37;
        java.util.Set<com.squareup.okhttp.Route> routeSet39 = okHttpClient29.failedRoutes;
        okHttpClient23.failedRoutes = routeSet39;
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient23.setHostnameVerifier(hostnameVerifier41);
        java.net.ProxySelector proxySelector43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient42.setProxySelector(proxySelector43);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient47.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        java.util.List<java.lang.String> strList55 = okHttpClient50.transports;
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient47.setConnectionPool(connectionPool56);
        java.net.Proxy proxy59 = okHttpClient58.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient60.connectionPool = connectionPool61;
        int int63 = connectionPool61.getSpdyConnectionCount();
        okHttpClient58.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        okHttpClient65.hostnameVerifier = hostnameVerifier66;
        java.net.ResponseCache responseCache68 = null;
        okHttpClient65.responseCache = responseCache68;
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = okHttpClient65.hostnameVerifier;
        java.net.Proxy proxy71 = okHttpClient65.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool74 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient65.connectionPool = connectionPool74;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient65.copyWithDefaults();
        java.net.ResponseCache responseCache77 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient76.setResponseCache(responseCache77);
        com.squareup.okhttp.OkAuthenticator okAuthenticator79 = okHttpClient76.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient58.setAuthenticator(okAuthenticator79);
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient42.setAuthenticator(okAuthenticator79);
        okHttpClient22.authenticator = okAuthenticator79;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient0.setAuthenticator(okAuthenticator79);
        java.util.List<java.lang.String> strList84 = okHttpClient0.transports;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(proxy4);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(responseCache17);
        org.junit.Assert.assertNull(sSLSocketFactory18);
        org.junit.Assert.assertNull(responseCache19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(cookieHandler28);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNotNull(routeSet39);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNull(proxy59);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(hostnameVerifier70);
        org.junit.Assert.assertNull(proxy71);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNotNull(okAuthenticator79);
        org.junit.Assert.assertNotNull(okHttpClient80);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertNotNull(okHttpClient83);
        org.junit.Assert.assertNull(strList84);
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool14 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool14;
        int int16 = connectionPool14.getSpdyConnectionCount();
        okHttpClient11.connectionPool = connectionPool14;
        int int18 = connectionPool14.getSpdyConnectionCount();
        int int19 = connectionPool14.getConnectionCount();
        com.squareup.okhttp.Connection connection20 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool14.recycle(connection20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient19.copyWithDefaults();
        java.net.CookieHandler cookieHandler21 = null;
        okHttpClient19.cookieHandler = cookieHandler21;
        java.net.ProxySelector proxySelector23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient19.setProxySelector(proxySelector23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient24.copyWithDefaults();
        java.net.CookieHandler cookieHandler26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient25.setCookieHandler(cookieHandler26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = okHttpClient28.hostnameVerifier;
        java.net.Proxy proxy34 = okHttpClient28.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool37 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient28.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient28.copyWithDefaults();
        java.net.ResponseCache responseCache40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient39.setResponseCache(responseCache40);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient41.setFollowProtocolRedirects(false);
        java.util.List<java.lang.String> strList44 = okHttpClient41.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient41.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient47.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        java.util.List<java.lang.String> strList55 = okHttpClient50.transports;
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient47.setConnectionPool(connectionPool56);
        java.net.Proxy proxy59 = okHttpClient58.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient60.connectionPool = connectionPool61;
        int int63 = connectionPool61.getSpdyConnectionCount();
        okHttpClient58.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        okHttpClient65.hostnameVerifier = hostnameVerifier66;
        java.net.ResponseCache responseCache68 = null;
        okHttpClient65.responseCache = responseCache68;
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = okHttpClient65.hostnameVerifier;
        java.net.Proxy proxy71 = okHttpClient65.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool74 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient65.connectionPool = connectionPool74;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient65.copyWithDefaults();
        java.net.ResponseCache responseCache77 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient76.setResponseCache(responseCache77);
        com.squareup.okhttp.OkAuthenticator okAuthenticator79 = okHttpClient76.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient58.setAuthenticator(okAuthenticator79);
        okHttpClient41.authenticator = okAuthenticator79;
        okHttpClient25.authenticator = okAuthenticator79;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient11.setAuthenticator(okAuthenticator79);
        javax.net.ssl.HostnameVerifier hostnameVerifier84 = okHttpClient11.hostnameVerifier;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(hostnameVerifier33);
        org.junit.Assert.assertNull(proxy34);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNull(proxy59);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(hostnameVerifier70);
        org.junit.Assert.assertNull(proxy71);
        org.junit.Assert.assertNotNull(okHttpClient76);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNotNull(okAuthenticator79);
        org.junit.Assert.assertNotNull(okHttpClient80);
        org.junit.Assert.assertNotNull(okHttpClient83);
        org.junit.Assert.assertNull(hostnameVerifier84);
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(0, 0L);
        okHttpClient0.connectionPool = connectionPool14;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient0.getSslSocketFactory();
        java.net.CookieHandler cookieHandler17 = null;
        okHttpClient0.cookieHandler = cookieHandler17;
        java.net.ProxySelector proxySelector19 = okHttpClient0.proxySelector;
        java.net.CookieHandler cookieHandler20 = okHttpClient0.getCookieHandler();
        java.net.ResponseCache responseCache21 = okHttpClient0.responseCache;
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection23 = okHttpClient0.open(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(proxySelector19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNull(responseCache21);
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        boolean boolean9 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient10.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient10.sslSocketFactory;
        java.net.CookieHandler cookieHandler17 = okHttpClient10.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient10.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool20;
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = null;
        okHttpClient19.authenticator = okAuthenticator22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient19.responseCache = responseCache25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient27.hostnameVerifier;
        java.net.Proxy proxy33 = okHttpClient27.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool36 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient27.connectionPool = connectionPool36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient27.copyWithDefaults();
        java.net.Proxy proxy39 = okHttpClient38.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient38.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient19.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient10.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient0.setHostnameVerifier(hostnameVerifier40);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = okHttpClient43.getSslSocketFactory();
        java.net.CookieHandler cookieHandler45 = null;
        okHttpClient43.cookieHandler = cookieHandler45;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(cookieHandler17);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertNotNull(hostnameVerifier40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(sSLSocketFactory44);
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.lang.String[] strArray30 = sSLSocketFactory28.getDefaultCipherSuites();
        java.lang.String[] strArray31 = sSLSocketFactory28.getSupportedCipherSuites();
        java.lang.String[] strArray32 = sSLSocketFactory28.getDefaultCipherSuites();
        java.net.Socket socket33 = sSLSocketFactory28.createSocket();
        java.net.Proxy proxy34 = java.net.Proxy.NO_PROXY;
        boolean boolean36 = proxy34.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type37 = proxy34.type();
        java.lang.String str38 = proxy34.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory42 = okHttpClient39.getSslSocketFactory();
        boolean boolean43 = proxy34.equals((java.lang.Object) okHttpClient39);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient39.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient39.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = okHttpClient45.getSslSocketFactory();
        java.net.Socket socket47 = sSLSocketFactory46.createSocket();
        java.io.InputStream inputStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket50 = sSLSocketFactory28.createSocket(socket47, inputStream48, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(socket33);
        org.junit.Assert.assertEquals(socket33.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(proxy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DIRECT" + "'", str38, "DIRECT");
        org.junit.Assert.assertNull(sSLSocketFactory42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNotNull(sSLSocketFactory46);
        org.junit.Assert.assertNotNull(socket47);
        org.junit.Assert.assertEquals(socket47.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient17.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient17.setSSLSocketFactory(sSLSocketFactory23);
        boolean boolean25 = proxy12.equals((java.lang.Object) okHttpClient17);
        java.net.SocketAddress socketAddress26 = proxy12.address();
        okHttpClient11.proxy = proxy12;
        java.net.Proxy.Type type28 = proxy12.type();
        java.lang.Object obj29 = null;
        boolean boolean30 = proxy12.equals(obj29);
        java.net.Proxy.Type type31 = proxy12.type();
        java.net.Proxy.Type type32 = proxy12.type();
        java.net.SocketAddress socketAddress33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy34 = new java.net.Proxy(type32, socketAddress33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(socketAddress26);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type28.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type31.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type32.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieHandler6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ProxySelector proxySelector12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient9.setProxySelector(proxySelector12);
        java.net.ResponseCache responseCache14 = null;
        okHttpClient13.responseCache = responseCache14;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory16);
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient13.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = okHttpClient21.hostnameVerifier;
        java.net.Proxy proxy27 = okHttpClient21.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool30 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient21.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.copyWithDefaults();
        java.net.ResponseCache responseCache33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient32.setResponseCache(responseCache33);
        com.squareup.okhttp.OkAuthenticator okAuthenticator35 = okHttpClient32.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ProxySelector proxySelector39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.setProxySelector(proxySelector39);
        java.net.CookieHandler cookieHandler41 = okHttpClient36.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        java.net.Proxy proxy50 = null;
        okHttpClient42.proxy = proxy50;
        java.util.Set<com.squareup.okhttp.Route> routeSet52 = okHttpClient42.failedRoutes;
        okHttpClient36.failedRoutes = routeSet52;
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient36.setHostnameVerifier(hostnameVerifier54);
        java.net.ProxySelector proxySelector56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient55.setProxySelector(proxySelector56);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient55.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool61 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient60.connectionPool = connectionPool61;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        okHttpClient63.hostnameVerifier = hostnameVerifier64;
        java.net.ResponseCache responseCache66 = null;
        okHttpClient63.responseCache = responseCache66;
        java.util.List<java.lang.String> strList68 = okHttpClient63.transports;
        com.squareup.okhttp.ConnectionPool connectionPool69 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient63.connectionPool = connectionPool69;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient60.setConnectionPool(connectionPool69);
        java.net.Proxy proxy72 = okHttpClient71.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool74 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient73.connectionPool = connectionPool74;
        int int76 = connectionPool74.getSpdyConnectionCount();
        okHttpClient71.connectionPool = connectionPool74;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = null;
        okHttpClient78.hostnameVerifier = hostnameVerifier79;
        java.net.ResponseCache responseCache81 = null;
        okHttpClient78.responseCache = responseCache81;
        javax.net.ssl.HostnameVerifier hostnameVerifier83 = okHttpClient78.hostnameVerifier;
        java.net.Proxy proxy84 = okHttpClient78.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool87 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient78.connectionPool = connectionPool87;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient78.copyWithDefaults();
        java.net.ResponseCache responseCache90 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient89.setResponseCache(responseCache90);
        com.squareup.okhttp.OkAuthenticator okAuthenticator92 = okHttpClient89.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient71.setAuthenticator(okAuthenticator92);
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient55.setAuthenticator(okAuthenticator92);
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient32.setAuthenticator(okAuthenticator92);
        okHttpClient13.authenticator = okAuthenticator92;
        okHttpClient7.authenticator = okAuthenticator92;
        com.squareup.okhttp.OkHttpClient okHttpClient98 = okHttpClient7.copyWithDefaults();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache99 = okHttpClient7.okResponseCache();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(hostnameVerifier26);
        org.junit.Assert.assertNull(proxy27);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(okAuthenticator35);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(cookieHandler41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(routeSet52);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(connectionPool61);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNotNull(connectionPool69);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(proxy72);
        org.junit.Assert.assertNotNull(connectionPool74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(hostnameVerifier83);
        org.junit.Assert.assertNull(proxy84);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNotNull(okAuthenticator92);
        org.junit.Assert.assertNotNull(okHttpClient93);
        org.junit.Assert.assertNotNull(okHttpClient94);
        org.junit.Assert.assertNotNull(okHttpClient95);
        org.junit.Assert.assertNotNull(okHttpClient98);
        org.junit.Assert.assertNull(okResponseCache99);
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache5 = okHttpClient4.okResponseCache();
        java.net.ResponseCache responseCache6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setResponseCache(responseCache6);
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        okHttpClient4.transports = strList10;
        okHttpClient0.transports = strList10;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        java.net.CookieHandler cookieHandler22 = okHttpClient14.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache23 = okHttpClient14.okResponseCache();
        java.net.CookieHandler cookieHandler24 = okHttpClient14.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        java.net.ResponseCache responseCache26 = okHttpClient14.responseCache;
        java.net.CookieHandler cookieHandler27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient14.setCookieHandler(cookieHandler27);
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        boolean boolean31 = proxy29.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient32.okResponseCache();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient32.setResponseCache(responseCache34);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        okHttpClient32.transports = strList38;
        boolean boolean41 = proxy29.equals((java.lang.Object) strList38);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList38;
        okHttpClient28.transports = strList38;
        okHttpClient0.transports = strList38;
        com.squareup.okhttp.OkAuthenticator okAuthenticator45 = okHttpClient0.getAuthenticator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass46 = okAuthenticator45.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(okResponseCache5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertNull(cookieHandler22);
        org.junit.Assert.assertNull(okResponseCache23);
        org.junit.Assert.assertNull(cookieHandler24);
        org.junit.Assert.assertNull(responseCache26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(okAuthenticator45);
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.lang.String[] strArray64 = sSLSocketFactory61.getDefaultCipherSuites();
        java.net.Socket socket65 = sSLSocketFactory61.createSocket();
        java.net.InetAddress inetAddress66 = null;
        java.net.InetAddress inetAddress68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket70 = sSLSocketFactory61.createSocket(inetAddress66, (int) (byte) 1, inetAddress68, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(socket65);
        org.junit.Assert.assertEquals(socket65.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache14 = okHttpClient11.okResponseCache();
        java.net.Proxy proxy15 = okHttpClient11.getProxy();
        java.net.ResponseCache responseCache16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setResponseCache(responseCache16);
        java.net.Proxy proxy18 = java.net.Proxy.NO_PROXY;
        boolean boolean20 = proxy18.equals((java.lang.Object) 1L);
        okHttpClient17.proxy = proxy18;
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = okHttpClient17.authenticator;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(sSLSocketFactory12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(okResponseCache14);
        org.junit.Assert.assertNull(proxy15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(proxy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(okAuthenticator22);
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy13 = okHttpClient11.proxy;
        java.net.Proxy proxy14 = okHttpClient11.getProxy();
        java.net.ResponseCache responseCache15 = null;
        okHttpClient11.responseCache = responseCache15;
        java.net.ResponseCache responseCache17 = okHttpClient11.getResponseCache();
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient11.setProxySelector(proxySelector18);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient19.getSslSocketFactory();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(sSLSocketFactory12);
        org.junit.Assert.assertNull(proxy13);
        org.junit.Assert.assertNull(proxy14);
        org.junit.Assert.assertNull(responseCache17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(sSLSocketFactory20);
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier3 = null;
        okHttpClient2.hostnameVerifier = hostnameVerifier3;
        java.net.ResponseCache responseCache5 = null;
        okHttpClient2.responseCache = responseCache5;
        java.util.List<java.lang.String> strList7 = okHttpClient2.transports;
        java.net.Proxy proxy8 = java.net.Proxy.NO_PROXY;
        boolean boolean10 = proxy8.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type11 = proxy8.type();
        java.net.SocketAddress socketAddress12 = proxy8.address();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient2.setProxy(proxy8);
        java.util.Set<com.squareup.okhttp.Route> routeSet14 = okHttpClient2.failedRoutes;
        okHttpClient1.failedRoutes = routeSet14;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient1.setFollowProtocolRedirects(true);
        okHttpClient1.followProtocolRedirects = true;
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(proxy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type11.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(routeSet14);
        org.junit.Assert.assertNotNull(okHttpClient17);
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setResponseCache(responseCache14);
        java.net.CookieHandler cookieHandler16 = null;
        okHttpClient15.cookieHandler = cookieHandler16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient15.getHostnameVerifier();
        java.net.ResponseCache responseCache19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient15.setResponseCache(responseCache19);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient20.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.util.List<java.lang.String> strList27 = okHttpClient22.transports;
        com.squareup.okhttp.ConnectionPool connectionPool28 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool28;
        java.net.CookieHandler cookieHandler30 = okHttpClient22.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache31 = okHttpClient22.okResponseCache();
        java.net.CookieHandler cookieHandler32 = okHttpClient22.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        java.net.Proxy proxy34 = java.net.Proxy.NO_PROXY;
        boolean boolean36 = proxy34.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type37 = proxy34.type();
        java.net.SocketAddress socketAddress38 = proxy34.address();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient22.setProxy(proxy34);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector49 = okHttpClient48.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient48.getSslSocketFactory();
        okHttpClient39.sslSocketFactory = sSLSocketFactory50;
        java.lang.String[] strArray52 = sSLSocketFactory50.getDefaultCipherSuites();
        java.lang.String[] strArray53 = sSLSocketFactory50.getSupportedCipherSuites();
        java.lang.String[] strArray54 = sSLSocketFactory50.getDefaultCipherSuites();
        java.net.Socket socket55 = sSLSocketFactory50.createSocket();
        java.lang.String[] strArray56 = sSLSocketFactory50.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient20.setSSLSocketFactory(sSLSocketFactory50);
        java.util.List<java.lang.String> strList58 = okHttpClient57.transports;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertNull(cookieHandler30);
        org.junit.Assert.assertNull(okResponseCache31);
        org.junit.Assert.assertNull(cookieHandler32);
        org.junit.Assert.assertNotNull(proxy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNotNull(okHttpClient48);
// flaky:         org.junit.Assert.assertNull(proxySelector49);
        org.junit.Assert.assertNotNull(sSLSocketFactory50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(socket55);
        org.junit.Assert.assertEquals(socket55.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNull(strList58);
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type3 = proxy0.type();
        java.lang.String str4 = proxy0.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient5.getSslSocketFactory();
        boolean boolean9 = proxy0.equals((java.lang.Object) okHttpClient5);
        java.lang.String str10 = proxy0.toString();
        java.net.Proxy.Type type11 = proxy0.type();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient12.hostnameVerifier = hostnameVerifier13;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient12.responseCache = responseCache15;
        java.util.List<java.lang.String> strList17 = okHttpClient12.transports;
        com.squareup.okhttp.ConnectionPool connectionPool18 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool18;
        java.net.CookieHandler cookieHandler20 = okHttpClient12.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient12.okResponseCache();
        java.net.CookieHandler cookieHandler22 = okHttpClient12.getCookieHandler();
        java.net.Proxy proxy23 = okHttpClient12.proxy;
        boolean boolean24 = proxy0.equals((java.lang.Object) okHttpClient12);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache25 = okHttpClient12.okResponseCache();
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type3.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DIRECT" + "'", str4, "DIRECT");
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DIRECT" + "'", str10, "DIRECT");
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type11.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(connectionPool18);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNull(cookieHandler22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(okResponseCache25);
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient25.copyWithDefaults();
        java.net.ResponseCache responseCache37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setResponseCache(responseCache37);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient36.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient11.setAuthenticator(okAuthenticator39);
        java.net.Proxy proxy41 = okHttpClient40.getProxy();
        java.net.ResponseCache responseCache42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setResponseCache(responseCache42);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = okHttpClient40.sslSocketFactory;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okAuthenticator39);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(sSLSocketFactory44);
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ResponseCache responseCache8 = okHttpClient7.getResponseCache();
        java.net.CookieHandler cookieHandler9 = okHttpClient7.getCookieHandler();
        java.util.List<java.lang.String> strList10 = okHttpClient7.getTransports();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(okResponseCache6);
        org.junit.Assert.assertNull(responseCache8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNull(strList10);
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.setConnectionPool(connectionPool20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.copyWithDefaults();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient22);
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ProxySelector proxySelector13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.setProxySelector(proxySelector13);
        java.net.CookieHandler cookieHandler15 = okHttpClient10.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.util.List<java.lang.String> strList21 = okHttpClient16.transports;
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool22;
        java.net.Proxy proxy24 = null;
        okHttpClient16.proxy = proxy24;
        java.util.Set<com.squareup.okhttp.Route> routeSet26 = okHttpClient16.failedRoutes;
        okHttpClient10.failedRoutes = routeSet26;
        java.net.ProxySelector proxySelector28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient10.setProxySelector(proxySelector28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient(okHttpClient29);
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient30.authenticator;
        java.net.ProxySelector proxySelector32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setProxySelector(proxySelector32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient33.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory35 = okHttpClient34.sslSocketFactory;
        okHttpClient5.sslSocketFactory = sSLSocketFactory35;
        java.lang.String[] strArray37 = sSLSocketFactory35.getSupportedCipherSuites();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket40 = sSLSocketFactory35.createSocket("hi!", (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNotNull(routeSet26);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertNull(okAuthenticator31);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(sSLSocketFactory35);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient5.hostnameVerifier;
        java.net.Proxy proxy11 = okHttpClient5.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient5.connectionPool = connectionPool14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient5.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient16.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setHostnameVerifier(hostnameVerifier17);
        boolean boolean19 = okHttpClient0.getFollowProtocolRedirects();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNull(proxy11);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(hostnameVerifier17);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(0, (long) (short) 10);
        connectionPool2.evictAll();
        com.squareup.okhttp.Address address4 = null;
        com.squareup.okhttp.Connection connection5 = connectionPool2.get(address4);
        com.squareup.okhttp.Address address6 = null;
        com.squareup.okhttp.Connection connection7 = connectionPool2.get(address6);
        int int8 = connectionPool2.getConnectionCount();
        org.junit.Assert.assertNull(connection5);
        org.junit.Assert.assertNull(connection7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        java.net.CookieHandler cookieHandler18 = okHttpClient10.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache19 = okHttpClient10.okResponseCache();
        java.net.CookieHandler cookieHandler20 = okHttpClient10.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient10);
        java.net.Proxy proxy22 = java.net.Proxy.NO_PROXY;
        boolean boolean24 = proxy22.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type25 = proxy22.type();
        java.net.SocketAddress socketAddress26 = proxy22.address();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient10.setProxy(proxy22);
        com.squareup.okhttp.ConnectionPool connectionPool28 = okHttpClient10.connectionPool;
        com.squareup.okhttp.ConnectionPool connectionPool31 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        int int32 = connectionPool31.getSpdyConnectionCount();
        okHttpClient10.connectionPool = connectionPool31;
        okHttpClient0.connectionPool = connectionPool31;
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = okHttpClient0.getHostnameVerifier();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNull(cookieHandler18);
        org.junit.Assert.assertNull(okResponseCache19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(proxy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type25.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress26);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNotNull(connectionPool28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(hostnameVerifier35);
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        java.net.Proxy.Type type23 = proxy20.type();
        java.net.SocketAddress socketAddress24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy25 = new java.net.Proxy(type23, socketAddress24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type23.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.copyWithDefaults();
        java.net.CookieHandler cookieHandler15 = null;
        okHttpClient11.cookieHandler = cookieHandler15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNotNull(okHttpClient14);
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        java.util.Set<com.squareup.okhttp.Route> routeSet17 = okHttpClient0.failedRoutes;
        java.net.CookieHandler cookieHandler18 = null;
        okHttpClient0.cookieHandler = cookieHandler18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient20.copyWithDefaults();
        java.net.ProxySelector proxySelector22 = okHttpClient21.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient23.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = okHttpClient23.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache31 = okHttpClient30.okResponseCache();
        java.net.ResponseCache responseCache32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setResponseCache(responseCache32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache35 = okHttpClient34.okResponseCache();
        java.net.ResponseCache responseCache36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient34.setResponseCache(responseCache36);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        okHttpClient34.transports = strList40;
        okHttpClient30.transports = strList40;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        okHttpClient44.hostnameVerifier = hostnameVerifier45;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient44.responseCache = responseCache47;
        java.util.List<java.lang.String> strList49 = okHttpClient44.transports;
        com.squareup.okhttp.ConnectionPool connectionPool50 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient44.connectionPool = connectionPool50;
        java.net.CookieHandler cookieHandler52 = okHttpClient44.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache53 = okHttpClient44.okResponseCache();
        java.net.CookieHandler cookieHandler54 = okHttpClient44.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient(okHttpClient44);
        java.net.ResponseCache responseCache56 = okHttpClient44.responseCache;
        java.net.CookieHandler cookieHandler57 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient44.setCookieHandler(cookieHandler57);
        java.net.Proxy proxy59 = java.net.Proxy.NO_PROXY;
        boolean boolean61 = proxy59.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache63 = okHttpClient62.okResponseCache();
        java.net.ResponseCache responseCache64 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient62.setResponseCache(responseCache64);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        okHttpClient62.transports = strList68;
        boolean boolean71 = proxy59.equals((java.lang.Object) strList68);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList68;
        okHttpClient58.transports = strList68;
        okHttpClient30.transports = strList68;
        okHttpClient23.transports = strList68;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient21.setTransports((java.util.List<java.lang.String>) strList68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(routeSet17);
        org.junit.Assert.assertNotNull(okHttpClient21);
// flaky:         org.junit.Assert.assertNull(proxySelector22);
        org.junit.Assert.assertNull(hostnameVerifier28);
        org.junit.Assert.assertNull(hostnameVerifier29);
        org.junit.Assert.assertNull(okResponseCache31);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNull(okResponseCache35);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(connectionPool50);
        org.junit.Assert.assertNull(cookieHandler52);
        org.junit.Assert.assertNull(okResponseCache53);
        org.junit.Assert.assertNull(cookieHandler54);
        org.junit.Assert.assertNull(responseCache56);
        org.junit.Assert.assertNotNull(okHttpClient58);
        org.junit.Assert.assertNotNull(proxy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(okResponseCache63);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool8 = new com.squareup.okhttp.ConnectionPool(10, (long) 10);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setConnectionPool(connectionPool8);
        com.squareup.okhttp.Address address10 = null;
        com.squareup.okhttp.Connection connection11 = connectionPool8.get(address10);
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(connection11);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient18.copyWithDefaults();
        java.net.ProxySelector proxySelector27 = okHttpClient26.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory28 = okHttpClient26.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory28;
        java.net.Socket socket30 = sSLSocketFactory28.createSocket();
        java.net.InetAddress inetAddress31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket33 = sSLSocketFactory28.createSocket(inetAddress31, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
// flaky:         org.junit.Assert.assertNull(proxySelector27);
        org.junit.Assert.assertNotNull(sSLSocketFactory28);
        org.junit.Assert.assertNotNull(socket30);
        org.junit.Assert.assertEquals(socket30.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient4.proxySelector = proxySelector9;
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = okHttpClient4.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient4.copyWithDefaults();
        java.util.List<java.lang.String> strList13 = okHttpClient4.transports;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(hostnameVerifier11);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList13);
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        okHttpClient0.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler11 = okHttpClient0.getCookieHandler();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setCookieHandler(cookieHandler12);
        java.net.ProxySelector proxySelector14 = okHttpClient13.getProxySelector();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient13.getSslSocketFactory();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(cookieHandler11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(proxySelector14);
        org.junit.Assert.assertNull(sSLSocketFactory15);
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient14.copyWithDefaults();
        java.net.Proxy proxy16 = okHttpClient14.proxy;
        java.net.CookieHandler cookieHandler17 = null;
        okHttpClient14.cookieHandler = cookieHandler17;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(hostnameVerifier13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(proxy16);
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool((int) (short) 10, (long) '4');
        okHttpClient0.connectionPool = connectionPool22;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory24);
        java.util.List<java.lang.String> strList26 = okHttpClient0.transports;
        java.net.ResponseCache responseCache27 = okHttpClient0.getResponseCache();
        java.util.Set<com.squareup.okhttp.Route> routeSet28 = okHttpClient0.failedRoutes;
        java.lang.Class<?> wildcardClass29 = okHttpClient0.getClass();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(responseCache27);
        org.junit.Assert.assertNotNull(routeSet28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient11.responseCache = responseCache16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient11.getHostnameVerifier();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNull(hostnameVerifier18);
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        okHttpClient5.sslSocketFactory = sSLSocketFactory6;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setFollowProtocolRedirects(false);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        boolean boolean11 = okHttpClient9.followProtocolRedirects;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(okHttpClient9);
        org.junit.Assert.assertNull(responseCache10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool14 = new com.squareup.okhttp.ConnectionPool(0, 0L);
        okHttpClient0.connectionPool = connectionPool14;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient0.getHostnameVerifier();
        java.util.List<java.lang.String> strList19 = okHttpClient0.getTransports();
        java.util.Set<com.squareup.okhttp.Route> routeSet20 = okHttpClient0.failedRoutes;
        java.net.Proxy proxy21 = okHttpClient0.getProxy();
        java.net.ProxySelector proxySelector22 = okHttpClient0.getProxySelector();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = okHttpClient0.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory24 = okHttpClient0.sslSocketFactory;
        java.net.URL uRL25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection26 = okHttpClient0.open(uRL25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(sSLSocketFactory17);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(routeSet20);
        org.junit.Assert.assertNull(proxy21);
        org.junit.Assert.assertNull(proxySelector22);
        org.junit.Assert.assertNull(sSLSocketFactory23);
        org.junit.Assert.assertNull(sSLSocketFactory24);
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy12 = okHttpClient11.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = null;
        okHttpClient11.sslSocketFactory = sSLSocketFactory13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        com.squareup.okhttp.ConnectionPool connectionPool23 = okHttpClient15.connectionPool;
        int int24 = connectionPool23.getHttpConnectionCount();
        com.squareup.okhttp.Address address25 = null;
        com.squareup.okhttp.Connection connection26 = connectionPool23.get(address25);
        okHttpClient11.connectionPool = connectionPool23;
        java.net.ProxySelector proxySelector28 = okHttpClient11.proxySelector;
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        boolean boolean31 = proxy29.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache33 = okHttpClient32.okResponseCache();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient32.setResponseCache(responseCache34);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        okHttpClient32.transports = strList38;
        boolean boolean41 = proxy29.equals((java.lang.Object) strList38);
        okHttpClient11.proxy = proxy29;
        java.util.List<java.lang.String> strList43 = okHttpClient11.transports;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(connection26);
        org.junit.Assert.assertNull(proxySelector28);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(okResponseCache33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strList43);
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient17.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        java.net.Proxy proxy27 = null;
        okHttpClient19.proxy = proxy27;
        boolean boolean29 = okHttpClient19.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient19.copyWithDefaults();
        java.net.CookieHandler cookieHandler31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setCookieHandler(cookieHandler31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = okHttpClient33.hostnameVerifier;
        java.net.Proxy proxy39 = okHttpClient33.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool42 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient33.connectionPool = connectionPool42;
        boolean boolean44 = okHttpClient33.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = okHttpClient45.hostnameVerifier;
        java.net.Proxy proxy51 = okHttpClient45.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool54 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient45.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient45.copyWithDefaults();
        java.net.Proxy proxy57 = okHttpClient56.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = okHttpClient56.getHostnameVerifier();
        okHttpClient33.hostnameVerifier = hostnameVerifier58;
        okHttpClient30.hostnameVerifier = hostnameVerifier58;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient17.setHostnameVerifier(hostnameVerifier58);
        java.net.ResponseCache responseCache62 = okHttpClient61.getResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool63 = okHttpClient61.getConnectionPool();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(hostnameVerifier38);
        org.junit.Assert.assertNull(proxy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(hostnameVerifier50);
        org.junit.Assert.assertNull(proxy51);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNull(proxy57);
        org.junit.Assert.assertNotNull(hostnameVerifier58);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNull(responseCache62);
        org.junit.Assert.assertNotNull(connectionPool63);
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient9.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy29 = okHttpClient28.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient8.setHostnameVerifier(hostnameVerifier30);
        java.net.CookieHandler cookieHandler33 = okHttpClient8.cookieHandler;
        java.net.CookieHandler cookieHandler34 = null;
        okHttpClient8.cookieHandler = cookieHandler34;
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient8.setProxySelector(proxySelector36);
        com.squareup.okhttp.OkAuthenticator okAuthenticator38 = okHttpClient8.authenticator;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(cookieHandler33);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(okAuthenticator38);
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        int int5 = connectionPool2.getConnectionCount();
        int int6 = connectionPool2.getHttpConnectionCount();
        com.squareup.okhttp.Connection connection7 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(connection4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient9.hostnameVerifier;
        java.net.Proxy proxy15 = okHttpClient9.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool18 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient9.connectionPool = connectionPool18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient9.copyWithDefaults();
        java.net.Proxy proxy21 = okHttpClient20.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool31 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient22.connectionPool = connectionPool31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient22.copyWithDefaults();
        java.net.ResponseCache responseCache34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient33.setResponseCache(responseCache34);
        okHttpClient35.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList38 = okHttpClient35.getTransports();
        okHttpClient20.transports = strList38;
        com.squareup.okhttp.ConnectionPool connectionPool42 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (byte) 100);
        okHttpClient20.connectionPool = connectionPool42;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = okHttpClient20.sslSocketFactory;
        java.net.Socket socket45 = sSLSocketFactory44.createSocket();
        java.lang.String[] strArray46 = sSLSocketFactory44.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory44);
        java.net.InetAddress inetAddress50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket52 = sSLSocketFactory44.createSocket("hi!", 1, inetAddress50, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(hostnameVerifier14);
        org.junit.Assert.assertNull(proxy15);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(proxy21);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNotNull(okHttpClient33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(sSLSocketFactory44);
        org.junit.Assert.assertNotNull(socket45);
        org.junit.Assert.assertEquals(socket45.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(okHttpClient47);
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool7 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient6.setConnectionPool(connectionPool15);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.setProxySelector(proxySelector21);
        java.net.CookieHandler cookieHandler23 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        java.net.Proxy proxy32 = null;
        okHttpClient24.proxy = proxy32;
        java.util.Set<com.squareup.okhttp.Route> routeSet34 = okHttpClient24.failedRoutes;
        okHttpClient18.failedRoutes = routeSet34;
        java.net.ProxySelector proxySelector36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient18.setProxySelector(proxySelector36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient39.hostnameVerifier;
        java.net.Proxy proxy45 = okHttpClient39.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool48 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient39.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient39.copyWithDefaults();
        java.net.Proxy proxy51 = okHttpClient50.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = okHttpClient50.getHostnameVerifier();
        okHttpClient18.hostnameVerifier = hostnameVerifier52;
        okHttpClient17.hostnameVerifier = hostnameVerifier52;
        okHttpClient5.hostnameVerifier = hostnameVerifier52;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache56 = okHttpClient5.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient5.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient(okHttpClient57);
        java.net.ResponseCache responseCache59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient58.setResponseCache(responseCache59);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        okHttpClient61.hostnameVerifier = hostnameVerifier62;
        java.net.ResponseCache responseCache64 = null;
        okHttpClient61.responseCache = responseCache64;
        java.util.List<java.lang.String> strList66 = okHttpClient61.transports;
        com.squareup.okhttp.ConnectionPool connectionPool67 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient61.connectionPool = connectionPool67;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient61.copyWithDefaults();
        boolean boolean70 = okHttpClient69.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory71 = okHttpClient69.sslSocketFactory;
        java.lang.String[] strArray72 = sSLSocketFactory71.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient58.setSSLSocketFactory(sSLSocketFactory71);
        java.lang.String[] strArray74 = sSLSocketFactory71.getDefaultCipherSuites();
        java.net.Socket socket75 = null;
        java.io.InputStream inputStream76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket78 = sSLSocketFactory71.createSocket(socket75, inputStream76, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: the existing socket cannot be null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(connectionPool7);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(cookieHandler23);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(routeSet34);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(hostnameVerifier44);
        org.junit.Assert.assertNull(proxy45);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(proxy51);
        org.junit.Assert.assertNotNull(hostnameVerifier52);
        org.junit.Assert.assertNull(okResponseCache56);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNotNull(connectionPool67);
        org.junit.Assert.assertNotNull(okHttpClient69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNotNull(strArray74);
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient0.connectionPool;
        java.util.List<java.lang.String> strList13 = okHttpClient0.getTransports();
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient0.cookieHandler = cookieHandler14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ResponseCache responseCache17 = null;
        okHttpClient0.responseCache = responseCache17;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache19 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.getSslSocketFactory();
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        boolean boolean23 = proxy21.equals((java.lang.Object) 1L);
        java.net.SocketAddress socketAddress24 = proxy21.address();
        java.net.SocketAddress socketAddress25 = proxy21.address();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        okHttpClient26.hostnameVerifier = hostnameVerifier27;
        java.net.ResponseCache responseCache29 = null;
        okHttpClient26.responseCache = responseCache29;
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = okHttpClient26.hostnameVerifier;
        java.net.Proxy proxy32 = okHttpClient26.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool35 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient26.connectionPool = connectionPool35;
        java.util.List<java.lang.String> strList37 = okHttpClient26.transports;
        boolean boolean38 = proxy21.equals((java.lang.Object) okHttpClient26);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient39.getSslSocketFactory();
        java.net.ProxySelector proxySelector48 = null;
        okHttpClient39.proxySelector = proxySelector48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        okHttpClient50.hostnameVerifier = hostnameVerifier51;
        java.net.ResponseCache responseCache53 = null;
        okHttpClient50.responseCache = responseCache53;
        java.util.List<java.lang.String> strList55 = okHttpClient50.transports;
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient50.connectionPool = connectionPool56;
        java.net.Proxy proxy58 = null;
        okHttpClient50.proxy = proxy58;
        boolean boolean60 = okHttpClient50.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient50.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        okHttpClient63.hostnameVerifier = hostnameVerifier64;
        java.net.ResponseCache responseCache66 = null;
        okHttpClient63.responseCache = responseCache66;
        java.util.List<java.lang.String> strList68 = okHttpClient63.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        okHttpClient63.hostnameVerifier = hostnameVerifier69;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache71 = okHttpClient63.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory72 = okHttpClient63.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        okHttpClient73.hostnameVerifier = hostnameVerifier74;
        java.net.ResponseCache responseCache76 = null;
        okHttpClient73.responseCache = responseCache76;
        javax.net.ssl.HostnameVerifier hostnameVerifier78 = okHttpClient73.hostnameVerifier;
        java.net.Proxy proxy79 = okHttpClient73.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool82 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient73.connectionPool = connectionPool82;
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient73.copyWithDefaults();
        java.net.Proxy proxy85 = okHttpClient84.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier86 = okHttpClient84.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient63.setHostnameVerifier(hostnameVerifier86);
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient62.setHostnameVerifier(hostnameVerifier86);
        okHttpClient39.hostnameVerifier = hostnameVerifier86;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient26.setHostnameVerifier(hostnameVerifier86);
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient0.setHostnameVerifier(hostnameVerifier86);
        java.net.Proxy proxy92 = okHttpClient0.proxy;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(okResponseCache19);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(socketAddress24);
        org.junit.Assert.assertNull(socketAddress25);
        org.junit.Assert.assertNull(hostnameVerifier31);
        org.junit.Assert.assertNull(proxy32);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNull(sSLSocketFactory47);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNull(okResponseCache71);
        org.junit.Assert.assertNull(sSLSocketFactory72);
        org.junit.Assert.assertNull(hostnameVerifier78);
        org.junit.Assert.assertNull(proxy79);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNull(proxy85);
        org.junit.Assert.assertNotNull(hostnameVerifier86);
        org.junit.Assert.assertNotNull(okHttpClient87);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNotNull(okHttpClient90);
        org.junit.Assert.assertNotNull(okHttpClient91);
        org.junit.Assert.assertNull(proxy92);
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.getSslSocketFactory();
        java.net.Socket socket11 = sSLSocketFactory10.createSocket();
        java.net.Socket socket12 = null;
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket15 = sSLSocketFactory10.createSocket(socket12, inputStream13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: the existing socket cannot be null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertNotNull(socket11);
        org.junit.Assert.assertEquals(socket11.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        java.net.Proxy proxy6 = java.net.Proxy.NO_PROXY;
        boolean boolean8 = proxy6.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type9 = proxy6.type();
        java.net.SocketAddress socketAddress10 = proxy6.address();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setProxy(proxy6);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient11.hostnameVerifier;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(proxy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type9.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress10);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(hostnameVerifier12);
        org.junit.Assert.assertNull(okAuthenticator13);
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.Proxy proxy8 = okHttpClient0.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = okHttpClient0.getHostnameVerifier();
        java.util.Set<com.squareup.okhttp.Route> routeSet10 = okHttpClient0.failedRoutes;
        okHttpClient0.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        java.net.Proxy proxy19 = java.net.Proxy.NO_PROXY;
        boolean boolean21 = proxy19.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type22 = proxy19.type();
        java.net.SocketAddress socketAddress23 = proxy19.address();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.setProxy(proxy19);
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient24.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient27.hostnameVerifier;
        java.net.Proxy proxy33 = okHttpClient27.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool36 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient27.connectionPool = connectionPool36;
        java.util.List<java.lang.String> strList38 = okHttpClient27.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient27.setHostnameVerifier(hostnameVerifier39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient27);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ProxySelector proxySelector45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.setProxySelector(proxySelector45);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient46.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = null;
        okHttpClient47.proxySelector = proxySelector48;
        com.squareup.okhttp.OkAuthenticator okAuthenticator50 = okHttpClient47.authenticator;
        okHttpClient41.authenticator = okAuthenticator50;
        okHttpClient26.authenticator = okAuthenticator50;
        okHttpClient0.authenticator = okAuthenticator50;
        java.net.CookieHandler cookieHandler54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient0.setCookieHandler(cookieHandler54);
        java.net.CookieHandler cookieHandler56 = okHttpClient55.getCookieHandler();
        okHttpClient55.followProtocolRedirects = false;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(proxy8);
        org.junit.Assert.assertNull(hostnameVerifier9);
        org.junit.Assert.assertNotNull(routeSet10);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(proxy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type22.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(okAuthenticator50);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNull(cookieHandler56);
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ProxySelector proxySelector6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient3.setProxySelector(proxySelector6);
        java.net.ResponseCache responseCache8 = null;
        okHttpClient7.responseCache = responseCache8;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient7.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient7.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient13.connectionPool;
        int int22 = connectionPool21.getHttpConnectionCount();
        okHttpClient7.connectionPool = connectionPool21;
        boolean boolean24 = proxy0.equals((java.lang.Object) okHttpClient7);
        java.net.SocketAddress socketAddress25 = proxy0.address();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        java.util.List<java.lang.String> strList34 = okHttpClient29.transports;
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient26.setConnectionPool(connectionPool35);
        java.net.Proxy proxy38 = okHttpClient37.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool40 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient39.setConnectionPool(connectionPool48);
        com.squareup.okhttp.ConnectionPool connectionPool51 = okHttpClient39.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient37.setConnectionPool(connectionPool51);
        okHttpClient37.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool56 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient55.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = null;
        okHttpClient58.hostnameVerifier = hostnameVerifier59;
        java.net.ResponseCache responseCache61 = null;
        okHttpClient58.responseCache = responseCache61;
        java.util.List<java.lang.String> strList63 = okHttpClient58.transports;
        com.squareup.okhttp.ConnectionPool connectionPool64 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient58.connectionPool = connectionPool64;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient55.setConnectionPool(connectionPool64);
        java.net.ResponseCache responseCache67 = okHttpClient55.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient55.sslSocketFactory;
        java.net.CookieHandler cookieHandler69 = okHttpClient55.getCookieHandler();
        com.squareup.okhttp.OkAuthenticator okAuthenticator70 = okHttpClient55.authenticator;
        java.util.Set<com.squareup.okhttp.Route> routeSet71 = okHttpClient55.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient(okHttpClient55);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        okHttpClient73.hostnameVerifier = hostnameVerifier74;
        java.net.ResponseCache responseCache76 = null;
        okHttpClient73.responseCache = responseCache76;
        javax.net.ssl.HostnameVerifier hostnameVerifier78 = okHttpClient73.hostnameVerifier;
        java.net.Proxy proxy79 = okHttpClient73.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool82 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient73.connectionPool = connectionPool82;
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient73.copyWithDefaults();
        java.net.ResponseCache responseCache85 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient84.setResponseCache(responseCache85);
        javax.net.ssl.HostnameVerifier hostnameVerifier87 = okHttpClient86.hostnameVerifier;
        okHttpClient72.hostnameVerifier = hostnameVerifier87;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient37.setHostnameVerifier(hostnameVerifier87);
        java.net.Proxy proxy90 = okHttpClient89.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient89.setFollowProtocolRedirects(true);
        com.squareup.okhttp.ConnectionPool connectionPool95 = new com.squareup.okhttp.ConnectionPool((-1), (long) (byte) -1);
        int int96 = connectionPool95.getSpdyConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient97 = okHttpClient89.setConnectionPool(connectionPool95);
        java.util.Set<com.squareup.okhttp.Route> routeSet98 = okHttpClient89.failedRoutes;
        boolean boolean99 = proxy0.equals((java.lang.Object) routeSet98);
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(okHttpClient7);
        org.junit.Assert.assertNull(hostnameVerifier10);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(socketAddress25);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(proxy38);
        org.junit.Assert.assertNotNull(connectionPool40);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(connectionPool56);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(connectionPool64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(responseCache67);
        org.junit.Assert.assertNull(sSLSocketFactory68);
        org.junit.Assert.assertNull(cookieHandler69);
        org.junit.Assert.assertNull(okAuthenticator70);
        org.junit.Assert.assertNotNull(routeSet71);
        org.junit.Assert.assertNull(hostnameVerifier78);
        org.junit.Assert.assertNull(proxy79);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(hostnameVerifier87);
        org.junit.Assert.assertNotNull(okHttpClient89);
        org.junit.Assert.assertNull(proxy90);
        org.junit.Assert.assertNotNull(okHttpClient92);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(okHttpClient97);
        org.junit.Assert.assertNotNull(routeSet98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = null;
        okHttpClient21.authenticator = okAuthenticator24;
        java.util.List<java.lang.String> strList26 = okHttpClient21.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        java.net.CookieHandler cookieHandler35 = okHttpClient27.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache36 = okHttpClient27.okResponseCache();
        java.net.CookieHandler cookieHandler37 = okHttpClient27.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient(okHttpClient27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient38.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator40 = okHttpClient38.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        okHttpClient41.hostnameVerifier = hostnameVerifier42;
        java.net.ResponseCache responseCache44 = null;
        okHttpClient41.responseCache = responseCache44;
        java.util.List<java.lang.String> strList46 = okHttpClient41.transports;
        com.squareup.okhttp.ConnectionPool connectionPool47 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient41.connectionPool = connectionPool47;
        java.net.CookieHandler cookieHandler49 = okHttpClient41.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache50 = okHttpClient41.okResponseCache();
        java.net.CookieHandler cookieHandler51 = okHttpClient41.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient(okHttpClient41);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        okHttpClient53.hostnameVerifier = hostnameVerifier54;
        java.net.ProxySelector proxySelector56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient53.setProxySelector(proxySelector56);
        java.net.CookieHandler cookieHandler58 = okHttpClient53.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        okHttpClient59.hostnameVerifier = hostnameVerifier60;
        java.net.ResponseCache responseCache62 = null;
        okHttpClient59.responseCache = responseCache62;
        java.util.List<java.lang.String> strList64 = okHttpClient59.transports;
        com.squareup.okhttp.ConnectionPool connectionPool65 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient59.connectionPool = connectionPool65;
        java.net.Proxy proxy67 = null;
        okHttpClient59.proxy = proxy67;
        java.util.Set<com.squareup.okhttp.Route> routeSet69 = okHttpClient59.failedRoutes;
        okHttpClient53.failedRoutes = routeSet69;
        okHttpClient52.failedRoutes = routeSet69;
        okHttpClient38.failedRoutes = routeSet69;
        okHttpClient21.failedRoutes = routeSet69;
        okHttpClient19.failedRoutes = routeSet69;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient84 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier85 = null;
        okHttpClient84.hostnameVerifier = hostnameVerifier85;
        java.net.ResponseCache responseCache87 = null;
        okHttpClient84.responseCache = responseCache87;
        java.util.List<java.lang.String> strList89 = okHttpClient84.transports;
        com.squareup.okhttp.ConnectionPool connectionPool90 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient84.connectionPool = connectionPool90;
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient84.copyWithDefaults();
        java.net.ProxySelector proxySelector93 = okHttpClient92.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory94 = okHttpClient92.getSslSocketFactory();
        okHttpClient75.sslSocketFactory = sSLSocketFactory94;
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient19.setSSLSocketFactory(sSLSocketFactory94);
        java.net.CookieHandler cookieHandler97 = okHttpClient96.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient98 = new com.squareup.okhttp.OkHttpClient(okHttpClient96);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory99 = okHttpClient98.sslSocketFactory;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(cookieHandler35);
        org.junit.Assert.assertNull(okResponseCache36);
        org.junit.Assert.assertNull(cookieHandler37);
        org.junit.Assert.assertNull(sSLSocketFactory39);
        org.junit.Assert.assertNull(okAuthenticator40);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(connectionPool47);
        org.junit.Assert.assertNull(cookieHandler49);
        org.junit.Assert.assertNull(okResponseCache50);
        org.junit.Assert.assertNull(cookieHandler51);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNull(cookieHandler58);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(connectionPool65);
        org.junit.Assert.assertNotNull(routeSet69);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
        org.junit.Assert.assertNull(strList89);
        org.junit.Assert.assertNotNull(connectionPool90);
        org.junit.Assert.assertNotNull(okHttpClient92);
// flaky:         org.junit.Assert.assertNull(proxySelector93);
        org.junit.Assert.assertNotNull(sSLSocketFactory94);
        org.junit.Assert.assertNotNull(okHttpClient96);
        org.junit.Assert.assertNull(cookieHandler97);
        org.junit.Assert.assertNull(sSLSocketFactory99);
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.ConnectionPool connectionPool19 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (short) 0);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient15.setConnectionPool(connectionPool19);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = okHttpClient15.getSslSocketFactory();
        java.net.InetAddress inetAddress24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket26 = sSLSocketFactory21.createSocket("", (int) (short) -1, inetAddress24, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(sSLSocketFactory21);
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type3 = proxy0.type();
        java.net.SocketAddress socketAddress4 = proxy0.address();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache10 = okHttpClient5.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient5.setSSLSocketFactory(sSLSocketFactory11);
        boolean boolean13 = proxy0.equals((java.lang.Object) okHttpClient5);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        okHttpClient14.hostnameVerifier = hostnameVerifier15;
        java.net.ResponseCache responseCache17 = null;
        okHttpClient14.responseCache = responseCache17;
        java.util.List<java.lang.String> strList19 = okHttpClient14.transports;
        com.squareup.okhttp.ConnectionPool connectionPool20 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient14.connectionPool = connectionPool20;
        java.net.Proxy proxy22 = null;
        okHttpClient14.proxy = proxy22;
        boolean boolean24 = okHttpClient14.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        java.net.ProxySelector proxySelector26 = okHttpClient25.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient25.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient25.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool30;
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = null;
        okHttpClient29.authenticator = okAuthenticator32;
        java.net.CookieHandler cookieHandler34 = null;
        okHttpClient29.cookieHandler = cookieHandler34;
        java.net.Proxy proxy36 = java.net.Proxy.NO_PROXY;
        boolean boolean38 = proxy36.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache40 = okHttpClient39.okResponseCache();
        java.net.ResponseCache responseCache41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient39.setResponseCache(responseCache41);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        okHttpClient39.transports = strList45;
        boolean boolean48 = proxy36.equals((java.lang.Object) strList45);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient29.setProxy(proxy36);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient25.setProxy(proxy36);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient25.setSSLSocketFactory(sSLSocketFactory51);
        boolean boolean53 = proxy0.equals((java.lang.Object) sSLSocketFactory51);
        java.net.SocketAddress socketAddress54 = proxy0.address();
        java.lang.String str55 = proxy0.toString();
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type3.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress4);
        org.junit.Assert.assertNull(okResponseCache10);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(connectionPool20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(proxySelector26);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(hostnameVerifier28);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(proxy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(okResponseCache40);
        org.junit.Assert.assertNotNull(okHttpClient42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(socketAddress54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DIRECT" + "'", str55, "DIRECT");
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, 0L);
        int int3 = connectionPool2.getSpdyConnectionCount();
        int int4 = connectionPool2.getConnectionCount();
        int int5 = connectionPool2.getHttpConnectionCount();
        com.squareup.okhttp.Connection connection6 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '#', (long) ' ');
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier19;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache21 = okHttpClient13.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = okHttpClient13.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient23.hostnameVerifier;
        java.net.Proxy proxy29 = okHttpClient23.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool32 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient23.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient23.copyWithDefaults();
        java.net.Proxy proxy35 = okHttpClient34.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient34.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient13.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient12.setHostnameVerifier(hostnameVerifier36);
        boolean boolean39 = okHttpClient38.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.util.List<java.lang.String> strList48 = okHttpClient43.transports;
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.setConnectionPool(connectionPool49);
        com.squareup.okhttp.ConnectionPool connectionPool52 = okHttpClient51.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator53 = okHttpClient51.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool56 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient51.connectionPool = connectionPool56;
        java.net.ResponseCache responseCache58 = okHttpClient51.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory59 = okHttpClient51.sslSocketFactory;
        java.net.Proxy proxy60 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress61 = proxy60.address();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setProxy(proxy60);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient38.setProxy(proxy60);
        com.squareup.okhttp.ConnectionPool connectionPool66 = new com.squareup.okhttp.ConnectionPool((int) (short) 1, 10L);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient38.setConnectionPool(connectionPool66);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient(okHttpClient67);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache69 = okHttpClient67.okResponseCache();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(okResponseCache21);
        org.junit.Assert.assertNull(sSLSocketFactory22);
        org.junit.Assert.assertNull(hostnameVerifier28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNull(proxy35);
        org.junit.Assert.assertNotNull(hostnameVerifier36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(okAuthenticator53);
        org.junit.Assert.assertNull(responseCache58);
        org.junit.Assert.assertNull(sSLSocketFactory59);
        org.junit.Assert.assertNotNull(proxy60);
        org.junit.Assert.assertNull(socketAddress61);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNotNull(okHttpClient63);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(okResponseCache69);
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = okHttpClient11.authenticator;
        java.net.ResponseCache responseCache20 = okHttpClient11.getResponseCache();
        java.net.ResponseCache responseCache21 = okHttpClient11.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        okHttpClient22.hostnameVerifier = hostnameVerifier23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient22.hostnameVerifier;
        java.net.Proxy proxy28 = okHttpClient22.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache30 = okHttpClient29.okResponseCache();
        java.net.ResponseCache responseCache31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient29.setResponseCache(responseCache31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache34 = okHttpClient33.okResponseCache();
        java.net.ResponseCache responseCache35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient33.setResponseCache(responseCache35);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        okHttpClient33.transports = strList39;
        okHttpClient29.transports = strList39;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.util.List<java.lang.String> strList48 = okHttpClient43.transports;
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool49;
        java.net.CookieHandler cookieHandler51 = okHttpClient43.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache52 = okHttpClient43.okResponseCache();
        java.net.CookieHandler cookieHandler53 = okHttpClient43.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient(okHttpClient43);
        java.net.ResponseCache responseCache55 = okHttpClient43.responseCache;
        java.net.CookieHandler cookieHandler56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient43.setCookieHandler(cookieHandler56);
        java.net.Proxy proxy58 = java.net.Proxy.NO_PROXY;
        boolean boolean60 = proxy58.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache62 = okHttpClient61.okResponseCache();
        java.net.ResponseCache responseCache63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient61.setResponseCache(responseCache63);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        okHttpClient61.transports = strList67;
        boolean boolean70 = proxy58.equals((java.lang.Object) strList67);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList67;
        okHttpClient57.transports = strList67;
        okHttpClient29.transports = strList67;
        okHttpClient22.transports = strList67;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient11.setTransports((java.util.List<java.lang.String>) strList67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(sSLSocketFactory18);
        org.junit.Assert.assertNull(okAuthenticator19);
        org.junit.Assert.assertNull(responseCache20);
        org.junit.Assert.assertNull(responseCache21);
        org.junit.Assert.assertNull(hostnameVerifier27);
        org.junit.Assert.assertNull(proxy28);
        org.junit.Assert.assertNull(okResponseCache30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(okResponseCache34);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNull(cookieHandler51);
        org.junit.Assert.assertNull(okResponseCache52);
        org.junit.Assert.assertNull(cookieHandler53);
        org.junit.Assert.assertNull(responseCache55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNotNull(proxy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(okResponseCache62);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        java.net.ProxySelector proxySelector9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setProxySelector(proxySelector9);
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache13 = okHttpClient12.okResponseCache();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setResponseCache(responseCache14);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient12.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient12.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient12.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        java.net.Proxy proxy27 = null;
        okHttpClient19.proxy = proxy27;
        boolean boolean29 = okHttpClient19.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        java.net.ProxySelector proxySelector31 = okHttpClient30.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient30.hostnameVerifier;
        java.net.Proxy proxy33 = java.net.Proxy.NO_PROXY;
        boolean boolean35 = proxy33.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type36 = proxy33.type();
        java.net.Proxy.Type type37 = proxy33.type();
        okHttpClient30.proxy = proxy33;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient39.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient48.copyWithDefaults();
        java.net.ProxySelector proxySelector57 = okHttpClient56.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory58 = okHttpClient56.getSslSocketFactory();
        okHttpClient39.sslSocketFactory = sSLSocketFactory58;
        okHttpClient30.sslSocketFactory = sSLSocketFactory58;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient12.setSSLSocketFactory(sSLSocketFactory58);
        okHttpClient0.sslSocketFactory = sSLSocketFactory58;
        java.net.Socket socket63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket67 = sSLSocketFactory58.createSocket(socket63, "DIRECT", (int) 'a', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(okResponseCache13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(sSLSocketFactory16);
        org.junit.Assert.assertNull(sSLSocketFactory17);
        org.junit.Assert.assertNull(sSLSocketFactory18);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(proxySelector31);
        org.junit.Assert.assertNull(hostnameVerifier32);
        org.junit.Assert.assertNotNull(proxy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type36.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type37.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(okHttpClient56);
// flaky:         org.junit.Assert.assertNull(proxySelector57);
        org.junit.Assert.assertNotNull(sSLSocketFactory58);
        org.junit.Assert.assertNotNull(okHttpClient61);
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.ConnectionPool connectionPool25 = new com.squareup.okhttp.ConnectionPool((int) 'a', (long) (short) 10);
        int int26 = connectionPool25.getSpdyConnectionCount();
        boolean boolean27 = proxy20.equals((java.lang.Object) connectionPool25);
        java.lang.String str28 = proxy20.toString();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DIRECT" + "'", str28, "DIRECT");
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = okHttpClient0.proxy;
        boolean boolean13 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = okHttpClient16.hostnameVerifier;
        java.net.Proxy proxy22 = okHttpClient16.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache24 = okHttpClient23.okResponseCache();
        java.net.ResponseCache responseCache25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient23.setResponseCache(responseCache25);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        okHttpClient23.transports = strList29;
        okHttpClient16.transports = strList29;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        okHttpClient16.hostnameVerifier = hostnameVerifier33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient16);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = okHttpClient16.sslSocketFactory;
        java.net.CookieHandler cookieHandler37 = okHttpClient16.cookieHandler;
        java.net.CookieHandler cookieHandler38 = null;
        okHttpClient16.cookieHandler = cookieHandler38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        okHttpClient43.hostnameVerifier = hostnameVerifier44;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient43.responseCache = responseCache46;
        java.util.List<java.lang.String> strList48 = okHttpClient43.transports;
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient43.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.setConnectionPool(connectionPool49);
        com.squareup.okhttp.ConnectionPool connectionPool52 = okHttpClient51.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator53 = okHttpClient51.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool56 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient51.connectionPool = connectionPool56;
        java.net.ResponseCache responseCache58 = okHttpClient51.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory59 = okHttpClient51.sslSocketFactory;
        java.net.Proxy proxy60 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress61 = proxy60.address();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient51.setProxy(proxy60);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient(okHttpClient62);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = null;
        okHttpClient64.hostnameVerifier = hostnameVerifier65;
        java.net.ResponseCache responseCache67 = null;
        okHttpClient64.responseCache = responseCache67;
        java.util.List<java.lang.String> strList69 = okHttpClient64.transports;
        com.squareup.okhttp.ConnectionPool connectionPool70 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient64.connectionPool = connectionPool70;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient64.copyWithDefaults();
        java.net.ProxySelector proxySelector73 = okHttpClient72.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory74 = okHttpClient72.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient62.setSSLSocketFactory(sSLSocketFactory74);
        java.lang.String[] strArray76 = sSLSocketFactory74.getSupportedCipherSuites();
        java.lang.String[] strArray77 = sSLSocketFactory74.getSupportedCipherSuites();
        java.lang.String[] strArray78 = sSLSocketFactory74.getSupportedCipherSuites();
        okHttpClient16.sslSocketFactory = sSLSocketFactory74;
        okHttpClient0.sslSocketFactory = sSLSocketFactory74;
        java.net.InetAddress inetAddress81 = null;
        java.net.InetAddress inetAddress83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket85 = sSLSocketFactory74.createSocket(inetAddress81, (int) (short) -1, inetAddress83, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(hostnameVerifier21);
        org.junit.Assert.assertNull(proxy22);
        org.junit.Assert.assertNull(okResponseCache24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(sSLSocketFactory36);
        org.junit.Assert.assertNull(cookieHandler37);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(connectionPool52);
        org.junit.Assert.assertNull(okAuthenticator53);
        org.junit.Assert.assertNull(responseCache58);
        org.junit.Assert.assertNull(sSLSocketFactory59);
        org.junit.Assert.assertNotNull(proxy60);
        org.junit.Assert.assertNull(socketAddress61);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNotNull(connectionPool70);
        org.junit.Assert.assertNotNull(okHttpClient72);
// flaky:         org.junit.Assert.assertNull(proxySelector73);
        org.junit.Assert.assertNotNull(sSLSocketFactory74);
        org.junit.Assert.assertNotNull(okHttpClient75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient8.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient11.hostnameVerifier;
        java.net.Proxy proxy17 = okHttpClient11.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient11.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setResponseCache(responseCache23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool26 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient25.connectionPool = connectionPool26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        java.net.Proxy proxy30 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress31 = proxy30.address();
        java.net.SocketAddress socketAddress32 = proxy30.address();
        okHttpClient25.proxy = proxy30;
        com.squareup.okhttp.ConnectionPool connectionPool36 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address37 = null;
        com.squareup.okhttp.Connection connection38 = connectionPool36.get(address37);
        int int39 = connectionPool36.getSpdyConnectionCount();
        connectionPool36.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient25.setConnectionPool(connectionPool36);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ProxySelector proxySelector45 = okHttpClient42.proxySelector;
        java.net.ProxySelector proxySelector46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient42.setProxySelector(proxySelector46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient48.copyWithDefaults();
        java.net.ProxySelector proxySelector57 = okHttpClient56.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory58 = okHttpClient56.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory58;
        okHttpClient25.sslSocketFactory = sSLSocketFactory58;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient24.setSSLSocketFactory(sSLSocketFactory58);
        java.lang.String[] strArray62 = sSLSocketFactory58.getDefaultCipherSuites();
        java.net.Socket socket63 = sSLSocketFactory58.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket67 = sSLSocketFactory10.createSocket(socket63, "DIRECT", 100, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNull(proxy17);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(connectionPool26);
        org.junit.Assert.assertNotNull(proxy30);
        org.junit.Assert.assertNull(socketAddress31);
        org.junit.Assert.assertNull(socketAddress32);
        org.junit.Assert.assertNull(connection38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(okHttpClient56);
// flaky:         org.junit.Assert.assertNull(proxySelector57);
        org.junit.Assert.assertNotNull(sSLSocketFactory58);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(socket63);
        org.junit.Assert.assertEquals(socket63.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient15.sslSocketFactory;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket19 = sSLSocketFactory16.createSocket("hi!", 10);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: hi!");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        java.net.ProxySelector proxySelector33 = okHttpClient32.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ProxySelector proxySelector39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.setProxySelector(proxySelector39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient40.copyWithDefaults();
        java.net.ProxySelector proxySelector42 = null;
        okHttpClient41.proxySelector = proxySelector42;
        com.squareup.okhttp.OkAuthenticator okAuthenticator44 = okHttpClient41.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient22.setAuthenticator(okAuthenticator44);
        java.net.ProxySelector proxySelector46 = okHttpClient22.proxySelector;
        java.util.Set<com.squareup.okhttp.Route> routeSet47 = null;
        okHttpClient22.failedRoutes = routeSet47;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
// flaky:         org.junit.Assert.assertNull(proxySelector33);
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okAuthenticator44);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNull(proxySelector46);
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setResponseCache(responseCache12);
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient13.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.ConnectionPool connectionPool19 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (short) 0);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient15.setConnectionPool(connectionPool19);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = okHttpClient15.getSslSocketFactory();
        java.net.Socket socket22 = sSLSocketFactory21.createSocket();
        java.lang.String[] strArray23 = sSLSocketFactory21.getDefaultCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        java.util.List<java.lang.String> strList38 = okHttpClient33.transports;
        com.squareup.okhttp.ConnectionPool connectionPool39 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient33.connectionPool = connectionPool39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient33.copyWithDefaults();
        java.net.ProxySelector proxySelector42 = okHttpClient41.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient41.getSslSocketFactory();
        okHttpClient24.sslSocketFactory = sSLSocketFactory43;
        java.net.Socket socket45 = sSLSocketFactory43.createSocket();
        java.net.Socket socket46 = sSLSocketFactory43.createSocket();
        java.lang.String[] strArray47 = sSLSocketFactory43.getSupportedCipherSuites();
        java.net.Socket socket48 = sSLSocketFactory43.createSocket();
        java.lang.String[] strArray49 = sSLSocketFactory43.getSupportedCipherSuites();
        java.net.Socket socket50 = sSLSocketFactory43.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket54 = sSLSocketFactory21.createSocket(socket50, "DIRECT", 100, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(sSLSocketFactory21);
        org.junit.Assert.assertNotNull(socket22);
        org.junit.Assert.assertEquals(socket22.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(connectionPool39);
        org.junit.Assert.assertNotNull(okHttpClient41);
// flaky:         org.junit.Assert.assertNull(proxySelector42);
        org.junit.Assert.assertNotNull(sSLSocketFactory43);
        org.junit.Assert.assertNotNull(socket45);
        org.junit.Assert.assertEquals(socket45.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket46);
        org.junit.Assert.assertEquals(socket46.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(socket48);
        org.junit.Assert.assertEquals(socket48.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(socket50);
        org.junit.Assert.assertEquals(socket50.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.ResponseCache responseCache12 = okHttpClient0.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient13);
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient14.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.copyWithDefaults();
        java.net.CookieHandler cookieHandler17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient16.setCookieHandler(cookieHandler17);
        java.net.ProxySelector proxySelector19 = null;
        okHttpClient16.proxySelector = proxySelector19;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(responseCache12);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(okHttpClient18);
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        java.util.List<java.lang.String> strList18 = okHttpClient13.transports;
        com.squareup.okhttp.ConnectionPool connectionPool19 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient13.connectionPool = connectionPool19;
        java.net.Proxy proxy21 = null;
        okHttpClient13.proxy = proxy21;
        boolean boolean23 = okHttpClient13.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.copyWithDefaults();
        java.net.CookieHandler cookieHandler25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setCookieHandler(cookieHandler25);
        java.net.Proxy proxy27 = java.net.Proxy.NO_PROXY;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.setProxy(proxy27);
        java.net.Proxy.Type type29 = proxy27.type();
        java.net.SocketAddress socketAddress30 = proxy27.address();
        java.net.SocketAddress socketAddress31 = proxy27.address();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient12.setProxy(proxy27);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ResponseCache responseCache36 = null;
        okHttpClient33.responseCache = responseCache36;
        java.util.List<java.lang.String> strList38 = okHttpClient33.transports;
        com.squareup.okhttp.ConnectionPool connectionPool39 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient33.connectionPool = connectionPool39;
        java.net.Proxy proxy41 = null;
        okHttpClient33.proxy = proxy41;
        boolean boolean43 = okHttpClient33.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient(okHttpClient33);
        java.net.ProxySelector proxySelector45 = okHttpClient44.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = okHttpClient44.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = okHttpClient44.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool49;
        com.squareup.okhttp.OkAuthenticator okAuthenticator51 = null;
        okHttpClient48.authenticator = okAuthenticator51;
        java.net.CookieHandler cookieHandler53 = null;
        okHttpClient48.cookieHandler = cookieHandler53;
        java.net.Proxy proxy55 = java.net.Proxy.NO_PROXY;
        boolean boolean57 = proxy55.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache59 = okHttpClient58.okResponseCache();
        java.net.ResponseCache responseCache60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient58.setResponseCache(responseCache60);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        okHttpClient58.transports = strList64;
        boolean boolean67 = proxy55.equals((java.lang.Object) strList64);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient48.setProxy(proxy55);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient44.setProxy(proxy55);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient(okHttpClient69);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier72 = null;
        okHttpClient71.hostnameVerifier = hostnameVerifier72;
        java.net.ResponseCache responseCache74 = null;
        okHttpClient71.responseCache = responseCache74;
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = okHttpClient71.hostnameVerifier;
        java.net.Proxy proxy77 = okHttpClient71.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool80 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient71.connectionPool = connectionPool80;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient71.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier83 = okHttpClient82.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient69.setHostnameVerifier(hostnameVerifier83);
        okHttpClient32.hostnameVerifier = hostnameVerifier83;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(connectionPool19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(proxy27);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type29.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress30);
        org.junit.Assert.assertNull(socketAddress31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(connectionPool39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(proxySelector45);
        org.junit.Assert.assertNull(hostnameVerifier46);
        org.junit.Assert.assertNull(hostnameVerifier47);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(proxy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(okResponseCache59);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNotNull(okHttpClient69);
        org.junit.Assert.assertNull(hostnameVerifier76);
        org.junit.Assert.assertNull(proxy77);
        org.junit.Assert.assertNotNull(okHttpClient82);
        org.junit.Assert.assertNotNull(hostnameVerifier83);
        org.junit.Assert.assertNotNull(okHttpClient84);
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setCookieHandler(cookieHandler12);
        boolean boolean14 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.CookieHandler cookieHandler16 = null;
        okHttpClient0.cookieHandler = cookieHandler16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector19 = okHttpClient0.proxySelector;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(okAuthenticator15);
        org.junit.Assert.assertNull(proxySelector19);
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory10;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory12);
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient0.proxySelector = proxySelector14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool17;
        java.net.ResponseCache responseCache19 = null;
        okHttpClient16.responseCache = responseCache19;
        java.net.Proxy proxy21 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress22 = proxy21.address();
        java.net.SocketAddress socketAddress23 = proxy21.address();
        okHttpClient16.proxy = proxy21;
        com.squareup.okhttp.ConnectionPool connectionPool27 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address28 = null;
        com.squareup.okhttp.Connection connection29 = connectionPool27.get(address28);
        int int30 = connectionPool27.getSpdyConnectionCount();
        connectionPool27.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient16.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        okHttpClient33.hostnameVerifier = hostnameVerifier34;
        java.net.ProxySelector proxySelector36 = okHttpClient33.proxySelector;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient33.setProxySelector(proxySelector37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        okHttpClient39.hostnameVerifier = hostnameVerifier40;
        java.net.ResponseCache responseCache42 = null;
        okHttpClient39.responseCache = responseCache42;
        java.util.List<java.lang.String> strList44 = okHttpClient39.transports;
        com.squareup.okhttp.ConnectionPool connectionPool45 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient39.connectionPool = connectionPool45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient39.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = okHttpClient47.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = okHttpClient47.getSslSocketFactory();
        okHttpClient33.sslSocketFactory = sSLSocketFactory49;
        okHttpClient16.sslSocketFactory = sSLSocketFactory49;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory49);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory53 = okHttpClient52.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = okHttpClient54.hostnameVerifier;
        java.net.Proxy proxy60 = okHttpClient54.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient54.connectionPool = connectionPool63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient54.copyWithDefaults();
        java.net.ResponseCache responseCache66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient65.setResponseCache(responseCache66);
        java.net.CookieHandler cookieHandler68 = null;
        okHttpClient67.cookieHandler = cookieHandler68;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = null;
        okHttpClient70.hostnameVerifier = hostnameVerifier71;
        java.net.ResponseCache responseCache73 = null;
        okHttpClient70.responseCache = responseCache73;
        java.util.List<java.lang.String> strList75 = okHttpClient70.transports;
        com.squareup.okhttp.ConnectionPool connectionPool76 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient70.connectionPool = connectionPool76;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient70.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient79 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier80 = null;
        okHttpClient79.hostnameVerifier = hostnameVerifier80;
        java.net.ResponseCache responseCache82 = null;
        okHttpClient79.responseCache = responseCache82;
        java.util.List<java.lang.String> strList84 = okHttpClient79.transports;
        com.squareup.okhttp.ConnectionPool connectionPool85 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient79.connectionPool = connectionPool85;
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient79.copyWithDefaults();
        java.net.ProxySelector proxySelector88 = okHttpClient87.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory89 = okHttpClient87.getSslSocketFactory();
        okHttpClient70.sslSocketFactory = sSLSocketFactory89;
        java.net.Socket socket91 = sSLSocketFactory89.createSocket();
        java.net.Socket socket92 = sSLSocketFactory89.createSocket();
        okHttpClient67.sslSocketFactory = sSLSocketFactory89;
        java.net.Socket socket94 = sSLSocketFactory89.createSocket();
        java.io.InputStream inputStream95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket97 = sSLSocketFactory53.createSocket(socket94, inputStream95, false);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNotNull(proxy21);
        org.junit.Assert.assertNull(socketAddress22);
        org.junit.Assert.assertNull(socketAddress23);
        org.junit.Assert.assertNull(connection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxySelector36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(connectionPool45);
        org.junit.Assert.assertNotNull(okHttpClient47);
// flaky:         org.junit.Assert.assertNull(proxySelector48);
        org.junit.Assert.assertNotNull(sSLSocketFactory49);
        org.junit.Assert.assertNotNull(okHttpClient52);
        org.junit.Assert.assertNotNull(sSLSocketFactory53);
        org.junit.Assert.assertNull(hostnameVerifier59);
        org.junit.Assert.assertNull(proxy60);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNull(strList75);
        org.junit.Assert.assertNotNull(connectionPool76);
        org.junit.Assert.assertNotNull(okHttpClient78);
        org.junit.Assert.assertNull(strList84);
        org.junit.Assert.assertNotNull(connectionPool85);
        org.junit.Assert.assertNotNull(okHttpClient87);
// flaky:         org.junit.Assert.assertNull(proxySelector88);
        org.junit.Assert.assertNotNull(sSLSocketFactory89);
        org.junit.Assert.assertNotNull(socket91);
        org.junit.Assert.assertEquals(socket91.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket92);
        org.junit.Assert.assertEquals(socket92.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket94);
        org.junit.Assert.assertEquals(socket94.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient0.okResponseCache();
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache9 = okHttpClient8.responseCache;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(okResponseCache6);
        org.junit.Assert.assertNotNull(routeSet7);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(responseCache9);
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.getHostnameVerifier();
        java.util.Set<com.squareup.okhttp.Route> routeSet8 = okHttpClient4.failedRoutes;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient4.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        java.net.Proxy proxy18 = null;
        okHttpClient10.proxy = proxy18;
        boolean boolean20 = okHttpClient10.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient10.copyWithDefaults();
        java.net.ProxySelector proxySelector22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient21.setProxySelector(proxySelector22);
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = okHttpClient21.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        okHttpClient25.hostnameVerifier = hostnameVerifier26;
        java.net.ResponseCache responseCache28 = null;
        okHttpClient25.responseCache = responseCache28;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient25.hostnameVerifier;
        java.net.Proxy proxy31 = okHttpClient25.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool34 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient25.connectionPool = connectionPool34;
        java.util.List<java.lang.String> strList36 = okHttpClient25.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient25.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient25);
        java.net.Proxy proxy40 = java.net.Proxy.NO_PROXY;
        boolean boolean42 = proxy40.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache44 = okHttpClient43.okResponseCache();
        java.net.ResponseCache responseCache45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient43.setResponseCache(responseCache45);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        okHttpClient43.transports = strList49;
        boolean boolean52 = proxy40.equals((java.lang.Object) strList49);
        okHttpClient39.transports = strList49;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList49;
        okHttpClient21.transports = strList49;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient4.setTransports((java.util.List<java.lang.String>) strList49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(hostnameVerifier7);
        org.junit.Assert.assertNotNull(routeSet8);
        org.junit.Assert.assertNull(okAuthenticator9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNotNull(okAuthenticator24);
        org.junit.Assert.assertNull(hostnameVerifier30);
        org.junit.Assert.assertNull(proxy31);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(proxy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(okResponseCache44);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        int int9 = connectionPool8.getHttpConnectionCount();
        int int10 = connectionPool8.getSpdyConnectionCount();
        int int11 = connectionPool8.getSpdyConnectionCount();
        com.squareup.okhttp.Connection connection12 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool8.recycle(connection12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(connectionPool8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        java.net.Proxy proxy14 = java.net.Proxy.NO_PROXY;
        boolean boolean16 = proxy14.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type17 = proxy14.type();
        java.net.Proxy.Type type18 = proxy14.type();
        okHttpClient11.proxy = proxy14;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        okHttpClient20.hostnameVerifier = hostnameVerifier21;
        java.net.ResponseCache responseCache23 = null;
        okHttpClient20.responseCache = responseCache23;
        java.util.List<java.lang.String> strList25 = okHttpClient20.transports;
        com.squareup.okhttp.ConnectionPool connectionPool26 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient20.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient20.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        okHttpClient29.hostnameVerifier = hostnameVerifier30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient29.responseCache = responseCache32;
        java.util.List<java.lang.String> strList34 = okHttpClient29.transports;
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient29.connectionPool = connectionPool35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient29.copyWithDefaults();
        java.net.ProxySelector proxySelector38 = okHttpClient37.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient37.getSslSocketFactory();
        okHttpClient20.sslSocketFactory = sSLSocketFactory39;
        okHttpClient11.sslSocketFactory = sSLSocketFactory39;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        java.net.Proxy proxy48 = java.net.Proxy.NO_PROXY;
        boolean boolean50 = proxy48.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type51 = proxy48.type();
        java.net.SocketAddress socketAddress52 = proxy48.address();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient42.setProxy(proxy48);
        java.net.SocketAddress socketAddress54 = proxy48.address();
        java.net.Proxy.Type type55 = proxy48.type();
        java.net.SocketAddress socketAddress56 = proxy48.address();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        okHttpClient57.hostnameVerifier = hostnameVerifier58;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient57.responseCache = responseCache60;
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = okHttpClient57.hostnameVerifier;
        java.net.Proxy proxy63 = okHttpClient57.getProxy();
        java.net.CookieHandler cookieHandler64 = null;
        okHttpClient57.cookieHandler = cookieHandler64;
        okHttpClient57.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler68 = okHttpClient57.getCookieHandler();
        boolean boolean69 = proxy48.equals((java.lang.Object) okHttpClient57);
        okHttpClient11.proxy = proxy48;
        java.net.SocketAddress socketAddress71 = proxy48.address();
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = null;
        okHttpClient72.hostnameVerifier = hostnameVerifier73;
        java.net.ResponseCache responseCache75 = null;
        okHttpClient72.responseCache = responseCache75;
        javax.net.ssl.HostnameVerifier hostnameVerifier77 = okHttpClient72.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory78 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient72.setSSLSocketFactory(sSLSocketFactory78);
        java.net.ResponseCache responseCache80 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient72.setResponseCache(responseCache80);
        boolean boolean82 = proxy48.equals((java.lang.Object) okHttpClient81);
        java.lang.Class<?> wildcardClass83 = okHttpClient81.getClass();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNotNull(proxy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type17.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type18.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(connectionPool26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertNotNull(okHttpClient37);
// flaky:         org.junit.Assert.assertNull(proxySelector38);
        org.junit.Assert.assertNotNull(sSLSocketFactory39);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(proxy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type51.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress52);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNull(socketAddress54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type55.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress56);
        org.junit.Assert.assertNull(hostnameVerifier62);
        org.junit.Assert.assertNull(proxy63);
        org.junit.Assert.assertNull(cookieHandler68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(socketAddress71);
        org.junit.Assert.assertNull(hostnameVerifier77);
        org.junit.Assert.assertNotNull(okHttpClient79);
        org.junit.Assert.assertNotNull(okHttpClient81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient11.hostnameVerifier;
        java.util.List<java.lang.String> strList13 = okHttpClient11.transports;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory14);
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient11.getHostnameVerifier();
        java.net.ResponseCache responseCache17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient11.setResponseCache(responseCache17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ProxySelector proxySelector22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setProxySelector(proxySelector22);
        java.net.ResponseCache responseCache24 = null;
        okHttpClient23.responseCache = responseCache24;
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = okHttpClient23.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient23.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setProxySelector(proxySelector29);
        okHttpClient30.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList33 = okHttpClient30.transports;
        okHttpClient30.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ProxySelector proxySelector39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.setProxySelector(proxySelector39);
        java.net.CookieHandler cookieHandler41 = okHttpClient36.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        java.net.Proxy proxy50 = null;
        okHttpClient42.proxy = proxy50;
        java.util.Set<com.squareup.okhttp.Route> routeSet52 = okHttpClient42.failedRoutes;
        okHttpClient36.failedRoutes = routeSet52;
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient36.setHostnameVerifier(hostnameVerifier54);
        java.net.ProxySelector proxySelector56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient55.setProxySelector(proxySelector56);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache59 = okHttpClient58.okResponseCache();
        java.net.ResponseCache responseCache60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient58.setResponseCache(responseCache60);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory62 = okHttpClient58.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory63 = okHttpClient58.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = null;
        okHttpClient64.hostnameVerifier = hostnameVerifier65;
        boolean boolean67 = okHttpClient64.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler68 = okHttpClient64.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ResponseCache responseCache72 = null;
        okHttpClient69.responseCache = responseCache72;
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = okHttpClient69.hostnameVerifier;
        java.net.Proxy proxy75 = okHttpClient69.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool78 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient69.connectionPool = connectionPool78;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient69.copyWithDefaults();
        java.net.ResponseCache responseCache81 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient80.setResponseCache(responseCache81);
        com.squareup.okhttp.OkAuthenticator okAuthenticator83 = okHttpClient80.authenticator;
        okHttpClient64.authenticator = okAuthenticator83;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient58.setAuthenticator(okAuthenticator83);
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient57.setAuthenticator(okAuthenticator83);
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient30.setAuthenticator(okAuthenticator83);
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient11.setAuthenticator(okAuthenticator83);
        java.net.ResponseCache responseCache89 = okHttpClient88.getResponseCache();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNull(hostnameVerifier12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(hostnameVerifier26);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNotNull(okHttpClient30);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(okHttpClient40);
        org.junit.Assert.assertNull(cookieHandler41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(routeSet52);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertNull(okResponseCache59);
        org.junit.Assert.assertNotNull(okHttpClient61);
        org.junit.Assert.assertNull(sSLSocketFactory62);
        org.junit.Assert.assertNull(sSLSocketFactory63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(cookieHandler68);
        org.junit.Assert.assertNull(hostnameVerifier74);
        org.junit.Assert.assertNull(proxy75);
        org.junit.Assert.assertNotNull(okHttpClient80);
        org.junit.Assert.assertNotNull(okHttpClient82);
        org.junit.Assert.assertNotNull(okAuthenticator83);
        org.junit.Assert.assertNotNull(okHttpClient85);
        org.junit.Assert.assertNotNull(okHttpClient86);
        org.junit.Assert.assertNotNull(okHttpClient87);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNull(responseCache89);
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setResponseCache(responseCache14);
        java.net.CookieHandler cookieHandler16 = null;
        okHttpClient15.cookieHandler = cookieHandler16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient15.getHostnameVerifier();
        java.net.ResponseCache responseCache19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient15.setResponseCache(responseCache19);
        java.net.ResponseCache responseCache21 = null;
        okHttpClient15.responseCache = responseCache21;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNotNull(okHttpClient20);
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(0, (long) (-1));
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) 0, 10L);
        com.squareup.okhttp.Connection connection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.recycle(connection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient13.hostnameVerifier = hostnameVerifier14;
        java.net.ResponseCache responseCache16 = null;
        okHttpClient13.responseCache = responseCache16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient13.hostnameVerifier;
        java.net.Proxy proxy19 = okHttpClient13.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool22 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient13.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient13.copyWithDefaults();
        java.net.ResponseCache responseCache25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setResponseCache(responseCache25);
        okHttpClient26.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList29 = okHttpClient26.getTransports();
        okHttpClient11.transports = strList29;
        com.squareup.okhttp.ConnectionPool connectionPool33 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) (byte) 100);
        okHttpClient11.connectionPool = connectionPool33;
        com.squareup.okhttp.Connection connection35 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool33.recycle(connection35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNull(hostnameVerifier18);
        org.junit.Assert.assertNull(proxy19);
        org.junit.Assert.assertNotNull(okHttpClient24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler21 = okHttpClient0.cookieHandler;
        java.net.CookieHandler cookieHandler22 = null;
        okHttpClient0.cookieHandler = cookieHandler22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        okHttpClient27.hostnameVerifier = hostnameVerifier28;
        java.net.ResponseCache responseCache30 = null;
        okHttpClient27.responseCache = responseCache30;
        java.util.List<java.lang.String> strList32 = okHttpClient27.transports;
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient27.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setConnectionPool(connectionPool33);
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient35.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator37 = okHttpClient35.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool40 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient35.connectionPool = connectionPool40;
        java.net.ResponseCache responseCache42 = okHttpClient35.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient35.sslSocketFactory;
        java.net.Proxy proxy44 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress45 = proxy44.address();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient35.setProxy(proxy44);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient(okHttpClient46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient48.copyWithDefaults();
        java.net.ProxySelector proxySelector57 = okHttpClient56.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory58 = okHttpClient56.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient46.setSSLSocketFactory(sSLSocketFactory58);
        java.lang.String[] strArray60 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray61 = sSLSocketFactory58.getSupportedCipherSuites();
        java.lang.String[] strArray62 = sSLSocketFactory58.getSupportedCipherSuites();
        okHttpClient0.sslSocketFactory = sSLSocketFactory58;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = null;
        okHttpClient64.hostnameVerifier = hostnameVerifier65;
        java.net.ResponseCache responseCache67 = null;
        okHttpClient64.responseCache = responseCache67;
        java.util.List<java.lang.String> strList69 = okHttpClient64.transports;
        com.squareup.okhttp.ConnectionPool connectionPool70 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient64.connectionPool = connectionPool70;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient64.copyWithDefaults();
        java.net.ProxySelector proxySelector73 = okHttpClient72.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory74 = okHttpClient72.getSslSocketFactory();
        java.lang.String[] strArray75 = sSLSocketFactory74.getSupportedCipherSuites();
        java.net.Socket socket76 = sSLSocketFactory74.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket80 = sSLSocketFactory58.createSocket(socket76, "DIRECT", 0, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(sSLSocketFactory20);
        org.junit.Assert.assertNull(cookieHandler21);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNull(okAuthenticator37);
        org.junit.Assert.assertNull(responseCache42);
        org.junit.Assert.assertNull(sSLSocketFactory43);
        org.junit.Assert.assertNotNull(proxy44);
        org.junit.Assert.assertNull(socketAddress45);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(okHttpClient56);
// flaky:         org.junit.Assert.assertNull(proxySelector57);
        org.junit.Assert.assertNotNull(sSLSocketFactory58);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNotNull(connectionPool70);
        org.junit.Assert.assertNotNull(okHttpClient72);
// flaky:         org.junit.Assert.assertNull(proxySelector73);
        org.junit.Assert.assertNotNull(sSLSocketFactory74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(socket76);
        org.junit.Assert.assertEquals(socket76.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool16 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient11.connectionPool = connectionPool16;
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient11.sslSocketFactory;
        java.net.Proxy proxy20 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress21 = proxy20.address();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setProxy(proxy20);
        java.net.Proxy proxy23 = okHttpClient22.getProxy();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(okAuthenticator13);
        org.junit.Assert.assertNull(responseCache18);
        org.junit.Assert.assertNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(proxy20);
        org.junit.Assert.assertNull(socketAddress21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(proxy23);
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = okHttpClient0.connectionPool;
        java.net.Proxy proxy2 = okHttpClient0.proxy;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        okHttpClient4.hostnameVerifier = hostnameVerifier5;
        java.net.ProxySelector proxySelector7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setProxySelector(proxySelector7);
        java.net.CookieHandler cookieHandler9 = okHttpClient4.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        java.net.Proxy proxy18 = null;
        okHttpClient10.proxy = proxy18;
        java.util.Set<com.squareup.okhttp.Route> routeSet20 = okHttpClient10.failedRoutes;
        okHttpClient4.failedRoutes = routeSet20;
        okHttpClient0.failedRoutes = routeSet20;
        org.junit.Assert.assertNull(connectionPool1);
        org.junit.Assert.assertNull(proxy2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNull(cookieHandler9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(routeSet20);
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) 'a', (long) (byte) -1);
        connectionPool2.evictAll();
        com.squareup.okhttp.Address address4 = null;
        com.squareup.okhttp.Connection connection5 = connectionPool2.get(address4);
        com.squareup.okhttp.Address address6 = null;
        com.squareup.okhttp.Connection connection7 = connectionPool2.get(address6);
        org.junit.Assert.assertNull(connection5);
        org.junit.Assert.assertNull(connection7);
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory6;
        java.net.ProxySelector proxySelector8 = okHttpClient0.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient9.cookieHandler = cookieHandler14;
        java.net.Proxy proxy16 = java.net.Proxy.NO_PROXY;
        boolean boolean18 = proxy16.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient19.okResponseCache();
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setResponseCache(responseCache21);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        okHttpClient19.transports = strList25;
        boolean boolean28 = proxy16.equals((java.lang.Object) strList25);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient9.setProxy(proxy16);
        com.squareup.okhttp.ConnectionPool connectionPool32 = new com.squareup.okhttp.ConnectionPool(0, 100L);
        int int33 = connectionPool32.getHttpConnectionCount();
        okHttpClient9.connectionPool = connectionPool32;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient0.setConnectionPool(connectionPool32);
        java.net.CookieHandler cookieHandler36 = null;
        okHttpClient0.cookieHandler = cookieHandler36;
        java.lang.Class<?> wildcardClass38 = okHttpClient0.getClass();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(proxySelector8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNotNull(proxy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(okHttpClient29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(okHttpClient35);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        okHttpClient36.sslSocketFactory = sSLSocketFactory55;
        java.net.Socket socket57 = sSLSocketFactory55.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory55;
        java.lang.String[] strArray59 = sSLSocketFactory55.getSupportedCipherSuites();
        java.net.InetAddress inetAddress60 = null;
        java.net.InetAddress inetAddress62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket64 = sSLSocketFactory55.createSocket(inetAddress60, (int) '#', inetAddress62, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(socket57);
        org.junit.Assert.assertEquals(socket57.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray59);
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient9.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy29 = okHttpClient28.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient0.setHostnameVerifier(hostnameVerifier30);
        okHttpClient32.followProtocolRedirects = false;
        com.squareup.okhttp.OkAuthenticator okAuthenticator35 = okHttpClient32.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient32.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool38 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient37.connectionPool = connectionPool38;
        com.squareup.okhttp.OkAuthenticator okAuthenticator40 = null;
        okHttpClient37.authenticator = okAuthenticator40;
        java.util.List<java.lang.String> strList42 = okHttpClient37.transports;
        java.net.ResponseCache responseCache43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient37.setResponseCache(responseCache43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool46;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        okHttpClient48.hostnameVerifier = hostnameVerifier49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.util.List<java.lang.String> strList53 = okHttpClient48.transports;
        com.squareup.okhttp.ConnectionPool connectionPool54 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient45.setConnectionPool(connectionPool54);
        com.squareup.okhttp.OkAuthenticator okAuthenticator57 = okHttpClient56.getAuthenticator();
        java.net.ProxySelector proxySelector58 = okHttpClient56.getProxySelector();
        java.net.ResponseCache responseCache59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient56.setResponseCache(responseCache59);
        java.net.Proxy proxy61 = java.net.Proxy.NO_PROXY;
        boolean boolean63 = proxy61.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type64 = proxy61.type();
        java.net.SocketAddress socketAddress65 = proxy61.address();
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient60.setProxy(proxy61);
        java.net.SocketAddress socketAddress67 = proxy61.address();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient37.setProxy(proxy61);
        java.net.SocketAddress socketAddress69 = proxy61.address();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient36.setProxy(proxy61);
        com.squareup.okhttp.ConnectionPool connectionPool71 = okHttpClient70.getConnectionPool();
        com.squareup.okhttp.Connection connection72 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool71.maybeShare(connection72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(okAuthenticator35);
        org.junit.Assert.assertNotNull(okHttpClient36);
        org.junit.Assert.assertNotNull(connectionPool38);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(okHttpClient44);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(connectionPool54);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNull(okAuthenticator57);
        org.junit.Assert.assertNull(proxySelector58);
        org.junit.Assert.assertNotNull(okHttpClient60);
        org.junit.Assert.assertNotNull(proxy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type64.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress65);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNull(socketAddress67);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNull(socketAddress69);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNotNull(connectionPool71);
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '4', (long) ' ');
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) '4', (long) (short) 1);
        int int3 = connectionPool2.getHttpConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        java.net.Proxy proxy23 = null;
        okHttpClient15.proxy = proxy23;
        boolean boolean25 = okHttpClient15.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient15.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        okHttpClient28.hostnameVerifier = hostnameVerifier29;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient28.responseCache = responseCache31;
        java.util.List<java.lang.String> strList33 = okHttpClient28.transports;
        com.squareup.okhttp.ConnectionPool connectionPool34 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool34;
        com.squareup.okhttp.ConnectionPool connectionPool36 = okHttpClient28.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient15.setConnectionPool(connectionPool36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        okHttpClient38.hostnameVerifier = hostnameVerifier39;
        java.net.ResponseCache responseCache41 = null;
        okHttpClient38.responseCache = responseCache41;
        java.util.List<java.lang.String> strList43 = okHttpClient38.transports;
        com.squareup.okhttp.ConnectionPool connectionPool44 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient38.connectionPool = connectionPool44;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient38.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        okHttpClient47.hostnameVerifier = hostnameVerifier48;
        java.net.ResponseCache responseCache50 = null;
        okHttpClient47.responseCache = responseCache50;
        java.util.List<java.lang.String> strList52 = okHttpClient47.transports;
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient47.connectionPool = connectionPool53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient47.copyWithDefaults();
        java.net.ProxySelector proxySelector56 = okHttpClient55.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = okHttpClient55.getSslSocketFactory();
        okHttpClient38.sslSocketFactory = sSLSocketFactory57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient37.setSSLSocketFactory(sSLSocketFactory57);
        okHttpClient0.sslSocketFactory = sSLSocketFactory57;
        java.util.Set<com.squareup.okhttp.Route> routeSet61 = okHttpClient0.failedRoutes;
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(connectionPool34);
        org.junit.Assert.assertNotNull(connectionPool36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(okHttpClient55);
// flaky:         org.junit.Assert.assertNull(proxySelector56);
        org.junit.Assert.assertNotNull(sSLSocketFactory57);
        org.junit.Assert.assertNotNull(okHttpClient59);
        org.junit.Assert.assertNotNull(routeSet61);
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = java.net.Proxy.NO_PROXY;
        boolean boolean14 = proxy12.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type15 = proxy12.type();
        java.net.SocketAddress socketAddress16 = proxy12.address();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxy(proxy12);
        boolean boolean18 = okHttpClient17.followProtocolRedirects;
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = null;
        okHttpClient17.authenticator = okAuthenticator19;
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = okHttpClient17.hostnameVerifier;
        com.squareup.okhttp.ConnectionPool connectionPool24 = new com.squareup.okhttp.ConnectionPool((-1), (long) (short) -1);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient17.setConnectionPool(connectionPool24);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNull(cookieHandler8);
        org.junit.Assert.assertNull(okResponseCache9);
        org.junit.Assert.assertNull(cookieHandler10);
        org.junit.Assert.assertNotNull(proxy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type15.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress16);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(hostnameVerifier21);
        org.junit.Assert.assertNotNull(okHttpClient25);
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.ConnectionPool connectionPool24 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        okHttpClient19.connectionPool = connectionPool24;
        com.squareup.okhttp.Address address26 = null;
        com.squareup.okhttp.Connection connection27 = connectionPool24.get(address26);
        int int28 = connectionPool24.getConnectionCount();
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNull(connection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, 10L);
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool13 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient12.connectionPool = connectionPool13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        okHttpClient15.hostnameVerifier = hostnameVerifier16;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient15.responseCache = responseCache18;
        java.util.List<java.lang.String> strList20 = okHttpClient15.transports;
        com.squareup.okhttp.ConnectionPool connectionPool21 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient12.setConnectionPool(connectionPool21);
        java.net.ResponseCache responseCache24 = okHttpClient12.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory25 = okHttpClient12.sslSocketFactory;
        java.net.CookieHandler cookieHandler26 = okHttpClient12.getCookieHandler();
        com.squareup.okhttp.OkAuthenticator okAuthenticator27 = okHttpClient12.authenticator;
        java.util.Set<com.squareup.okhttp.Route> routeSet28 = okHttpClient12.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient12);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        okHttpClient30.hostnameVerifier = hostnameVerifier31;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient30.responseCache = responseCache33;
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = okHttpClient30.hostnameVerifier;
        java.net.Proxy proxy36 = okHttpClient30.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool39 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient30.connectionPool = connectionPool39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient30.copyWithDefaults();
        java.net.ResponseCache responseCache42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient41.setResponseCache(responseCache42);
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient43.hostnameVerifier;
        okHttpClient29.hostnameVerifier = hostnameVerifier44;
        okHttpClient0.hostnameVerifier = hostnameVerifier44;
        com.squareup.okhttp.OkAuthenticator okAuthenticator47 = okHttpClient0.getAuthenticator();
        java.net.ResponseCache responseCache48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient0.setResponseCache(responseCache48);
        java.net.URL uRL50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection51 = okHttpClient49.open(uRL50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool13);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(connectionPool21);
        org.junit.Assert.assertNotNull(okHttpClient23);
        org.junit.Assert.assertNull(responseCache24);
        org.junit.Assert.assertNull(sSLSocketFactory25);
        org.junit.Assert.assertNull(cookieHandler26);
        org.junit.Assert.assertNull(okAuthenticator27);
        org.junit.Assert.assertNotNull(routeSet28);
        org.junit.Assert.assertNull(hostnameVerifier35);
        org.junit.Assert.assertNull(proxy36);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(hostnameVerifier44);
        org.junit.Assert.assertNull(okAuthenticator47);
        org.junit.Assert.assertNotNull(okHttpClient49);
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkAuthenticator okAuthenticator5 = null;
        okHttpClient0.authenticator = okAuthenticator5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        okHttpClient8.hostnameVerifier = hostnameVerifier9;
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.setProxySelector(proxySelector11);
        java.net.ResponseCache responseCache13 = null;
        okHttpClient12.responseCache = responseCache13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient12.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient12.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setProxySelector(proxySelector18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        com.squareup.okhttp.OkAuthenticator okAuthenticator33 = okHttpClient32.getAuthenticator();
        java.net.ProxySelector proxySelector34 = okHttpClient32.getProxySelector();
        java.net.ProxySelector proxySelector35 = null;
        okHttpClient32.proxySelector = proxySelector35;
        java.net.ProxySelector proxySelector37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient32.setProxySelector(proxySelector37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient38.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        java.util.List<java.lang.String> strList45 = okHttpClient40.transports;
        com.squareup.okhttp.ConnectionPool connectionPool46 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient40.connectionPool = connectionPool46;
        java.net.Proxy proxy48 = null;
        okHttpClient40.proxy = proxy48;
        boolean boolean50 = okHttpClient40.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.copyWithDefaults();
        java.net.CookieHandler cookieHandler52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setCookieHandler(cookieHandler52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = okHttpClient54.hostnameVerifier;
        java.net.Proxy proxy60 = okHttpClient54.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient54.connectionPool = connectionPool63;
        boolean boolean65 = okHttpClient54.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = null;
        okHttpClient66.hostnameVerifier = hostnameVerifier67;
        java.net.ResponseCache responseCache69 = null;
        okHttpClient66.responseCache = responseCache69;
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = okHttpClient66.hostnameVerifier;
        java.net.Proxy proxy72 = okHttpClient66.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool75 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient66.connectionPool = connectionPool75;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient66.copyWithDefaults();
        java.net.Proxy proxy78 = okHttpClient77.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = okHttpClient77.getHostnameVerifier();
        okHttpClient54.hostnameVerifier = hostnameVerifier79;
        okHttpClient51.hostnameVerifier = hostnameVerifier79;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient38.setHostnameVerifier(hostnameVerifier79);
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient17.setHostnameVerifier(hostnameVerifier79);
        okHttpClient0.hostnameVerifier = hostnameVerifier79;
        com.squareup.okhttp.ConnectionPool connectionPool87 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) 10);
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient0.setConnectionPool(connectionPool87);
        com.squareup.okhttp.Connection connection89 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool87.maybeShare(connection89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(sSLSocketFactory7);
        org.junit.Assert.assertNotNull(okHttpClient12);
        org.junit.Assert.assertNull(hostnameVerifier15);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(okAuthenticator33);
        org.junit.Assert.assertNull(proxySelector34);
        org.junit.Assert.assertNotNull(okHttpClient38);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(connectionPool46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNull(hostnameVerifier59);
        org.junit.Assert.assertNull(proxy60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(hostnameVerifier71);
        org.junit.Assert.assertNull(proxy72);
        org.junit.Assert.assertNotNull(okHttpClient77);
        org.junit.Assert.assertNull(proxy78);
        org.junit.Assert.assertNotNull(hostnameVerifier79);
        org.junit.Assert.assertNotNull(okHttpClient82);
        org.junit.Assert.assertNotNull(okHttpClient83);
        org.junit.Assert.assertNotNull(okHttpClient88);
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient4.proxySelector = proxySelector9;
        com.squareup.okhttp.ConnectionPool connectionPool13 = new com.squareup.okhttp.ConnectionPool((int) ' ', (long) (short) 100);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient4.setConnectionPool(connectionPool13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient15.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        okHttpClient18.hostnameVerifier = hostnameVerifier19;
        java.net.ResponseCache responseCache21 = null;
        okHttpClient18.responseCache = responseCache21;
        java.util.List<java.lang.String> strList23 = okHttpClient18.transports;
        com.squareup.okhttp.ConnectionPool connectionPool24 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient18.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient15.setConnectionPool(connectionPool24);
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = okHttpClient26.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool31 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient26.connectionPool = connectionPool31;
        java.net.ResponseCache responseCache33 = okHttpClient26.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient26.sslSocketFactory;
        java.net.Proxy proxy35 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress36 = proxy35.address();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient26.setProxy(proxy35);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient26.setSSLSocketFactory(sSLSocketFactory38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        okHttpClient40.hostnameVerifier = hostnameVerifier41;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient40.responseCache = responseCache43;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = okHttpClient40.hostnameVerifier;
        java.net.Proxy proxy46 = okHttpClient40.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool49 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient40.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient40.copyWithDefaults();
        java.net.ResponseCache responseCache52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setResponseCache(responseCache52);
        com.squareup.okhttp.OkAuthenticator okAuthenticator54 = okHttpClient51.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient26.setAuthenticator(okAuthenticator54);
        java.net.Proxy proxy56 = okHttpClient55.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient14.setProxy(proxy56);
        boolean boolean58 = okHttpClient14.followProtocolRedirects;
        com.squareup.okhttp.OkAuthenticator okAuthenticator59 = okHttpClient14.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        okHttpClient60.hostnameVerifier = hostnameVerifier61;
        java.net.ResponseCache responseCache63 = null;
        okHttpClient60.responseCache = responseCache63;
        java.util.List<java.lang.String> strList65 = okHttpClient60.transports;
        com.squareup.okhttp.ConnectionPool connectionPool66 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient60.connectionPool = connectionPool66;
        java.net.Proxy proxy68 = null;
        okHttpClient60.proxy = proxy68;
        boolean boolean70 = okHttpClient60.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient60.copyWithDefaults();
        java.net.CookieHandler cookieHandler72 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient71.setCookieHandler(cookieHandler72);
        java.net.Proxy proxy74 = java.net.Proxy.NO_PROXY;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient71.setProxy(proxy74);
        com.squareup.okhttp.OkAuthenticator okAuthenticator76 = okHttpClient71.authenticator;
        javax.net.ssl.HostnameVerifier hostnameVerifier77 = okHttpClient71.getHostnameVerifier();
        okHttpClient14.hostnameVerifier = hostnameVerifier77;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(connectionPool24);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNull(okAuthenticator28);
        org.junit.Assert.assertNull(responseCache33);
        org.junit.Assert.assertNull(sSLSocketFactory34);
        org.junit.Assert.assertNotNull(proxy35);
        org.junit.Assert.assertNull(socketAddress36);
        org.junit.Assert.assertNotNull(okHttpClient37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(hostnameVerifier45);
        org.junit.Assert.assertNull(proxy46);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(okHttpClient53);
        org.junit.Assert.assertNotNull(okAuthenticator54);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(proxy56);
        org.junit.Assert.assertNotNull(okHttpClient57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(okAuthenticator59);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNotNull(connectionPool66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNotNull(okHttpClient73);
        org.junit.Assert.assertNotNull(proxy74);
        org.junit.Assert.assertNotNull(okHttpClient75);
        org.junit.Assert.assertNotNull(okAuthenticator76);
        org.junit.Assert.assertNotNull(hostnameVerifier77);
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkAuthenticator okAuthenticator3 = null;
        okHttpClient0.authenticator = okAuthenticator3;
        java.net.CookieHandler cookieHandler5 = null;
        okHttpClient0.cookieHandler = cookieHandler5;
        java.net.Proxy proxy7 = java.net.Proxy.NO_PROXY;
        boolean boolean9 = proxy7.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient10.okResponseCache();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setResponseCache(responseCache12);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        okHttpClient10.transports = strList16;
        boolean boolean19 = proxy7.equals((java.lang.Object) strList16);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setProxy(proxy7);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.URL uRL22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection23 = okHttpClient21.open(uRL22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(okResponseCache11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(okHttpClient20);
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        int int3 = connectionPool1.getSpdyConnectionCount();
        int int4 = connectionPool1.getSpdyConnectionCount();
        int int5 = connectionPool1.getSpdyConnectionCount();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        java.net.CookieHandler cookieHandler7 = okHttpClient0.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.getAuthenticator();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(sSLSocketFactory6);
        org.junit.Assert.assertNull(cookieHandler7);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNull(hostnameVerifier9);
        org.junit.Assert.assertNull(okAuthenticator10);
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray6 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet7 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet7, routeArray6);
        okHttpClient5.failedRoutes = routeSet7;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient5.setCookieHandler(cookieHandler10);
        java.net.CookieHandler cookieHandler12 = null;
        okHttpClient11.cookieHandler = cookieHandler12;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = okHttpClient11.getSslSocketFactory();
        java.net.ResponseCache responseCache15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient11.setResponseCache(responseCache15);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient11.getSslSocketFactory();
        javax.net.SocketFactory socketFactory18 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket19 = socketFactory18.createSocket();
        java.net.Socket socket20 = socketFactory18.createSocket();
        java.net.Socket socket21 = socketFactory18.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket25 = sSLSocketFactory17.createSocket(socket21, "", (-1), true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNotNull(routeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(sSLSocketFactory14);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNotNull(sSLSocketFactory17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(socket19);
        org.junit.Assert.assertEquals(socket19.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket20);
        org.junit.Assert.assertEquals(socket20.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        okHttpClient7.transports = strList13;
        okHttpClient0.transports = strList13;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory20;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache22 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy24 = okHttpClient23.getProxy();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(okResponseCache8);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(okResponseCache22);
        org.junit.Assert.assertNull(proxy24);
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache1 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.sslSocketFactory;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        boolean boolean6 = okHttpClient0.getFollowProtocolRedirects();
        java.net.ResponseCache responseCache7 = okHttpClient0.responseCache;
        org.junit.Assert.assertNull(okResponseCache1);
        org.junit.Assert.assertNotNull(okHttpClient3);
        org.junit.Assert.assertNull(sSLSocketFactory4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(responseCache7);
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient0.connectionPool;
        java.util.List<java.lang.String> strList13 = okHttpClient0.getTransports();
        java.net.CookieHandler cookieHandler14 = null;
        okHttpClient0.cookieHandler = cookieHandler14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.CookieHandler cookieHandler17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient16.setCookieHandler(cookieHandler17);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache19 = okHttpClient16.okResponseCache();
        java.net.ResponseCache responseCache20 = okHttpClient16.responseCache;
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertNull(okResponseCache19);
        org.junit.Assert.assertNull(responseCache20);
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ResponseCache responseCache14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.setResponseCache(responseCache14);
        com.squareup.okhttp.ConnectionPool connectionPool18 = new com.squareup.okhttp.ConnectionPool((int) 'a', (long) (byte) -1);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setConnectionPool(connectionPool18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient32.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = okHttpClient32.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool37 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient32.connectionPool = connectionPool37;
        java.net.ResponseCache responseCache39 = okHttpClient32.responseCache;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory40 = okHttpClient32.sslSocketFactory;
        java.net.Proxy proxy41 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress42 = proxy41.address();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.setProxy(proxy41);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient(okHttpClient43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        okHttpClient45.hostnameVerifier = hostnameVerifier46;
        java.net.ResponseCache responseCache48 = null;
        okHttpClient45.responseCache = responseCache48;
        java.util.List<java.lang.String> strList50 = okHttpClient45.transports;
        com.squareup.okhttp.ConnectionPool connectionPool51 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient45.connectionPool = connectionPool51;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector54 = okHttpClient53.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient53.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient43.setSSLSocketFactory(sSLSocketFactory55);
        java.lang.String[] strArray57 = sSLSocketFactory55.getSupportedCipherSuites();
        java.lang.String[] strArray58 = sSLSocketFactory55.getSupportedCipherSuites();
        java.lang.String[] strArray59 = sSLSocketFactory55.getSupportedCipherSuites();
        okHttpClient15.sslSocketFactory = sSLSocketFactory55;
        java.net.InetAddress inetAddress61 = null;
        java.net.InetAddress inetAddress63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket65 = sSLSocketFactory55.createSocket(inetAddress61, (int) (byte) 0, inetAddress63, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient15);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(okAuthenticator34);
        org.junit.Assert.assertNull(responseCache39);
        org.junit.Assert.assertNull(sSLSocketFactory40);
        org.junit.Assert.assertNotNull(proxy41);
        org.junit.Assert.assertNull(socketAddress42);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(connectionPool51);
        org.junit.Assert.assertNotNull(okHttpClient53);
// flaky:         org.junit.Assert.assertNull(proxySelector54);
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        org.junit.Assert.assertNotNull(okHttpClient56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy12 = okHttpClient11.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.copyWithDefaults();
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection16 = okHttpClient14.open(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(proxy12);
        org.junit.Assert.assertNotNull(hostnameVerifier13);
        org.junit.Assert.assertNotNull(okHttpClient14);
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient0.cookieHandler = cookieHandler7;
        okHttpClient0.followProtocolRedirects = true;
        java.net.CookieHandler cookieHandler11 = okHttpClient0.getCookieHandler();
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setCookieHandler(cookieHandler12);
        java.net.ProxySelector proxySelector14 = okHttpClient13.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient13);
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient15.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = okHttpClient15.hostnameVerifier;
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setCookieHandler(cookieHandler18);
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = okHttpClient19.authenticator;
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(cookieHandler11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNull(proxySelector14);
        org.junit.Assert.assertNull(hostnameVerifier16);
        org.junit.Assert.assertNull(hostnameVerifier17);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(okAuthenticator20);
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.util.List<java.lang.String> strList13 = okHttpClient11.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.copyWithDefaults();
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.setCookieHandler(cookieHandler15);
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNotNull(okHttpClient16);
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        boolean boolean3 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(cookieHandler4);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient7.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        com.squareup.okhttp.ConnectionPool connectionPool15 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient17.getSslSocketFactory();
        okHttpClient7.sslSocketFactory = sSLSocketFactory19;
        java.net.Socket socket21 = sSLSocketFactory19.createSocket();
        java.lang.String[] strArray22 = sSLSocketFactory19.getDefaultCipherSuites();
        java.net.InetAddress inetAddress23 = null;
        java.net.InetAddress inetAddress25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket27 = sSLSocketFactory19.createSocket(inetAddress23, 10, inetAddress25, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(okHttpClient5);
        org.junit.Assert.assertNull(okResponseCache6);
        org.junit.Assert.assertNull(okAuthenticator8);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(connectionPool15);
        org.junit.Assert.assertNotNull(okHttpClient17);
// flaky:         org.junit.Assert.assertNull(proxySelector18);
        org.junit.Assert.assertNotNull(sSLSocketFactory19);
        org.junit.Assert.assertNotNull(socket21);
        org.junit.Assert.assertEquals(socket21.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        okHttpClient10.hostnameVerifier = hostnameVerifier11;
        java.net.ResponseCache responseCache13 = null;
        okHttpClient10.responseCache = responseCache13;
        java.util.List<java.lang.String> strList15 = okHttpClient10.transports;
        com.squareup.okhttp.ConnectionPool connectionPool16 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient10.connectionPool = connectionPool16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.copyWithDefaults();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = okHttpClient18.sslSocketFactory;
        java.lang.String[] strArray21 = sSLSocketFactory20.getSupportedCipherSuites();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory20);
        java.lang.String[] strArray23 = sSLSocketFactory20.getSupportedCipherSuites();
        java.lang.String[] strArray24 = sSLSocketFactory20.getDefaultCipherSuites();
        java.net.InetAddress inetAddress25 = null;
        java.net.InetAddress inetAddress27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket29 = sSLSocketFactory20.createSocket(inetAddress25, (int) '4', inetAddress27, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertNotNull(okHttpClient8);
// flaky:         org.junit.Assert.assertNull(proxySelector9);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(connectionPool16);
        org.junit.Assert.assertNotNull(okHttpClient18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(sSLSocketFactory20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        boolean boolean2 = proxy0.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type3 = proxy0.type();
        java.lang.String str4 = proxy0.toString();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient5.hostnameVerifier = hostnameVerifier6;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient5.getSslSocketFactory();
        boolean boolean9 = proxy0.equals((java.lang.Object) okHttpClient5);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient5.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool13 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient5.setConnectionPool(connectionPool13);
        java.net.CookieHandler cookieHandler15 = okHttpClient14.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient16.connectionPool = connectionPool17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        okHttpClient19.hostnameVerifier = hostnameVerifier20;
        java.net.ResponseCache responseCache22 = null;
        okHttpClient19.responseCache = responseCache22;
        java.util.List<java.lang.String> strList24 = okHttpClient19.transports;
        com.squareup.okhttp.ConnectionPool connectionPool25 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient16.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = okHttpClient27.getAuthenticator();
        java.net.ProxySelector proxySelector29 = okHttpClient27.getProxySelector();
        java.net.ProxySelector proxySelector30 = null;
        okHttpClient27.proxySelector = proxySelector30;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient27.responseCache = responseCache32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        okHttpClient34.hostnameVerifier = hostnameVerifier35;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient34.responseCache = responseCache37;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = okHttpClient34.hostnameVerifier;
        java.net.Proxy proxy40 = okHttpClient34.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool43 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient34.connectionPool = connectionPool43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient34.copyWithDefaults();
        java.net.ResponseCache responseCache46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.setResponseCache(responseCache46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool49 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient48.connectionPool = connectionPool49;
        java.net.ResponseCache responseCache51 = null;
        okHttpClient48.responseCache = responseCache51;
        java.net.Proxy proxy53 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress54 = proxy53.address();
        java.net.SocketAddress socketAddress55 = proxy53.address();
        okHttpClient48.proxy = proxy53;
        com.squareup.okhttp.ConnectionPool connectionPool59 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address60 = null;
        com.squareup.okhttp.Connection connection61 = connectionPool59.get(address60);
        int int62 = connectionPool59.getSpdyConnectionCount();
        connectionPool59.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient48.setConnectionPool(connectionPool59);
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        okHttpClient65.hostnameVerifier = hostnameVerifier66;
        java.net.ProxySelector proxySelector68 = okHttpClient65.proxySelector;
        java.net.ProxySelector proxySelector69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient65.setProxySelector(proxySelector69);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier72 = null;
        okHttpClient71.hostnameVerifier = hostnameVerifier72;
        java.net.ResponseCache responseCache74 = null;
        okHttpClient71.responseCache = responseCache74;
        java.util.List<java.lang.String> strList76 = okHttpClient71.transports;
        com.squareup.okhttp.ConnectionPool connectionPool77 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient71.connectionPool = connectionPool77;
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient71.copyWithDefaults();
        java.net.ProxySelector proxySelector80 = okHttpClient79.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory81 = okHttpClient79.getSslSocketFactory();
        okHttpClient65.sslSocketFactory = sSLSocketFactory81;
        okHttpClient48.sslSocketFactory = sSLSocketFactory81;
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient47.setSSLSocketFactory(sSLSocketFactory81);
        okHttpClient27.sslSocketFactory = sSLSocketFactory81;
        java.net.Socket socket86 = sSLSocketFactory81.createSocket();
        okHttpClient14.sslSocketFactory = sSLSocketFactory81;
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type3.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DIRECT" + "'", str4, "DIRECT");
        org.junit.Assert.assertNull(sSLSocketFactory8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(okHttpClient10);
        org.junit.Assert.assertNotNull(okHttpClient14);
        org.junit.Assert.assertNull(cookieHandler15);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(connectionPool25);
        org.junit.Assert.assertNotNull(okHttpClient27);
        org.junit.Assert.assertNull(okAuthenticator28);
        org.junit.Assert.assertNull(proxySelector29);
        org.junit.Assert.assertNull(hostnameVerifier39);
        org.junit.Assert.assertNull(proxy40);
        org.junit.Assert.assertNotNull(okHttpClient45);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertNotNull(connectionPool49);
        org.junit.Assert.assertNotNull(proxy53);
        org.junit.Assert.assertNull(socketAddress54);
        org.junit.Assert.assertNull(socketAddress55);
        org.junit.Assert.assertNull(connection61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(okHttpClient64);
        org.junit.Assert.assertNull(proxySelector68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNull(strList76);
        org.junit.Assert.assertNotNull(connectionPool77);
        org.junit.Assert.assertNotNull(okHttpClient79);
// flaky:         org.junit.Assert.assertNull(proxySelector80);
        org.junit.Assert.assertNotNull(sSLSocketFactory81);
        org.junit.Assert.assertNotNull(okHttpClient84);
        org.junit.Assert.assertNotNull(socket86);
        org.junit.Assert.assertEquals(socket86.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = null;
        okHttpClient0.proxy = proxy6;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient0.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = okHttpClient0.getHostnameVerifier();
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(hostnameVerifier8);
        org.junit.Assert.assertNull(hostnameVerifier9);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (byte) 0, (long) 1);
        int int3 = connectionPool2.getSpdyConnectionCount();
        int int4 = connectionPool2.getConnectionCount();
        int int5 = connectionPool2.getConnectionCount();
        int int6 = connectionPool2.getConnectionCount();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient0.hostnameVerifier;
        java.net.Proxy proxy6 = okHttpClient0.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool9 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient0.connectionPool = connectionPool9;
        java.util.List<java.lang.String> strList11 = okHttpClient0.getTransports();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient13.copyWithDefaults();
        okHttpClient14.followProtocolRedirects = false;
        java.net.ProxySelector proxySelector17 = okHttpClient14.getProxySelector();
        com.squareup.okhttp.ConnectionPool connectionPool18 = okHttpClient14.getConnectionPool();
        com.squareup.okhttp.Connection connection19 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool18.maybeShare(connection19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(hostnameVerifier5);
        org.junit.Assert.assertNull(proxy6);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(okHttpClient13);
        org.junit.Assert.assertNotNull(okHttpClient14);
// flaky:         org.junit.Assert.assertNull(proxySelector17);
        org.junit.Assert.assertNotNull(connectionPool18);
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier4;
        java.net.ResponseCache responseCache6 = null;
        okHttpClient3.responseCache = responseCache6;
        java.util.List<java.lang.String> strList8 = okHttpClient3.transports;
        com.squareup.okhttp.ConnectionPool connectionPool9 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient3.connectionPool = connectionPool9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setConnectionPool(connectionPool9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient11.getAuthenticator();
        java.net.ProxySelector proxySelector13 = okHttpClient11.getProxySelector();
        java.net.ProxySelector proxySelector14 = null;
        okHttpClient11.proxySelector = proxySelector14;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setProxySelector(proxySelector16);
        com.squareup.okhttp.ConnectionPool connectionPool20 = new com.squareup.okhttp.ConnectionPool(10, 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.setConnectionPool(connectionPool20);
        java.util.Set<com.squareup.okhttp.Route> routeSet22 = okHttpClient21.failedRoutes;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = okHttpClient21.getSslSocketFactory();
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(connectionPool9);
        org.junit.Assert.assertNotNull(okHttpClient11);
        org.junit.Assert.assertNull(okAuthenticator12);
        org.junit.Assert.assertNull(proxySelector13);
        org.junit.Assert.assertNotNull(okHttpClient17);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(routeSet22);
        org.junit.Assert.assertNull(sSLSocketFactory23);
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool10 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient9.connectionPool = connectionPool10;
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = null;
        okHttpClient9.authenticator = okAuthenticator12;
        java.util.List<java.lang.String> strList14 = okHttpClient9.transports;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient9.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ResponseCache responseCache20 = null;
        okHttpClient17.responseCache = responseCache20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient17.hostnameVerifier;
        java.net.Proxy proxy23 = okHttpClient17.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool26 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient17.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient17.copyWithDefaults();
        java.net.Proxy proxy29 = okHttpClient28.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient8.setHostnameVerifier(hostnameVerifier30);
        java.net.CookieHandler cookieHandler33 = okHttpClient8.cookieHandler;
        java.net.ProxySelector proxySelector34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient8.setProxySelector(proxySelector34);
        java.net.ProxySelector proxySelector36 = null;
        okHttpClient8.proxySelector = proxySelector36;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNotNull(okHttpClient8);
        org.junit.Assert.assertNotNull(connectionPool10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(hostnameVerifier22);
        org.junit.Assert.assertNull(proxy23);
        org.junit.Assert.assertNotNull(okHttpClient28);
        org.junit.Assert.assertNull(proxy29);
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        org.junit.Assert.assertNotNull(okHttpClient31);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(cookieHandler33);
        org.junit.Assert.assertNotNull(okHttpClient35);
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool((int) (short) -1, (long) 'a');
        com.squareup.okhttp.Address address3 = null;
        com.squareup.okhttp.Connection connection4 = connectionPool2.get(address3);
        com.squareup.okhttp.Connection connection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool2.maybeShare(connection5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(connection4);
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        okHttpClient11.hostnameVerifier = hostnameVerifier12;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient11.responseCache = responseCache14;
        java.util.List<java.lang.String> strList16 = okHttpClient11.transports;
        com.squareup.okhttp.ConnectionPool connectionPool17 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient11.connectionPool = connectionPool17;
        java.net.Proxy proxy19 = null;
        okHttpClient11.proxy = proxy19;
        boolean boolean21 = okHttpClient11.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        java.net.ProxySelector proxySelector23 = okHttpClient22.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = okHttpClient22.hostnameVerifier;
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient22.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool27 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient26.connectionPool = connectionPool27;
        com.squareup.okhttp.OkAuthenticator okAuthenticator29 = null;
        okHttpClient26.authenticator = okAuthenticator29;
        java.net.CookieHandler cookieHandler31 = null;
        okHttpClient26.cookieHandler = cookieHandler31;
        java.net.Proxy proxy33 = java.net.Proxy.NO_PROXY;
        boolean boolean35 = proxy33.equals((java.lang.Object) 1L);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache37 = okHttpClient36.okResponseCache();
        java.net.ResponseCache responseCache38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setResponseCache(responseCache38);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        okHttpClient36.transports = strList42;
        boolean boolean45 = proxy33.equals((java.lang.Object) strList42);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient26.setProxy(proxy33);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient22.setProxy(proxy33);
        java.lang.String str48 = proxy33.toString();
        java.net.Proxy.Type type49 = proxy33.type();
        java.net.SocketAddress socketAddress50 = proxy33.address();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient0.setProxy(proxy33);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.net.Proxy proxy57 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress58 = proxy57.address();
        java.net.SocketAddress socketAddress59 = proxy57.address();
        okHttpClient52.proxy = proxy57;
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address64 = null;
        com.squareup.okhttp.Connection connection65 = connectionPool63.get(address64);
        int int66 = connectionPool63.getSpdyConnectionCount();
        connectionPool63.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient52.setConnectionPool(connectionPool63);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ProxySelector proxySelector72 = okHttpClient69.proxySelector;
        java.net.ProxySelector proxySelector73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient69.setProxySelector(proxySelector73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        okHttpClient69.sslSocketFactory = sSLSocketFactory85;
        okHttpClient52.sslSocketFactory = sSLSocketFactory85;
        java.lang.String[] strArray88 = sSLSocketFactory85.getSupportedCipherSuites();
        java.lang.String[] strArray89 = sSLSocketFactory85.getSupportedCipherSuites();
        java.net.Socket socket90 = sSLSocketFactory85.createSocket();
        java.net.Socket socket91 = sSLSocketFactory85.createSocket();
        okHttpClient0.sslSocketFactory = sSLSocketFactory85;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket95 = sSLSocketFactory85.createSocket("", (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(connectionPool17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(proxySelector23);
        org.junit.Assert.assertNull(hostnameVerifier24);
        org.junit.Assert.assertNull(hostnameVerifier25);
        org.junit.Assert.assertNotNull(connectionPool27);
        org.junit.Assert.assertNotNull(proxy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(okResponseCache37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNotNull(okHttpClient47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DIRECT" + "'", str48, "DIRECT");
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type49.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNull(socketAddress50);
        org.junit.Assert.assertNotNull(okHttpClient51);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(proxy57);
        org.junit.Assert.assertNull(socketAddress58);
        org.junit.Assert.assertNull(socketAddress59);
        org.junit.Assert.assertNull(connection65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNull(proxySelector72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(socket90);
        org.junit.Assert.assertEquals(socket90.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket91);
        org.junit.Assert.assertEquals(socket91.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        java.net.ProxySelector proxySelector18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setProxySelector(proxySelector18);
        java.net.CookieHandler cookieHandler20 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool22 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient21.connectionPool = connectionPool22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        okHttpClient24.hostnameVerifier = hostnameVerifier25;
        java.net.ResponseCache responseCache27 = null;
        okHttpClient24.responseCache = responseCache27;
        java.util.List<java.lang.String> strList29 = okHttpClient24.transports;
        com.squareup.okhttp.ConnectionPool connectionPool30 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient24.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.setConnectionPool(connectionPool30);
        java.net.Proxy proxy33 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool35 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient34.connectionPool = connectionPool35;
        int int37 = connectionPool35.getSpdyConnectionCount();
        okHttpClient32.connectionPool = connectionPool35;
        int int39 = connectionPool35.getSpdyConnectionCount();
        int int40 = connectionPool35.getHttpConnectionCount();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient0.setConnectionPool(connectionPool35);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        okHttpClient42.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient42.responseCache = responseCache45;
        java.util.List<java.lang.String> strList47 = okHttpClient42.transports;
        com.squareup.okhttp.ConnectionPool connectionPool48 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient42.connectionPool = connectionPool48;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        okHttpClient51.hostnameVerifier = hostnameVerifier52;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient51.responseCache = responseCache54;
        java.util.List<java.lang.String> strList56 = okHttpClient51.transports;
        com.squareup.okhttp.ConnectionPool connectionPool57 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient51.connectionPool = connectionPool57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = okHttpClient59.getSslSocketFactory();
        okHttpClient42.sslSocketFactory = sSLSocketFactory61;
        okHttpClient0.sslSocketFactory = sSLSocketFactory61;
        java.lang.String[] strArray64 = sSLSocketFactory61.getDefaultCipherSuites();
        java.net.Socket socket65 = sSLSocketFactory61.createSocket();
        java.net.InetAddress inetAddress66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket68 = sSLSocketFactory61.createSocket(inetAddress66, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(cookieHandler20);
        org.junit.Assert.assertNotNull(connectionPool22);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(connectionPool30);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNull(proxy33);
        org.junit.Assert.assertNotNull(connectionPool35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(okHttpClient41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(connectionPool48);
        org.junit.Assert.assertNotNull(okHttpClient50);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(connectionPool57);
        org.junit.Assert.assertNotNull(okHttpClient59);
// flaky:         org.junit.Assert.assertNull(proxySelector60);
        org.junit.Assert.assertNotNull(sSLSocketFactory61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(socket65);
        org.junit.Assert.assertEquals(socket65.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        com.squareup.okhttp.ConnectionPool connectionPool2 = new com.squareup.okhttp.ConnectionPool(100, (long) (byte) 1);
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache20 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = okHttpClient0.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool22 = okHttpClient0.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet23 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = null;
        okHttpClient0.authenticator = okAuthenticator24;
        java.net.ResponseCache responseCache26 = okHttpClient0.responseCache;
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNull(okResponseCache20);
        org.junit.Assert.assertNull(okAuthenticator21);
        org.junit.Assert.assertNull(connectionPool22);
        org.junit.Assert.assertNotNull(routeSet23);
        org.junit.Assert.assertNull(responseCache26);
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.Proxy proxy5 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress6 = proxy5.address();
        java.net.SocketAddress socketAddress7 = proxy5.address();
        okHttpClient0.proxy = proxy5;
        com.squareup.okhttp.ConnectionPool connectionPool11 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address12 = null;
        com.squareup.okhttp.Connection connection13 = connectionPool11.get(address12);
        int int14 = connectionPool11.getSpdyConnectionCount();
        connectionPool11.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setConnectionPool(connectionPool11);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        okHttpClient17.hostnameVerifier = hostnameVerifier18;
        java.net.ProxySelector proxySelector20 = okHttpClient17.proxySelector;
        java.net.ProxySelector proxySelector21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setProxySelector(proxySelector21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        okHttpClient23.hostnameVerifier = hostnameVerifier24;
        java.net.ResponseCache responseCache26 = null;
        okHttpClient23.responseCache = responseCache26;
        java.util.List<java.lang.String> strList28 = okHttpClient23.transports;
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient23.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.copyWithDefaults();
        java.net.ProxySelector proxySelector32 = okHttpClient31.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient31.getSslSocketFactory();
        okHttpClient17.sslSocketFactory = sSLSocketFactory33;
        okHttpClient0.sslSocketFactory = sSLSocketFactory33;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        okHttpClient36.hostnameVerifier = hostnameVerifier37;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient36.responseCache = responseCache39;
        java.util.List<java.lang.String> strList41 = okHttpClient36.transports;
        com.squareup.okhttp.ConnectionPool connectionPool42 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient36.connectionPool = connectionPool42;
        java.net.CookieHandler cookieHandler44 = okHttpClient36.cookieHandler;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache45 = okHttpClient36.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory46 = null;
        okHttpClient36.sslSocketFactory = sSLSocketFactory46;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory48);
        java.net.ProxySelector proxySelector50 = null;
        okHttpClient36.proxySelector = proxySelector50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool53 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient52.connectionPool = connectionPool53;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient52.responseCache = responseCache55;
        java.net.Proxy proxy57 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress58 = proxy57.address();
        java.net.SocketAddress socketAddress59 = proxy57.address();
        okHttpClient52.proxy = proxy57;
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool((-1), (long) '#');
        com.squareup.okhttp.Address address64 = null;
        com.squareup.okhttp.Connection connection65 = connectionPool63.get(address64);
        int int66 = connectionPool63.getSpdyConnectionCount();
        connectionPool63.evictAll();
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient52.setConnectionPool(connectionPool63);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        okHttpClient69.hostnameVerifier = hostnameVerifier70;
        java.net.ProxySelector proxySelector72 = okHttpClient69.proxySelector;
        java.net.ProxySelector proxySelector73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient69.setProxySelector(proxySelector73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        okHttpClient75.hostnameVerifier = hostnameVerifier76;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient75.responseCache = responseCache78;
        java.util.List<java.lang.String> strList80 = okHttpClient75.transports;
        com.squareup.okhttp.ConnectionPool connectionPool81 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient75.connectionPool = connectionPool81;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient75.copyWithDefaults();
        java.net.ProxySelector proxySelector84 = okHttpClient83.proxySelector;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory85 = okHttpClient83.getSslSocketFactory();
        okHttpClient69.sslSocketFactory = sSLSocketFactory85;
        okHttpClient52.sslSocketFactory = sSLSocketFactory85;
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory85);
        java.net.Socket socket89 = sSLSocketFactory85.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket93 = sSLSocketFactory33.createSocket(socket89, "DIRECT", (int) (short) 1, true);
            org.junit.Assert.fail("Expected exception of type java.net.SocketException; message: Underlying socket is not connected");
        } catch (java.net.SocketException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(connectionPool1);
        org.junit.Assert.assertNotNull(proxy5);
        org.junit.Assert.assertNull(socketAddress6);
        org.junit.Assert.assertNull(socketAddress7);
        org.junit.Assert.assertNull(connection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(okHttpClient16);
        org.junit.Assert.assertNull(proxySelector20);
        org.junit.Assert.assertNotNull(okHttpClient22);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNotNull(okHttpClient31);
// flaky:         org.junit.Assert.assertNull(proxySelector32);
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(connectionPool42);
        org.junit.Assert.assertNull(cookieHandler44);
        org.junit.Assert.assertNull(okResponseCache45);
        org.junit.Assert.assertNotNull(okHttpClient49);
        org.junit.Assert.assertNotNull(connectionPool53);
        org.junit.Assert.assertNotNull(proxy57);
        org.junit.Assert.assertNull(socketAddress58);
        org.junit.Assert.assertNull(socketAddress59);
        org.junit.Assert.assertNull(connection65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(okHttpClient68);
        org.junit.Assert.assertNull(proxySelector72);
        org.junit.Assert.assertNotNull(okHttpClient74);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(connectionPool81);
        org.junit.Assert.assertNotNull(okHttpClient83);
// flaky:         org.junit.Assert.assertNull(proxySelector84);
        org.junit.Assert.assertNotNull(sSLSocketFactory85);
        org.junit.Assert.assertNotNull(okHttpClient88);
        org.junit.Assert.assertNotNull(socket89);
        org.junit.Assert.assertEquals(socket89.toString(), "Socket[unconnected]");
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.ConnectionPool connectionPool24 = new com.squareup.okhttp.ConnectionPool((int) (byte) 10, (long) (byte) 0);
        okHttpClient19.connectionPool = connectionPool24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient19.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = okHttpClient26.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool29 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient28.connectionPool = connectionPool29;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        okHttpClient31.hostnameVerifier = hostnameVerifier32;
        java.net.ResponseCache responseCache34 = null;
        okHttpClient31.responseCache = responseCache34;
        java.util.List<java.lang.String> strList36 = okHttpClient31.transports;
        com.squareup.okhttp.ConnectionPool connectionPool37 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient31.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient28.setConnectionPool(connectionPool37);
        java.net.ResponseCache responseCache40 = okHttpClient28.responseCache;
        java.net.ResponseCache responseCache41 = okHttpClient28.getResponseCache();
        java.net.ResponseCache responseCache42 = okHttpClient28.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache44 = okHttpClient43.okResponseCache();
        java.net.ResponseCache responseCache45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient43.setResponseCache(responseCache45);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = okHttpClient43.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory48 = okHttpClient43.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        okHttpClient49.hostnameVerifier = hostnameVerifier50;
        boolean boolean52 = okHttpClient49.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler53 = okHttpClient49.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        okHttpClient54.hostnameVerifier = hostnameVerifier55;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient54.responseCache = responseCache57;
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = okHttpClient54.hostnameVerifier;
        java.net.Proxy proxy60 = okHttpClient54.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool63 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient54.connectionPool = connectionPool63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient54.copyWithDefaults();
        java.net.ResponseCache responseCache66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient65.setResponseCache(responseCache66);
        com.squareup.okhttp.OkAuthenticator okAuthenticator68 = okHttpClient65.authenticator;
        okHttpClient49.authenticator = okAuthenticator68;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient43.setAuthenticator(okAuthenticator68);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient28.setAuthenticator(okAuthenticator68);
        javax.net.ssl.HostnameVerifier hostnameVerifier72 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.ConnectionPool connectionPool73 = okHttpClient28.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient26.setConnectionPool(connectionPool73);
        com.squareup.okhttp.Connection connection75 = null;
        // The following exception was thrown during execution in test generation
        try {
            connectionPool73.maybeShare(connection75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(okHttpClient26);
        org.junit.Assert.assertNotNull(sSLSocketFactory27);
        org.junit.Assert.assertNotNull(connectionPool29);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNotNull(connectionPool37);
        org.junit.Assert.assertNotNull(okHttpClient39);
        org.junit.Assert.assertNull(responseCache40);
        org.junit.Assert.assertNull(responseCache41);
        org.junit.Assert.assertNull(responseCache42);
        org.junit.Assert.assertNull(okResponseCache44);
        org.junit.Assert.assertNotNull(okHttpClient46);
        org.junit.Assert.assertNull(sSLSocketFactory47);
        org.junit.Assert.assertNull(sSLSocketFactory48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(cookieHandler53);
        org.junit.Assert.assertNull(hostnameVerifier59);
        org.junit.Assert.assertNull(proxy60);
        org.junit.Assert.assertNotNull(okHttpClient65);
        org.junit.Assert.assertNotNull(okHttpClient67);
        org.junit.Assert.assertNotNull(okAuthenticator68);
        org.junit.Assert.assertNotNull(okHttpClient70);
        org.junit.Assert.assertNotNull(okHttpClient71);
        org.junit.Assert.assertNull(hostnameVerifier72);
        org.junit.Assert.assertNotNull(connectionPool73);
        org.junit.Assert.assertNotNull(okHttpClient74);
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ProxySelector proxySelector3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(proxySelector3);
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier7;
        java.net.ResponseCache responseCache9 = null;
        okHttpClient6.responseCache = responseCache9;
        java.util.List<java.lang.String> strList11 = okHttpClient6.transports;
        com.squareup.okhttp.ConnectionPool connectionPool12 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient6.connectionPool = connectionPool12;
        java.net.Proxy proxy14 = null;
        okHttpClient6.proxy = proxy14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient6.failedRoutes;
        okHttpClient0.failedRoutes = routeSet16;
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setHostnameVerifier(hostnameVerifier18);
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setProxySelector(proxySelector20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool23 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient22.connectionPool = connectionPool23;
        java.net.ResponseCache responseCache25 = null;
        okHttpClient22.responseCache = responseCache25;
        java.net.Proxy proxy27 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress28 = proxy27.address();
        java.net.SocketAddress socketAddress29 = proxy27.address();
        okHttpClient22.proxy = proxy27;
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient22.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient32.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        okHttpClient35.hostnameVerifier = hostnameVerifier36;
        java.net.ResponseCache responseCache38 = null;
        okHttpClient35.responseCache = responseCache38;
        java.util.List<java.lang.String> strList40 = okHttpClient35.transports;
        com.squareup.okhttp.ConnectionPool connectionPool41 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient35.connectionPool = connectionPool41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.setConnectionPool(connectionPool41);
        com.squareup.okhttp.ConnectionPool connectionPool44 = okHttpClient43.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator45 = okHttpClient43.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool48 = new com.squareup.okhttp.ConnectionPool((int) (byte) 1, (long) (short) 0);
        okHttpClient43.connectionPool = connectionPool48;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory50 = okHttpClient43.sslSocketFactory;
        com.squareup.okhttp.OkAuthenticator okAuthenticator51 = okHttpClient43.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache53 = okHttpClient52.okResponseCache();
        java.net.ResponseCache responseCache54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient52.setResponseCache(responseCache54);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        okHttpClient52.transports = strList58;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient52.setSSLSocketFactory(sSLSocketFactory61);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache64 = okHttpClient63.okResponseCache();
        java.net.ResponseCache responseCache65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient63.setResponseCache(responseCache65);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        okHttpClient63.transports = strList69;
        okHttpClient52.transports = strList69;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList69;
        okHttpClient43.transports = strList69;
        okHttpClient22.transports = strList69;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient21.setTransports((java.util.List<java.lang.String>) strList69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(okHttpClient4);
        org.junit.Assert.assertNull(cookieHandler5);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(connectionPool12);
        org.junit.Assert.assertNotNull(routeSet16);
        org.junit.Assert.assertNotNull(okHttpClient19);
        org.junit.Assert.assertNotNull(okHttpClient21);
        org.junit.Assert.assertNotNull(connectionPool23);
        org.junit.Assert.assertNotNull(proxy27);
        org.junit.Assert.assertNull(socketAddress28);
        org.junit.Assert.assertNull(socketAddress29);
        org.junit.Assert.assertNull(okAuthenticator31);
        org.junit.Assert.assertNotNull(connectionPool33);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(connectionPool41);
        org.junit.Assert.assertNotNull(okHttpClient43);
        org.junit.Assert.assertNotNull(connectionPool44);
        org.junit.Assert.assertNull(okAuthenticator45);
        org.junit.Assert.assertNull(sSLSocketFactory50);
        org.junit.Assert.assertNull(okAuthenticator51);
        org.junit.Assert.assertNull(okResponseCache53);
        org.junit.Assert.assertNotNull(okHttpClient55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(okHttpClient62);
        org.junit.Assert.assertNull(okResponseCache64);
        org.junit.Assert.assertNotNull(okHttpClient66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.util.List<java.lang.String> strList5 = okHttpClient0.transports;
        com.squareup.okhttp.ConnectionPool connectionPool6 = com.squareup.okhttp.ConnectionPool.getDefault();
        okHttpClient0.connectionPool = connectionPool6;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector12 = okHttpClient11.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient11.hostnameVerifier;
        java.net.Proxy proxy14 = java.net.Proxy.NO_PROXY;
        boolean boolean16 = proxy14.equals((java.lang.Object) 1L);
        java.net.Proxy.Type type17 = proxy14.type();
        java.net.Proxy.Type type18 = proxy14.type();
        okHttpClient11.proxy = proxy14;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient11.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        okHttpClient21.hostnameVerifier = hostnameVerifier22;
        java.net.ResponseCache responseCache24 = null;
        okHttpClient21.responseCache = responseCache24;
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = okHttpClient21.hostnameVerifier;
        java.net.Proxy proxy27 = okHttpClient21.getProxy();
        com.squareup.okhttp.ConnectionPool connectionPool30 = new com.squareup.okhttp.ConnectionPool(1, (long) (short) 1);
        okHttpClient21.connectionPool = connectionPool30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient21.copyWithDefaults();
        java.net.ResponseCache responseCache33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient32.setResponseCache(responseCache33);
        okHttpClient34.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList37 = okHttpClient34.getTransports();
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient11.setTransports(strList37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(connectionPool6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(proxySelector12);
        org.junit.Assert.assertNull(hostnameVerifier13);
        org.junit.Assert.assertNotNull(proxy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type17.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type18.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(okHttpClient20);
        org.junit.Assert.assertNull(hostnameVerifier26);
        org.junit.Assert.assertNull(proxy27);
        org.junit.Assert.assertNotNull(okHttpClient32);
        org.junit.Assert.assertNotNull(okHttpClient34);
        org.junit.Assert.assertNotNull(strList37);
    }
}
